

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Fri Oct 09 15:07:50 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og9 
     1                           	processor	16F1938
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	text53,local,class=CODE,merge=1,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text56,local,class=CODE,merge=1,delta=2
    71                           	psect	text57,local,class=CODE,merge=1,delta=2
    72                           	psect	text58,local,class=CODE,merge=1,delta=2
    73                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text61,local,class=CODE,merge=1,delta=2
    76                           	psect	text62,local,class=CODE,merge=1,delta=2
    77                           	psect	text63,local,class=CODE,merge=1,delta=2
    78                           	psect	text64,local,class=CODE,merge=1,delta=2
    79                           	psect	text65,local,class=CODE,merge=1,delta=2
    80                           	psect	text66,local,class=CODE,merge=1,delta=2
    81                           	psect	text67,local,class=CODE,merge=1,delta=2
    82                           	psect	text68,local,class=CODE,merge=1,delta=2
    83                           	psect	text69,local,class=CODE,merge=1,delta=2
    84                           	psect	text70,local,class=CODE,merge=1,delta=2
    85                           	psect	text71,local,class=CODE,merge=1,delta=2
    86                           	psect	text72,local,class=CODE,merge=1,delta=2
    87                           	psect	text73,local,class=CODE,merge=1,delta=2
    88                           	psect	text74,local,class=CODE,merge=1,delta=2
    89                           	psect	text75,local,class=CODE,merge=1,delta=2
    90                           	psect	text76,local,class=CODE,merge=1,delta=2
    91                           	psect	text77,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text84,local,class=CODE,merge=1,delta=2
    99                           	psect	text85,local,class=CODE,merge=1,delta=2
   100                           	psect	text86,local,class=CODE,merge=1,delta=2
   101                           	psect	text87,local,class=CODE,merge=1,delta=2
   102                           	psect	text88,local,class=CODE,merge=1,delta=2
   103                           	psect	text89,local,class=CODE,merge=1,delta=2
   104                           	psect	text90,local,class=CODE,merge=1,delta=2
   105                           	psect	text91,local,class=CODE,merge=1,delta=2
   106                           	psect	text92,local,class=CODE,merge=1,delta=2
   107                           	psect	text93,local,class=CODE,merge=1,delta=2
   108                           	psect	text94,local,class=CODE,merge=1,delta=2
   109                           	psect	text95,local,class=CODE,merge=1,delta=2
   110                           	psect	text96,local,class=CODE,merge=1,delta=2
   111                           	psect	text97,local,class=CODE,merge=1,delta=2
   112                           	psect	text98,local,class=CODE,merge=1,delta=2
   113                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text102,local,class=CODE,merge=1,delta=2
   117                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	intentry,global,class=CODE,delta=2
   121                           	psect	text107,local,class=CODE,merge=1,delta=2
   122                           	psect	text108,local,class=CODE,merge=1,delta=2
   123                           	psect	text109,local,class=CODE,merge=1,delta=2
   124                           	psect	text110,local,class=CODE,merge=1,delta=2
   125                           	psect	text111,local,class=CODE,merge=1,delta=2
   126                           	psect	text112,local,class=CODE,merge=1,delta=2
   127                           	psect	text113,local,class=CODE,merge=1,delta=2
   128                           	psect	text114,local,class=CODE,merge=1,delta=2
   129                           	psect	text115,local,class=CODE,merge=1,delta=2
   130                           	psect	text116,local,class=CODE,merge=1,delta=2
   131                           	psect	text117,local,class=CODE,merge=1,delta=2
   132                           	psect	text118,local,class=CODE,merge=1,delta=2
   133                           	psect	text119,local,class=CODE,merge=1,delta=2
   134                           	psect	text120,local,class=CODE,merge=1,delta=2
   135                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   136                           	dabs	1,0x620,48
   137                           	dabs	1,0x5A0,80
   138                           	dabs	1,0x520,80
   139                           	dabs	1,0x4BC,52
   140                           	dabs	1,0x22EC,0,_gesture_data_
   141                           	dabs	1,0x2370,0,_fifo_data
   142                           	dabs	1,0x7E,2
   143  0000                     
   144                           ; Version 2.20
   145                           ; Generated 12/02/2020 GMT
   146                           ; 
   147                           ; Copyright © 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   148                           ; All rights reserved.
   149                           ; 
   150                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   151                           ; 
   152                           ; Redistribution and use in source and binary forms, with or without modification, are
   153                           ; permitted provided that the following conditions are met:
   154                           ; 
   155                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   156                           ;        conditions and the following disclaimer.
   157                           ; 
   158                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   159                           ;        of conditions and the following disclaimer in the documentation and/or other
   160                           ;        materials provided with the distribution.
   161                           ; 
   162                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   163                           ;        software without specific prior written permission.
   164                           ; 
   165                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   166                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   167                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   168                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   169                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   170                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   171                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   172                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   173                           ; 
   174                           ; 
   175                           ; Code-generator required, PIC16F1938 Definitions
   176                           ; 
   177                           ; SFR Addresses
   178  0000                     	;# 
   179  0001                     	;# 
   180  0002                     	;# 
   181  0003                     	;# 
   182  0004                     	;# 
   183  0005                     	;# 
   184  0006                     	;# 
   185  0007                     	;# 
   186  0008                     	;# 
   187  0009                     	;# 
   188  000A                     	;# 
   189  000B                     	;# 
   190  000C                     	;# 
   191  000D                     	;# 
   192  000E                     	;# 
   193  0010                     	;# 
   194  0011                     	;# 
   195  0012                     	;# 
   196  0013                     	;# 
   197  0015                     	;# 
   198  0016                     	;# 
   199  0016                     	;# 
   200  0017                     	;# 
   201  0018                     	;# 
   202  0019                     	;# 
   203  001A                     	;# 
   204  001B                     	;# 
   205  001C                     	;# 
   206  001E                     	;# 
   207  001F                     	;# 
   208  008C                     	;# 
   209  008D                     	;# 
   210  008E                     	;# 
   211  0090                     	;# 
   212  0091                     	;# 
   213  0092                     	;# 
   214  0093                     	;# 
   215  0095                     	;# 
   216  0096                     	;# 
   217  0097                     	;# 
   218  0098                     	;# 
   219  0099                     	;# 
   220  009A                     	;# 
   221  009B                     	;# 
   222  009B                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  0110                     	;# 
   230  0111                     	;# 
   231  0112                     	;# 
   232  0113                     	;# 
   233  0114                     	;# 
   234  0115                     	;# 
   235  0116                     	;# 
   236  0117                     	;# 
   237  0118                     	;# 
   238  0119                     	;# 
   239  011A                     	;# 
   240  011B                     	;# 
   241  011D                     	;# 
   242  018C                     	;# 
   243  018D                     	;# 
   244  0191                     	;# 
   245  0191                     	;# 
   246  0192                     	;# 
   247  0193                     	;# 
   248  0193                     	;# 
   249  0193                     	;# 
   250  0194                     	;# 
   251  0195                     	;# 
   252  0196                     	;# 
   253  0199                     	;# 
   254  019A                     	;# 
   255  019B                     	;# 
   256  019B                     	;# 
   257  019B                     	;# 
   258  019B                     	;# 
   259  019C                     	;# 
   260  019C                     	;# 
   261  019D                     	;# 
   262  019E                     	;# 
   263  019F                     	;# 
   264  020D                     	;# 
   265  0210                     	;# 
   266  0211                     	;# 
   267  0212                     	;# 
   268  0213                     	;# 
   269  0214                     	;# 
   270  0215                     	;# 
   271  0215                     	;# 
   272  0216                     	;# 
   273  0217                     	;# 
   274  0291                     	;# 
   275  0291                     	;# 
   276  0292                     	;# 
   277  0293                     	;# 
   278  0294                     	;# 
   279  0295                     	;# 
   280  0295                     	;# 
   281  0296                     	;# 
   282  0298                     	;# 
   283  0298                     	;# 
   284  0299                     	;# 
   285  029A                     	;# 
   286  029B                     	;# 
   287  029C                     	;# 
   288  029C                     	;# 
   289  029D                     	;# 
   290  029E                     	;# 
   291  029F                     	;# 
   292  0311                     	;# 
   293  0311                     	;# 
   294  0312                     	;# 
   295  0313                     	;# 
   296  0314                     	;# 
   297  0315                     	;# 
   298  0315                     	;# 
   299  0316                     	;# 
   300  0318                     	;# 
   301  0318                     	;# 
   302  0319                     	;# 
   303  031A                     	;# 
   304  031C                     	;# 
   305  031C                     	;# 
   306  031D                     	;# 
   307  031E                     	;# 
   308  0394                     	;# 
   309  0395                     	;# 
   310  0396                     	;# 
   311  0415                     	;# 
   312  0416                     	;# 
   313  0417                     	;# 
   314  041C                     	;# 
   315  041D                     	;# 
   316  041E                     	;# 
   317  0791                     	;# 
   318  0792                     	;# 
   319  0793                     	;# 
   320  0794                     	;# 
   321  0795                     	;# 
   322  0798                     	;# 
   323  0799                     	;# 
   324  07A0                     	;# 
   325  07A1                     	;# 
   326  07A3                     	;# 
   327  07A4                     	;# 
   328  07A6                     	;# 
   329  07A7                     	;# 
   330  07A9                     	;# 
   331  07AA                     	;# 
   332  0FE4                     	;# 
   333  0FE5                     	;# 
   334  0FE6                     	;# 
   335  0FE7                     	;# 
   336  0FE8                     	;# 
   337  0FE9                     	;# 
   338  0FEA                     	;# 
   339  0FEB                     	;# 
   340  0FED                     	;# 
   341  0FEE                     	;# 
   342  0FEF                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0008                     	;# 
   352  0009                     	;# 
   353  000A                     	;# 
   354  000B                     	;# 
   355  000C                     	;# 
   356  000D                     	;# 
   357  000E                     	;# 
   358  0010                     	;# 
   359  0011                     	;# 
   360  0012                     	;# 
   361  0013                     	;# 
   362  0015                     	;# 
   363  0016                     	;# 
   364  0016                     	;# 
   365  0017                     	;# 
   366  0018                     	;# 
   367  0019                     	;# 
   368  001A                     	;# 
   369  001B                     	;# 
   370  001C                     	;# 
   371  001E                     	;# 
   372  001F                     	;# 
   373  008C                     	;# 
   374  008D                     	;# 
   375  008E                     	;# 
   376  0090                     	;# 
   377  0091                     	;# 
   378  0092                     	;# 
   379  0093                     	;# 
   380  0095                     	;# 
   381  0096                     	;# 
   382  0097                     	;# 
   383  0098                     	;# 
   384  0099                     	;# 
   385  009A                     	;# 
   386  009B                     	;# 
   387  009B                     	;# 
   388  009C                     	;# 
   389  009D                     	;# 
   390  009E                     	;# 
   391  010C                     	;# 
   392  010D                     	;# 
   393  010E                     	;# 
   394  0110                     	;# 
   395  0111                     	;# 
   396  0112                     	;# 
   397  0113                     	;# 
   398  0114                     	;# 
   399  0115                     	;# 
   400  0116                     	;# 
   401  0117                     	;# 
   402  0118                     	;# 
   403  0119                     	;# 
   404  011A                     	;# 
   405  011B                     	;# 
   406  011D                     	;# 
   407  018C                     	;# 
   408  018D                     	;# 
   409  0191                     	;# 
   410  0191                     	;# 
   411  0192                     	;# 
   412  0193                     	;# 
   413  0193                     	;# 
   414  0193                     	;# 
   415  0194                     	;# 
   416  0195                     	;# 
   417  0196                     	;# 
   418  0199                     	;# 
   419  019A                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019B                     	;# 
   423  019B                     	;# 
   424  019C                     	;# 
   425  019C                     	;# 
   426  019D                     	;# 
   427  019E                     	;# 
   428  019F                     	;# 
   429  020D                     	;# 
   430  0210                     	;# 
   431  0211                     	;# 
   432  0212                     	;# 
   433  0213                     	;# 
   434  0214                     	;# 
   435  0215                     	;# 
   436  0215                     	;# 
   437  0216                     	;# 
   438  0217                     	;# 
   439  0291                     	;# 
   440  0291                     	;# 
   441  0292                     	;# 
   442  0293                     	;# 
   443  0294                     	;# 
   444  0295                     	;# 
   445  0295                     	;# 
   446  0296                     	;# 
   447  0298                     	;# 
   448  0298                     	;# 
   449  0299                     	;# 
   450  029A                     	;# 
   451  029B                     	;# 
   452  029C                     	;# 
   453  029C                     	;# 
   454  029D                     	;# 
   455  029E                     	;# 
   456  029F                     	;# 
   457  0311                     	;# 
   458  0311                     	;# 
   459  0312                     	;# 
   460  0313                     	;# 
   461  0314                     	;# 
   462  0315                     	;# 
   463  0315                     	;# 
   464  0316                     	;# 
   465  0318                     	;# 
   466  0318                     	;# 
   467  0319                     	;# 
   468  031A                     	;# 
   469  031C                     	;# 
   470  031C                     	;# 
   471  031D                     	;# 
   472  031E                     	;# 
   473  0394                     	;# 
   474  0395                     	;# 
   475  0396                     	;# 
   476  0415                     	;# 
   477  0416                     	;# 
   478  0417                     	;# 
   479  041C                     	;# 
   480  041D                     	;# 
   481  041E                     	;# 
   482  0791                     	;# 
   483  0792                     	;# 
   484  0793                     	;# 
   485  0794                     	;# 
   486  0795                     	;# 
   487  0798                     	;# 
   488  0799                     	;# 
   489  07A0                     	;# 
   490  07A1                     	;# 
   491  07A3                     	;# 
   492  07A4                     	;# 
   493  07A6                     	;# 
   494  07A7                     	;# 
   495  07A9                     	;# 
   496  07AA                     	;# 
   497  0FE4                     	;# 
   498  0FE5                     	;# 
   499  0FE6                     	;# 
   500  0FE7                     	;# 
   501  0FE8                     	;# 
   502  0FE9                     	;# 
   503  0FEA                     	;# 
   504  0FEB                     	;# 
   505  0FED                     	;# 
   506  0FEE                     	;# 
   507  0FEF                     	;# 
   508  0000                     	;# 
   509  0001                     	;# 
   510  0002                     	;# 
   511  0003                     	;# 
   512  0004                     	;# 
   513  0005                     	;# 
   514  0006                     	;# 
   515  0007                     	;# 
   516  0008                     	;# 
   517  0009                     	;# 
   518  000A                     	;# 
   519  000B                     	;# 
   520  000C                     	;# 
   521  000D                     	;# 
   522  000E                     	;# 
   523  0010                     	;# 
   524  0011                     	;# 
   525  0012                     	;# 
   526  0013                     	;# 
   527  0015                     	;# 
   528  0016                     	;# 
   529  0016                     	;# 
   530  0017                     	;# 
   531  0018                     	;# 
   532  0019                     	;# 
   533  001A                     	;# 
   534  001B                     	;# 
   535  001C                     	;# 
   536  001E                     	;# 
   537  001F                     	;# 
   538  008C                     	;# 
   539  008D                     	;# 
   540  008E                     	;# 
   541  0090                     	;# 
   542  0091                     	;# 
   543  0092                     	;# 
   544  0093                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0097                     	;# 
   548  0098                     	;# 
   549  0099                     	;# 
   550  009A                     	;# 
   551  009B                     	;# 
   552  009B                     	;# 
   553  009C                     	;# 
   554  009D                     	;# 
   555  009E                     	;# 
   556  010C                     	;# 
   557  010D                     	;# 
   558  010E                     	;# 
   559  0110                     	;# 
   560  0111                     	;# 
   561  0112                     	;# 
   562  0113                     	;# 
   563  0114                     	;# 
   564  0115                     	;# 
   565  0116                     	;# 
   566  0117                     	;# 
   567  0118                     	;# 
   568  0119                     	;# 
   569  011A                     	;# 
   570  011B                     	;# 
   571  011D                     	;# 
   572  018C                     	;# 
   573  018D                     	;# 
   574  0191                     	;# 
   575  0191                     	;# 
   576  0192                     	;# 
   577  0193                     	;# 
   578  0193                     	;# 
   579  0193                     	;# 
   580  0194                     	;# 
   581  0195                     	;# 
   582  0196                     	;# 
   583  0199                     	;# 
   584  019A                     	;# 
   585  019B                     	;# 
   586  019B                     	;# 
   587  019B                     	;# 
   588  019B                     	;# 
   589  019C                     	;# 
   590  019C                     	;# 
   591  019D                     	;# 
   592  019E                     	;# 
   593  019F                     	;# 
   594  020D                     	;# 
   595  0210                     	;# 
   596  0211                     	;# 
   597  0212                     	;# 
   598  0213                     	;# 
   599  0214                     	;# 
   600  0215                     	;# 
   601  0215                     	;# 
   602  0216                     	;# 
   603  0217                     	;# 
   604  0291                     	;# 
   605  0291                     	;# 
   606  0292                     	;# 
   607  0293                     	;# 
   608  0294                     	;# 
   609  0295                     	;# 
   610  0295                     	;# 
   611  0296                     	;# 
   612  0298                     	;# 
   613  0298                     	;# 
   614  0299                     	;# 
   615  029A                     	;# 
   616  029B                     	;# 
   617  029C                     	;# 
   618  029C                     	;# 
   619  029D                     	;# 
   620  029E                     	;# 
   621  029F                     	;# 
   622  0311                     	;# 
   623  0311                     	;# 
   624  0312                     	;# 
   625  0313                     	;# 
   626  0314                     	;# 
   627  0315                     	;# 
   628  0315                     	;# 
   629  0316                     	;# 
   630  0318                     	;# 
   631  0318                     	;# 
   632  0319                     	;# 
   633  031A                     	;# 
   634  031C                     	;# 
   635  031C                     	;# 
   636  031D                     	;# 
   637  031E                     	;# 
   638  0394                     	;# 
   639  0395                     	;# 
   640  0396                     	;# 
   641  0415                     	;# 
   642  0416                     	;# 
   643  0417                     	;# 
   644  041C                     	;# 
   645  041D                     	;# 
   646  041E                     	;# 
   647  0791                     	;# 
   648  0792                     	;# 
   649  0793                     	;# 
   650  0794                     	;# 
   651  0795                     	;# 
   652  0798                     	;# 
   653  0799                     	;# 
   654  07A0                     	;# 
   655  07A1                     	;# 
   656  07A3                     	;# 
   657  07A4                     	;# 
   658  07A6                     	;# 
   659  07A7                     	;# 
   660  07A9                     	;# 
   661  07AA                     	;# 
   662  0FE4                     	;# 
   663  0FE5                     	;# 
   664  0FE6                     	;# 
   665  0FE7                     	;# 
   666  0FE8                     	;# 
   667  0FE9                     	;# 
   668  0FEA                     	;# 
   669  0FEB                     	;# 
   670  0FED                     	;# 
   671  0FEE                     	;# 
   672  0FEF                     	;# 
   673  0000                     	;# 
   674  0001                     	;# 
   675  0002                     	;# 
   676  0003                     	;# 
   677  0004                     	;# 
   678  0005                     	;# 
   679  0006                     	;# 
   680  0007                     	;# 
   681  0008                     	;# 
   682  0009                     	;# 
   683  000A                     	;# 
   684  000B                     	;# 
   685  000C                     	;# 
   686  000D                     	;# 
   687  000E                     	;# 
   688  0010                     	;# 
   689  0011                     	;# 
   690  0012                     	;# 
   691  0013                     	;# 
   692  0015                     	;# 
   693  0016                     	;# 
   694  0016                     	;# 
   695  0017                     	;# 
   696  0018                     	;# 
   697  0019                     	;# 
   698  001A                     	;# 
   699  001B                     	;# 
   700  001C                     	;# 
   701  001E                     	;# 
   702  001F                     	;# 
   703  008C                     	;# 
   704  008D                     	;# 
   705  008E                     	;# 
   706  0090                     	;# 
   707  0091                     	;# 
   708  0092                     	;# 
   709  0093                     	;# 
   710  0095                     	;# 
   711  0096                     	;# 
   712  0097                     	;# 
   713  0098                     	;# 
   714  0099                     	;# 
   715  009A                     	;# 
   716  009B                     	;# 
   717  009B                     	;# 
   718  009C                     	;# 
   719  009D                     	;# 
   720  009E                     	;# 
   721  010C                     	;# 
   722  010D                     	;# 
   723  010E                     	;# 
   724  0110                     	;# 
   725  0111                     	;# 
   726  0112                     	;# 
   727  0113                     	;# 
   728  0114                     	;# 
   729  0115                     	;# 
   730  0116                     	;# 
   731  0117                     	;# 
   732  0118                     	;# 
   733  0119                     	;# 
   734  011A                     	;# 
   735  011B                     	;# 
   736  011D                     	;# 
   737  018C                     	;# 
   738  018D                     	;# 
   739  0191                     	;# 
   740  0191                     	;# 
   741  0192                     	;# 
   742  0193                     	;# 
   743  0193                     	;# 
   744  0193                     	;# 
   745  0194                     	;# 
   746  0195                     	;# 
   747  0196                     	;# 
   748  0199                     	;# 
   749  019A                     	;# 
   750  019B                     	;# 
   751  019B                     	;# 
   752  019B                     	;# 
   753  019B                     	;# 
   754  019C                     	;# 
   755  019C                     	;# 
   756  019D                     	;# 
   757  019E                     	;# 
   758  019F                     	;# 
   759  020D                     	;# 
   760  0210                     	;# 
   761  0211                     	;# 
   762  0212                     	;# 
   763  0213                     	;# 
   764  0214                     	;# 
   765  0215                     	;# 
   766  0215                     	;# 
   767  0216                     	;# 
   768  0217                     	;# 
   769  0291                     	;# 
   770  0291                     	;# 
   771  0292                     	;# 
   772  0293                     	;# 
   773  0294                     	;# 
   774  0295                     	;# 
   775  0295                     	;# 
   776  0296                     	;# 
   777  0298                     	;# 
   778  0298                     	;# 
   779  0299                     	;# 
   780  029A                     	;# 
   781  029B                     	;# 
   782  029C                     	;# 
   783  029C                     	;# 
   784  029D                     	;# 
   785  029E                     	;# 
   786  029F                     	;# 
   787  0311                     	;# 
   788  0311                     	;# 
   789  0312                     	;# 
   790  0313                     	;# 
   791  0314                     	;# 
   792  0315                     	;# 
   793  0315                     	;# 
   794  0316                     	;# 
   795  0318                     	;# 
   796  0318                     	;# 
   797  0319                     	;# 
   798  031A                     	;# 
   799  031C                     	;# 
   800  031C                     	;# 
   801  031D                     	;# 
   802  031E                     	;# 
   803  0394                     	;# 
   804  0395                     	;# 
   805  0396                     	;# 
   806  0415                     	;# 
   807  0416                     	;# 
   808  0417                     	;# 
   809  041C                     	;# 
   810  041D                     	;# 
   811  041E                     	;# 
   812  0791                     	;# 
   813  0792                     	;# 
   814  0793                     	;# 
   815  0794                     	;# 
   816  0795                     	;# 
   817  0798                     	;# 
   818  0799                     	;# 
   819  07A0                     	;# 
   820  07A1                     	;# 
   821  07A3                     	;# 
   822  07A4                     	;# 
   823  07A6                     	;# 
   824  07A7                     	;# 
   825  07A9                     	;# 
   826  07AA                     	;# 
   827  0FE4                     	;# 
   828  0FE5                     	;# 
   829  0FE6                     	;# 
   830  0FE7                     	;# 
   831  0FE8                     	;# 
   832  0FE9                     	;# 
   833  0FEA                     	;# 
   834  0FEB                     	;# 
   835  0FED                     	;# 
   836  0FEE                     	;# 
   837  0FEF                     	;# 
   838  0000                     	;# 
   839  0001                     	;# 
   840  0002                     	;# 
   841  0003                     	;# 
   842  0004                     	;# 
   843  0005                     	;# 
   844  0006                     	;# 
   845  0007                     	;# 
   846  0008                     	;# 
   847  0009                     	;# 
   848  000A                     	;# 
   849  000B                     	;# 
   850  000C                     	;# 
   851  000D                     	;# 
   852  000E                     	;# 
   853  0010                     	;# 
   854  0011                     	;# 
   855  0012                     	;# 
   856  0013                     	;# 
   857  0015                     	;# 
   858  0016                     	;# 
   859  0016                     	;# 
   860  0017                     	;# 
   861  0018                     	;# 
   862  0019                     	;# 
   863  001A                     	;# 
   864  001B                     	;# 
   865  001C                     	;# 
   866  001E                     	;# 
   867  001F                     	;# 
   868  008C                     	;# 
   869  008D                     	;# 
   870  008E                     	;# 
   871  0090                     	;# 
   872  0091                     	;# 
   873  0092                     	;# 
   874  0093                     	;# 
   875  0095                     	;# 
   876  0096                     	;# 
   877  0097                     	;# 
   878  0098                     	;# 
   879  0099                     	;# 
   880  009A                     	;# 
   881  009B                     	;# 
   882  009B                     	;# 
   883  009C                     	;# 
   884  009D                     	;# 
   885  009E                     	;# 
   886  010C                     	;# 
   887  010D                     	;# 
   888  010E                     	;# 
   889  0110                     	;# 
   890  0111                     	;# 
   891  0112                     	;# 
   892  0113                     	;# 
   893  0114                     	;# 
   894  0115                     	;# 
   895  0116                     	;# 
   896  0117                     	;# 
   897  0118                     	;# 
   898  0119                     	;# 
   899  011A                     	;# 
   900  011B                     	;# 
   901  011D                     	;# 
   902  018C                     	;# 
   903  018D                     	;# 
   904  0191                     	;# 
   905  0191                     	;# 
   906  0192                     	;# 
   907  0193                     	;# 
   908  0193                     	;# 
   909  0193                     	;# 
   910  0194                     	;# 
   911  0195                     	;# 
   912  0196                     	;# 
   913  0199                     	;# 
   914  019A                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019B                     	;# 
   918  019B                     	;# 
   919  019C                     	;# 
   920  019C                     	;# 
   921  019D                     	;# 
   922  019E                     	;# 
   923  019F                     	;# 
   924  020D                     	;# 
   925  0210                     	;# 
   926  0211                     	;# 
   927  0212                     	;# 
   928  0213                     	;# 
   929  0214                     	;# 
   930  0215                     	;# 
   931  0215                     	;# 
   932  0216                     	;# 
   933  0217                     	;# 
   934  0291                     	;# 
   935  0291                     	;# 
   936  0292                     	;# 
   937  0293                     	;# 
   938  0294                     	;# 
   939  0295                     	;# 
   940  0295                     	;# 
   941  0296                     	;# 
   942  0298                     	;# 
   943  0298                     	;# 
   944  0299                     	;# 
   945  029A                     	;# 
   946  029B                     	;# 
   947  029C                     	;# 
   948  029C                     	;# 
   949  029D                     	;# 
   950  029E                     	;# 
   951  029F                     	;# 
   952  0311                     	;# 
   953  0311                     	;# 
   954  0312                     	;# 
   955  0313                     	;# 
   956  0314                     	;# 
   957  0315                     	;# 
   958  0315                     	;# 
   959  0316                     	;# 
   960  0318                     	;# 
   961  0318                     	;# 
   962  0319                     	;# 
   963  031A                     	;# 
   964  031C                     	;# 
   965  031C                     	;# 
   966  031D                     	;# 
   967  031E                     	;# 
   968  0394                     	;# 
   969  0395                     	;# 
   970  0396                     	;# 
   971  0415                     	;# 
   972  0416                     	;# 
   973  0417                     	;# 
   974  041C                     	;# 
   975  041D                     	;# 
   976  041E                     	;# 
   977  0791                     	;# 
   978  0792                     	;# 
   979  0793                     	;# 
   980  0794                     	;# 
   981  0795                     	;# 
   982  0798                     	;# 
   983  0799                     	;# 
   984  07A0                     	;# 
   985  07A1                     	;# 
   986  07A3                     	;# 
   987  07A4                     	;# 
   988  07A6                     	;# 
   989  07A7                     	;# 
   990  07A9                     	;# 
   991  07AA                     	;# 
   992  0FE4                     	;# 
   993  0FE5                     	;# 
   994  0FE6                     	;# 
   995  0FE7                     	;# 
   996  0FE8                     	;# 
   997  0FE9                     	;# 
   998  0FEA                     	;# 
   999  0FEB                     	;# 
  1000  0FED                     	;# 
  1001  0FEE                     	;# 
  1002  0FEF                     	;# 
  1003  0000                     	;# 
  1004  0001                     	;# 
  1005  0002                     	;# 
  1006  0003                     	;# 
  1007  0004                     	;# 
  1008  0005                     	;# 
  1009  0006                     	;# 
  1010  0007                     	;# 
  1011  0008                     	;# 
  1012  0009                     	;# 
  1013  000A                     	;# 
  1014  000B                     	;# 
  1015  000C                     	;# 
  1016  000D                     	;# 
  1017  000E                     	;# 
  1018  0010                     	;# 
  1019  0011                     	;# 
  1020  0012                     	;# 
  1021  0013                     	;# 
  1022  0015                     	;# 
  1023  0016                     	;# 
  1024  0016                     	;# 
  1025  0017                     	;# 
  1026  0018                     	;# 
  1027  0019                     	;# 
  1028  001A                     	;# 
  1029  001B                     	;# 
  1030  001C                     	;# 
  1031  001E                     	;# 
  1032  001F                     	;# 
  1033  008C                     	;# 
  1034  008D                     	;# 
  1035  008E                     	;# 
  1036  0090                     	;# 
  1037  0091                     	;# 
  1038  0092                     	;# 
  1039  0093                     	;# 
  1040  0095                     	;# 
  1041  0096                     	;# 
  1042  0097                     	;# 
  1043  0098                     	;# 
  1044  0099                     	;# 
  1045  009A                     	;# 
  1046  009B                     	;# 
  1047  009B                     	;# 
  1048  009C                     	;# 
  1049  009D                     	;# 
  1050  009E                     	;# 
  1051  010C                     	;# 
  1052  010D                     	;# 
  1053  010E                     	;# 
  1054  0110                     	;# 
  1055  0111                     	;# 
  1056  0112                     	;# 
  1057  0113                     	;# 
  1058  0114                     	;# 
  1059  0115                     	;# 
  1060  0116                     	;# 
  1061  0117                     	;# 
  1062  0118                     	;# 
  1063  0119                     	;# 
  1064  011A                     	;# 
  1065  011B                     	;# 
  1066  011D                     	;# 
  1067  018C                     	;# 
  1068  018D                     	;# 
  1069  0191                     	;# 
  1070  0191                     	;# 
  1071  0192                     	;# 
  1072  0193                     	;# 
  1073  0193                     	;# 
  1074  0193                     	;# 
  1075  0194                     	;# 
  1076  0195                     	;# 
  1077  0196                     	;# 
  1078  0199                     	;# 
  1079  019A                     	;# 
  1080  019B                     	;# 
  1081  019B                     	;# 
  1082  019B                     	;# 
  1083  019B                     	;# 
  1084  019C                     	;# 
  1085  019C                     	;# 
  1086  019D                     	;# 
  1087  019E                     	;# 
  1088  019F                     	;# 
  1089  020D                     	;# 
  1090  0210                     	;# 
  1091  0211                     	;# 
  1092  0212                     	;# 
  1093  0213                     	;# 
  1094  0214                     	;# 
  1095  0215                     	;# 
  1096  0215                     	;# 
  1097  0216                     	;# 
  1098  0217                     	;# 
  1099  0291                     	;# 
  1100  0291                     	;# 
  1101  0292                     	;# 
  1102  0293                     	;# 
  1103  0294                     	;# 
  1104  0295                     	;# 
  1105  0295                     	;# 
  1106  0296                     	;# 
  1107  0298                     	;# 
  1108  0298                     	;# 
  1109  0299                     	;# 
  1110  029A                     	;# 
  1111  029B                     	;# 
  1112  029C                     	;# 
  1113  029C                     	;# 
  1114  029D                     	;# 
  1115  029E                     	;# 
  1116  029F                     	;# 
  1117  0311                     	;# 
  1118  0311                     	;# 
  1119  0312                     	;# 
  1120  0313                     	;# 
  1121  0314                     	;# 
  1122  0315                     	;# 
  1123  0315                     	;# 
  1124  0316                     	;# 
  1125  0318                     	;# 
  1126  0318                     	;# 
  1127  0319                     	;# 
  1128  031A                     	;# 
  1129  031C                     	;# 
  1130  031C                     	;# 
  1131  031D                     	;# 
  1132  031E                     	;# 
  1133  0394                     	;# 
  1134  0395                     	;# 
  1135  0396                     	;# 
  1136  0415                     	;# 
  1137  0416                     	;# 
  1138  0417                     	;# 
  1139  041C                     	;# 
  1140  041D                     	;# 
  1141  041E                     	;# 
  1142  0791                     	;# 
  1143  0792                     	;# 
  1144  0793                     	;# 
  1145  0794                     	;# 
  1146  0795                     	;# 
  1147  0798                     	;# 
  1148  0799                     	;# 
  1149  07A0                     	;# 
  1150  07A1                     	;# 
  1151  07A3                     	;# 
  1152  07A4                     	;# 
  1153  07A6                     	;# 
  1154  07A7                     	;# 
  1155  07A9                     	;# 
  1156  07AA                     	;# 
  1157  0FE4                     	;# 
  1158  0FE5                     	;# 
  1159  0FE6                     	;# 
  1160  0FE7                     	;# 
  1161  0FE8                     	;# 
  1162  0FE9                     	;# 
  1163  0FEA                     	;# 
  1164  0FEB                     	;# 
  1165  0FED                     	;# 
  1166  0FEE                     	;# 
  1167  0FEF                     	;# 
  1168  0000                     	;# 
  1169  0001                     	;# 
  1170  0002                     	;# 
  1171  0003                     	;# 
  1172  0004                     	;# 
  1173  0005                     	;# 
  1174  0006                     	;# 
  1175  0007                     	;# 
  1176  0008                     	;# 
  1177  0009                     	;# 
  1178  000A                     	;# 
  1179  000B                     	;# 
  1180  000C                     	;# 
  1181  000D                     	;# 
  1182  000E                     	;# 
  1183  0010                     	;# 
  1184  0011                     	;# 
  1185  0012                     	;# 
  1186  0013                     	;# 
  1187  0015                     	;# 
  1188  0016                     	;# 
  1189  0016                     	;# 
  1190  0017                     	;# 
  1191  0018                     	;# 
  1192  0019                     	;# 
  1193  001A                     	;# 
  1194  001B                     	;# 
  1195  001C                     	;# 
  1196  001E                     	;# 
  1197  001F                     	;# 
  1198  008C                     	;# 
  1199  008D                     	;# 
  1200  008E                     	;# 
  1201  0090                     	;# 
  1202  0091                     	;# 
  1203  0092                     	;# 
  1204  0093                     	;# 
  1205  0095                     	;# 
  1206  0096                     	;# 
  1207  0097                     	;# 
  1208  0098                     	;# 
  1209  0099                     	;# 
  1210  009A                     	;# 
  1211  009B                     	;# 
  1212  009B                     	;# 
  1213  009C                     	;# 
  1214  009D                     	;# 
  1215  009E                     	;# 
  1216  010C                     	;# 
  1217  010D                     	;# 
  1218  010E                     	;# 
  1219  0110                     	;# 
  1220  0111                     	;# 
  1221  0112                     	;# 
  1222  0113                     	;# 
  1223  0114                     	;# 
  1224  0115                     	;# 
  1225  0116                     	;# 
  1226  0117                     	;# 
  1227  0118                     	;# 
  1228  0119                     	;# 
  1229  011A                     	;# 
  1230  011B                     	;# 
  1231  011D                     	;# 
  1232  018C                     	;# 
  1233  018D                     	;# 
  1234  0191                     	;# 
  1235  0191                     	;# 
  1236  0192                     	;# 
  1237  0193                     	;# 
  1238  0193                     	;# 
  1239  0193                     	;# 
  1240  0194                     	;# 
  1241  0195                     	;# 
  1242  0196                     	;# 
  1243  0199                     	;# 
  1244  019A                     	;# 
  1245  019B                     	;# 
  1246  019B                     	;# 
  1247  019B                     	;# 
  1248  019B                     	;# 
  1249  019C                     	;# 
  1250  019C                     	;# 
  1251  019D                     	;# 
  1252  019E                     	;# 
  1253  019F                     	;# 
  1254  020D                     	;# 
  1255  0210                     	;# 
  1256  0211                     	;# 
  1257  0212                     	;# 
  1258  0213                     	;# 
  1259  0214                     	;# 
  1260  0215                     	;# 
  1261  0215                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0291                     	;# 
  1265  0291                     	;# 
  1266  0292                     	;# 
  1267  0293                     	;# 
  1268  0294                     	;# 
  1269  0295                     	;# 
  1270  0295                     	;# 
  1271  0296                     	;# 
  1272  0298                     	;# 
  1273  0298                     	;# 
  1274  0299                     	;# 
  1275  029A                     	;# 
  1276  029B                     	;# 
  1277  029C                     	;# 
  1278  029C                     	;# 
  1279  029D                     	;# 
  1280  029E                     	;# 
  1281  029F                     	;# 
  1282  0311                     	;# 
  1283  0311                     	;# 
  1284  0312                     	;# 
  1285  0313                     	;# 
  1286  0314                     	;# 
  1287  0315                     	;# 
  1288  0315                     	;# 
  1289  0316                     	;# 
  1290  0318                     	;# 
  1291  0318                     	;# 
  1292  0319                     	;# 
  1293  031A                     	;# 
  1294  031C                     	;# 
  1295  031C                     	;# 
  1296  031D                     	;# 
  1297  031E                     	;# 
  1298  0394                     	;# 
  1299  0395                     	;# 
  1300  0396                     	;# 
  1301  0415                     	;# 
  1302  0416                     	;# 
  1303  0417                     	;# 
  1304  041C                     	;# 
  1305  041D                     	;# 
  1306  041E                     	;# 
  1307  0791                     	;# 
  1308  0792                     	;# 
  1309  0793                     	;# 
  1310  0794                     	;# 
  1311  0795                     	;# 
  1312  0798                     	;# 
  1313  0799                     	;# 
  1314  07A0                     	;# 
  1315  07A1                     	;# 
  1316  07A3                     	;# 
  1317  07A4                     	;# 
  1318  07A6                     	;# 
  1319  07A7                     	;# 
  1320  07A9                     	;# 
  1321  07AA                     	;# 
  1322  0FE4                     	;# 
  1323  0FE5                     	;# 
  1324  0FE6                     	;# 
  1325  0FE7                     	;# 
  1326  0FE8                     	;# 
  1327  0FE9                     	;# 
  1328  0FEA                     	;# 
  1329  0FEB                     	;# 
  1330  0FED                     	;# 
  1331  0FEE                     	;# 
  1332  0FEF                     	;# 
  1333  0000                     	;# 
  1334  0001                     	;# 
  1335  0002                     	;# 
  1336  0003                     	;# 
  1337  0004                     	;# 
  1338  0005                     	;# 
  1339  0006                     	;# 
  1340  0007                     	;# 
  1341  0008                     	;# 
  1342  0009                     	;# 
  1343  000A                     	;# 
  1344  000B                     	;# 
  1345  000C                     	;# 
  1346  000D                     	;# 
  1347  000E                     	;# 
  1348  0010                     	;# 
  1349  0011                     	;# 
  1350  0012                     	;# 
  1351  0013                     	;# 
  1352  0015                     	;# 
  1353  0016                     	;# 
  1354  0016                     	;# 
  1355  0017                     	;# 
  1356  0018                     	;# 
  1357  0019                     	;# 
  1358  001A                     	;# 
  1359  001B                     	;# 
  1360  001C                     	;# 
  1361  001E                     	;# 
  1362  001F                     	;# 
  1363  008C                     	;# 
  1364  008D                     	;# 
  1365  008E                     	;# 
  1366  0090                     	;# 
  1367  0091                     	;# 
  1368  0092                     	;# 
  1369  0093                     	;# 
  1370  0095                     	;# 
  1371  0096                     	;# 
  1372  0097                     	;# 
  1373  0098                     	;# 
  1374  0099                     	;# 
  1375  009A                     	;# 
  1376  009B                     	;# 
  1377  009B                     	;# 
  1378  009C                     	;# 
  1379  009D                     	;# 
  1380  009E                     	;# 
  1381  010C                     	;# 
  1382  010D                     	;# 
  1383  010E                     	;# 
  1384  0110                     	;# 
  1385  0111                     	;# 
  1386  0112                     	;# 
  1387  0113                     	;# 
  1388  0114                     	;# 
  1389  0115                     	;# 
  1390  0116                     	;# 
  1391  0117                     	;# 
  1392  0118                     	;# 
  1393  0119                     	;# 
  1394  011A                     	;# 
  1395  011B                     	;# 
  1396  011D                     	;# 
  1397  018C                     	;# 
  1398  018D                     	;# 
  1399  0191                     	;# 
  1400  0191                     	;# 
  1401  0192                     	;# 
  1402  0193                     	;# 
  1403  0193                     	;# 
  1404  0193                     	;# 
  1405  0194                     	;# 
  1406  0195                     	;# 
  1407  0196                     	;# 
  1408  0199                     	;# 
  1409  019A                     	;# 
  1410  019B                     	;# 
  1411  019B                     	;# 
  1412  019B                     	;# 
  1413  019B                     	;# 
  1414  019C                     	;# 
  1415  019C                     	;# 
  1416  019D                     	;# 
  1417  019E                     	;# 
  1418  019F                     	;# 
  1419  020D                     	;# 
  1420  0210                     	;# 
  1421  0211                     	;# 
  1422  0212                     	;# 
  1423  0213                     	;# 
  1424  0214                     	;# 
  1425  0215                     	;# 
  1426  0215                     	;# 
  1427  0216                     	;# 
  1428  0217                     	;# 
  1429  0291                     	;# 
  1430  0291                     	;# 
  1431  0292                     	;# 
  1432  0293                     	;# 
  1433  0294                     	;# 
  1434  0295                     	;# 
  1435  0295                     	;# 
  1436  0296                     	;# 
  1437  0298                     	;# 
  1438  0298                     	;# 
  1439  0299                     	;# 
  1440  029A                     	;# 
  1441  029B                     	;# 
  1442  029C                     	;# 
  1443  029C                     	;# 
  1444  029D                     	;# 
  1445  029E                     	;# 
  1446  029F                     	;# 
  1447  0311                     	;# 
  1448  0311                     	;# 
  1449  0312                     	;# 
  1450  0313                     	;# 
  1451  0314                     	;# 
  1452  0315                     	;# 
  1453  0315                     	;# 
  1454  0316                     	;# 
  1455  0318                     	;# 
  1456  0318                     	;# 
  1457  0319                     	;# 
  1458  031A                     	;# 
  1459  031C                     	;# 
  1460  031C                     	;# 
  1461  031D                     	;# 
  1462  031E                     	;# 
  1463  0394                     	;# 
  1464  0395                     	;# 
  1465  0396                     	;# 
  1466  0415                     	;# 
  1467  0416                     	;# 
  1468  0417                     	;# 
  1469  041C                     	;# 
  1470  041D                     	;# 
  1471  041E                     	;# 
  1472  0791                     	;# 
  1473  0792                     	;# 
  1474  0793                     	;# 
  1475  0794                     	;# 
  1476  0795                     	;# 
  1477  0798                     	;# 
  1478  0799                     	;# 
  1479  07A0                     	;# 
  1480  07A1                     	;# 
  1481  07A3                     	;# 
  1482  07A4                     	;# 
  1483  07A6                     	;# 
  1484  07A7                     	;# 
  1485  07A9                     	;# 
  1486  07AA                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0010                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0013                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  001E                     	;# 
  1527  001F                     	;# 
  1528  008C                     	;# 
  1529  008D                     	;# 
  1530  008E                     	;# 
  1531  0090                     	;# 
  1532  0091                     	;# 
  1533  0092                     	;# 
  1534  0093                     	;# 
  1535  0095                     	;# 
  1536  0096                     	;# 
  1537  0097                     	;# 
  1538  0098                     	;# 
  1539  0099                     	;# 
  1540  009A                     	;# 
  1541  009B                     	;# 
  1542  009B                     	;# 
  1543  009C                     	;# 
  1544  009D                     	;# 
  1545  009E                     	;# 
  1546  010C                     	;# 
  1547  010D                     	;# 
  1548  010E                     	;# 
  1549  0110                     	;# 
  1550  0111                     	;# 
  1551  0112                     	;# 
  1552  0113                     	;# 
  1553  0114                     	;# 
  1554  0115                     	;# 
  1555  0116                     	;# 
  1556  0117                     	;# 
  1557  0118                     	;# 
  1558  0119                     	;# 
  1559  011A                     	;# 
  1560  011B                     	;# 
  1561  011D                     	;# 
  1562  018C                     	;# 
  1563  018D                     	;# 
  1564  0191                     	;# 
  1565  0191                     	;# 
  1566  0192                     	;# 
  1567  0193                     	;# 
  1568  0193                     	;# 
  1569  0193                     	;# 
  1570  0194                     	;# 
  1571  0195                     	;# 
  1572  0196                     	;# 
  1573  0199                     	;# 
  1574  019A                     	;# 
  1575  019B                     	;# 
  1576  019B                     	;# 
  1577  019B                     	;# 
  1578  019B                     	;# 
  1579  019C                     	;# 
  1580  019C                     	;# 
  1581  019D                     	;# 
  1582  019E                     	;# 
  1583  019F                     	;# 
  1584  020D                     	;# 
  1585  0210                     	;# 
  1586  0211                     	;# 
  1587  0212                     	;# 
  1588  0213                     	;# 
  1589  0214                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0216                     	;# 
  1593  0217                     	;# 
  1594  0291                     	;# 
  1595  0291                     	;# 
  1596  0292                     	;# 
  1597  0293                     	;# 
  1598  0294                     	;# 
  1599  0295                     	;# 
  1600  0295                     	;# 
  1601  0296                     	;# 
  1602  0298                     	;# 
  1603  0298                     	;# 
  1604  0299                     	;# 
  1605  029A                     	;# 
  1606  029B                     	;# 
  1607  029C                     	;# 
  1608  029C                     	;# 
  1609  029D                     	;# 
  1610  029E                     	;# 
  1611  029F                     	;# 
  1612  0311                     	;# 
  1613  0311                     	;# 
  1614  0312                     	;# 
  1615  0313                     	;# 
  1616  0314                     	;# 
  1617  0315                     	;# 
  1618  0315                     	;# 
  1619  0316                     	;# 
  1620  0318                     	;# 
  1621  0318                     	;# 
  1622  0319                     	;# 
  1623  031A                     	;# 
  1624  031C                     	;# 
  1625  031C                     	;# 
  1626  031D                     	;# 
  1627  031E                     	;# 
  1628  0394                     	;# 
  1629  0395                     	;# 
  1630  0396                     	;# 
  1631  0415                     	;# 
  1632  0416                     	;# 
  1633  0417                     	;# 
  1634  041C                     	;# 
  1635  041D                     	;# 
  1636  041E                     	;# 
  1637  0791                     	;# 
  1638  0792                     	;# 
  1639  0793                     	;# 
  1640  0794                     	;# 
  1641  0795                     	;# 
  1642  0798                     	;# 
  1643  0799                     	;# 
  1644  07A0                     	;# 
  1645  07A1                     	;# 
  1646  07A3                     	;# 
  1647  07A4                     	;# 
  1648  07A6                     	;# 
  1649  07A7                     	;# 
  1650  07A9                     	;# 
  1651  07AA                     	;# 
  1652  0FE4                     	;# 
  1653  0FE5                     	;# 
  1654  0FE6                     	;# 
  1655  0FE7                     	;# 
  1656  0FE8                     	;# 
  1657  0FE9                     	;# 
  1658  0FEA                     	;# 
  1659  0FEB                     	;# 
  1660  0FED                     	;# 
  1661  0FEE                     	;# 
  1662  0FEF                     	;# 
  1663  0000                     	;# 
  1664  0001                     	;# 
  1665  0002                     	;# 
  1666  0003                     	;# 
  1667  0004                     	;# 
  1668  0005                     	;# 
  1669  0006                     	;# 
  1670  0007                     	;# 
  1671  0008                     	;# 
  1672  0009                     	;# 
  1673  000A                     	;# 
  1674  000B                     	;# 
  1675  000C                     	;# 
  1676  000D                     	;# 
  1677  000E                     	;# 
  1678  0010                     	;# 
  1679  0011                     	;# 
  1680  0012                     	;# 
  1681  0013                     	;# 
  1682  0015                     	;# 
  1683  0016                     	;# 
  1684  0016                     	;# 
  1685  0017                     	;# 
  1686  0018                     	;# 
  1687  0019                     	;# 
  1688  001A                     	;# 
  1689  001B                     	;# 
  1690  001C                     	;# 
  1691  001E                     	;# 
  1692  001F                     	;# 
  1693  008C                     	;# 
  1694  008D                     	;# 
  1695  008E                     	;# 
  1696  0090                     	;# 
  1697  0091                     	;# 
  1698  0092                     	;# 
  1699  0093                     	;# 
  1700  0095                     	;# 
  1701  0096                     	;# 
  1702  0097                     	;# 
  1703  0098                     	;# 
  1704  0099                     	;# 
  1705  009A                     	;# 
  1706  009B                     	;# 
  1707  009B                     	;# 
  1708  009C                     	;# 
  1709  009D                     	;# 
  1710  009E                     	;# 
  1711  010C                     	;# 
  1712  010D                     	;# 
  1713  010E                     	;# 
  1714  0110                     	;# 
  1715  0111                     	;# 
  1716  0112                     	;# 
  1717  0113                     	;# 
  1718  0114                     	;# 
  1719  0115                     	;# 
  1720  0116                     	;# 
  1721  0117                     	;# 
  1722  0118                     	;# 
  1723  0119                     	;# 
  1724  011A                     	;# 
  1725  011B                     	;# 
  1726  011D                     	;# 
  1727  018C                     	;# 
  1728  018D                     	;# 
  1729  0191                     	;# 
  1730  0191                     	;# 
  1731  0192                     	;# 
  1732  0193                     	;# 
  1733  0193                     	;# 
  1734  0193                     	;# 
  1735  0194                     	;# 
  1736  0195                     	;# 
  1737  0196                     	;# 
  1738  0199                     	;# 
  1739  019A                     	;# 
  1740  019B                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019C                     	;# 
  1745  019C                     	;# 
  1746  019D                     	;# 
  1747  019E                     	;# 
  1748  019F                     	;# 
  1749  020D                     	;# 
  1750  0210                     	;# 
  1751  0211                     	;# 
  1752  0212                     	;# 
  1753  0213                     	;# 
  1754  0214                     	;# 
  1755  0215                     	;# 
  1756  0215                     	;# 
  1757  0216                     	;# 
  1758  0217                     	;# 
  1759  0291                     	;# 
  1760  0291                     	;# 
  1761  0292                     	;# 
  1762  0293                     	;# 
  1763  0294                     	;# 
  1764  0295                     	;# 
  1765  0295                     	;# 
  1766  0296                     	;# 
  1767  0298                     	;# 
  1768  0298                     	;# 
  1769  0299                     	;# 
  1770  029A                     	;# 
  1771  029B                     	;# 
  1772  029C                     	;# 
  1773  029C                     	;# 
  1774  029D                     	;# 
  1775  029E                     	;# 
  1776  029F                     	;# 
  1777  0311                     	;# 
  1778  0311                     	;# 
  1779  0312                     	;# 
  1780  0313                     	;# 
  1781  0314                     	;# 
  1782  0315                     	;# 
  1783  0315                     	;# 
  1784  0316                     	;# 
  1785  0318                     	;# 
  1786  0318                     	;# 
  1787  0319                     	;# 
  1788  031A                     	;# 
  1789  031C                     	;# 
  1790  031C                     	;# 
  1791  031D                     	;# 
  1792  031E                     	;# 
  1793  0394                     	;# 
  1794  0395                     	;# 
  1795  0396                     	;# 
  1796  0415                     	;# 
  1797  0416                     	;# 
  1798  0417                     	;# 
  1799  041C                     	;# 
  1800  041D                     	;# 
  1801  041E                     	;# 
  1802  0791                     	;# 
  1803  0792                     	;# 
  1804  0793                     	;# 
  1805  0794                     	;# 
  1806  0795                     	;# 
  1807  0798                     	;# 
  1808  0799                     	;# 
  1809  07A0                     	;# 
  1810  07A1                     	;# 
  1811  07A3                     	;# 
  1812  07A4                     	;# 
  1813  07A6                     	;# 
  1814  07A7                     	;# 
  1815  07A9                     	;# 
  1816  07AA                     	;# 
  1817  0FE4                     	;# 
  1818  0FE5                     	;# 
  1819  0FE6                     	;# 
  1820  0FE7                     	;# 
  1821  0FE8                     	;# 
  1822  0FE9                     	;# 
  1823  0FEA                     	;# 
  1824  0FEB                     	;# 
  1825  0FED                     	;# 
  1826  0FEE                     	;# 
  1827  0FEF                     	;# 
  1828  0000                     	;# 
  1829  0001                     	;# 
  1830  0002                     	;# 
  1831  0003                     	;# 
  1832  0004                     	;# 
  1833  0005                     	;# 
  1834  0006                     	;# 
  1835  0007                     	;# 
  1836  0008                     	;# 
  1837  0009                     	;# 
  1838  000A                     	;# 
  1839  000B                     	;# 
  1840  000C                     	;# 
  1841  000D                     	;# 
  1842  000E                     	;# 
  1843  0010                     	;# 
  1844  0011                     	;# 
  1845  0012                     	;# 
  1846  0013                     	;# 
  1847  0015                     	;# 
  1848  0016                     	;# 
  1849  0016                     	;# 
  1850  0017                     	;# 
  1851  0018                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  001E                     	;# 
  1857  001F                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0090                     	;# 
  1862  0091                     	;# 
  1863  0092                     	;# 
  1864  0093                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0098                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0110                     	;# 
  1880  0111                     	;# 
  1881  0112                     	;# 
  1882  0113                     	;# 
  1883  0114                     	;# 
  1884  0115                     	;# 
  1885  0116                     	;# 
  1886  0117                     	;# 
  1887  0118                     	;# 
  1888  0119                     	;# 
  1889  011A                     	;# 
  1890  011B                     	;# 
  1891  011D                     	;# 
  1892  018C                     	;# 
  1893  018D                     	;# 
  1894  0191                     	;# 
  1895  0191                     	;# 
  1896  0192                     	;# 
  1897  0193                     	;# 
  1898  0193                     	;# 
  1899  0193                     	;# 
  1900  0194                     	;# 
  1901  0195                     	;# 
  1902  0196                     	;# 
  1903  0199                     	;# 
  1904  019A                     	;# 
  1905  019B                     	;# 
  1906  019B                     	;# 
  1907  019B                     	;# 
  1908  019B                     	;# 
  1909  019C                     	;# 
  1910  019C                     	;# 
  1911  019D                     	;# 
  1912  019E                     	;# 
  1913  019F                     	;# 
  1914  020D                     	;# 
  1915  0210                     	;# 
  1916  0211                     	;# 
  1917  0212                     	;# 
  1918  0213                     	;# 
  1919  0214                     	;# 
  1920  0215                     	;# 
  1921  0215                     	;# 
  1922  0216                     	;# 
  1923  0217                     	;# 
  1924  0291                     	;# 
  1925  0291                     	;# 
  1926  0292                     	;# 
  1927  0293                     	;# 
  1928  0294                     	;# 
  1929  0295                     	;# 
  1930  0295                     	;# 
  1931  0296                     	;# 
  1932  0298                     	;# 
  1933  0298                     	;# 
  1934  0299                     	;# 
  1935  029A                     	;# 
  1936  029B                     	;# 
  1937  029C                     	;# 
  1938  029C                     	;# 
  1939  029D                     	;# 
  1940  029E                     	;# 
  1941  029F                     	;# 
  1942  0311                     	;# 
  1943  0311                     	;# 
  1944  0312                     	;# 
  1945  0313                     	;# 
  1946  0314                     	;# 
  1947  0315                     	;# 
  1948  0315                     	;# 
  1949  0316                     	;# 
  1950  0318                     	;# 
  1951  0318                     	;# 
  1952  0319                     	;# 
  1953  031A                     	;# 
  1954  031C                     	;# 
  1955  031C                     	;# 
  1956  031D                     	;# 
  1957  031E                     	;# 
  1958  0394                     	;# 
  1959  0395                     	;# 
  1960  0396                     	;# 
  1961  0415                     	;# 
  1962  0416                     	;# 
  1963  0417                     	;# 
  1964  041C                     	;# 
  1965  041D                     	;# 
  1966  041E                     	;# 
  1967  0791                     	;# 
  1968  0792                     	;# 
  1969  0793                     	;# 
  1970  0794                     	;# 
  1971  0795                     	;# 
  1972  0798                     	;# 
  1973  0799                     	;# 
  1974  07A0                     	;# 
  1975  07A1                     	;# 
  1976  07A3                     	;# 
  1977  07A4                     	;# 
  1978  07A6                     	;# 
  1979  07A7                     	;# 
  1980  07A9                     	;# 
  1981  07AA                     	;# 
  1982  0FE4                     	;# 
  1983  0FE5                     	;# 
  1984  0FE6                     	;# 
  1985  0FE7                     	;# 
  1986  0FE8                     	;# 
  1987  0FE9                     	;# 
  1988  0FEA                     	;# 
  1989  0FEB                     	;# 
  1990  0FED                     	;# 
  1991  0FEE                     	;# 
  1992  0FEF                     	;# 
  1993  0000                     	;# 
  1994  0001                     	;# 
  1995  0002                     	;# 
  1996  0003                     	;# 
  1997  0004                     	;# 
  1998  0005                     	;# 
  1999  0006                     	;# 
  2000  0007                     	;# 
  2001  0008                     	;# 
  2002  0009                     	;# 
  2003  000A                     	;# 
  2004  000B                     	;# 
  2005  000C                     	;# 
  2006  000D                     	;# 
  2007  000E                     	;# 
  2008  0010                     	;# 
  2009  0011                     	;# 
  2010  0012                     	;# 
  2011  0013                     	;# 
  2012  0015                     	;# 
  2013  0016                     	;# 
  2014  0016                     	;# 
  2015  0017                     	;# 
  2016  0018                     	;# 
  2017  0019                     	;# 
  2018  001A                     	;# 
  2019  001B                     	;# 
  2020  001C                     	;# 
  2021  001E                     	;# 
  2022  001F                     	;# 
  2023  008C                     	;# 
  2024  008D                     	;# 
  2025  008E                     	;# 
  2026  0090                     	;# 
  2027  0091                     	;# 
  2028  0092                     	;# 
  2029  0093                     	;# 
  2030  0095                     	;# 
  2031  0096                     	;# 
  2032  0097                     	;# 
  2033  0098                     	;# 
  2034  0099                     	;# 
  2035  009A                     	;# 
  2036  009B                     	;# 
  2037  009B                     	;# 
  2038  009C                     	;# 
  2039  009D                     	;# 
  2040  009E                     	;# 
  2041  010C                     	;# 
  2042  010D                     	;# 
  2043  010E                     	;# 
  2044  0110                     	;# 
  2045  0111                     	;# 
  2046  0112                     	;# 
  2047  0113                     	;# 
  2048  0114                     	;# 
  2049  0115                     	;# 
  2050  0116                     	;# 
  2051  0117                     	;# 
  2052  0118                     	;# 
  2053  0119                     	;# 
  2054  011A                     	;# 
  2055  011B                     	;# 
  2056  011D                     	;# 
  2057  018C                     	;# 
  2058  018D                     	;# 
  2059  0191                     	;# 
  2060  0191                     	;# 
  2061  0192                     	;# 
  2062  0193                     	;# 
  2063  0193                     	;# 
  2064  0193                     	;# 
  2065  0194                     	;# 
  2066  0195                     	;# 
  2067  0196                     	;# 
  2068  0199                     	;# 
  2069  019A                     	;# 
  2070  019B                     	;# 
  2071  019B                     	;# 
  2072  019B                     	;# 
  2073  019B                     	;# 
  2074  019C                     	;# 
  2075  019C                     	;# 
  2076  019D                     	;# 
  2077  019E                     	;# 
  2078  019F                     	;# 
  2079  020D                     	;# 
  2080  0210                     	;# 
  2081  0211                     	;# 
  2082  0212                     	;# 
  2083  0213                     	;# 
  2084  0214                     	;# 
  2085  0215                     	;# 
  2086  0215                     	;# 
  2087  0216                     	;# 
  2088  0217                     	;# 
  2089  0291                     	;# 
  2090  0291                     	;# 
  2091  0292                     	;# 
  2092  0293                     	;# 
  2093  0294                     	;# 
  2094  0295                     	;# 
  2095  0295                     	;# 
  2096  0296                     	;# 
  2097  0298                     	;# 
  2098  0298                     	;# 
  2099  0299                     	;# 
  2100  029A                     	;# 
  2101  029B                     	;# 
  2102  029C                     	;# 
  2103  029C                     	;# 
  2104  029D                     	;# 
  2105  029E                     	;# 
  2106  029F                     	;# 
  2107  0311                     	;# 
  2108  0311                     	;# 
  2109  0312                     	;# 
  2110  0313                     	;# 
  2111  0314                     	;# 
  2112  0315                     	;# 
  2113  0315                     	;# 
  2114  0316                     	;# 
  2115  0318                     	;# 
  2116  0318                     	;# 
  2117  0319                     	;# 
  2118  031A                     	;# 
  2119  031C                     	;# 
  2120  031C                     	;# 
  2121  031D                     	;# 
  2122  031E                     	;# 
  2123  0394                     	;# 
  2124  0395                     	;# 
  2125  0396                     	;# 
  2126  0415                     	;# 
  2127  0416                     	;# 
  2128  0417                     	;# 
  2129  041C                     	;# 
  2130  041D                     	;# 
  2131  041E                     	;# 
  2132  0791                     	;# 
  2133  0792                     	;# 
  2134  0793                     	;# 
  2135  0794                     	;# 
  2136  0795                     	;# 
  2137  0798                     	;# 
  2138  0799                     	;# 
  2139  07A0                     	;# 
  2140  07A1                     	;# 
  2141  07A3                     	;# 
  2142  07A4                     	;# 
  2143  07A6                     	;# 
  2144  07A7                     	;# 
  2145  07A9                     	;# 
  2146  07AA                     	;# 
  2147  0FE4                     	;# 
  2148  0FE5                     	;# 
  2149  0FE6                     	;# 
  2150  0FE7                     	;# 
  2151  0FE8                     	;# 
  2152  0FE9                     	;# 
  2153  0FEA                     	;# 
  2154  0FEB                     	;# 
  2155  0FED                     	;# 
  2156  0FEE                     	;# 
  2157  0FEF                     	;# 
  2158  0000                     	;# 
  2159  0001                     	;# 
  2160  0002                     	;# 
  2161  0003                     	;# 
  2162  0004                     	;# 
  2163  0005                     	;# 
  2164  0006                     	;# 
  2165  0007                     	;# 
  2166  0008                     	;# 
  2167  0009                     	;# 
  2168  000A                     	;# 
  2169  000B                     	;# 
  2170  000C                     	;# 
  2171  000D                     	;# 
  2172  000E                     	;# 
  2173  0010                     	;# 
  2174  0011                     	;# 
  2175  0012                     	;# 
  2176  0013                     	;# 
  2177  0015                     	;# 
  2178  0016                     	;# 
  2179  0016                     	;# 
  2180  0017                     	;# 
  2181  0018                     	;# 
  2182  0019                     	;# 
  2183  001A                     	;# 
  2184  001B                     	;# 
  2185  001C                     	;# 
  2186  001E                     	;# 
  2187  001F                     	;# 
  2188  008C                     	;# 
  2189  008D                     	;# 
  2190  008E                     	;# 
  2191  0090                     	;# 
  2192  0091                     	;# 
  2193  0092                     	;# 
  2194  0093                     	;# 
  2195  0095                     	;# 
  2196  0096                     	;# 
  2197  0097                     	;# 
  2198  0098                     	;# 
  2199  0099                     	;# 
  2200  009A                     	;# 
  2201  009B                     	;# 
  2202  009B                     	;# 
  2203  009C                     	;# 
  2204  009D                     	;# 
  2205  009E                     	;# 
  2206  010C                     	;# 
  2207  010D                     	;# 
  2208  010E                     	;# 
  2209  0110                     	;# 
  2210  0111                     	;# 
  2211  0112                     	;# 
  2212  0113                     	;# 
  2213  0114                     	;# 
  2214  0115                     	;# 
  2215  0116                     	;# 
  2216  0117                     	;# 
  2217  0118                     	;# 
  2218  0119                     	;# 
  2219  011A                     	;# 
  2220  011B                     	;# 
  2221  011D                     	;# 
  2222  018C                     	;# 
  2223  018D                     	;# 
  2224  0191                     	;# 
  2225  0191                     	;# 
  2226  0192                     	;# 
  2227  0193                     	;# 
  2228  0193                     	;# 
  2229  0193                     	;# 
  2230  0194                     	;# 
  2231  0195                     	;# 
  2232  0196                     	;# 
  2233  0199                     	;# 
  2234  019A                     	;# 
  2235  019B                     	;# 
  2236  019B                     	;# 
  2237  019B                     	;# 
  2238  019B                     	;# 
  2239  019C                     	;# 
  2240  019C                     	;# 
  2241  019D                     	;# 
  2242  019E                     	;# 
  2243  019F                     	;# 
  2244  020D                     	;# 
  2245  0210                     	;# 
  2246  0211                     	;# 
  2247  0212                     	;# 
  2248  0213                     	;# 
  2249  0214                     	;# 
  2250  0215                     	;# 
  2251  0215                     	;# 
  2252  0216                     	;# 
  2253  0217                     	;# 
  2254  0291                     	;# 
  2255  0291                     	;# 
  2256  0292                     	;# 
  2257  0293                     	;# 
  2258  0294                     	;# 
  2259  0295                     	;# 
  2260  0295                     	;# 
  2261  0296                     	;# 
  2262  0298                     	;# 
  2263  0298                     	;# 
  2264  0299                     	;# 
  2265  029A                     	;# 
  2266  029B                     	;# 
  2267  029C                     	;# 
  2268  029C                     	;# 
  2269  029D                     	;# 
  2270  029E                     	;# 
  2271  029F                     	;# 
  2272  0311                     	;# 
  2273  0311                     	;# 
  2274  0312                     	;# 
  2275  0313                     	;# 
  2276  0314                     	;# 
  2277  0315                     	;# 
  2278  0315                     	;# 
  2279  0316                     	;# 
  2280  0318                     	;# 
  2281  0318                     	;# 
  2282  0319                     	;# 
  2283  031A                     	;# 
  2284  031C                     	;# 
  2285  031C                     	;# 
  2286  031D                     	;# 
  2287  031E                     	;# 
  2288  0394                     	;# 
  2289  0395                     	;# 
  2290  0396                     	;# 
  2291  0415                     	;# 
  2292  0416                     	;# 
  2293  0417                     	;# 
  2294  041C                     	;# 
  2295  041D                     	;# 
  2296  041E                     	;# 
  2297  0791                     	;# 
  2298  0792                     	;# 
  2299  0793                     	;# 
  2300  0794                     	;# 
  2301  0795                     	;# 
  2302  0798                     	;# 
  2303  0799                     	;# 
  2304  07A0                     	;# 
  2305  07A1                     	;# 
  2306  07A3                     	;# 
  2307  07A4                     	;# 
  2308  07A6                     	;# 
  2309  07A7                     	;# 
  2310  07A9                     	;# 
  2311  07AA                     	;# 
  2312  0FE4                     	;# 
  2313  0FE5                     	;# 
  2314  0FE6                     	;# 
  2315  0FE7                     	;# 
  2316  0FE8                     	;# 
  2317  0FE9                     	;# 
  2318  0FEA                     	;# 
  2319  0FEB                     	;# 
  2320  0FED                     	;# 
  2321  0FEE                     	;# 
  2322  0FEF                     	;# 
  2323  0000                     	;# 
  2324  0001                     	;# 
  2325  0002                     	;# 
  2326  0003                     	;# 
  2327  0004                     	;# 
  2328  0005                     	;# 
  2329  0006                     	;# 
  2330  0007                     	;# 
  2331  0008                     	;# 
  2332  0009                     	;# 
  2333  000A                     	;# 
  2334  000B                     	;# 
  2335  000C                     	;# 
  2336  000D                     	;# 
  2337  000E                     	;# 
  2338  0010                     	;# 
  2339  0011                     	;# 
  2340  0012                     	;# 
  2341  0013                     	;# 
  2342  0015                     	;# 
  2343  0016                     	;# 
  2344  0016                     	;# 
  2345  0017                     	;# 
  2346  0018                     	;# 
  2347  0019                     	;# 
  2348  001A                     	;# 
  2349  001B                     	;# 
  2350  001C                     	;# 
  2351  001E                     	;# 
  2352  001F                     	;# 
  2353  008C                     	;# 
  2354  008D                     	;# 
  2355  008E                     	;# 
  2356  0090                     	;# 
  2357  0091                     	;# 
  2358  0092                     	;# 
  2359  0093                     	;# 
  2360  0095                     	;# 
  2361  0096                     	;# 
  2362  0097                     	;# 
  2363  0098                     	;# 
  2364  0099                     	;# 
  2365  009A                     	;# 
  2366  009B                     	;# 
  2367  009B                     	;# 
  2368  009C                     	;# 
  2369  009D                     	;# 
  2370  009E                     	;# 
  2371  010C                     	;# 
  2372  010D                     	;# 
  2373  010E                     	;# 
  2374  0110                     	;# 
  2375  0111                     	;# 
  2376  0112                     	;# 
  2377  0113                     	;# 
  2378  0114                     	;# 
  2379  0115                     	;# 
  2380  0116                     	;# 
  2381  0117                     	;# 
  2382  0118                     	;# 
  2383  0119                     	;# 
  2384  011A                     	;# 
  2385  011B                     	;# 
  2386  011D                     	;# 
  2387  018C                     	;# 
  2388  018D                     	;# 
  2389  0191                     	;# 
  2390  0191                     	;# 
  2391  0192                     	;# 
  2392  0193                     	;# 
  2393  0193                     	;# 
  2394  0193                     	;# 
  2395  0194                     	;# 
  2396  0195                     	;# 
  2397  0196                     	;# 
  2398  0199                     	;# 
  2399  019A                     	;# 
  2400  019B                     	;# 
  2401  019B                     	;# 
  2402  019B                     	;# 
  2403  019B                     	;# 
  2404  019C                     	;# 
  2405  019C                     	;# 
  2406  019D                     	;# 
  2407  019E                     	;# 
  2408  019F                     	;# 
  2409  020D                     	;# 
  2410  0210                     	;# 
  2411  0211                     	;# 
  2412  0212                     	;# 
  2413  0213                     	;# 
  2414  0214                     	;# 
  2415  0215                     	;# 
  2416  0215                     	;# 
  2417  0216                     	;# 
  2418  0217                     	;# 
  2419  0291                     	;# 
  2420  0291                     	;# 
  2421  0292                     	;# 
  2422  0293                     	;# 
  2423  0294                     	;# 
  2424  0295                     	;# 
  2425  0295                     	;# 
  2426  0296                     	;# 
  2427  0298                     	;# 
  2428  0298                     	;# 
  2429  0299                     	;# 
  2430  029A                     	;# 
  2431  029B                     	;# 
  2432  029C                     	;# 
  2433  029C                     	;# 
  2434  029D                     	;# 
  2435  029E                     	;# 
  2436  029F                     	;# 
  2437  0311                     	;# 
  2438  0311                     	;# 
  2439  0312                     	;# 
  2440  0313                     	;# 
  2441  0314                     	;# 
  2442  0315                     	;# 
  2443  0315                     	;# 
  2444  0316                     	;# 
  2445  0318                     	;# 
  2446  0318                     	;# 
  2447  0319                     	;# 
  2448  031A                     	;# 
  2449  031C                     	;# 
  2450  031C                     	;# 
  2451  031D                     	;# 
  2452  031E                     	;# 
  2453  0394                     	;# 
  2454  0395                     	;# 
  2455  0396                     	;# 
  2456  0415                     	;# 
  2457  0416                     	;# 
  2458  0417                     	;# 
  2459  041C                     	;# 
  2460  041D                     	;# 
  2461  041E                     	;# 
  2462  0791                     	;# 
  2463  0792                     	;# 
  2464  0793                     	;# 
  2465  0794                     	;# 
  2466  0795                     	;# 
  2467  0798                     	;# 
  2468  0799                     	;# 
  2469  07A0                     	;# 
  2470  07A1                     	;# 
  2471  07A3                     	;# 
  2472  07A4                     	;# 
  2473  07A6                     	;# 
  2474  07A7                     	;# 
  2475  07A9                     	;# 
  2476  07AA                     	;# 
  2477  0FE4                     	;# 
  2478  0FE5                     	;# 
  2479  0FE6                     	;# 
  2480  0FE7                     	;# 
  2481  0FE8                     	;# 
  2482  0FE9                     	;# 
  2483  0FEA                     	;# 
  2484  0FEB                     	;# 
  2485  0FED                     	;# 
  2486  0FEE                     	;# 
  2487  0FEF                     	;# 
  2488  0000                     	;# 
  2489  0001                     	;# 
  2490  0002                     	;# 
  2491  0003                     	;# 
  2492  0004                     	;# 
  2493  0005                     	;# 
  2494  0006                     	;# 
  2495  0007                     	;# 
  2496  0008                     	;# 
  2497  0009                     	;# 
  2498  000A                     	;# 
  2499  000B                     	;# 
  2500  000C                     	;# 
  2501  000D                     	;# 
  2502  000E                     	;# 
  2503  0010                     	;# 
  2504  0011                     	;# 
  2505  0012                     	;# 
  2506  0013                     	;# 
  2507  0015                     	;# 
  2508  0016                     	;# 
  2509  0016                     	;# 
  2510  0017                     	;# 
  2511  0018                     	;# 
  2512  0019                     	;# 
  2513  001A                     	;# 
  2514  001B                     	;# 
  2515  001C                     	;# 
  2516  001E                     	;# 
  2517  001F                     	;# 
  2518  008C                     	;# 
  2519  008D                     	;# 
  2520  008E                     	;# 
  2521  0090                     	;# 
  2522  0091                     	;# 
  2523  0092                     	;# 
  2524  0093                     	;# 
  2525  0095                     	;# 
  2526  0096                     	;# 
  2527  0097                     	;# 
  2528  0098                     	;# 
  2529  0099                     	;# 
  2530  009A                     	;# 
  2531  009B                     	;# 
  2532  009B                     	;# 
  2533  009C                     	;# 
  2534  009D                     	;# 
  2535  009E                     	;# 
  2536  010C                     	;# 
  2537  010D                     	;# 
  2538  010E                     	;# 
  2539  0110                     	;# 
  2540  0111                     	;# 
  2541  0112                     	;# 
  2542  0113                     	;# 
  2543  0114                     	;# 
  2544  0115                     	;# 
  2545  0116                     	;# 
  2546  0117                     	;# 
  2547  0118                     	;# 
  2548  0119                     	;# 
  2549  011A                     	;# 
  2550  011B                     	;# 
  2551  011D                     	;# 
  2552  018C                     	;# 
  2553  018D                     	;# 
  2554  0191                     	;# 
  2555  0191                     	;# 
  2556  0192                     	;# 
  2557  0193                     	;# 
  2558  0193                     	;# 
  2559  0193                     	;# 
  2560  0194                     	;# 
  2561  0195                     	;# 
  2562  0196                     	;# 
  2563  0199                     	;# 
  2564  019A                     	;# 
  2565  019B                     	;# 
  2566  019B                     	;# 
  2567  019B                     	;# 
  2568  019B                     	;# 
  2569  019C                     	;# 
  2570  019C                     	;# 
  2571  019D                     	;# 
  2572  019E                     	;# 
  2573  019F                     	;# 
  2574  020D                     	;# 
  2575  0210                     	;# 
  2576  0211                     	;# 
  2577  0212                     	;# 
  2578  0213                     	;# 
  2579  0214                     	;# 
  2580  0215                     	;# 
  2581  0215                     	;# 
  2582  0216                     	;# 
  2583  0217                     	;# 
  2584  0291                     	;# 
  2585  0291                     	;# 
  2586  0292                     	;# 
  2587  0293                     	;# 
  2588  0294                     	;# 
  2589  0295                     	;# 
  2590  0295                     	;# 
  2591  0296                     	;# 
  2592  0298                     	;# 
  2593  0298                     	;# 
  2594  0299                     	;# 
  2595  029A                     	;# 
  2596  029B                     	;# 
  2597  029C                     	;# 
  2598  029C                     	;# 
  2599  029D                     	;# 
  2600  029E                     	;# 
  2601  029F                     	;# 
  2602  0311                     	;# 
  2603  0311                     	;# 
  2604  0312                     	;# 
  2605  0313                     	;# 
  2606  0314                     	;# 
  2607  0315                     	;# 
  2608  0315                     	;# 
  2609  0316                     	;# 
  2610  0318                     	;# 
  2611  0318                     	;# 
  2612  0319                     	;# 
  2613  031A                     	;# 
  2614  031C                     	;# 
  2615  031C                     	;# 
  2616  031D                     	;# 
  2617  031E                     	;# 
  2618  0394                     	;# 
  2619  0395                     	;# 
  2620  0396                     	;# 
  2621  0415                     	;# 
  2622  0416                     	;# 
  2623  0417                     	;# 
  2624  041C                     	;# 
  2625  041D                     	;# 
  2626  041E                     	;# 
  2627  0791                     	;# 
  2628  0792                     	;# 
  2629  0793                     	;# 
  2630  0794                     	;# 
  2631  0795                     	;# 
  2632  0798                     	;# 
  2633  0799                     	;# 
  2634  07A0                     	;# 
  2635  07A1                     	;# 
  2636  07A3                     	;# 
  2637  07A4                     	;# 
  2638  07A6                     	;# 
  2639  07A7                     	;# 
  2640  07A9                     	;# 
  2641  07AA                     	;# 
  2642  0FE4                     	;# 
  2643  0FE5                     	;# 
  2644  0FE6                     	;# 
  2645  0FE7                     	;# 
  2646  0FE8                     	;# 
  2647  0FE9                     	;# 
  2648  0FEA                     	;# 
  2649  0FEB                     	;# 
  2650  0FED                     	;# 
  2651  0FEE                     	;# 
  2652  0FEF                     	;_gesture_data_
  2653                           
  2654                           	psect	stringtext1
  2655  1800                     __pstringtext1:
  2656  1800                     _i2c_fsmStateTable:
  2657  1800  340A               	retlw	low _I2C_DO_IDLE
  2658  1801  341F               	retlw	high _I2C_DO_IDLE
  2659  1802  343E               	retlw	low _I2C_DO_SEND_ADR_READ
  2660  1803  341F               	retlw	high _I2C_DO_SEND_ADR_READ
  2661  1804  3437               	retlw	low _I2C_DO_SEND_ADR_WRITE
  2662  1805  341F               	retlw	high _I2C_DO_SEND_ADR_WRITE
  2663  1806  3426               	retlw	low _I2C_DO_TX
  2664  1807  3408               	retlw	high _I2C_DO_TX
  2665  1808  346B               	retlw	low _I2C_DO_RX
  2666  1809  3416               	retlw	high _I2C_DO_RX
  2667  180A  3431               	retlw	low _I2C_DO_RCEN
  2668  180B  341F               	retlw	high _I2C_DO_RCEN
  2669  180C  3467               	retlw	low _I2C_DO_TX_EMPTY
  2670  180D  3414               	retlw	high _I2C_DO_TX_EMPTY
  2671  180E  34E2               	retlw	low _I2C_DO_SEND_RESTART_READ
  2672  180F  341E               	retlw	high _I2C_DO_SEND_RESTART_READ
  2673  1810  34E6               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  2674  1811  341E               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  2675  1812  34EA               	retlw	low _I2C_DO_SEND_RESTART
  2676  1813  341E               	retlw	high _I2C_DO_SEND_RESTART
  2677  1814  34EE               	retlw	low _I2C_DO_SEND_STOP
  2678  1815  341E               	retlw	high _I2C_DO_SEND_STOP
  2679  1816  34F2               	retlw	low _I2C_DO_RX_ACK
  2680  1817  341E               	retlw	high _I2C_DO_RX_ACK
  2681  1818  34F6               	retlw	low _I2C_DO_RX_NACK_STOP
  2682  1819  341E               	retlw	high _I2C_DO_RX_NACK_STOP
  2683  181A  34FA               	retlw	low _I2C_DO_RX_NACK_RESTART
  2684  181B  341E               	retlw	high _I2C_DO_RX_NACK_RESTART
  2685  181C  340F               	retlw	low _I2C_DO_RESET
  2686  181D  341F               	retlw	high _I2C_DO_RESET
  2687  181E  3498               	retlw	low _I2C_DO_ADDRESS_NACK
  2688  181F  3414               	retlw	high _I2C_DO_ADDRESS_NACK
  2689  1820                     __end_of_i2c_fsmStateTable:
  2690                           
  2691                           	psect	nvBANK1
  2692  00EE                     __pnvBANK1:
  2693  00EE                     _IOCBF1_InterruptHandler:
  2694  00EE                     	ds	2
  2695  0013                     _PIR3bits	set	19
  2696  0018                     _T1CONbits	set	24
  2697  0018                     _T1CON	set	24
  2698  0016                     _TMR1L	set	22
  2699  0017                     _TMR1H	set	23
  2700  0019                     _T1GCON	set	25
  2701  0015                     _TMR0	set	21
  2702  0011                     _PIR1bits	set	17
  2703  000B                     _INTCONbits	set	11
  2704  0093                     _PIE3bits	set	147
  2705  0095                     _OPTION_REG	set	149
  2706  0097                     _WDTCON	set	151
  2707  0098                     _OSCTUNE	set	152
  2708  0099                     _OSCCON	set	153
  2709  0091                     _PIE1bits	set	145
  2710  0095                     _OPTION_REGbits	set	149
  2711  008E                     _TRISC	set	142
  2712  008D                     _TRISB	set	141
  2713  008C                     _TRISA	set	140
  2714  0090                     _TRISE	set	144
  2715  04D6                     _PLLR	set	1238
  2716  0119                     _DACCON1	set	281
  2717  0118                     _DACCON0	set	280
  2718  0116                     _BORCON	set	278
  2719  0117                     _FVRCON	set	279
  2720  011D                     _APFCON	set	285
  2721  010E                     _LATC	set	270
  2722  010D                     _LATB	set	269
  2723  010C                     _LATA	set	268
  2724  0110                     _LATE	set	272
  2725  0199                     _RCREG	set	409
  2726  019D                     _RCSTAbits	set	413
  2727  019A                     _TXREG	set	410
  2728  019C                     _SPBRGH	set	412
  2729  019B                     _SPBRGL	set	411
  2730  019E                     _TXSTA	set	414
  2731  019D                     _RCSTA	set	413
  2732  019F                     _BAUDCON	set	415
  2733  018C                     _ANSELA	set	396
  2734  018D                     _ANSELB	set	397
  2735  0216                     _SSPCON2bits	set	534
  2736  0211                     _SSPBUF	set	529
  2737  0215                     _SSPCON1bits	set	533
  2738  0212                     _SSPADD	set	530
  2739  0216                     _SSPCON2	set	534
  2740  0215                     _SSPCON1	set	533
  2741  0214                     _SSPSTAT	set	532
  2742  020D                     _WPUB	set	525
  2743  0210                     _WPUE	set	528
  2744  0319                     _CCPR4H	set	793
  2745  0318                     _CCPR4L	set	792
  2746  031A                     _CCP4CON	set	794
  2747  0394                     _IOCBPbits	set	916
  2748  0395                     _IOCBNbits	set	917
  2749  0396                     _IOCBFbits	set	918
  2750  07A7                     _LCDDATA7bits	set	1959
  2751  07A1                     _LCDDATA1bits	set	1953
  2752  07A4                     _LCDDATA4bits	set	1956
  2753  07AA                     _LCDDATA10bits	set	1962
  2754  07A6                     _LCDDATA6bits	set	1958
  2755  07A0                     _LCDDATA0bits	set	1952
  2756  07A3                     _LCDDATA3bits	set	1955
  2757  07A9                     _LCDDATA9bits	set	1961
  2758  0791                     _LCDCON	set	1937
  2759  0799                     _LCDSE1	set	1945
  2760  0798                     _LCDSE0	set	1944
  2761  07AA                     _LCDDATA10	set	1962
  2762  07A9                     _LCDDATA9	set	1961
  2763  07A7                     _LCDDATA7	set	1959
  2764  07A6                     _LCDDATA6	set	1958
  2765  07A4                     _LCDDATA4	set	1956
  2766  07A3                     _LCDDATA3	set	1955
  2767  07A1                     _LCDDATA1	set	1953
  2768  07A0                     _LCDDATA0	set	1952
  2769  0794                     _LCDCST	set	1940
  2770  0795                     _LCDRL	set	1941
  2771  0793                     _LCDREF	set	1939
  2772  0792                     _LCDPS	set	1938
  2773  0791                     _LCDCONbits	set	1937
  2774                           
  2775                           	psect	cinit
  2776  0035                     start_initialization:	
  2777                           ; #config settings
  2778                           
  2779  0035                     __initialization:	;BIGRAM
  2780                           
  2781                           ; Clear objects allocated to BIGRAM
  2782  0035  30EC               	movlw	low (0+8940)
  2783  0036  0084               	movwf	4
  2784  0037  3022               	movlw	high (0+8940)
  2785  0038  0085               	movwf	5
  2786  0039  3004               	movlw	4
  2787  003A  00FE               	movwf	btemp
  2788  003B  3001               	movlw	1
  2789  003C  00FF               	movwf	btemp+1
  2790  003D  319F  27BD  3180   	fcall	clear_ram0
  2791                           
  2792                           ; Clear objects allocated to COMMON
  2793  0040  01FB               	clrf	__pbssCOMMON& (0+127)
  2794  0041  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
  2795  0042  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
  2796                           
  2797                           ; Clear objects allocated to BANK0
  2798  0043  3060               	movlw	low __pbssBANK0
  2799  0044  0084               	movwf	4
  2800  0045  3000               	movlw	high __pbssBANK0
  2801  0046  0085               	movwf	5
  2802  0047  3010               	movlw	16
  2803  0048  00FE               	movwf	btemp
  2804  0049  3000               	movlw	0
  2805  004A  00FF               	movwf	btemp+1
  2806  004B  319F  27BD  3180   	fcall	clear_ram0
  2807                           
  2808                           ; Clear objects allocated to BANK1
  2809  004E  30A0               	movlw	low __pbssBANK1
  2810  004F  0084               	movwf	4
  2811  0050  3000               	movlw	high __pbssBANK1
  2812  0051  0085               	movwf	5
  2813  0052  304E               	movlw	78
  2814  0053  00FE               	movwf	btemp
  2815  0054  3000               	movlw	0
  2816  0055  00FF               	movwf	btemp+1
  2817  0056  319F  27BD         	fcall	clear_ram0
  2818                           
  2819                           ; Clear objects allocated to BANK2
  2820  0058  0022               	movlb	2	; select bank2
  2821  0059  01A0               	clrf	__pbssBANK2& (0+127)
  2822  005A  01A1               	clrf	(__pbssBANK2+1)& (0+127)
  2823  005B  01A2               	clrf	(__pbssBANK2+2)& (0+127)
  2824  005C  01A3               	clrf	(__pbssBANK2+3)& (0+127)
  2825  005D  01A4               	clrf	(__pbssBANK2+4)& (0+127)
  2826  005E  01A5               	clrf	(__pbssBANK2+5)& (0+127)
  2827  005F  01A6               	clrf	(__pbssBANK2+6)& (0+127)
  2828  0060  01A7               	clrf	(__pbssBANK2+7)& (0+127)
  2829  0061                     end_of_initialization:	
  2830                           ;End of C runtime variable initialization code
  2831                           
  2832  0061                     __end_of__initialization:
  2833  0061  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2834  0062  0020               	movlb	0
  2835  0063  318A  2A2D         	ljmp	_main	;jump to C main() function
  2836                           
  2837                           	psect	bssCOMMON
  2838  007B                     __pbssCOMMON:
  2839  007B                     CCP4_CallBack@main$F2147@bit_count:
  2840  007B                     	ds	1
  2841  007C                     _ir_command_complement:
  2842  007C                     	ds	1
  2843  007D                     _eusartRxTail:
  2844  007D                     	ds	1
  2845                           
  2846                           	psect	bssBANK0
  2847  0060                     __pbssBANK0:
  2848  0060                     _gesture_lr_count_:
  2849  0060                     	ds	2
  2850  0062                     _gesture_ud_count_:
  2851  0062                     	ds	2
  2852  0064                     _gesture_lr_delta_:
  2853  0064                     	ds	2
  2854  0066                     _gesture_ud_delta_:
  2855  0066                     	ds	2
  2856  0068                     _flag_gesture:
  2857  0068                     	ds	1
  2858  0069                     _ir_flag:
  2859  0069                     	ds	1
  2860  006A                     _ir_command:
  2861  006A                     	ds	1
  2862  006B                     _ir_address:
  2863  006B                     	ds	1
  2864  006C                     _eusartRxHead:
  2865  006C                     	ds	1
  2866  006D                     _eusartTxBufferRemaining:
  2867  006D                     	ds	1
  2868  006E                     _eusartTxTail:
  2869  006E                     	ds	1
  2870  006F                     _eusartTxHead:
  2871  006F                     	ds	1
  2872                           
  2873                           	psect	bssBANK1
  2874  00A0                     __pbssBANK1:
  2875  00A0                     _I2C_Status:
  2876  00A0                     	ds	36
  2877  00C4                     _eusartRxStatusBuffer:
  2878  00C4                     	ds	8
  2879  00CC                     _eusartTxBuffer:
  2880  00CC                     	ds	8
  2881  00D4                     _gesture_motion_:
  2882  00D4                     	ds	2
  2883  00D6                     _gesture_state_:
  2884  00D6                     	ds	2
  2885  00D8                     _gesture_far_count_:
  2886  00D8                     	ds	2
  2887  00DA                     _gesture_near_count_:
  2888  00DA                     	ds	2
  2889  00DC                     _CCP4_CallBack:
  2890  00DC                     	ds	2
  2891  00DE                     _timer1ReloadVal:
  2892  00DE                     	ds	2
  2893  00E0                     _EUSART_ErrorHandler:
  2894  00E0                     	ds	2
  2895  00E2                     _EUSART_OverrunErrorHandler:
  2896  00E2                     	ds	2
  2897  00E4                     _EUSART_FramingErrorHandler:
  2898  00E4                     	ds	2
  2899  00E6                     _EUSART_RxDefaultInterruptHandler:
  2900  00E6                     	ds	2
  2901  00E8                     _EUSART_TxDefaultInterruptHandler:
  2902  00E8                     	ds	2
  2903  00EA                     _ir_address_complement:
  2904  00EA                     	ds	1
  2905  00EB                     _timer0ReloadVal:
  2906  00EB                     	ds	1
  2907  00EC                     _eusartRxLastError:
  2908  00EC                     	ds	1
  2909  00ED                     _eusartRxCount:
  2910  00ED                     	ds	1
  2911                           
  2912                           	psect	bssBANK2
  2913  0120                     __pbssBANK2:
  2914  0120                     _eusartRxBuffer:
  2915  0120                     	ds	8
  2916                           
  2917                           	psect	clrtext
  2918  1FBD                     clear_ram0:	
  2919                           ;	Called with FSR0 containing the base address, and
  2920                           ;	btemp/btemp+1 has the size to clear
  2921                           
  2922  1FBD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2923  1FBE                     clrloop0:
  2924  1FBE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2925  1FBF  3101               	addfsr 0,1
  2926  1FC0  3001               	movlw	1
  2927  1FC1  02FE               	subwf	126,f
  2928  1FC2  3000               	movlw	0
  2929  1FC3  3BFF               	subwfb	127,f
  2930  1FC4  087F               	movf	127,w
  2931  1FC5  047E               	iorwf	126,w
  2932  1FC6  1903               	btfsc	3,2
  2933  1FC7  3400               	retlw	0	;all done for this memory range, return
  2934  1FC8  2FBE               	goto	clrloop0	;have we reached the end yet?
  2935                           
  2936                           	psect	cstackCOMMON
  2937  0070                     __pcstackCOMMON:
  2938  0070                     ?_I2C_Open:
  2939  0070                     ?_I2C_MasterWrite:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_I2C_Close:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_IOCBF1_DefaultInterruptHandler:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ??_IOCBF1_DefaultInterruptHandler:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?_IOCBF1_ISR:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?_EUSART_Receive_ISR:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ?_EUSART_Transmit_ISR:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ??_EUSART_Transmit_ISR:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0070                     ?_EUSART_DefaultErrorHandler:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0070                     ?_EUSART_RxDataHandler:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981  0070                     ??_EUSART_RxDataHandler:	
  2982                           ; 1 bytes @ 0x0
  2983                           
  2984  0070                     ?_I2C_DO_IDLE:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987  0070                     ?_I2C_DO_SEND_ADR_READ:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  2991                           ; 1 bytes @ 0x0
  2992                           
  2993  0070                     ?_I2C_DO_TX:	
  2994                           ; 1 bytes @ 0x0
  2995                           
  2996  0070                     ?_I2C_DO_RX:	
  2997                           ; 1 bytes @ 0x0
  2998                           
  2999  0070                     ?_I2C_DO_RCEN:	
  3000                           ; 1 bytes @ 0x0
  3001                           
  3002  0070                     ?_I2C_DO_TX_EMPTY:	
  3003                           ; 1 bytes @ 0x0
  3004                           
  3005  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  3006                           ; 1 bytes @ 0x0
  3007                           
  3008  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  3009                           ; 1 bytes @ 0x0
  3010                           
  3011  0070                     ?_I2C_DO_SEND_RESTART:	
  3012                           ; 1 bytes @ 0x0
  3013                           
  3014  0070                     ?_I2C_DO_SEND_STOP:	
  3015                           ; 1 bytes @ 0x0
  3016                           
  3017  0070                     ?_I2C_DO_RX_ACK:	
  3018                           ; 1 bytes @ 0x0
  3019                           
  3020  0070                     ?_I2C_DO_RX_NACK_STOP:	
  3021                           ; 1 bytes @ 0x0
  3022                           
  3023  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  3024                           ; 1 bytes @ 0x0
  3025                           
  3026  0070                     ?_I2C_DO_RESET:	
  3027                           ; 1 bytes @ 0x0
  3028                           
  3029  0070                     ?_I2C_DO_ADDRESS_NACK:	
  3030                           ; 1 bytes @ 0x0
  3031                           
  3032  0070                     ?_I2C_MasterClearIrq:	
  3033                           ; 1 bytes @ 0x0
  3034                           
  3035  0070                     ?_I2C_MasterOpen:	
  3036                           ; 1 bytes @ 0x0
  3037                           
  3038  0070                     ?_I2C_MasterDisableIrq:	
  3039                           ; 1 bytes @ 0x0
  3040                           
  3041  0070                     ?_I2C_MasterClose:	
  3042                           ; 1 bytes @ 0x0
  3043                           
  3044  0070                     ?_I2C_MasterStart:	
  3045                           ; 1 bytes @ 0x0
  3046                           
  3047  0070                     ?_I2C_Poller:	
  3048                           ; 1 bytes @ 0x0
  3049                           
  3050  0070                     ?_I2C_MasterWaitForEvent:	
  3051                           ; 1 bytes @ 0x0
  3052                           
  3053  0070                     ?_I2C_MasterFsm:	
  3054                           ; 1 bytes @ 0x0
  3055                           
  3056  0070                     ?_I2C_MasterIsNack:	
  3057                           ; 1 bytes @ 0x0
  3058                           
  3059  0070                     ?_I2C_MasterSendTxData:	
  3060                           ; 1 bytes @ 0x0
  3061                           
  3062  0070                     ?_I2C_MasterGetRxData:	
  3063                           ; 1 bytes @ 0x0
  3064                           
  3065  0070                     ?_I2C_MasterSendAck:	
  3066                           ; 1 bytes @ 0x0
  3067                           
  3068  0070                     ?_I2C_MasterStartRx:	
  3069                           ; 1 bytes @ 0x0
  3070                           
  3071  0070                     ?_I2C_MasterSetIrq:	
  3072                           ; 1 bytes @ 0x0
  3073                           
  3074  0070                     ?_I2C_MasterEnableRestart:	
  3075                           ; 1 bytes @ 0x0
  3076                           
  3077  0070                     ?_I2C_MasterStop:	
  3078                           ; 1 bytes @ 0x0
  3079                           
  3080  0070                     ?_I2C_MasterSendNack:	
  3081                           ; 1 bytes @ 0x0
  3082                           
  3083  0070                     ?_OSCILLATOR_Initialize:	
  3084                           ; 1 bytes @ 0x0
  3085                           
  3086  0070                     ?_WDT_Initialize:	
  3087                           ; 1 bytes @ 0x0
  3088                           
  3089  0070                     ?_DAC_Initialize:	
  3090                           ; 1 bytes @ 0x0
  3091                           
  3092  0070                     ?_CCP4_Initialize:	
  3093                           ; 1 bytes @ 0x0
  3094                           
  3095  0070                     ?_TMR1_Initialize:	
  3096                           ; 1 bytes @ 0x0
  3097                           
  3098  0070                     ?_TMR0_Initialize:	
  3099                           ; 1 bytes @ 0x0
  3100                           
  3101  0070                     ?_IOC_RB1_N_Handler:	
  3102                           ; 1 bytes @ 0x0
  3103                           
  3104  0070                     ??_IOC_RB1_N_Handler:	
  3105                           ; 1 bytes @ 0x0
  3106                           
  3107  0070                     ?_APDS9960Init:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110  0070                     ?_LCD_Digit4Num:	
  3111                           ; 1 bytes @ 0x0
  3112                           
  3113  0070                     ?_setProximityGain:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116  0070                     ?_enableGestureSensor:	
  3117                           ; 1 bytes @ 0x0
  3118                           
  3119  0070                     ?_LCD_Digit1Num:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122  0070                     ?_LCD_Digit2Num:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125  0070                     ?_LCD_Digit3Num:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128  0070                     ?_reverseBits:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131  0070                     ?_setLEDDrive:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134  0070                     ?_setAmbientLightGain:	
  3135                           ; 1 bytes @ 0x0
  3136                           
  3137  0070                     ?_setProxIntLowThresh:	
  3138                           ; 1 bytes @ 0x0
  3139                           
  3140  0070                     ?_setProxIntHighThresh:	
  3141                           ; 1 bytes @ 0x0
  3142                           
  3143  0070                     ?_setGestureEnterThresh:	
  3144                           ; 1 bytes @ 0x0
  3145                           
  3146  0070                     ?_setGestureExitThresh:	
  3147                           ; 1 bytes @ 0x0
  3148                           
  3149  0070                     ?_setGestureGain:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152  0070                     ?_setGestureLEDDrive:	
  3153                           ; 1 bytes @ 0x0
  3154                           
  3155  0070                     ?_setGestureWaitTime:	
  3156                           ; 1 bytes @ 0x0
  3157                           
  3158  0070                     ?_setGestureIntEnable:	
  3159                           ; 1 bytes @ 0x0
  3160                           
  3161  0070                     ?_resetGestureParameters:	
  3162                           ; 1 bytes @ 0x0
  3163                           
  3164  0070                     ?_setLEDBoost:	
  3165                           ; 1 bytes @ 0x0
  3166                           
  3167  0070                     ?_setGestureMode:	
  3168                           ; 1 bytes @ 0x0
  3169                           
  3170  0070                     ?_processGestureData:	
  3171                           ; 1 bytes @ 0x0
  3172                           
  3173  0070                     ?_decodeGesture:	
  3174                           ; 1 bytes @ 0x0
  3175                           
  3176  0070                     ?_LCD_Initialize:	
  3177                           ; 1 bytes @ 0x0
  3178                           
  3179  0070                     ?_PIN_MANAGER_Initialize:	
  3180                           ; 1 bytes @ 0x0
  3181                           
  3182  0070                     ?_PIN_MANAGER_IOC:	
  3183                           ; 1 bytes @ 0x0
  3184                           
  3185  0070                     ?_EUSART_Initialize:	
  3186                           ; 1 bytes @ 0x0
  3187                           
  3188  0070                     ?_FVR_Initialize:	
  3189                           ; 1 bytes @ 0x0
  3190                           
  3191  0070                     ?_I2C_Initialize:	
  3192                           ; 1 bytes @ 0x0
  3193                           
  3194  0070                     ?_I2C_MasterOperation:	
  3195                           ; 1 bytes @ 0x0
  3196                           
  3197  0070                     ?_SYSTEM_Initialize:	
  3198                           ; 1 bytes @ 0x0
  3199                           
  3200  0070                     ?_TMR1_WriteTimer:	
  3201                           ; 1 bytes @ 0x0
  3202                           
  3203  0070                     ?_CCP4_CaptureISR:	
  3204                           ; 1 bytes @ 0x0
  3205                           
  3206  0070                     ?_INTERRUPT_InterruptManager:	
  3207                           ; 1 bytes @ 0x0
  3208                           
  3209  0070                     ?_main:	
  3210                           ; 1 bytes @ 0x0
  3211                           
  3212  0070                     TMR1_WriteTimer@timerVal:	
  3213                           ; 1 bytes @ 0x0
  3214                           
  3215                           
  3216                           ; 2 bytes @ 0x0
  3217  0070                     	ds	1
  3218  0071                     ??_IOCBF1_ISR:
  3219  0071                     ??_EUSART_Receive_ISR:	
  3220                           ; 1 bytes @ 0x1
  3221                           
  3222  0071                     ??_EUSART_DefaultErrorHandler:	
  3223                           ; 1 bytes @ 0x1
  3224                           
  3225  0071                     ??_PIN_MANAGER_IOC:	
  3226                           ; 1 bytes @ 0x1
  3227                           
  3228                           
  3229                           ; 1 bytes @ 0x1
  3230  0071                     	ds	1
  3231  0072                     ?_CCP4_CallBack@main$F2149:
  3232  0072                     ??_TMR1_WriteTimer:	
  3233                           ; 1 bytes @ 0x2
  3234                           
  3235  0072                     ?_CCP4_DefaultCallBack:	
  3236                           ; 1 bytes @ 0x2
  3237                           
  3238  0072                     CCP4_DefaultCallBack@capturedValue:	
  3239                           ; 1 bytes @ 0x2
  3240                           
  3241  0072                     CCP4_CallBack@main$F2147@capturedValue:	
  3242                           ; 2 bytes @ 0x2
  3243                           
  3244                           
  3245                           ; 2 bytes @ 0x2
  3246  0072                     	ds	2
  3247  0074                     ??_CCP4_CallBack@main$F2151:
  3248  0074                     ??_CCP4_DefaultCallBack:	
  3249                           ; 1 bytes @ 0x4
  3250                           
  3251                           
  3252                           ; 1 bytes @ 0x4
  3253  0074                     	ds	4
  3254  0078                     ??_CCP4_CaptureISR:
  3255                           
  3256                           ; 1 bytes @ 0x8
  3257  0078                     	ds	1
  3258  0079                     CCP4_CaptureISR@module:
  3259                           
  3260                           ; 2 bytes @ 0x9
  3261  0079                     	ds	2
  3262  007B                     ??_INTERRUPT_InterruptManager:
  3263                           
  3264                           	psect	cstackBANK0
  3265  0020                     __pcstackBANK0:	
  3266                           ; 1 bytes @ 0xB
  3267                           
  3268  0020                     ?_I2C_SetBuffer:
  3269  0020                     ??_I2C_Open:	
  3270                           ; 1 bytes @ 0x0
  3271                           
  3272  0020                     ??_I2C_Close:	
  3273                           ; 1 bytes @ 0x0
  3274                           
  3275  0020                     ?_IOCBF1_SetInterruptHandler:	
  3276                           ; 1 bytes @ 0x0
  3277                           
  3278  0020                     ?_EUSART_SetRxInterruptHandler:	
  3279                           ; 1 bytes @ 0x0
  3280                           
  3281  0020                     ?_EUSART_SetTxInterruptHandler:	
  3282                           ; 1 bytes @ 0x0
  3283                           
  3284  0020                     ?_EUSART_SetFramingErrorHandler:	
  3285                           ; 1 bytes @ 0x0
  3286                           
  3287  0020                     ?_EUSART_SetOverrunErrorHandler:	
  3288                           ; 1 bytes @ 0x0
  3289                           
  3290  0020                     ?_EUSART_SetErrorHandler:	
  3291                           ; 1 bytes @ 0x0
  3292                           
  3293  0020                     ??_I2C_DO_IDLE:	
  3294                           ; 1 bytes @ 0x0
  3295                           
  3296  0020                     ??_I2C_DO_SEND_ADR_READ:	
  3297                           ; 1 bytes @ 0x0
  3298                           
  3299  0020                     ??_I2C_DO_RCEN:	
  3300                           ; 1 bytes @ 0x0
  3301                           
  3302  0020                     ??_I2C_DO_SEND_RESTART_READ:	
  3303                           ; 1 bytes @ 0x0
  3304                           
  3305  0020                     ??_I2C_DO_SEND_RESTART_WRITE:	
  3306                           ; 1 bytes @ 0x0
  3307                           
  3308  0020                     ??_I2C_DO_SEND_RESTART:	
  3309                           ; 1 bytes @ 0x0
  3310                           
  3311  0020                     ??_I2C_DO_SEND_STOP:	
  3312                           ; 1 bytes @ 0x0
  3313                           
  3314  0020                     ??_I2C_DO_RX_ACK:	
  3315                           ; 1 bytes @ 0x0
  3316                           
  3317  0020                     ??_I2C_DO_RX_NACK_STOP:	
  3318                           ; 1 bytes @ 0x0
  3319                           
  3320  0020                     ??_I2C_DO_RX_NACK_RESTART:	
  3321                           ; 1 bytes @ 0x0
  3322                           
  3323  0020                     ??_I2C_DO_RESET:	
  3324                           ; 1 bytes @ 0x0
  3325                           
  3326  0020                     ??_I2C_MasterClearIrq:	
  3327                           ; 1 bytes @ 0x0
  3328                           
  3329  0020                     ??_I2C_MasterOpen:	
  3330                           ; 1 bytes @ 0x0
  3331                           
  3332  0020                     ??_I2C_MasterDisableIrq:	
  3333                           ; 1 bytes @ 0x0
  3334                           
  3335  0020                     ??_I2C_MasterClose:	
  3336                           ; 1 bytes @ 0x0
  3337                           
  3338  0020                     ??_I2C_MasterStart:	
  3339                           ; 1 bytes @ 0x0
  3340                           
  3341  0020                     ?_I2C_SetCallback:	
  3342                           ; 1 bytes @ 0x0
  3343                           
  3344  0020                     ??_I2C_MasterWaitForEvent:	
  3345                           ; 1 bytes @ 0x0
  3346                           
  3347  0020                     ??_I2C_MasterIsNack:	
  3348                           ; 1 bytes @ 0x0
  3349                           
  3350  0020                     ??_I2C_MasterSendTxData:	
  3351                           ; 1 bytes @ 0x0
  3352                           
  3353  0020                     ??_I2C_MasterGetRxData:	
  3354                           ; 1 bytes @ 0x0
  3355                           
  3356  0020                     ??_I2C_MasterSendAck:	
  3357                           ; 1 bytes @ 0x0
  3358                           
  3359  0020                     ??_I2C_MasterStartRx:	
  3360                           ; 1 bytes @ 0x0
  3361                           
  3362  0020                     ??_I2C_MasterSetIrq:	
  3363                           ; 1 bytes @ 0x0
  3364                           
  3365  0020                     ??_I2C_MasterEnableRestart:	
  3366                           ; 1 bytes @ 0x0
  3367                           
  3368  0020                     ??_I2C_MasterStop:	
  3369                           ; 1 bytes @ 0x0
  3370                           
  3371  0020                     ??_I2C_MasterSendNack:	
  3372                           ; 1 bytes @ 0x0
  3373                           
  3374  0020                     ??_OSCILLATOR_Initialize:	
  3375                           ; 1 bytes @ 0x0
  3376                           
  3377  0020                     ??_WDT_Initialize:	
  3378                           ; 1 bytes @ 0x0
  3379                           
  3380  0020                     ??_DAC_Initialize:	
  3381                           ; 1 bytes @ 0x0
  3382                           
  3383  0020                     ??_TMR1_Initialize:	
  3384                           ; 1 bytes @ 0x0
  3385                           
  3386  0020                     ??_TMR0_Initialize:	
  3387                           ; 1 bytes @ 0x0
  3388                           
  3389  0020                     ?_CCP4_SetCallBack:	
  3390                           ; 1 bytes @ 0x0
  3391                           
  3392  0020                     ??_LCD_Digit4Num:	
  3393                           ; 1 bytes @ 0x0
  3394                           
  3395  0020                     ??_LCD_Digit1Num:	
  3396                           ; 1 bytes @ 0x0
  3397                           
  3398  0020                     ??_LCD_Digit2Num:	
  3399                           ; 1 bytes @ 0x0
  3400                           
  3401  0020                     ??_LCD_Digit3Num:	
  3402                           ; 1 bytes @ 0x0
  3403                           
  3404  0020                     ??_reverseBits:	
  3405                           ; 1 bytes @ 0x0
  3406                           
  3407  0020                     ??_resetGestureParameters:	
  3408                           ; 1 bytes @ 0x0
  3409                           
  3410  0020                     ??_LCD_Initialize:	
  3411                           ; 1 bytes @ 0x0
  3412                           
  3413  0020                     ??_FVR_Initialize:	
  3414                           ; 1 bytes @ 0x0
  3415                           
  3416  0020                     ??_I2C_Initialize:	
  3417                           ; 1 bytes @ 0x0
  3418                           
  3419  0020                     ?_abs:	
  3420                           ; 1 bytes @ 0x0
  3421                           
  3422  0020                     ?___wmul:	
  3423                           ; 2 bytes @ 0x0
  3424                           
  3425  0020                     I2C_Open@address:	
  3426                           ; 2 bytes @ 0x0
  3427                           
  3428  0020                     I2C_MasterSendTxData@data:	
  3429                           ; 1 bytes @ 0x0
  3430                           
  3431  0020                     IOCBF1_SetInterruptHandler@InterruptHandler:	
  3432                           ; 1 bytes @ 0x0
  3433                           
  3434  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3435                           ; 2 bytes @ 0x0
  3436                           
  3437  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3438                           ; 2 bytes @ 0x0
  3439                           
  3440  0020                     EUSART_SetErrorHandler@interruptHandler:	
  3441                           ; 2 bytes @ 0x0
  3442                           
  3443  0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3444                           ; 2 bytes @ 0x0
  3445                           
  3446  0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3447                           ; 2 bytes @ 0x0
  3448                           
  3449  0020                     I2C_SetBuffer@buffer:	
  3450                           ; 2 bytes @ 0x0
  3451                           
  3452  0020                     I2C_SetCallback@cb:	
  3453                           ; 2 bytes @ 0x0
  3454                           
  3455  0020                     CCP4_SetCallBack@customCallBack:	
  3456                           ; 2 bytes @ 0x0
  3457                           
  3458  0020                     ___wmul@multiplier:	
  3459                           ; 2 bytes @ 0x0
  3460                           
  3461  0020                     abs@a:	
  3462                           ; 2 bytes @ 0x0
  3463                           
  3464                           
  3465                           ; 2 bytes @ 0x0
  3466  0020                     	ds	1
  3467  0021                     ??_I2C_DO_SEND_ADR_WRITE:
  3468  0021                     I2C_Open@returnValue:	
  3469                           ; 1 bytes @ 0x1
  3470                           
  3471  0021                     I2C_Close@returnValue:	
  3472                           ; 1 bytes @ 0x1
  3473                           
  3474                           
  3475                           ; 1 bytes @ 0x1
  3476  0021                     	ds	1
  3477  0022                     ??_IOCBF1_SetInterruptHandler:
  3478  0022                     ??_EUSART_SetRxInterruptHandler:	
  3479                           ; 1 bytes @ 0x2
  3480                           
  3481  0022                     ??_EUSART_SetTxInterruptHandler:	
  3482                           ; 1 bytes @ 0x2
  3483                           
  3484  0022                     ??_EUSART_SetFramingErrorHandler:	
  3485                           ; 1 bytes @ 0x2
  3486                           
  3487  0022                     ??_EUSART_SetOverrunErrorHandler:	
  3488                           ; 1 bytes @ 0x2
  3489                           
  3490  0022                     ??_EUSART_SetErrorHandler:	
  3491                           ; 1 bytes @ 0x2
  3492                           
  3493  0022                     ??_CCP4_Initialize:	
  3494                           ; 1 bytes @ 0x2
  3495                           
  3496  0022                     ??_CCP4_SetCallBack:	
  3497                           ; 1 bytes @ 0x2
  3498                           
  3499  0022                     ??_abs:	
  3500                           ; 1 bytes @ 0x2
  3501                           
  3502  0022                     ??_PIN_MANAGER_Initialize:	
  3503                           ; 1 bytes @ 0x2
  3504                           
  3505  0022                     ??_EUSART_Initialize:	
  3506                           ; 1 bytes @ 0x2
  3507                           
  3508  0022                     LCD_Digit1Num@num:	
  3509                           ; 1 bytes @ 0x2
  3510                           
  3511  0022                     LCD_Digit2Num@num:	
  3512                           ; 1 bytes @ 0x2
  3513                           
  3514  0022                     LCD_Digit3Num@num:	
  3515                           ; 1 bytes @ 0x2
  3516                           
  3517  0022                     LCD_Digit4Num@num:	
  3518                           ; 1 bytes @ 0x2
  3519                           
  3520  0022                     I2C_SetBuffer@bufferSize:	
  3521                           ; 1 bytes @ 0x2
  3522                           
  3523  0022                     I2C_SetCallback@ptr:	
  3524                           ; 2 bytes @ 0x2
  3525                           
  3526  0022                     ___wmul@multiplicand:	
  3527                           ; 2 bytes @ 0x2
  3528                           
  3529                           
  3530                           ; 2 bytes @ 0x2
  3531  0022                     	ds	1
  3532  0023                     ??_SYSTEM_Initialize:
  3533  0023                     reverseBits@b:	
  3534                           ; 1 bytes @ 0x3
  3535                           
  3536                           
  3537                           ; 1 bytes @ 0x3
  3538  0023                     	ds	1
  3539  0024                     ??_I2C_SetBuffer:
  3540  0024                     ??_I2C_SetCallback:	
  3541                           ; 1 bytes @ 0x4
  3542                           
  3543  0024                     ??_decodeGesture:	
  3544                           ; 1 bytes @ 0x4
  3545                           
  3546  0024                     ??___wmul:	
  3547                           ; 1 bytes @ 0x4
  3548                           
  3549  0024                     ___wmul@product:	
  3550                           ; 1 bytes @ 0x4
  3551                           
  3552                           
  3553                           ; 2 bytes @ 0x4
  3554  0024                     	ds	2
  3555  0026                     ?___awdiv:
  3556  0026                     ___awdiv@divisor:	
  3557                           ; 2 bytes @ 0x6
  3558                           
  3559                           
  3560                           ; 2 bytes @ 0x6
  3561  0026                     	ds	2
  3562  0028                     I2C_SetCallback@idx:
  3563  0028                     ___awdiv@dividend:	
  3564                           ; 1 bytes @ 0x8
  3565                           
  3566                           
  3567                           ; 2 bytes @ 0x8
  3568  0028                     	ds	1
  3569  0029                     ?_I2C_SetDataCompleteCallback:
  3570  0029                     ?_I2C_SetAddressNackCallback:	
  3571                           ; 1 bytes @ 0x9
  3572                           
  3573  0029                     I2C_SetDataCompleteCallback@cb:	
  3574                           ; 1 bytes @ 0x9
  3575                           
  3576  0029                     I2C_SetAddressNackCallback@cb:	
  3577                           ; 2 bytes @ 0x9
  3578                           
  3579                           
  3580                           ; 2 bytes @ 0x9
  3581  0029                     	ds	1
  3582  002A                     ??___awdiv:
  3583                           
  3584                           ; 1 bytes @ 0xA
  3585  002A                     	ds	1
  3586  002B                     I2C_SetAddressNackCallback@ptr:
  3587  002B                     ___awdiv@counter:	
  3588                           ; 1 bytes @ 0xB
  3589                           
  3590  002B                     I2C_SetDataCompleteCallback@ptr:	
  3591                           ; 1 bytes @ 0xB
  3592                           
  3593                           
  3594                           ; 2 bytes @ 0xB
  3595  002B                     	ds	1
  3596  002C                     ??_I2C_SetAddressNackCallback:
  3597  002C                     ___awdiv@sign:	
  3598                           ; 1 bytes @ 0xC
  3599                           
  3600                           
  3601                           ; 1 bytes @ 0xC
  3602  002C                     	ds	1
  3603  002D                     ??_I2C_SetDataCompleteCallback:
  3604  002D                     ?_rd1RegCompleteHandler:	
  3605                           ; 1 bytes @ 0xD
  3606                           
  3607  002D                     ?_rd2RegCompleteHandler:	
  3608                           ; 1 bytes @ 0xD
  3609                           
  3610  002D                     ?_wr1RegCompleteHandler:	
  3611                           ; 1 bytes @ 0xD
  3612                           
  3613  002D                     ?_wr2RegCompleteHandler:	
  3614                           ; 1 bytes @ 0xD
  3615                           
  3616  002D                     ?_rdBlkRegCompleteHandler:	
  3617                           ; 1 bytes @ 0xD
  3618                           
  3619  002D                     ?_I2C_CallbackReturnStop:	
  3620                           ; 1 bytes @ 0xD
  3621                           
  3622  002D                     ?_I2C_CallbackReturnReset:	
  3623                           ; 1 bytes @ 0xD
  3624                           
  3625  002D                     ?_wr1RegCompleteHandler@abs$F3094:	
  3626                           ; 1 bytes @ 0xD
  3627                           
  3628  002D                     ?_rd1RegCompleteHandler@abs$F3102:	
  3629                           ; 1 bytes @ 0xD
  3630                           
  3631  002D                     ?_rd2RegCompleteHandler@abs$F3107:	
  3632                           ; 1 bytes @ 0xD
  3633                           
  3634  002D                     ?_wr2RegCompleteHandler@abs$F3113:	
  3635                           ; 1 bytes @ 0xD
  3636                           
  3637  002D                     ?_rdBlkRegCompleteHandler@abs$F3119:	
  3638                           ; 1 bytes @ 0xD
  3639                           
  3640  002D                     wr1RegCompleteHandler@p:	
  3641                           ; 1 bytes @ 0xD
  3642                           
  3643  002D                     rd1RegCompleteHandler@p:	
  3644                           ; 2 bytes @ 0xD
  3645                           
  3646  002D                     rd2RegCompleteHandler@p:	
  3647                           ; 2 bytes @ 0xD
  3648                           
  3649  002D                     wr2RegCompleteHandler@p:	
  3650                           ; 2 bytes @ 0xD
  3651                           
  3652  002D                     rdBlkRegCompleteHandler@p:	
  3653                           ; 2 bytes @ 0xD
  3654                           
  3655  002D                     rd1RegCompleteHandler@i2c_master_example$F143@ptr:	
  3656                           ; 2 bytes @ 0xD
  3657                           
  3658  002D                     rd2RegCompleteHandler@i2c_master_example$F154@ptr:	
  3659                           ; 2 bytes @ 0xD
  3660                           
  3661  002D                     wr1RegCompleteHandler@i2c_master_example$F160@ptr:	
  3662                           ; 2 bytes @ 0xD
  3663                           
  3664  002D                     wr2RegCompleteHandler@i2c_master_example$F166@ptr:	
  3665                           ; 2 bytes @ 0xD
  3666                           
  3667  002D                     rdBlkRegCompleteHandler@i2c_master_example$F177@ptr:	
  3668                           ; 2 bytes @ 0xD
  3669                           
  3670  002D                     I2C_CallbackReturnStop@funPtr:	
  3671                           ; 2 bytes @ 0xD
  3672                           
  3673  002D                     I2C_CallbackReturnReset@funPtr:	
  3674                           ; 2 bytes @ 0xD
  3675                           
  3676  002D                     ___awdiv@quotient:	
  3677                           ; 2 bytes @ 0xD
  3678                           
  3679                           
  3680                           ; 2 bytes @ 0xD
  3681  002D                     	ds	2
  3682  002F                     ??_rd1RegCompleteHandler:
  3683  002F                     ??_rd2RegCompleteHandler:	
  3684                           ; 1 bytes @ 0xF
  3685                           
  3686  002F                     ??_wr1RegCompleteHandler:	
  3687                           ; 1 bytes @ 0xF
  3688                           
  3689  002F                     ??_wr2RegCompleteHandler:	
  3690                           ; 1 bytes @ 0xF
  3691                           
  3692  002F                     ??_rdBlkRegCompleteHandler:	
  3693                           ; 1 bytes @ 0xF
  3694                           
  3695  002F                     ??_I2C_DO_TX:	
  3696                           ; 1 bytes @ 0xF
  3697                           
  3698  002F                     ??_I2C_DO_RX:	
  3699                           ; 1 bytes @ 0xF
  3700                           
  3701  002F                     ??_I2C_DO_TX_EMPTY:	
  3702                           ; 1 bytes @ 0xF
  3703                           
  3704  002F                     ??_I2C_DO_ADDRESS_NACK:	
  3705                           ; 1 bytes @ 0xF
  3706                           
  3707  002F                     ??_I2C_CallbackReturnStop:	
  3708                           ; 1 bytes @ 0xF
  3709                           
  3710  002F                     ??_I2C_CallbackReturnReset:	
  3711                           ; 1 bytes @ 0xF
  3712                           
  3713  002F                     ??_processGestureData:	
  3714                           ; 1 bytes @ 0xF
  3715                           
  3716  002F                     ??_wr1RegCompleteHandler@abs$F3096:	
  3717                           ; 1 bytes @ 0xF
  3718                           
  3719  002F                     ??_rd1RegCompleteHandler@abs$F3104:	
  3720                           ; 1 bytes @ 0xF
  3721                           
  3722  002F                     ??_rd2RegCompleteHandler@abs$F3109:	
  3723                           ; 1 bytes @ 0xF
  3724                           
  3725  002F                     ??_wr2RegCompleteHandler@abs$F3115:	
  3726                           ; 1 bytes @ 0xF
  3727                           
  3728  002F                     ??_rdBlkRegCompleteHandler@abs$F3121:	
  3729                           ; 1 bytes @ 0xF
  3730                           
  3731                           
  3732                           ; 1 bytes @ 0xF
  3733  002F                     	ds	2
  3734  0031                     ??_I2C_MasterFsm:
  3735                           
  3736                           ; 1 bytes @ 0x11
  3737  0031                     	ds	1
  3738  0032                     processGestureData@ud_ratio_first:
  3739                           
  3740                           ; 2 bytes @ 0x12
  3741  0032                     	ds	2
  3742  0034                     ??_I2C_Poller:
  3743  0034                     ??_I2C_MasterOperation:	
  3744                           ; 1 bytes @ 0x14
  3745                           
  3746  0034                     I2C_MasterOperation@read:	
  3747                           ; 1 bytes @ 0x14
  3748                           
  3749  0034                     processGestureData@lr_ratio_first:	
  3750                           ; 1 bytes @ 0x14
  3751                           
  3752                           
  3753                           ; 2 bytes @ 0x14
  3754  0034                     	ds	1
  3755  0035                     I2C_MasterOperation@returnValue:
  3756                           
  3757                           ; 1 bytes @ 0x15
  3758  0035                     	ds	1
  3759  0036                     ??_I2C_MasterWrite:
  3760  0036                     ?_i2c_write1ByteRegister:	
  3761                           ; 1 bytes @ 0x16
  3762                           
  3763  0036                     ?_i2c_read1ByteRegister:	
  3764                           ; 1 bytes @ 0x16
  3765                           
  3766  0036                     ?_i2c_readDataBlock:	
  3767                           ; 1 bytes @ 0x16
  3768                           
  3769  0036                     i2c_write1ByteRegister@reg:	
  3770                           ; 1 bytes @ 0x16
  3771                           
  3772  0036                     i2c_read1ByteRegister@reg:	
  3773                           ; 1 bytes @ 0x16
  3774                           
  3775  0036                     i2c_readDataBlock@reg:	
  3776                           ; 1 bytes @ 0x16
  3777                           
  3778  0036                     processGestureData@ud_ratio_last:	
  3779                           ; 1 bytes @ 0x16
  3780                           
  3781                           
  3782                           ; 2 bytes @ 0x16
  3783  0036                     	ds	1
  3784  0037                     ??_i2c_read1ByteRegister:
  3785  0037                     i2c_write1ByteRegister@data:	
  3786                           ; 1 bytes @ 0x17
  3787                           
  3788  0037                     i2c_readDataBlock@data:	
  3789                           ; 1 bytes @ 0x17
  3790                           
  3791                           
  3792                           ; 2 bytes @ 0x17
  3793  0037                     	ds	1
  3794  0038                     ??_i2c_write1ByteRegister:
  3795  0038                     i2c_write1ByteRegister@address:	
  3796                           ; 1 bytes @ 0x18
  3797                           
  3798  0038                     i2c_read1ByteRegister@address:	
  3799                           ; 1 bytes @ 0x18
  3800                           
  3801  0038                     processGestureData@lr_ratio_last:	
  3802                           ; 1 bytes @ 0x18
  3803                           
  3804                           
  3805                           ; 2 bytes @ 0x18
  3806  0038                     	ds	1
  3807  0039                     ??_setProxIntLowThresh:
  3808  0039                     ??_setProxIntHighThresh:	
  3809                           ; 1 bytes @ 0x19
  3810                           
  3811  0039                     ?_setLightIntLowThreshold:	
  3812                           ; 1 bytes @ 0x19
  3813                           
  3814  0039                     ?_setLightIntHighThreshold:	
  3815                           ; 1 bytes @ 0x19
  3816                           
  3817  0039                     ??_setGestureEnterThresh:	
  3818                           ; 1 bytes @ 0x19
  3819                           
  3820  0039                     ??_setGestureExitThresh:	
  3821                           ; 1 bytes @ 0x19
  3822                           
  3823  0039                     i2c_read1ByteRegister@e:	
  3824                           ; 1 bytes @ 0x19
  3825                           
  3826  0039                     i2c_readDataBlock@len:	
  3827                           ; 1 bytes @ 0x19
  3828                           
  3829  0039                     setLightIntLowThreshold@threshold:	
  3830                           ; 2 bytes @ 0x19
  3831                           
  3832  0039                     setLightIntHighThreshold@threshold:	
  3833                           ; 2 bytes @ 0x19
  3834                           
  3835                           
  3836                           ; 2 bytes @ 0x19
  3837  0039                     	ds	1
  3838  003A                     processGestureData@u_last:
  3839  003A                     i2c_read1ByteRegister@x:	
  3840                           ; 1 bytes @ 0x1A
  3841                           
  3842                           
  3843                           ; 2 bytes @ 0x1A
  3844  003A                     	ds	1
  3845  003B                     ??_setLightIntLowThreshold:
  3846  003B                     ??_setLightIntHighThreshold:	
  3847                           ; 1 bytes @ 0x1B
  3848                           
  3849  003B                     ??_i2c_readDataBlock:	
  3850                           ; 1 bytes @ 0x1B
  3851                           
  3852  003B                     i2c_readDataBlock@address:	
  3853                           ; 1 bytes @ 0x1B
  3854                           
  3855  003B                     processGestureData@d_last:	
  3856                           ; 1 bytes @ 0x1B
  3857                           
  3858  003B                     setProxIntLowThresh@threshold:	
  3859                           ; 1 bytes @ 0x1B
  3860                           
  3861  003B                     setProxIntHighThresh@threshold:	
  3862                           ; 1 bytes @ 0x1B
  3863                           
  3864  003B                     setGestureEnterThresh@threshold:	
  3865                           ; 1 bytes @ 0x1B
  3866                           
  3867  003B                     setGestureExitThresh@threshold:	
  3868                           ; 1 bytes @ 0x1B
  3869                           
  3870                           
  3871                           ; 1 bytes @ 0x1B
  3872  003B                     	ds	1
  3873  003C                     i2c_read1ByteRegister@d2:
  3874  003C                     processGestureData@l_last:	
  3875                           ; 1 bytes @ 0x1C
  3876                           
  3877  003C                     i2c_readDataBlock@d:	
  3878                           ; 1 bytes @ 0x1C
  3879                           
  3880                           
  3881                           ; 4 bytes @ 0x1C
  3882  003C                     	ds	1
  3883  003D                     ??_setProximityGain:
  3884  003D                     ?_setMode:	
  3885                           ; 1 bytes @ 0x1D
  3886                           
  3887  003D                     ??_setLEDDrive:	
  3888                           ; 1 bytes @ 0x1D
  3889                           
  3890  003D                     ??_setAmbientLightGain:	
  3891                           ; 1 bytes @ 0x1D
  3892                           
  3893  003D                     ??_setGestureGain:	
  3894                           ; 1 bytes @ 0x1D
  3895                           
  3896  003D                     ??_setGestureLEDDrive:	
  3897                           ; 1 bytes @ 0x1D
  3898                           
  3899  003D                     ??_setGestureWaitTime:	
  3900                           ; 1 bytes @ 0x1D
  3901                           
  3902  003D                     ??_setGestureIntEnable:	
  3903                           ; 1 bytes @ 0x1D
  3904                           
  3905  003D                     ??_setLEDBoost:	
  3906                           ; 1 bytes @ 0x1D
  3907                           
  3908  003D                     ??_setGestureMode:	
  3909                           ; 1 bytes @ 0x1D
  3910                           
  3911  003D                     setMode@enable:	
  3912                           ; 1 bytes @ 0x1D
  3913                           
  3914  003D                     processGestureData@r_last:	
  3915                           ; 1 bytes @ 0x1D
  3916                           
  3917  003D                     setLightIntLowThreshold@val_low:	
  3918                           ; 1 bytes @ 0x1D
  3919                           
  3920  003D                     setLightIntHighThreshold@val_low:	
  3921                           ; 1 bytes @ 0x1D
  3922                           
  3923                           
  3924                           ; 1 bytes @ 0x1D
  3925  003D                     	ds	1
  3926  003E                     ??_setMode:
  3927  003E                     processGestureData@u_first:	
  3928                           ; 1 bytes @ 0x1E
  3929                           
  3930  003E                     setLightIntLowThreshold@val_high:	
  3931                           ; 1 bytes @ 0x1E
  3932                           
  3933  003E                     setLightIntHighThreshold@val_high:	
  3934                           ; 1 bytes @ 0x1E
  3935                           
  3936                           
  3937                           ; 1 bytes @ 0x1E
  3938  003E                     	ds	1
  3939  003F                     processGestureData@d_first:
  3940  003F                     setLEDDrive@val:	
  3941                           ; 1 bytes @ 0x1F
  3942                           
  3943  003F                     setProximityGain@val:	
  3944                           ; 1 bytes @ 0x1F
  3945                           
  3946  003F                     setAmbientLightGain@drive:	
  3947                           ; 1 bytes @ 0x1F
  3948                           
  3949  003F                     setLEDBoost@val:	
  3950                           ; 1 bytes @ 0x1F
  3951                           
  3952  003F                     setGestureGain@val:	
  3953                           ; 1 bytes @ 0x1F
  3954                           
  3955  003F                     setGestureLEDDrive@val:	
  3956                           ; 1 bytes @ 0x1F
  3957                           
  3958  003F                     setGestureWaitTime@time:	
  3959                           ; 1 bytes @ 0x1F
  3960                           
  3961  003F                     setGestureIntEnable@val:	
  3962                           ; 1 bytes @ 0x1F
  3963                           
  3964  003F                     setGestureMode@mode:	
  3965                           ; 1 bytes @ 0x1F
  3966                           
  3967                           
  3968                           ; 1 bytes @ 0x1F
  3969  003F                     	ds	1
  3970  0040                     setMode@reg_val:
  3971  0040                     processGestureData@l_first:	
  3972                           ; 1 bytes @ 0x20
  3973                           
  3974  0040                     setLEDDrive@drive:	
  3975                           ; 1 bytes @ 0x20
  3976                           
  3977  0040                     setProximityGain@drive:	
  3978                           ; 1 bytes @ 0x20
  3979                           
  3980  0040                     setAmbientLightGain@val:	
  3981                           ; 1 bytes @ 0x20
  3982                           
  3983  0040                     setLEDBoost@boost:	
  3984                           ; 1 bytes @ 0x20
  3985                           
  3986  0040                     setGestureGain@gain:	
  3987                           ; 1 bytes @ 0x20
  3988                           
  3989  0040                     setGestureLEDDrive@drive:	
  3990                           ; 1 bytes @ 0x20
  3991                           
  3992  0040                     setGestureWaitTime@val:	
  3993                           ; 1 bytes @ 0x20
  3994                           
  3995  0040                     setGestureIntEnable@enable:	
  3996                           ; 1 bytes @ 0x20
  3997                           
  3998  0040                     setGestureMode@val:	
  3999                           ; 1 bytes @ 0x20
  4000                           
  4001                           
  4002                           ; 1 bytes @ 0x20
  4003  0040                     	ds	1
  4004  0041                     setMode@mode:
  4005  0041                     processGestureData@r_first:	
  4006                           ; 1 bytes @ 0x21
  4007                           
  4008                           
  4009                           ; 1 bytes @ 0x21
  4010  0041                     	ds	1
  4011  0042                     ??_APDS9960Init:
  4012  0042                     ??_enableGestureSensor:	
  4013                           ; 1 bytes @ 0x22
  4014                           
  4015  0042                     processGestureData@ud_delta:	
  4016                           ; 1 bytes @ 0x22
  4017                           
  4018                           
  4019                           ; 2 bytes @ 0x22
  4020  0042                     	ds	2
  4021  0044                     APDS9960Init@id:
  4022  0044                     enableGestureSensor@interrupts:	
  4023                           ; 1 bytes @ 0x24
  4024                           
  4025  0044                     processGestureData@lr_delta:	
  4026                           ; 1 bytes @ 0x24
  4027                           
  4028                           
  4029                           ; 2 bytes @ 0x24
  4030  0044                     	ds	2
  4031  0046                     processGestureData@i:
  4032                           
  4033                           ; 2 bytes @ 0x26
  4034  0046                     	ds	2
  4035  0048                     ?_readGesture:
  4036                           
  4037                           ; 2 bytes @ 0x28
  4038  0048                     	ds	2
  4039  004A                     ??_readGesture:
  4040                           
  4041                           ; 1 bytes @ 0x2A
  4042  004A                     	ds	9
  4043  0053                     readGesture@motion:
  4044                           
  4045                           ; 2 bytes @ 0x33
  4046  0053                     	ds	2
  4047  0055                     readGesture@gstatus:
  4048                           
  4049                           ; 1 bytes @ 0x35
  4050  0055                     	ds	1
  4051  0056                     readGesture@bytes_read:
  4052                           
  4053                           ; 1 bytes @ 0x36
  4054  0056                     	ds	1
  4055  0057                     readGesture@fifo_level:
  4056                           
  4057                           ; 1 bytes @ 0x37
  4058  0057                     	ds	1
  4059  0058                     readGesture@i:
  4060                           
  4061                           ; 2 bytes @ 0x38
  4062  0058                     	ds	2
  4063  005A                     ??_main:
  4064                           
  4065                           ; 1 bytes @ 0x3A
  4066  005A                     	ds	3
  4067  005D                     main@bcd_num:
  4068                           
  4069                           ; 2 bytes @ 0x3D
  4070  005D                     	ds	2
  4071  005F                     main@temp8:
  4072                           
  4073                           ; 1 bytes @ 0x3F
  4074  005F                     	ds	1
  4075                           
  4076                           	psect	maintext
  4077  0A2D                     __pmaintext:	
  4078 ;;
  4079 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4080 ;;
  4081 ;; *************** function _main *****************
  4082 ;; Defined at:
  4083 ;;		line 73 in file "main.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;		None
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;  bcd_num         2   61[BANK0 ] unsigned short 
  4088 ;;  temp_num        2    0        unsigned short 
  4089 ;;  temp8           1   63[BANK0 ] unsigned char 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      void 
  4092 ;; Registers used:
  4093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4094 ;; Tracked objects:
  4095 ;;		On entry : B1F/0
  4096 ;;		On exit  : 1F/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4100 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4101 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4102 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4103 ;;Total ram usage:        6 bytes
  4104 ;; Hardware stack levels required when called:   15
  4105 ;; This function calls:
  4106 ;;		_APDS9960Init
  4107 ;;		_CCP4_SetCallBack
  4108 ;;		_IOCBF1_SetInterruptHandler
  4109 ;;		_LCD_Digit1Num
  4110 ;;		_LCD_Digit2Num
  4111 ;;		_LCD_Digit3Num
  4112 ;;		_LCD_Digit4Num
  4113 ;;		_SYSTEM_Initialize
  4114 ;;		_enableGestureSensor
  4115 ;;		_readGesture
  4116 ;;		_reverseBits
  4117 ;;		_setProximityGain
  4118 ;; This function is called by:
  4119 ;;		Startup code after reset
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           
  4124                           ;psect for function _main
  4125  0A2D                     _main:
  4126                           
  4127                           ;main.c: 76:     uint8_t temp8;;main.c: 78:     SYSTEM_Initialize();
  4128                           
  4129                           ;incstack = 0
  4130                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4131  0A2D  3192  2291  318A   	fcall	_SYSTEM_Initialize
  4132                           
  4133                           ;main.c: 80:     ir_flag = IR_NONE;
  4134  0A30  0020               	movlb	0	; select bank0
  4135  0A31  01E9               	clrf	_ir_flag	;volatile
  4136                           
  4137                           ;main.c: 81:     ir_address = ir_address_complement = ir_command = ir_command_complement
      +                           = 0;
  4138  0A32  01FC               	clrf	_ir_command_complement	;volatile
  4139  0A33  01EA               	clrf	_ir_command	;volatile
  4140  0A34  0021               	movlb	1	; select bank1
  4141  0A35  01EA               	clrf	_ir_address_complement^(0+128)	;volatile
  4142  0A36  0020               	movlb	0	; select bank0
  4143  0A37  01EB               	clrf	_ir_address	;volatile
  4144                           
  4145                           ;main.c: 83:     flag_gesture = 0;
  4146  0A38  01E8               	clrf	_flag_gesture	;volatile
  4147                           
  4148                           ;main.c: 85:     CCP4_SetCallBack(CCP4_CallBack);
  4149  0A39  3081               	movlw	low _CCP4_CallBack@main$F2147
  4150  0A3A  00A0               	movwf	CCP4_SetCallBack@customCallBack
  4151  0A3B  3008               	movlw	high _CCP4_CallBack@main$F2147
  4152  0A3C  00A1               	movwf	CCP4_SetCallBack@customCallBack+1
  4153  0A3D  319F  2746  318A   	fcall	_CCP4_SetCallBack
  4154                           
  4155                           ;main.c: 86:     IOCBF1_SetInterruptHandler(IOC_RB1_N_Handler);
  4156  0A40  3019               	movlw	low _IOC_RB1_N_Handler
  4157  0A41  0020               	movlb	0	; select bank0
  4158  0A42  00A0               	movwf	IOCBF1_SetInterruptHandler@InterruptHandler
  4159  0A43  301F               	movlw	high _IOC_RB1_N_Handler
  4160  0A44  00A1               	movwf	IOCBF1_SetInterruptHandler@InterruptHandler+1
  4161  0A45  319F  2776  318A   	fcall	_IOCBF1_SetInterruptHandler
  4162                           
  4163                           ;main.c: 92:     (INTCONbits.GIE = 1);
  4164  0A48  178B               	bsf	11,7	;volatile
  4165                           
  4166                           ;main.c: 95:     (INTCONbits.PEIE = 1);
  4167  0A49  170B               	bsf	11,6	;volatile
  4168                           
  4169                           ;main.c: 103:     if(APDS9960Init()){
  4170  0A4A  3186  26D7  318A   	fcall	_APDS9960Init
  4171  0A4D  3A00               	xorlw	0
  4172  0A4E  1903               	skipnz
  4173  0A4F  2A55               	goto	l5900
  4174                           
  4175                           ;main.c: 104:         bcd_num = 1;
  4176  0A50  3001               	movlw	1
  4177  0A51  00DD               	movwf	main@bcd_num
  4178  0A52  3000               	movlw	0
  4179  0A53  00DE               	movwf	main@bcd_num+1
  4180                           
  4181                           ;main.c: 105:     } else {
  4182  0A54  2A57               	goto	l5902
  4183  0A55                     l5900:
  4184                           
  4185                           ;main.c: 106:         bcd_num = 0;
  4186  0A55  01DD               	clrf	main@bcd_num
  4187  0A56  01DE               	clrf	main@bcd_num+1
  4188  0A57                     l5902:
  4189                           
  4190                           ;main.c: 109:     LCD_Digit4Num(bcd_num & 0x000F);
  4191  0A57  085D               	movf	main@bcd_num,w
  4192  0A58  390F               	andlw	15
  4193  0A59  3183  233D  318A   	fcall	_LCD_Digit4Num
  4194                           
  4195                           ;main.c: 112:     setProximityGain(1);
  4196  0A5C  3001               	movlw	1
  4197  0A5D  3194  24C9  318A   	fcall	_setProximityGain
  4198                           
  4199                           ;main.c: 116:     enableGestureSensor(1);
  4200  0A60  3001               	movlw	1
  4201  0A61  3197  27A8  318A   	fcall	_enableGestureSensor
  4202  0A64                     l1222:	
  4203                           ;main.c: 118:     while (1)
  4204                           
  4205  0A64  0064               	clrwdt	;# 
  4206                           
  4207                           ;main.c: 133:         if(flag_gesture != 0){
  4208  0A65  0020               	movlb	0	; select bank0
  4209  0A66  0868               	movf	_flag_gesture,w	;volatile
  4210  0A67  1903               	btfsc	3,2
  4211  0A68  2B04               	goto	l5930
  4212                           
  4213                           ;main.c: 135:             LCDDATA0bits.SEG5COM0 = 0;
  4214  0A69  002F               	movlb	15	; select bank15
  4215  0A6A  12A0               	bcf	32,5	;volatile
  4216                           
  4217                           ;main.c: 136:             LCDDATA0bits.SEG3COM0 = 0;
  4218  0A6B  11A0               	bcf	32,3	;volatile
  4219                           
  4220                           ;main.c: 137:             LCDDATA1bits.SEG10COM0 = 0;
  4221  0A6C  1121               	bcf	33,2	;volatile
  4222                           
  4223                           ;main.c: 138:             LCDDATA0bits.SEG4COM0 = 0;
  4224  0A6D  1220               	bcf	32,4	;volatile
  4225                           
  4226                           ;main.c: 140:             switch ( readGesture() ) {
  4227  0A6E  2AE6               	goto	l5926
  4228  0A6F                     l5912:
  4229                           
  4230                           ;main.c: 142:                     LCD_Digit1Num('U');
  4231  0A6F  3055               	movlw	85
  4232  0A70  318C  2485  318A   	fcall	_LCD_Digit1Num
  4233                           
  4234                           ;main.c: 143:                     LCD_Digit2Num('P');
  4235  0A73  3050               	movlw	80
  4236  0A74  318E  2642  318A   	fcall	_LCD_Digit2Num
  4237                           
  4238                           ;main.c: 144:                     LCD_Digit3Num(' ');
  4239  0A77  3020               	movlw	32
  4240  0A78  3185  2519  318A   	fcall	_LCD_Digit3Num
  4241                           
  4242                           ;main.c: 145:                     LCD_Digit4Num(' ');
  4243  0A7B  3020               	movlw	32
  4244  0A7C  3183  233D  318A   	fcall	_LCD_Digit4Num
  4245                           
  4246                           ;main.c: 146:                     break;
  4247  0A7F  2B02               	goto	l5928
  4248  0A80                     l5914:
  4249                           
  4250                           ;main.c: 148:                     LCD_Digit1Num('D');
  4251  0A80  3044               	movlw	68
  4252  0A81  318C  2485  318A   	fcall	_LCD_Digit1Num
  4253                           
  4254                           ;main.c: 149:                     LCD_Digit2Num('N');
  4255  0A84  304E               	movlw	78
  4256  0A85  318E  2642  318A   	fcall	_LCD_Digit2Num
  4257                           
  4258                           ;main.c: 150:                     LCD_Digit3Num(' ');
  4259  0A88  3020               	movlw	32
  4260  0A89  3185  2519  318A   	fcall	_LCD_Digit3Num
  4261                           
  4262                           ;main.c: 151:                     LCD_Digit4Num(' ');
  4263  0A8C  3020               	movlw	32
  4264  0A8D  3183  233D  318A   	fcall	_LCD_Digit4Num
  4265                           
  4266                           ;main.c: 152:                     break;
  4267  0A90  2B02               	goto	l5928
  4268  0A91                     l5916:
  4269                           
  4270                           ;main.c: 154:                     LCD_Digit1Num('L');
  4271  0A91  304C               	movlw	76
  4272  0A92  318C  2485  318A   	fcall	_LCD_Digit1Num
  4273                           
  4274                           ;main.c: 155:                     LCD_Digit2Num('E');
  4275  0A95  3045               	movlw	69
  4276  0A96  318E  2642  318A   	fcall	_LCD_Digit2Num
  4277                           
  4278                           ;main.c: 156:                     LCD_Digit3Num('F');
  4279  0A99  3046               	movlw	70
  4280  0A9A  3185  2519  318A   	fcall	_LCD_Digit3Num
  4281                           
  4282                           ;main.c: 157:                     LCD_Digit4Num('T');
  4283  0A9D  3054               	movlw	84
  4284  0A9E  3183  233D  318A   	fcall	_LCD_Digit4Num
  4285                           
  4286                           ;main.c: 158:                     break;
  4287  0AA1  2B02               	goto	l5928
  4288  0AA2                     l5918:
  4289                           
  4290                           ;main.c: 160:                     LCD_Digit1Num('R');
  4291  0AA2  3052               	movlw	82
  4292  0AA3  318C  2485  318A   	fcall	_LCD_Digit1Num
  4293                           
  4294                           ;main.c: 161:                     LCD_Digit2Num('I');
  4295  0AA6  3049               	movlw	73
  4296  0AA7  318E  2642  318A   	fcall	_LCD_Digit2Num
  4297                           
  4298                           ;main.c: 162:                     LCD_Digit3Num('T');
  4299  0AAA  3054               	movlw	84
  4300  0AAB  3185  2519  318A   	fcall	_LCD_Digit3Num
  4301                           
  4302                           ;main.c: 163:                     LCD_Digit4Num(' ');
  4303  0AAE  3020               	movlw	32
  4304  0AAF  3183  233D  318A   	fcall	_LCD_Digit4Num
  4305                           
  4306                           ;main.c: 164:                     break;
  4307  0AB2  2B02               	goto	l5928
  4308  0AB3                     l5920:
  4309                           
  4310                           ;main.c: 166:                     LCD_Digit1Num('N');
  4311  0AB3  304E               	movlw	78
  4312  0AB4  318C  2485  318A   	fcall	_LCD_Digit1Num
  4313                           
  4314                           ;main.c: 167:                     LCD_Digit2Num('E');
  4315  0AB7  3045               	movlw	69
  4316  0AB8  318E  2642  318A   	fcall	_LCD_Digit2Num
  4317                           
  4318                           ;main.c: 168:                     LCD_Digit3Num('A');
  4319  0ABB  3041               	movlw	65
  4320  0ABC  3185  2519  318A   	fcall	_LCD_Digit3Num
  4321                           
  4322                           ;main.c: 169:                     LCD_Digit4Num('R');
  4323  0ABF  3052               	movlw	82
  4324  0AC0  3183  233D  318A   	fcall	_LCD_Digit4Num
  4325                           
  4326                           ;main.c: 170:                     break;
  4327  0AC3  2B02               	goto	l5928
  4328  0AC4                     l5922:
  4329                           
  4330                           ;main.c: 172:                     LCD_Digit1Num('F');
  4331  0AC4  3046               	movlw	70
  4332  0AC5  318C  2485  318A   	fcall	_LCD_Digit1Num
  4333                           
  4334                           ;main.c: 173:                     LCD_Digit2Num('A');
  4335  0AC8  3041               	movlw	65
  4336  0AC9  318E  2642  318A   	fcall	_LCD_Digit2Num
  4337                           
  4338                           ;main.c: 174:                     LCD_Digit3Num('R');
  4339  0ACC  3052               	movlw	82
  4340  0ACD  3185  2519  318A   	fcall	_LCD_Digit3Num
  4341                           
  4342                           ;main.c: 175:                     LCD_Digit4Num(' ');
  4343  0AD0  3020               	movlw	32
  4344  0AD1  3183  233D  318A   	fcall	_LCD_Digit4Num
  4345                           
  4346                           ;main.c: 176:                     break;
  4347  0AD4  2B02               	goto	l5928
  4348  0AD5                     l5924:
  4349                           
  4350                           ;main.c: 178:                     LCD_Digit1Num('N');
  4351  0AD5  304E               	movlw	78
  4352  0AD6  318C  2485  318A   	fcall	_LCD_Digit1Num
  4353                           
  4354                           ;main.c: 179:                     LCD_Digit2Num('O');
  4355  0AD9  304F               	movlw	79
  4356  0ADA  318E  2642  318A   	fcall	_LCD_Digit2Num
  4357                           
  4358                           ;main.c: 180:                     LCD_Digit3Num('N');
  4359  0ADD  304E               	movlw	78
  4360  0ADE  3185  2519  318A   	fcall	_LCD_Digit3Num
  4361                           
  4362                           ;main.c: 181:                     LCD_Digit4Num('E');
  4363  0AE1  3045               	movlw	69
  4364  0AE2  3183  233D  318A   	fcall	_LCD_Digit4Num
  4365                           
  4366                           ;main.c: 182:             }
  4367  0AE5  2B02               	goto	l5928
  4368  0AE6                     l5926:
  4369  0AE6  318B  2341  318A   	fcall	_readGesture
  4370                           
  4371                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4372                           ; Switch size 1, requested type "simple"
  4373                           ; Number of cases is 1, Range of values is 0 to 0
  4374                           ; switch strategies available:
  4375                           ; Name         Instructions Cycles
  4376                           ; simple_byte            4     3 (average)
  4377                           ; direct_byte            8     6 (fixed)
  4378                           ; jumptable            260     6 (fixed)
  4379                           ;	Chosen strategy is simple_byte
  4380  0AE9  0849               	movf	?_readGesture+1,w
  4381  0AEA  3A00               	xorlw	0	; case 0
  4382  0AEB  1903               	skipnz
  4383  0AEC  2AEE               	goto	l6162
  4384  0AED  2AD5               	goto	l5924
  4385  0AEE                     l6162:
  4386                           
  4387                           ; Switch size 1, requested type "simple"
  4388                           ; Number of cases is 6, Range of values is 1 to 6
  4389                           ; switch strategies available:
  4390                           ; Name         Instructions Cycles
  4391                           ; simple_byte           19    10 (average)
  4392                           ; direct_byte           21     9 (fixed)
  4393                           ; jumptable            263     9 (fixed)
  4394                           ;	Chosen strategy is simple_byte
  4395  0AEE  0848               	movf	?_readGesture,w
  4396  0AEF  3A01               	xorlw	1	; case 1
  4397  0AF0  1903               	skipnz
  4398  0AF1  2A91               	goto	l5916
  4399  0AF2  3A03               	xorlw	3	; case 2
  4400  0AF3  1903               	skipnz
  4401  0AF4  2AA2               	goto	l5918
  4402  0AF5  3A01               	xorlw	1	; case 3
  4403  0AF6  1903               	skipnz
  4404  0AF7  2A6F               	goto	l5912
  4405  0AF8  3A07               	xorlw	7	; case 4
  4406  0AF9  1903               	skipnz
  4407  0AFA  2A80               	goto	l5914
  4408  0AFB  3A01               	xorlw	1	; case 5
  4409  0AFC  1903               	skipnz
  4410  0AFD  2AB3               	goto	l5920
  4411  0AFE  3A03               	xorlw	3	; case 6
  4412  0AFF  1903               	skipnz
  4413  0B00  2AC4               	goto	l5922
  4414  0B01  2AD5               	goto	l5924
  4415  0B02                     l5928:
  4416                           
  4417                           ;main.c: 184:             flag_gesture = 0;
  4418  0B02  0020               	movlb	0	; select bank0
  4419  0B03  01E8               	clrf	_flag_gesture	;volatile
  4420  0B04                     l5930:	
  4421                           ;main.c: 186:         } else {
  4422                           
  4423                           
  4424                           ;main.c: 202:         if(ir_flag == IR_DONE || ir_flag == IR_REPEAT){
  4425  0B04  3002               	movlw	2
  4426  0B05  0669               	xorwf	_ir_flag,w	;volatile
  4427  0B06  1903               	btfsc	3,2
  4428  0B07  2B0C               	goto	l5934
  4429  0B08  3003               	movlw	3
  4430  0B09  0669               	xorwf	_ir_flag,w	;volatile
  4431  0B0A  1D03               	btfss	3,2
  4432  0B0B  2A64               	goto	l1222
  4433  0B0C                     l5934:
  4434                           
  4435                           ;main.c: 204:             temp8 = reverseBits(ir_address);
  4436  0B0C  086B               	movf	_ir_address,w	;volatile
  4437  0B0D  3195  2530  318A   	fcall	_reverseBits
  4438  0B10  00DA               	movwf	??_main
  4439  0B11  085A               	movf	??_main,w
  4440  0B12  00DF               	movwf	main@temp8
  4441                           
  4442                           ;main.c: 206:             LCD_Digit1Num((temp8 >> 4) & 0x000F);
  4443  0B13  085F               	movf	main@temp8,w
  4444  0B14  00DA               	movwf	??_main
  4445  0B15  3004               	movlw	4
  4446  0B16                     u3855:
  4447  0B16  36DA               	lsrf	??_main,f
  4448  0B17  0B89               	decfsz	9,f
  4449  0B18  2B16               	goto	u3855
  4450  0B19  085A               	movf	??_main,w
  4451  0B1A  390F               	andlw	15
  4452  0B1B  318C  2485  318A   	fcall	_LCD_Digit1Num
  4453                           
  4454                           ;main.c: 207:             LCD_Digit2Num(temp8 & 0x000F);
  4455  0B1E  0020               	movlb	0	; select bank0
  4456  0B1F  085F               	movf	main@temp8,w
  4457  0B20  390F               	andlw	15
  4458  0B21  318E  2642  318A   	fcall	_LCD_Digit2Num
  4459                           
  4460                           ;main.c: 209:             LCDDATA0bits.SEG4COM0 = 1;
  4461  0B24  1620               	bsf	32,4	;volatile
  4462                           
  4463                           ;main.c: 211:             temp8 = reverseBits(ir_command);
  4464  0B25  0020               	movlb	0	; select bank0
  4465  0B26  086A               	movf	_ir_command,w	;volatile
  4466  0B27  3195  2530  318A   	fcall	_reverseBits
  4467  0B2A  00DA               	movwf	??_main
  4468  0B2B  085A               	movf	??_main,w
  4469  0B2C  00DF               	movwf	main@temp8
  4470                           
  4471                           ;main.c: 213:             LCD_Digit3Num((temp8 >> 4) & 0x000F);
  4472  0B2D  085F               	movf	main@temp8,w
  4473  0B2E  00DA               	movwf	??_main
  4474  0B2F  3004               	movlw	4
  4475  0B30                     u3865:
  4476  0B30  36DA               	lsrf	??_main,f
  4477  0B31  0B89               	decfsz	9,f
  4478  0B32  2B30               	goto	u3865
  4479  0B33  085A               	movf	??_main,w
  4480  0B34  390F               	andlw	15
  4481  0B35  3185  2519  318A   	fcall	_LCD_Digit3Num
  4482                           
  4483                           ;main.c: 214:             LCD_Digit4Num(temp8 & 0x000F);
  4484  0B38  0020               	movlb	0	; select bank0
  4485  0B39  085F               	movf	main@temp8,w
  4486  0B3A  390F               	andlw	15
  4487  0B3B  3183  233D  318A   	fcall	_LCD_Digit4Num
  4488                           
  4489                           ;main.c: 216:             ir_flag = IR_NONE;
  4490  0B3E  0020               	movlb	0	; select bank0
  4491  0B3F  01E9               	clrf	_ir_flag	;volatile
  4492  0B40  2A64               	goto	l1222
  4493  0B41                     __end_of_main:
  4494                           
  4495                           	psect	text1
  4496  1530                     __ptext1:	
  4497 ;; *************** function _reverseBits *****************
  4498 ;; Defined at:
  4499 ;;		line 457 in file "main.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  b               1    wreg     unsigned char 
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  b               1    3[BANK0 ] unsigned char 
  4504 ;; Return value:  Size  Location     Type
  4505 ;;                  1    wreg      unsigned char 
  4506 ;; Registers used:
  4507 ;;		wreg, status,2, status,0
  4508 ;; Tracked objects:
  4509 ;;		On entry : 1F/0
  4510 ;;		On exit  : 1F/0
  4511 ;;		Unchanged: 0/0
  4512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4514 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4515 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4516 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4517 ;;Total ram usage:        4 bytes
  4518 ;; Hardware stack levels used:    1
  4519 ;; Hardware stack levels required when called:    4
  4520 ;; This function calls:
  4521 ;;		Nothing
  4522 ;; This function is called by:
  4523 ;;		_main
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           
  4528                           ;psect for function _reverseBits
  4529  1530                     _reverseBits:
  4530                           
  4531                           ;incstack = 0
  4532                           ; Regs used in _reverseBits: [wreg+status,2+status,0]
  4533                           ;reverseBits@b stored from wreg
  4534  1530  00A3               	movwf	reverseBits@b
  4535                           
  4536                           ;main.c: 458:    b = (b & 0b11110000) >> 4 | (b & 0b00001111) << 4;
  4537  1531  0823               	movf	reverseBits@b,w
  4538  1532  390F               	andlw	15
  4539  1533  00A0               	movwf	??_reverseBits
  4540  1534  3004               	movlw	4
  4541  1535                     u3675:
  4542  1535  35A0               	lslf	??_reverseBits,f
  4543  1536  0B89               	decfsz	9,f
  4544  1537  2D35               	goto	u3675
  4545  1538  0823               	movf	reverseBits@b,w
  4546  1539  00A1               	movwf	??_reverseBits+1
  4547  153A  3004               	movlw	4
  4548  153B                     u3685:
  4549  153B  36A1               	lsrf	??_reverseBits+1,f
  4550  153C  0B89               	decfsz	9,f
  4551  153D  2D3B               	goto	u3685
  4552  153E  0821               	movf	??_reverseBits+1,w
  4553  153F  390F               	andlw	15
  4554  1540  0420               	iorwf	??_reverseBits,w
  4555  1541  00A2               	movwf	??_reverseBits+2
  4556  1542  0822               	movf	??_reverseBits+2,w
  4557  1543  00A3               	movwf	reverseBits@b
  4558                           
  4559                           ;main.c: 459:    b = (b & 0b11001100) >> 2 | (b & 0b00110011) << 2;
  4560  1544  0823               	movf	reverseBits@b,w
  4561  1545  3933               	andlw	51
  4562  1546  00A0               	movwf	??_reverseBits
  4563  1547  3002               	movlw	2
  4564  1548                     u3695:
  4565  1548  35A0               	lslf	??_reverseBits,f
  4566  1549  0B89               	decfsz	9,f
  4567  154A  2D48               	goto	u3695
  4568  154B  0823               	movf	reverseBits@b,w
  4569  154C  00A1               	movwf	??_reverseBits+1
  4570  154D  3002               	movlw	2
  4571  154E                     u3705:
  4572  154E  36A1               	lsrf	??_reverseBits+1,f
  4573  154F  0B89               	decfsz	9,f
  4574  1550  2D4E               	goto	u3705
  4575  1551  0821               	movf	??_reverseBits+1,w
  4576  1552  3933               	andlw	51
  4577  1553  0420               	iorwf	??_reverseBits,w
  4578  1554  00A2               	movwf	??_reverseBits+2
  4579  1555  0822               	movf	??_reverseBits+2,w
  4580  1556  00A3               	movwf	reverseBits@b
  4581                           
  4582                           ;main.c: 460:    b = (b & 0b10101010) >> 1 | (b & 0b01010101) << 1;
  4583  1557  0823               	movf	reverseBits@b,w
  4584  1558  3955               	andlw	85
  4585  1559  00A0               	movwf	??_reverseBits
  4586  155A  3001               	movlw	1
  4587  155B                     u3715:
  4588  155B  35A0               	lslf	??_reverseBits,f
  4589  155C  0B89               	decfsz	9,f
  4590  155D  2D5B               	goto	u3715
  4591  155E  3623               	lsrf	reverseBits@b,w
  4592  155F  3955               	andlw	85
  4593  1560  0420               	iorwf	??_reverseBits,w
  4594  1561  00A1               	movwf	??_reverseBits+1
  4595  1562  0821               	movf	??_reverseBits+1,w
  4596  1563  00A3               	movwf	reverseBits@b
  4597                           
  4598                           ;main.c: 461:    return b;
  4599  1564  0823               	movf	reverseBits@b,w
  4600  1565  0008               	return
  4601  1566                     __end_of_reverseBits:
  4602                           
  4603                           	psect	text2
  4604  0B41                     __ptext2:	
  4605 ;; *************** function _readGesture *****************
  4606 ;; Defined at:
  4607 ;;		line 428 in file "APDS9960.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;		None
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;  i               2   56[BANK0 ] int 
  4612 ;;  motion          2   51[BANK0 ] int 
  4613 ;;  fifo_level      1   55[BANK0 ] unsigned char 
  4614 ;;  bytes_read      1   54[BANK0 ] unsigned char 
  4615 ;;  gstatus         1   53[BANK0 ] unsigned char 
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  2   40[BANK0 ] int 
  4618 ;; Registers used:
  4619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4620 ;; Tracked objects:
  4621 ;;		On entry : 1F/F
  4622 ;;		On exit  : 1F/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4625 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4628 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4629 ;;Total ram usage:       18 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:   13
  4632 ;; This function calls:
  4633 ;;		_decodeGesture
  4634 ;;		_i2c_read1ByteRegister
  4635 ;;		_i2c_readDataBlock
  4636 ;;		_processGestureData
  4637 ;;		_resetGestureParameters
  4638 ;; This function is called by:
  4639 ;;		_main
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           
  4644                           ;psect for function _readGesture
  4645  0B41                     _readGesture:
  4646                           
  4647                           ;APDS9960.c: 431:     uint8_t bytes_read = 0;
  4648                           
  4649                           ;incstack = 0
  4650                           ; Regs used in _readGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4651  0B41  0020               	movlb	0	; select bank0
  4652  0B42  01D6               	clrf	readGesture@bytes_read
  4653                           
  4654                           ;APDS9960.c: 433:     uint8_t gstatus;;APDS9960.c: 434:     int motion;;APDS9960.c: 435:
      +                               int i;;APDS9960.c: 438:     if( !(i2c_read1ByteRegister(0x39,0xAF) & 0b00000001) ||
      +                           !((i2c_read1ByteRegister(0x39,0x80)) & 0b01000001) ) {
  4655  0B43  30AF               	movlw	175
  4656  0B44  00CA               	movwf	??_readGesture
  4657  0B45  084A               	movf	??_readGesture,w
  4658  0B46  00B6               	movwf	i2c_read1ByteRegister@reg
  4659  0B47  3039               	movlw	57
  4660  0B48  3196  2624  318B   	fcall	_i2c_read1ByteRegister
  4661  0B4B  3901               	andlw	1
  4662  0B4C  1903               	btfsc	3,2
  4663  0B4D  2B59               	goto	l5810
  4664  0B4E  3080               	movlw	128
  4665  0B4F  00CA               	movwf	??_readGesture
  4666  0B50  084A               	movf	??_readGesture,w
  4667  0B51  00B6               	movwf	i2c_read1ByteRegister@reg
  4668  0B52  3039               	movlw	57
  4669  0B53  3196  2624  318B   	fcall	_i2c_read1ByteRegister
  4670  0B56  3941               	andlw	65
  4671  0B57  1D03               	btfss	3,2
  4672  0B58  2C4B               	goto	l1692
  4673  0B59                     l5810:
  4674                           
  4675                           ;APDS9960.c: 439:         return DIR_NONE;
  4676  0B59  01C8               	clrf	?_readGesture
  4677  0B5A  01C9               	clrf	?_readGesture+1
  4678  0B5B  0008               	return
  4679  0B5C                     l5820:	
  4680                           ;APDS9960.c: 440:     }
  4681                           
  4682                           
  4683                           ;APDS9960.c: 455:             fifo_level = i2c_read1ByteRegister(0x39,0xAE);
  4684  0B5C  30AE               	movlw	174
  4685  0B5D  00CA               	movwf	??_readGesture
  4686  0B5E  084A               	movf	??_readGesture,w
  4687  0B5F  00B6               	movwf	i2c_read1ByteRegister@reg
  4688  0B60  3039               	movlw	57
  4689  0B61  3196  2624  318B   	fcall	_i2c_read1ByteRegister
  4690  0B64  00CB               	movwf	??_readGesture+1
  4691  0B65  084B               	movf	??_readGesture+1,w
  4692  0B66  00D7               	movwf	readGesture@fifo_level
  4693                           
  4694                           ;APDS9960.c: 463:             if( fifo_level > 0) {
  4695  0B67  0857               	movf	readGesture@fifo_level,w
  4696  0B68  1903               	btfsc	3,2
  4697  0B69  2C4B               	goto	l1692
  4698                           
  4699                           ;APDS9960.c: 465:                 i2c_readDataBlock(0x39,0xFC,
  4700  0B6A  30FC               	movlw	252
  4701  0B6B  00CA               	movwf	??_readGesture
  4702  0B6C  084A               	movf	??_readGesture,w
  4703  0B6D  00B6               	movwf	i2c_readDataBlock@reg
  4704  0B6E  3070               	movlw	112
  4705  0B6F  00B7               	movwf	i2c_readDataBlock@data
  4706  0B70  3023               	movlw	35
  4707  0B71  00B8               	movwf	i2c_readDataBlock@data+1
  4708  0B72  0857               	movf	readGesture@fifo_level,w
  4709  0B73  00CB               	movwf	??_readGesture+1
  4710  0B74  01CC               	clrf	??_readGesture+2
  4711  0B75  35CB               	lslf	??_readGesture+1,f
  4712  0B76  0DCC               	rlf	??_readGesture+2,f
  4713  0B77  35CB               	lslf	??_readGesture+1,f
  4714  0B78  0DCC               	rlf	??_readGesture+2,f
  4715  0B79  084B               	movf	??_readGesture+1,w
  4716  0B7A  00B9               	movwf	i2c_readDataBlock@len
  4717  0B7B  084C               	movf	??_readGesture+2,w
  4718  0B7C  00BA               	movwf	i2c_readDataBlock@len+1
  4719  0B7D  3039               	movlw	57
  4720  0B7E  3195  2566  318B   	fcall	_i2c_readDataBlock
  4721                           
  4722                           ;APDS9960.c: 469:                 bytes_read = (fifo_level * 4);
  4723  0B81  0857               	movf	readGesture@fifo_level,w
  4724  0B82  00CA               	movwf	??_readGesture
  4725  0B83  3001               	movlw	1
  4726  0B84                     u3635:
  4727  0B84  35CA               	lslf	??_readGesture,f
  4728  0B85  3EFF               	addlw	-1
  4729  0B86  1D03               	skipz
  4730  0B87  2B84               	goto	u3635
  4731  0B88  354A               	lslf	??_readGesture,w
  4732  0B89  00CB               	movwf	??_readGesture+1
  4733  0B8A  084B               	movf	??_readGesture+1,w
  4734  0B8B  00D6               	movwf	readGesture@bytes_read
  4735                           
  4736                           ;APDS9960.c: 487:                 if( bytes_read >= 4 ) {
  4737  0B8C  3004               	movlw	4
  4738  0B8D  0256               	subwf	readGesture@bytes_read,w
  4739  0B8E  1C03               	skipc
  4740  0B8F  2C4B               	goto	l1692
  4741                           
  4742                           ;APDS9960.c: 488:                     for( i = 0; i < bytes_read; i += 4 ) {
  4743  0B90  01D8               	clrf	readGesture@i
  4744  0B91  01D9               	clrf	readGesture@i+1
  4745  0B92                     l5836:
  4746  0B92  0859               	movf	readGesture@i+1,w
  4747  0B93  3A80               	xorlw	128
  4748  0B94  00CA               	movwf	??_readGesture
  4749  0B95  3080               	movlw	128
  4750  0B96  024A               	subwf	??_readGesture,w
  4751  0B97  1D03               	skipz
  4752  0B98  2B9B               	goto	u3655
  4753  0B99  0856               	movf	readGesture@bytes_read,w
  4754  0B9A  0258               	subwf	readGesture@i,w
  4755  0B9B                     u3655:
  4756  0B9B  1803               	btfsc	3,0
  4757  0B9C  2C38               	goto	l5838
  4758                           
  4759                           ;APDS9960.c: 489:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  4760  0B9D  3070               	movlw	112
  4761  0B9E  0020               	movlb	0	; select bank0
  4762  0B9F  00CA               	movwf	??_readGesture
  4763  0BA0  3023               	movlw	35
  4764  0BA1  00CB               	movwf	??_readGesture+1
  4765  0BA2  0858               	movf	readGesture@i,w
  4766  0BA3  074A               	addwf	??_readGesture,w
  4767  0BA4  0086               	movwf	6
  4768  0BA5  0859               	movf	readGesture@i+1,w
  4769  0BA6  3D4B               	addwfc	??_readGesture+1,w
  4770  0BA7  0087               	movwf	7
  4771  0BA8  0801               	movf	1,w
  4772  0BA9  00CC               	movwf	??_readGesture+2
  4773  0BAA  306C               	movlw	108
  4774  0BAB  0086               	movwf	6
  4775  0BAC  3023               	movlw	35
  4776  0BAD  0087               	movwf	7
  4777  0BAE  0801               	movf	1,w
  4778  0BAF  3EEC               	addlw	236
  4779  0BB0  00CD               	movwf	??_readGesture+3
  4780  0BB1  01CE               	clrf	??_readGesture+4
  4781  0BB2  3022               	movlw	34
  4782  0BB3  3DCE               	addwfc	??_readGesture+4,f
  4783  0BB4  084D               	movf	??_readGesture+3,w
  4784  0BB5  0086               	movwf	6
  4785  0BB6  084E               	movf	??_readGesture+4,w
  4786  0BB7  0087               	movwf	7
  4787  0BB8  084C               	movf	??_readGesture+2,w
  4788  0BB9  0081               	movwf	1
  4789                           
  4790                           ;APDS9960.c: 491:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  4791  0BBA  3071               	movlw	113
  4792  0BBB  00CA               	movwf	??_readGesture
  4793  0BBC  3023               	movlw	35
  4794  0BBD  00CB               	movwf	??_readGesture+1
  4795  0BBE  0858               	movf	readGesture@i,w
  4796  0BBF  074A               	addwf	??_readGesture,w
  4797  0BC0  0086               	movwf	6
  4798  0BC1  0859               	movf	readGesture@i+1,w
  4799  0BC2  3D4B               	addwfc	??_readGesture+1,w
  4800  0BC3  0087               	movwf	7
  4801  0BC4  0801               	movf	1,w
  4802  0BC5  00CC               	movwf	??_readGesture+2
  4803  0BC6  306C               	movlw	108
  4804  0BC7  0086               	movwf	6
  4805  0BC8  3023               	movlw	35
  4806  0BC9  0087               	movwf	7
  4807  0BCA  0801               	movf	1,w
  4808  0BCB  00CD               	movwf	??_readGesture+3
  4809  0BCC  01CE               	clrf	??_readGesture+4
  4810  0BCD  300C               	movlw	12
  4811  0BCE  00CF               	movwf	??_readGesture+5
  4812  0BCF  3023               	movlw	35
  4813  0BD0  00D0               	movwf	??_readGesture+6
  4814  0BD1  084D               	movf	??_readGesture+3,w
  4815  0BD2  074F               	addwf	??_readGesture+5,w
  4816  0BD3  00D1               	movwf	??_readGesture+7
  4817  0BD4  084E               	movf	??_readGesture+4,w
  4818  0BD5  3D50               	addwfc	??_readGesture+6,w
  4819  0BD6  00D2               	movwf	??_readGesture+8
  4820  0BD7  0851               	movf	??_readGesture+7,w
  4821  0BD8  0086               	movwf	6
  4822  0BD9  0852               	movf	??_readGesture+8,w
  4823  0BDA  0087               	movwf	7
  4824  0BDB  084C               	movf	??_readGesture+2,w
  4825  0BDC  0081               	movwf	1
  4826                           
  4827                           ;APDS9960.c: 493:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  4828  0BDD  3072               	movlw	114
  4829  0BDE  00CA               	movwf	??_readGesture
  4830  0BDF  3023               	movlw	35
  4831  0BE0  00CB               	movwf	??_readGesture+1
  4832  0BE1  0858               	movf	readGesture@i,w
  4833  0BE2  074A               	addwf	??_readGesture,w
  4834  0BE3  0086               	movwf	6
  4835  0BE4  0859               	movf	readGesture@i+1,w
  4836  0BE5  3D4B               	addwfc	??_readGesture+1,w
  4837  0BE6  0087               	movwf	7
  4838  0BE7  0801               	movf	1,w
  4839  0BE8  00CC               	movwf	??_readGesture+2
  4840  0BE9  306C               	movlw	108
  4841  0BEA  0086               	movwf	6
  4842  0BEB  3023               	movlw	35
  4843  0BEC  0087               	movwf	7
  4844  0BED  0801               	movf	1,w
  4845  0BEE  00CD               	movwf	??_readGesture+3
  4846  0BEF  01CE               	clrf	??_readGesture+4
  4847  0BF0  302C               	movlw	44
  4848  0BF1  00CF               	movwf	??_readGesture+5
  4849  0BF2  3023               	movlw	35
  4850  0BF3  00D0               	movwf	??_readGesture+6
  4851  0BF4  084D               	movf	??_readGesture+3,w
  4852  0BF5  074F               	addwf	??_readGesture+5,w
  4853  0BF6  00D1               	movwf	??_readGesture+7
  4854  0BF7  084E               	movf	??_readGesture+4,w
  4855  0BF8  3D50               	addwfc	??_readGesture+6,w
  4856  0BF9  00D2               	movwf	??_readGesture+8
  4857  0BFA  0851               	movf	??_readGesture+7,w
  4858  0BFB  0086               	movwf	6
  4859  0BFC  0852               	movf	??_readGesture+8,w
  4860  0BFD  0087               	movwf	7
  4861  0BFE  084C               	movf	??_readGesture+2,w
  4862  0BFF  0081               	movwf	1
  4863                           
  4864                           ;APDS9960.c: 495:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  4865  0C00  3073               	movlw	115
  4866  0C01  00CA               	movwf	??_readGesture
  4867  0C02  3023               	movlw	35
  4868  0C03  00CB               	movwf	??_readGesture+1
  4869  0C04  0858               	movf	readGesture@i,w
  4870  0C05  074A               	addwf	??_readGesture,w
  4871  0C06  0086               	movwf	6
  4872  0C07  0859               	movf	readGesture@i+1,w
  4873  0C08  3D4B               	addwfc	??_readGesture+1,w
  4874  0C09  0087               	movwf	7
  4875  0C0A  0801               	movf	1,w
  4876  0C0B  00CC               	movwf	??_readGesture+2
  4877  0C0C  306C               	movlw	108
  4878  0C0D  0086               	movwf	6
  4879  0C0E  3023               	movlw	35
  4880  0C0F  0087               	movwf	7
  4881  0C10  0801               	movf	1,w
  4882  0C11  00CD               	movwf	??_readGesture+3
  4883  0C12  01CE               	clrf	??_readGesture+4
  4884  0C13  304C               	movlw	76
  4885  0C14  00CF               	movwf	??_readGesture+5
  4886  0C15  3023               	movlw	35
  4887  0C16  00D0               	movwf	??_readGesture+6
  4888  0C17  084D               	movf	??_readGesture+3,w
  4889  0C18  074F               	addwf	??_readGesture+5,w
  4890  0C19  00D1               	movwf	??_readGesture+7
  4891  0C1A  084E               	movf	??_readGesture+4,w
  4892  0C1B  3D50               	addwfc	??_readGesture+6,w
  4893  0C1C  00D2               	movwf	??_readGesture+8
  4894  0C1D  0851               	movf	??_readGesture+7,w
  4895  0C1E  0086               	movwf	6
  4896  0C1F  0852               	movf	??_readGesture+8,w
  4897  0C20  0087               	movwf	7
  4898  0C21  084C               	movf	??_readGesture+2,w
  4899  0C22  0081               	movwf	1
  4900                           
  4901                           ;APDS9960.c: 497:                         gesture_data_.index++;
  4902  0C23  3001               	movlw	1
  4903  0C24  00CA               	movwf	??_readGesture
  4904  0C25  306C               	movlw	108
  4905  0C26  0086               	movwf	6
  4906  0C27  3023               	movlw	35
  4907  0C28  0087               	movwf	7
  4908  0C29  084A               	movf	??_readGesture,w
  4909  0C2A  0781               	addwf	1,f
  4910                           
  4911                           ;APDS9960.c: 498:                         gesture_data_.total_gestures++;
  4912  0C2B  3001               	movlw	1
  4913  0C2C  00CA               	movwf	??_readGesture
  4914  0C2D  306D               	movlw	109
  4915  0C2E  0086               	movwf	6
  4916  0C2F  3023               	movlw	35
  4917  0C30  0087               	movwf	7
  4918  0C31  084A               	movf	??_readGesture,w
  4919  0C32  0781               	addwf	1,f
  4920                           
  4921                           ;APDS9960.c: 499:                     }
  4922  0C33  3004               	movlw	4
  4923  0C34  07D8               	addwf	readGesture@i,f
  4924  0C35  3000               	movlw	0
  4925  0C36  3DD9               	addwfc	readGesture@i+1,f
  4926  0C37  2B92               	goto	l5836
  4927  0C38                     l5838:
  4928                           
  4929                           ;APDS9960.c: 511:                     if( processGestureData() ) {
  4930  0C38  3180  2065  318B   	fcall	_processGestureData
  4931  0C3B  3A00               	xorlw	0
  4932  0C3C  1903               	skipnz
  4933  0C3D  2C41               	goto	l5842
  4934                           
  4935                           ;APDS9960.c: 512:                         if( decodeGesture() ) {
  4936  0C3E  3189  2136  318B   	fcall	_decodeGesture
  4937  0C41                     l5842:
  4938                           
  4939                           ;APDS9960.c: 521:                     gesture_data_.index = 0;
  4940  0C41  306C               	movlw	108
  4941  0C42  0086               	movwf	6
  4942  0C43  3023               	movlw	35
  4943  0C44  0087               	movwf	7
  4944  0C45  0181               	clrf	1
  4945                           
  4946                           ;APDS9960.c: 522:                     gesture_data_.total_gestures = 0;
  4947  0C46  306D               	movlw	109
  4948  0C47  0086               	movwf	6
  4949  0C48  3023               	movlw	35
  4950  0C49  0087               	movwf	7
  4951  0C4A  0181               	clrf	1
  4952  0C4B                     l1692:	
  4953                           ;APDS9960.c: 443:     while(1) {
  4954                           
  4955  0C4B  0064               	clrwdt	;# 
  4956                           
  4957                           ;APDS9960.c: 446:         _delay((unsigned long)((30)*(32000000/4000.0)));
  4958  0C4C  3002               	movlw	2
  4959  0C4D  0020               	movlb	0	; select bank0
  4960  0C4E  00CB               	movwf	??_readGesture+1
  4961  0C4F  3038               	movlw	56
  4962  0C50  00CA               	movwf	??_readGesture
  4963  0C51  30AD               	movlw	173
  4964  0C52                     u3877:
  4965  0C52  0B89               	decfsz	9,f
  4966  0C53  2C52               	goto	u3877
  4967  0C54  0BCA               	decfsz	??_readGesture,f
  4968  0C55  2C52               	goto	u3877
  4969  0C56  0BCB               	decfsz	??_readGesture+1,f
  4970  0C57  2C52               	goto	u3877
  4971                           
  4972                           ;APDS9960.c: 449:         gstatus = i2c_read1ByteRegister(0x39,0xAF);
  4973  0C58  30AF               	movlw	175
  4974  0C59  0020               	movlb	0	; select bank0
  4975  0C5A  00CA               	movwf	??_readGesture
  4976  0C5B  084A               	movf	??_readGesture,w
  4977  0C5C  00B6               	movwf	i2c_read1ByteRegister@reg
  4978  0C5D  3039               	movlw	57
  4979  0C5E  3196  2624  318B   	fcall	_i2c_read1ByteRegister
  4980  0C61  00CB               	movwf	??_readGesture+1
  4981  0C62  084B               	movf	??_readGesture+1,w
  4982  0C63  00D5               	movwf	readGesture@gstatus
  4983                           
  4984                           ;APDS9960.c: 452:         if( (gstatus & 0b00000001) == 0b00000001 ) {
  4985  0C64  1855               	btfsc	readGesture@gstatus,0
  4986  0C65  2B5C               	goto	l5820
  4987                           
  4988                           ;APDS9960.c: 528:             _delay((unsigned long)((30)*(32000000/4000.0)));
  4989  0C66  3002               	movlw	2
  4990  0C67  0020               	movlb	0	; select bank0
  4991  0C68  00CB               	movwf	??_readGesture+1
  4992  0C69  3038               	movlw	56
  4993  0C6A  00CA               	movwf	??_readGesture
  4994  0C6B  30AD               	movlw	173
  4995  0C6C                     u3887:
  4996  0C6C  0B89               	decfsz	9,f
  4997  0C6D  2C6C               	goto	u3887
  4998  0C6E  0BCA               	decfsz	??_readGesture,f
  4999  0C6F  2C6C               	goto	u3887
  5000  0C70  0BCB               	decfsz	??_readGesture+1,f
  5001  0C71  2C6C               	goto	u3887
  5002                           
  5003                           ;APDS9960.c: 529:             decodeGesture();
  5004  0C72  3189  2136  318B   	fcall	_decodeGesture
  5005                           
  5006                           ;APDS9960.c: 530:             motion = gesture_motion_;
  5007  0C75  0021               	movlb	1	; select bank1
  5008  0C76  0855               	movf	(_gesture_motion_+1)^(0+128),w
  5009  0C77  0020               	movlb	0	; select bank0
  5010  0C78  00D4               	movwf	readGesture@motion+1
  5011  0C79  0021               	movlb	1	; select bank1
  5012  0C7A  0854               	movf	_gesture_motion_^(0+128),w
  5013  0C7B  0020               	movlb	0	; select bank0
  5014  0C7C  00D3               	movwf	readGesture@motion
  5015                           
  5016                           ;APDS9960.c: 535:             resetGestureParameters();
  5017  0C7D  3191  2197         	fcall	_resetGestureParameters
  5018                           
  5019                           ;APDS9960.c: 536:             return motion;
  5020  0C7F  0020               	movlb	0	; select bank0
  5021  0C80  0854               	movf	readGesture@motion+1,w
  5022  0C81  00C9               	movwf	?_readGesture+1
  5023  0C82  0853               	movf	readGesture@motion,w
  5024  0C83  00C8               	movwf	?_readGesture
  5025  0C84  0008               	return
  5026  0C85                     __end_of_readGesture:
  5027                           
  5028                           	psect	text3
  5029  0065                     __ptext3:	
  5030 ;; *************** function _processGestureData *****************
  5031 ;; Defined at:
  5032 ;;		line 711 in file "APDS9960.c"
  5033 ;; Parameters:    Size  Location     Type
  5034 ;;		None
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;  i               2   38[BANK0 ] int 
  5037 ;;  lr_delta        2   36[BANK0 ] int 
  5038 ;;  ud_delta        2   34[BANK0 ] int 
  5039 ;;  lr_ratio_las    2   24[BANK0 ] int 
  5040 ;;  ud_ratio_las    2   22[BANK0 ] int 
  5041 ;;  lr_ratio_fir    2   20[BANK0 ] int 
  5042 ;;  ud_ratio_fir    2   18[BANK0 ] int 
  5043 ;;  r_first         1   33[BANK0 ] unsigned char 
  5044 ;;  l_first         1   32[BANK0 ] unsigned char 
  5045 ;;  d_first         1   31[BANK0 ] unsigned char 
  5046 ;;  u_first         1   30[BANK0 ] unsigned char 
  5047 ;;  r_last          1   29[BANK0 ] unsigned char 
  5048 ;;  l_last          1   28[BANK0 ] unsigned char 
  5049 ;;  d_last          1   27[BANK0 ] unsigned char 
  5050 ;;  u_last          1   26[BANK0 ] unsigned char 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  1    wreg      _Bool 
  5053 ;; Registers used:
  5054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5061 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5062 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5063 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5064 ;;Total ram usage:       25 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    5
  5067 ;; This function calls:
  5068 ;;		___awdiv
  5069 ;;		___wmul
  5070 ;;		_abs
  5071 ;; This function is called by:
  5072 ;;		_readGesture
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           
  5077                           ;psect for function _processGestureData
  5078  0065                     _processGestureData:
  5079                           
  5080                           ;APDS9960.c: 713:     uint8_t u_first = 0;
  5081                           
  5082                           ;incstack = 0
  5083                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5084  0065  0020               	movlb	0	; select bank0
  5085  0066  01BE               	clrf	processGestureData@u_first
  5086                           
  5087                           ;APDS9960.c: 714:     uint8_t d_first = 0;
  5088  0067  01BF               	clrf	processGestureData@d_first
  5089                           
  5090                           ;APDS9960.c: 715:     uint8_t l_first = 0;
  5091  0068  01C0               	clrf	processGestureData@l_first
  5092                           
  5093                           ;APDS9960.c: 716:     uint8_t r_first = 0;
  5094  0069  01C1               	clrf	processGestureData@r_first
  5095                           
  5096                           ;APDS9960.c: 717:     uint8_t u_last = 0;
  5097  006A  01BA               	clrf	processGestureData@u_last
  5098                           
  5099                           ;APDS9960.c: 718:     uint8_t d_last = 0;
  5100  006B  01BB               	clrf	processGestureData@d_last
  5101                           
  5102                           ;APDS9960.c: 719:     uint8_t l_last = 0;
  5103  006C  01BC               	clrf	processGestureData@l_last
  5104                           
  5105                           ;APDS9960.c: 720:     uint8_t r_last = 0;
  5106  006D  01BD               	clrf	processGestureData@r_last
  5107                           
  5108                           ;APDS9960.c: 721:     int ud_ratio_first;;APDS9960.c: 722:     int lr_ratio_first;;APDS9
      +                          960.c: 723:     int ud_ratio_last;;APDS9960.c: 724:     int lr_ratio_last;;APDS9960.c: 7
      +                          25:     int ud_delta;;APDS9960.c: 726:     int lr_delta;;APDS9960.c: 727:     int i;;APD
      +                          S9960.c: 730:     if( gesture_data_.total_gestures <= 4 ) {
  5109  006E  306D               	movlw	109
  5110  006F  0086               	movwf	6
  5111  0070  3023               	movlw	35
  5112  0071  0087               	movwf	7
  5113  0072  3005               	movlw	5
  5114  0073  0201               	subwf	1,w
  5115  0074  1803               	skipnc
  5116  0075  2878               	goto	l5364
  5117  0076                     l5360:
  5118                           
  5119                           ;APDS9960.c: 731:         return 0;
  5120  0076  3000               	movlw	0
  5121  0077  0008               	return
  5122  0078                     l5364:
  5123                           
  5124                           ;APDS9960.c: 735:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  5125  0078  306D               	movlw	109
  5126  0079  0086               	movwf	6
  5127  007A  3023               	movlw	35
  5128  007B  0087               	movwf	7
  5129  007C  3021               	movlw	33
  5130  007D  0201               	subwf	1,w
  5131  007E  1803               	skipnc
  5132  007F  299D               	goto	l5416
  5133  0080  306D               	movlw	109
  5134  0081  0086               	movwf	6
  5135  0082  3023               	movlw	35
  5136  0083  0087               	movwf	7
  5137  0084  0801               	movf	1,w
  5138  0085  1903               	btfsc	3,2
  5139  0086  299D               	goto	l5416
  5140                           
  5141                           ;APDS9960.c: 736: ;APDS9960.c: 739:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  5142  0087  01C6               	clrf	processGestureData@i
  5143  0088  01C7               	clrf	processGestureData@i+1
  5144  0089  288E               	goto	l5382
  5145  008A                     l5380:	
  5146                           ;APDS9960.c: 749:                 break;
  5147                           
  5148                           
  5149                           ;APDS9960.c: 751:         }
  5150  008A  3001               	movlw	1
  5151  008B  07C6               	addwf	processGestureData@i,f
  5152  008C  3000               	movlw	0
  5153  008D  3DC7               	addwfc	processGestureData@i+1,f
  5154  008E                     l5382:
  5155  008E  306D               	movlw	109
  5156  008F  0086               	movwf	6
  5157  0090  3023               	movlw	35
  5158  0091  0087               	movwf	7
  5159  0092  0847               	movf	processGestureData@i+1,w
  5160  0093  3A80               	xorlw	128
  5161  0094  00AF               	movwf	??_processGestureData
  5162  0095  3080               	movlw	128
  5163  0096  022F               	subwf	??_processGestureData,w
  5164  0097  1D03               	skipz
  5165  0098  289B               	goto	u2745
  5166  0099  0801               	movf	1,w
  5167  009A  0246               	subwf	processGestureData@i,w
  5168  009B                     u2745:
  5169  009B  1803               	btfsc	3,0
  5170  009C  290E               	goto	l5384
  5171                           
  5172                           ;APDS9960.c: 740:             if( (gesture_data_.u_data[i] > 10) &&
  5173  009D  30EC               	movlw	236
  5174  009E  0020               	movlb	0	; select bank0
  5175  009F  00AF               	movwf	??_processGestureData
  5176  00A0  3022               	movlw	34
  5177  00A1  00B0               	movwf	??_processGestureData+1
  5178  00A2  0846               	movf	processGestureData@i,w
  5179  00A3  072F               	addwf	??_processGestureData,w
  5180  00A4  0086               	movwf	6
  5181  00A5  0847               	movf	processGestureData@i+1,w
  5182  00A6  3D30               	addwfc	??_processGestureData+1,w
  5183  00A7  0087               	movwf	7
  5184  00A8  300B               	movlw	11
  5185  00A9  0201               	subwf	1,w
  5186  00AA  1C03               	skipc
  5187  00AB  288A               	goto	l5380
  5188  00AC  300C               	movlw	12
  5189  00AD  00AF               	movwf	??_processGestureData
  5190  00AE  3023               	movlw	35
  5191  00AF  00B0               	movwf	??_processGestureData+1
  5192  00B0  0846               	movf	processGestureData@i,w
  5193  00B1  072F               	addwf	??_processGestureData,w
  5194  00B2  0086               	movwf	6
  5195  00B3  0847               	movf	processGestureData@i+1,w
  5196  00B4  3D30               	addwfc	??_processGestureData+1,w
  5197  00B5  0087               	movwf	7
  5198  00B6  300B               	movlw	11
  5199  00B7  0201               	subwf	1,w
  5200  00B8  1C03               	skipc
  5201  00B9  288A               	goto	l5380
  5202  00BA  302C               	movlw	44
  5203  00BB  00AF               	movwf	??_processGestureData
  5204  00BC  3023               	movlw	35
  5205  00BD  00B0               	movwf	??_processGestureData+1
  5206  00BE  0846               	movf	processGestureData@i,w
  5207  00BF  072F               	addwf	??_processGestureData,w
  5208  00C0  0086               	movwf	6
  5209  00C1  0847               	movf	processGestureData@i+1,w
  5210  00C2  3D30               	addwfc	??_processGestureData+1,w
  5211  00C3  0087               	movwf	7
  5212  00C4  300B               	movlw	11
  5213  00C5  0201               	subwf	1,w
  5214  00C6  1C03               	skipc
  5215  00C7  288A               	goto	l5380
  5216  00C8  304C               	movlw	76
  5217  00C9  00AF               	movwf	??_processGestureData
  5218  00CA  3023               	movlw	35
  5219  00CB  00B0               	movwf	??_processGestureData+1
  5220  00CC  0846               	movf	processGestureData@i,w
  5221  00CD  072F               	addwf	??_processGestureData,w
  5222  00CE  0086               	movwf	6
  5223  00CF  0847               	movf	processGestureData@i+1,w
  5224  00D0  3D30               	addwfc	??_processGestureData+1,w
  5225  00D1  0087               	movwf	7
  5226  00D2  300B               	movlw	11
  5227  00D3  0201               	subwf	1,w
  5228  00D4  1C03               	skipc
  5229  00D5  288A               	goto	l5380
  5230                           
  5231                           ;APDS9960.c: 743:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 745:   
      +                                        u_first = gesture_data_.u_data[i];
  5232  00D6  30EC               	movlw	236
  5233  00D7  00AF               	movwf	??_processGestureData
  5234  00D8  3022               	movlw	34
  5235  00D9  00B0               	movwf	??_processGestureData+1
  5236  00DA  0846               	movf	processGestureData@i,w
  5237  00DB  072F               	addwf	??_processGestureData,w
  5238  00DC  0086               	movwf	6
  5239  00DD  0847               	movf	processGestureData@i+1,w
  5240  00DE  3D30               	addwfc	??_processGestureData+1,w
  5241  00DF  0087               	movwf	7
  5242  00E0  0801               	movf	1,w
  5243  00E1  00B1               	movwf	??_processGestureData+2
  5244  00E2  0831               	movf	??_processGestureData+2,w
  5245  00E3  00BE               	movwf	processGestureData@u_first
  5246                           
  5247                           ;APDS9960.c: 746:                 d_first = gesture_data_.d_data[i];
  5248  00E4  300C               	movlw	12
  5249  00E5  00AF               	movwf	??_processGestureData
  5250  00E6  3023               	movlw	35
  5251  00E7  00B0               	movwf	??_processGestureData+1
  5252  00E8  0846               	movf	processGestureData@i,w
  5253  00E9  072F               	addwf	??_processGestureData,w
  5254  00EA  0086               	movwf	6
  5255  00EB  0847               	movf	processGestureData@i+1,w
  5256  00EC  3D30               	addwfc	??_processGestureData+1,w
  5257  00ED  0087               	movwf	7
  5258  00EE  0801               	movf	1,w
  5259  00EF  00B1               	movwf	??_processGestureData+2
  5260  00F0  0831               	movf	??_processGestureData+2,w
  5261  00F1  00BF               	movwf	processGestureData@d_first
  5262                           
  5263                           ;APDS9960.c: 747:                 l_first = gesture_data_.l_data[i];
  5264  00F2  302C               	movlw	44
  5265  00F3  00AF               	movwf	??_processGestureData
  5266  00F4  3023               	movlw	35
  5267  00F5  00B0               	movwf	??_processGestureData+1
  5268  00F6  0846               	movf	processGestureData@i,w
  5269  00F7  072F               	addwf	??_processGestureData,w
  5270  00F8  0086               	movwf	6
  5271  00F9  0847               	movf	processGestureData@i+1,w
  5272  00FA  3D30               	addwfc	??_processGestureData+1,w
  5273  00FB  0087               	movwf	7
  5274  00FC  0801               	movf	1,w
  5275  00FD  00B1               	movwf	??_processGestureData+2
  5276  00FE  0831               	movf	??_processGestureData+2,w
  5277  00FF  00C0               	movwf	processGestureData@l_first
  5278                           
  5279                           ;APDS9960.c: 748:                 r_first = gesture_data_.r_data[i];
  5280  0100  304C               	movlw	76
  5281  0101  00AF               	movwf	??_processGestureData
  5282  0102  3023               	movlw	35
  5283  0103  00B0               	movwf	??_processGestureData+1
  5284  0104  0846               	movf	processGestureData@i,w
  5285  0105  072F               	addwf	??_processGestureData,w
  5286  0106  0086               	movwf	6
  5287  0107  0847               	movf	processGestureData@i+1,w
  5288  0108  3D30               	addwfc	??_processGestureData+1,w
  5289  0109  0087               	movwf	7
  5290  010A  0801               	movf	1,w
  5291  010B  00B1               	movwf	??_processGestureData+2
  5292  010C  0831               	movf	??_processGestureData+2,w
  5293  010D  00C1               	movwf	processGestureData@r_first
  5294  010E                     l5384:
  5295                           
  5296                           ;APDS9960.c: 754:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  5297  010E  0020               	movlb	0	; select bank0
  5298  010F  083E               	movf	processGestureData@u_first,w
  5299  0110  1903               	btfsc	3,2
  5300  0111  2876               	goto	l5360
  5301  0112  083F               	movf	processGestureData@d_first,w
  5302  0113  1903               	btfsc	3,2
  5303  0114  2876               	goto	l5360
  5304  0115  0840               	movf	processGestureData@l_first,w
  5305  0116  1903               	btfsc	3,2
  5306  0117  2876               	goto	l5360
  5307  0118  0841               	movf	processGestureData@r_first,w
  5308  0119  1903               	btfsc	3,2
  5309  011A  2876               	goto	l5360
  5310                           
  5311                           ;APDS9960.c: 760:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  5312  011B  306D               	movlw	109
  5313  011C  0086               	movwf	6
  5314  011D  3023               	movlw	35
  5315  011E  0087               	movwf	7
  5316  011F  0801               	movf	1,w
  5317  0120  3EFF               	addlw	255
  5318  0121  00C6               	movwf	processGestureData@i
  5319  0122  30FF               	movlw	255
  5320  0123  1803               	skipnc
  5321  0124  3000               	movlw	0
  5322  0125  00C7               	movwf	processGestureData@i+1
  5323                           
  5324                           ;APDS9960.c: 781:                 break;
  5325  0126  292B               	goto	l5398
  5326  0127                     l5412:
  5327                           
  5328                           ;APDS9960.c: 783:         }
  5329  0127  30FF               	movlw	255
  5330  0128  07C6               	addwf	processGestureData@i,f
  5331  0129  30FF               	movlw	255
  5332  012A  3DC7               	addwfc	processGestureData@i+1,f
  5333  012B                     l5398:
  5334  012B  1BC7               	btfsc	processGestureData@i+1,7
  5335  012C  299D               	goto	l5416
  5336                           
  5337                           ;APDS9960.c: 772:             if( (gesture_data_.u_data[i] > 10) &&
  5338  012D  30EC               	movlw	236
  5339  012E  00AF               	movwf	??_processGestureData
  5340  012F  3022               	movlw	34
  5341  0130  00B0               	movwf	??_processGestureData+1
  5342  0131  0846               	movf	processGestureData@i,w
  5343  0132  072F               	addwf	??_processGestureData,w
  5344  0133  0086               	movwf	6
  5345  0134  0847               	movf	processGestureData@i+1,w
  5346  0135  3D30               	addwfc	??_processGestureData+1,w
  5347  0136  0087               	movwf	7
  5348  0137  300B               	movlw	11
  5349  0138  0201               	subwf	1,w
  5350  0139  1C03               	skipc
  5351  013A  2927               	goto	l5412
  5352  013B  300C               	movlw	12
  5353  013C  00AF               	movwf	??_processGestureData
  5354  013D  3023               	movlw	35
  5355  013E  00B0               	movwf	??_processGestureData+1
  5356  013F  0846               	movf	processGestureData@i,w
  5357  0140  072F               	addwf	??_processGestureData,w
  5358  0141  0086               	movwf	6
  5359  0142  0847               	movf	processGestureData@i+1,w
  5360  0143  3D30               	addwfc	??_processGestureData+1,w
  5361  0144  0087               	movwf	7
  5362  0145  300B               	movlw	11
  5363  0146  0201               	subwf	1,w
  5364  0147  1C03               	skipc
  5365  0148  2927               	goto	l5412
  5366  0149  302C               	movlw	44
  5367  014A  00AF               	movwf	??_processGestureData
  5368  014B  3023               	movlw	35
  5369  014C  00B0               	movwf	??_processGestureData+1
  5370  014D  0846               	movf	processGestureData@i,w
  5371  014E  072F               	addwf	??_processGestureData,w
  5372  014F  0086               	movwf	6
  5373  0150  0847               	movf	processGestureData@i+1,w
  5374  0151  3D30               	addwfc	??_processGestureData+1,w
  5375  0152  0087               	movwf	7
  5376  0153  300B               	movlw	11
  5377  0154  0201               	subwf	1,w
  5378  0155  1C03               	skipc
  5379  0156  2927               	goto	l5412
  5380  0157  304C               	movlw	76
  5381  0158  00AF               	movwf	??_processGestureData
  5382  0159  3023               	movlw	35
  5383  015A  00B0               	movwf	??_processGestureData+1
  5384  015B  0846               	movf	processGestureData@i,w
  5385  015C  072F               	addwf	??_processGestureData,w
  5386  015D  0086               	movwf	6
  5387  015E  0847               	movf	processGestureData@i+1,w
  5388  015F  3D30               	addwfc	??_processGestureData+1,w
  5389  0160  0087               	movwf	7
  5390  0161  300B               	movlw	11
  5391  0162  0201               	subwf	1,w
  5392  0163  1C03               	skipc
  5393  0164  2927               	goto	l5412
  5394                           
  5395                           ;APDS9960.c: 775:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 777:   
      +                                        u_last = gesture_data_.u_data[i];
  5396  0165  30EC               	movlw	236
  5397  0166  00AF               	movwf	??_processGestureData
  5398  0167  3022               	movlw	34
  5399  0168  00B0               	movwf	??_processGestureData+1
  5400  0169  0846               	movf	processGestureData@i,w
  5401  016A  072F               	addwf	??_processGestureData,w
  5402  016B  0086               	movwf	6
  5403  016C  0847               	movf	processGestureData@i+1,w
  5404  016D  3D30               	addwfc	??_processGestureData+1,w
  5405  016E  0087               	movwf	7
  5406  016F  0801               	movf	1,w
  5407  0170  00B1               	movwf	??_processGestureData+2
  5408  0171  0831               	movf	??_processGestureData+2,w
  5409  0172  00BA               	movwf	processGestureData@u_last
  5410                           
  5411                           ;APDS9960.c: 778:                 d_last = gesture_data_.d_data[i];
  5412  0173  300C               	movlw	12
  5413  0174  00AF               	movwf	??_processGestureData
  5414  0175  3023               	movlw	35
  5415  0176  00B0               	movwf	??_processGestureData+1
  5416  0177  0846               	movf	processGestureData@i,w
  5417  0178  072F               	addwf	??_processGestureData,w
  5418  0179  0086               	movwf	6
  5419  017A  0847               	movf	processGestureData@i+1,w
  5420  017B  3D30               	addwfc	??_processGestureData+1,w
  5421  017C  0087               	movwf	7
  5422  017D  0801               	movf	1,w
  5423  017E  00B1               	movwf	??_processGestureData+2
  5424  017F  0831               	movf	??_processGestureData+2,w
  5425  0180  00BB               	movwf	processGestureData@d_last
  5426                           
  5427                           ;APDS9960.c: 779:                 l_last = gesture_data_.l_data[i];
  5428  0181  302C               	movlw	44
  5429  0182  00AF               	movwf	??_processGestureData
  5430  0183  3023               	movlw	35
  5431  0184  00B0               	movwf	??_processGestureData+1
  5432  0185  0846               	movf	processGestureData@i,w
  5433  0186  072F               	addwf	??_processGestureData,w
  5434  0187  0086               	movwf	6
  5435  0188  0847               	movf	processGestureData@i+1,w
  5436  0189  3D30               	addwfc	??_processGestureData+1,w
  5437  018A  0087               	movwf	7
  5438  018B  0801               	movf	1,w
  5439  018C  00B1               	movwf	??_processGestureData+2
  5440  018D  0831               	movf	??_processGestureData+2,w
  5441  018E  00BC               	movwf	processGestureData@l_last
  5442                           
  5443                           ;APDS9960.c: 780:                 r_last = gesture_data_.r_data[i];
  5444  018F  304C               	movlw	76
  5445  0190  00AF               	movwf	??_processGestureData
  5446  0191  3023               	movlw	35
  5447  0192  00B0               	movwf	??_processGestureData+1
  5448  0193  0846               	movf	processGestureData@i,w
  5449  0194  072F               	addwf	??_processGestureData,w
  5450  0195  0086               	movwf	6
  5451  0196  0847               	movf	processGestureData@i+1,w
  5452  0197  3D30               	addwfc	??_processGestureData+1,w
  5453  0198  0087               	movwf	7
  5454  0199  0801               	movf	1,w
  5455  019A  00B1               	movwf	??_processGestureData+2
  5456  019B  0831               	movf	??_processGestureData+2,w
  5457  019C  00BD               	movwf	processGestureData@r_last
  5458  019D                     l5416:
  5459                           
  5460                           ;APDS9960.c: 787:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  5461  019D  083E               	movf	processGestureData@u_first,w
  5462  019E  073F               	addwf	processGestureData@d_first,w
  5463  019F  00A6               	movwf	___awdiv@divisor
  5464  01A0  01A7               	clrf	___awdiv@divisor+1
  5465  01A1  0DA7               	rlf	___awdiv@divisor+1,f
  5466  01A2  083F               	movf	processGestureData@d_first,w
  5467  01A3  023E               	subwf	processGestureData@u_first,w
  5468  01A4  00A0               	movwf	___wmul@multiplier
  5469  01A5  01A1               	clrf	___wmul@multiplier+1
  5470  01A6  1C03               	skipc
  5471  01A7  03A1               	decf	___wmul@multiplier+1,f
  5472  01A8  3064               	movlw	100
  5473  01A9  00A2               	movwf	___wmul@multiplicand
  5474  01AA  3000               	movlw	0
  5475  01AB  00A3               	movwf	___wmul@multiplicand+1
  5476  01AC  3191  217C  3180   	fcall	___wmul
  5477  01AF  0821               	movf	?___wmul+1,w
  5478  01B0  00A9               	movwf	___awdiv@dividend+1
  5479  01B1  0820               	movf	?___wmul,w
  5480  01B2  00A8               	movwf	___awdiv@dividend
  5481  01B3  3197  2705  3180   	fcall	___awdiv
  5482  01B6  0827               	movf	?___awdiv+1,w
  5483  01B7  00B3               	movwf	processGestureData@ud_ratio_first+1
  5484  01B8  0826               	movf	?___awdiv,w
  5485  01B9  00B2               	movwf	processGestureData@ud_ratio_first
  5486                           
  5487                           ;APDS9960.c: 788:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  5488  01BA  0840               	movf	processGestureData@l_first,w
  5489  01BB  0741               	addwf	processGestureData@r_first,w
  5490  01BC  00A6               	movwf	___awdiv@divisor
  5491  01BD  01A7               	clrf	___awdiv@divisor+1
  5492  01BE  0DA7               	rlf	___awdiv@divisor+1,f
  5493  01BF  0841               	movf	processGestureData@r_first,w
  5494  01C0  0240               	subwf	processGestureData@l_first,w
  5495  01C1  00A0               	movwf	___wmul@multiplier
  5496  01C2  01A1               	clrf	___wmul@multiplier+1
  5497  01C3  1C03               	skipc
  5498  01C4  03A1               	decf	___wmul@multiplier+1,f
  5499  01C5  3064               	movlw	100
  5500  01C6  00A2               	movwf	___wmul@multiplicand
  5501  01C7  3000               	movlw	0
  5502  01C8  00A3               	movwf	___wmul@multiplicand+1
  5503  01C9  3191  217C  3180   	fcall	___wmul
  5504  01CC  0821               	movf	?___wmul+1,w
  5505  01CD  00A9               	movwf	___awdiv@dividend+1
  5506  01CE  0820               	movf	?___wmul,w
  5507  01CF  00A8               	movwf	___awdiv@dividend
  5508  01D0  3197  2705  3180   	fcall	___awdiv
  5509  01D3  0827               	movf	?___awdiv+1,w
  5510  01D4  00B5               	movwf	processGestureData@lr_ratio_first+1
  5511  01D5  0826               	movf	?___awdiv,w
  5512  01D6  00B4               	movwf	processGestureData@lr_ratio_first
  5513                           
  5514                           ;APDS9960.c: 789:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  5515  01D7  083A               	movf	processGestureData@u_last,w
  5516  01D8  073B               	addwf	processGestureData@d_last,w
  5517  01D9  00A6               	movwf	___awdiv@divisor
  5518  01DA  01A7               	clrf	___awdiv@divisor+1
  5519  01DB  0DA7               	rlf	___awdiv@divisor+1,f
  5520  01DC  083B               	movf	processGestureData@d_last,w
  5521  01DD  023A               	subwf	processGestureData@u_last,w
  5522  01DE  00A0               	movwf	___wmul@multiplier
  5523  01DF  01A1               	clrf	___wmul@multiplier+1
  5524  01E0  1C03               	skipc
  5525  01E1  03A1               	decf	___wmul@multiplier+1,f
  5526  01E2  3064               	movlw	100
  5527  01E3  00A2               	movwf	___wmul@multiplicand
  5528  01E4  3000               	movlw	0
  5529  01E5  00A3               	movwf	___wmul@multiplicand+1
  5530  01E6  3191  217C  3180   	fcall	___wmul
  5531  01E9  0821               	movf	?___wmul+1,w
  5532  01EA  00A9               	movwf	___awdiv@dividend+1
  5533  01EB  0820               	movf	?___wmul,w
  5534  01EC  00A8               	movwf	___awdiv@dividend
  5535  01ED  3197  2705  3180   	fcall	___awdiv
  5536  01F0  0827               	movf	?___awdiv+1,w
  5537  01F1  00B7               	movwf	processGestureData@ud_ratio_last+1
  5538  01F2  0826               	movf	?___awdiv,w
  5539  01F3  00B6               	movwf	processGestureData@ud_ratio_last
  5540                           
  5541                           ;APDS9960.c: 790:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  5542  01F4  083C               	movf	processGestureData@l_last,w
  5543  01F5  073D               	addwf	processGestureData@r_last,w
  5544  01F6  00A6               	movwf	___awdiv@divisor
  5545  01F7  01A7               	clrf	___awdiv@divisor+1
  5546  01F8  0DA7               	rlf	___awdiv@divisor+1,f
  5547  01F9  083D               	movf	processGestureData@r_last,w
  5548  01FA  023C               	subwf	processGestureData@l_last,w
  5549  01FB  00A0               	movwf	___wmul@multiplier
  5550  01FC  01A1               	clrf	___wmul@multiplier+1
  5551  01FD  1C03               	skipc
  5552  01FE  03A1               	decf	___wmul@multiplier+1,f
  5553  01FF  3064               	movlw	100
  5554  0200  00A2               	movwf	___wmul@multiplicand
  5555  0201  3000               	movlw	0
  5556  0202  00A3               	movwf	___wmul@multiplicand+1
  5557  0203  3191  217C  3180   	fcall	___wmul
  5558  0206  0821               	movf	?___wmul+1,w
  5559  0207  00A9               	movwf	___awdiv@dividend+1
  5560  0208  0820               	movf	?___wmul,w
  5561  0209  00A8               	movwf	___awdiv@dividend
  5562  020A  3197  2705  3180   	fcall	___awdiv
  5563  020D  0827               	movf	?___awdiv+1,w
  5564  020E  00B9               	movwf	processGestureData@lr_ratio_last+1
  5565  020F  0826               	movf	?___awdiv,w
  5566  0210  00B8               	movwf	processGestureData@lr_ratio_last
  5567                           
  5568                           ;APDS9960.c: 815:     ud_delta = ud_ratio_last - ud_ratio_first;
  5569  0211  0832               	movf	processGestureData@ud_ratio_first,w
  5570  0212  0236               	subwf	processGestureData@ud_ratio_last,w
  5571  0213  00C2               	movwf	processGestureData@ud_delta
  5572  0214  0833               	movf	processGestureData@ud_ratio_first+1,w
  5573  0215  3B37               	subwfb	processGestureData@ud_ratio_last+1,w
  5574  0216  00C3               	movwf	processGestureData@ud_delta+1
  5575                           
  5576                           ;APDS9960.c: 816:     lr_delta = lr_ratio_last - lr_ratio_first;
  5577  0217  0834               	movf	processGestureData@lr_ratio_first,w
  5578  0218  0238               	subwf	processGestureData@lr_ratio_last,w
  5579  0219  00C4               	movwf	processGestureData@lr_delta
  5580  021A  0835               	movf	processGestureData@lr_ratio_first+1,w
  5581  021B  3B39               	subwfb	processGestureData@lr_ratio_last+1,w
  5582  021C  00C5               	movwf	processGestureData@lr_delta+1
  5583                           
  5584                           ;APDS9960.c: 827:     gesture_ud_delta_ += ud_delta;
  5585  021D  0842               	movf	processGestureData@ud_delta,w
  5586  021E  07E6               	addwf	_gesture_ud_delta_,f
  5587  021F  0843               	movf	processGestureData@ud_delta+1,w
  5588  0220  3DE7               	addwfc	_gesture_ud_delta_+1,f
  5589                           
  5590                           ;APDS9960.c: 828:     gesture_lr_delta_ += lr_delta;
  5591  0221  0844               	movf	processGestureData@lr_delta,w
  5592  0222  07E4               	addwf	_gesture_lr_delta_,f
  5593  0223  0845               	movf	processGestureData@lr_delta+1,w
  5594  0224  3DE5               	addwfc	_gesture_lr_delta_+1,f
  5595                           
  5596                           ;APDS9960.c: 839:     if( gesture_ud_delta_ >= 50 ) {
  5597  0225  0867               	movf	_gesture_ud_delta_+1,w
  5598  0226  3A80               	xorlw	128
  5599  0227  00AF               	movwf	??_processGestureData
  5600  0228  3080               	movlw	128
  5601  0229  022F               	subwf	??_processGestureData,w
  5602  022A  1D03               	skipz
  5603  022B  2A2E               	goto	u2845
  5604  022C  3032               	movlw	50
  5605  022D  0266               	subwf	_gesture_ud_delta_,w
  5606  022E                     u2845:
  5607  022E  1C03               	skipc
  5608  022F  2A35               	goto	l5430
  5609                           
  5610                           ;APDS9960.c: 840:         gesture_ud_count_ = 1;
  5611  0230  3001               	movlw	1
  5612  0231  0020               	movlb	0	; select bank0
  5613  0232  00E2               	movwf	_gesture_ud_count_
  5614  0233  3000               	movlw	0
  5615  0234  2A45               	goto	L1
  5616  0235                     l5430:	
  5617                           ;APDS9960.c: 841:     } else if( gesture_ud_delta_ <= -50 ) {
  5618                           
  5619  0235  0020               	movlb	0	; select bank0
  5620  0236  0867               	movf	_gesture_ud_delta_+1,w
  5621  0237  3A80               	xorlw	128
  5622  0238  00AF               	movwf	??_processGestureData
  5623  0239  307F               	movlw	127
  5624  023A  022F               	subwf	??_processGestureData,w
  5625  023B  1D03               	skipz
  5626  023C  2A3F               	goto	u2855
  5627  023D  30CF               	movlw	207
  5628  023E  0266               	subwf	_gesture_ud_delta_,w
  5629  023F                     u2855:
  5630  023F  1803               	skipnc
  5631  0240  2A47               	goto	l5434
  5632                           
  5633                           ;APDS9960.c: 842:         gesture_ud_count_ = -1;
  5634  0241  30FF               	movlw	255
  5635  0242  0020               	movlb	0	; select bank0
  5636  0243  00E2               	movwf	_gesture_ud_count_
  5637  0244  30FF               	movlw	255
  5638  0245                     L1:
  5639  0245  00E3               	movwf	_gesture_ud_count_+1
  5640                           
  5641                           ;APDS9960.c: 843:     } else {
  5642  0246  2A4A               	goto	l5436
  5643  0247                     l5434:
  5644                           
  5645                           ;APDS9960.c: 844:         gesture_ud_count_ = 0;
  5646  0247  0020               	movlb	0	; select bank0
  5647  0248  01E2               	clrf	_gesture_ud_count_
  5648  0249  01E3               	clrf	_gesture_ud_count_+1
  5649  024A                     l5436:
  5650                           
  5651                           ;APDS9960.c: 848:     if( gesture_lr_delta_ >= 50 ) {
  5652  024A  0865               	movf	_gesture_lr_delta_+1,w
  5653  024B  3A80               	xorlw	128
  5654  024C  00AF               	movwf	??_processGestureData
  5655  024D  3080               	movlw	128
  5656  024E  022F               	subwf	??_processGestureData,w
  5657  024F  1D03               	skipz
  5658  0250  2A53               	goto	u2865
  5659  0251  3032               	movlw	50
  5660  0252  0264               	subwf	_gesture_lr_delta_,w
  5661  0253                     u2865:
  5662  0253  1C03               	skipc
  5663  0254  2A5A               	goto	l5440
  5664                           
  5665                           ;APDS9960.c: 849:         gesture_lr_count_ = 1;
  5666  0255  3001               	movlw	1
  5667  0256  0020               	movlb	0	; select bank0
  5668  0257  00E0               	movwf	_gesture_lr_count_
  5669  0258  3000               	movlw	0
  5670  0259  2A6A               	goto	L2
  5671  025A                     l5440:	
  5672                           ;APDS9960.c: 850:     } else if( gesture_lr_delta_ <= -50 ) {
  5673                           
  5674  025A  0020               	movlb	0	; select bank0
  5675  025B  0865               	movf	_gesture_lr_delta_+1,w
  5676  025C  3A80               	xorlw	128
  5677  025D  00AF               	movwf	??_processGestureData
  5678  025E  307F               	movlw	127
  5679  025F  022F               	subwf	??_processGestureData,w
  5680  0260  1D03               	skipz
  5681  0261  2A64               	goto	u2875
  5682  0262  30CF               	movlw	207
  5683  0263  0264               	subwf	_gesture_lr_delta_,w
  5684  0264                     u2875:
  5685  0264  1803               	skipnc
  5686  0265  2A6C               	goto	l5444
  5687                           
  5688                           ;APDS9960.c: 851:         gesture_lr_count_ = -1;
  5689  0266  30FF               	movlw	255
  5690  0267  0020               	movlb	0	; select bank0
  5691  0268  00E0               	movwf	_gesture_lr_count_
  5692  0269  30FF               	movlw	255
  5693  026A                     L2:
  5694  026A  00E1               	movwf	_gesture_lr_count_+1
  5695                           
  5696                           ;APDS9960.c: 852:     } else {
  5697  026B  2A6F               	goto	l5446
  5698  026C                     l5444:
  5699                           
  5700                           ;APDS9960.c: 853:         gesture_lr_count_ = 0;
  5701  026C  0020               	movlb	0	; select bank0
  5702  026D  01E0               	clrf	_gesture_lr_count_
  5703  026E  01E1               	clrf	_gesture_lr_count_+1
  5704  026F                     l5446:
  5705                           
  5706                           ;APDS9960.c: 857:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  5707  026F  0862               	movf	_gesture_ud_count_,w
  5708  0270  0463               	iorwf	_gesture_ud_count_+1,w
  5709  0271  1D03               	btfss	3,2
  5710  0272  2AF0               	goto	l5482
  5711  0273  0860               	movf	_gesture_lr_count_,w
  5712  0274  0461               	iorwf	_gesture_lr_count_+1,w
  5713  0275  1D03               	btfss	3,2
  5714  0276  2AF0               	goto	l5482
  5715                           
  5716                           ;APDS9960.c: 858:         if( (abs(ud_delta) < 20) && (abs(lr_delta) < 20) ) {
  5717  0277  0843               	movf	processGestureData@ud_delta+1,w
  5718  0278  00A1               	movwf	abs@a+1
  5719  0279  0842               	movf	processGestureData@ud_delta,w
  5720  027A  00A0               	movwf	abs@a
  5721  027B  3191  214B  3180   	fcall	_abs
  5722  027E  0020               	movlb	0	; select bank0
  5723  027F  0821               	movf	?_abs+1,w
  5724  0280  3A80               	xorlw	128
  5725  0281  00AF               	movwf	??_processGestureData
  5726  0282  3080               	movlw	128
  5727  0283  022F               	subwf	??_processGestureData,w
  5728  0284  1D03               	skipz
  5729  0285  2A88               	goto	u2905
  5730  0286  3014               	movlw	20
  5731  0287  0220               	subwf	?_abs,w
  5732  0288                     u2905:
  5733  0288  1803               	skipnc
  5734  0289  2876               	goto	l5360
  5735  028A  0020               	movlb	0	; select bank0
  5736  028B  0845               	movf	processGestureData@lr_delta+1,w
  5737  028C  00A1               	movwf	abs@a+1
  5738  028D  0844               	movf	processGestureData@lr_delta,w
  5739  028E  00A0               	movwf	abs@a
  5740  028F  3191  214B  3180   	fcall	_abs
  5741  0292  0020               	movlb	0	; select bank0
  5742  0293  0821               	movf	?_abs+1,w
  5743  0294  3A80               	xorlw	128
  5744  0295  00AF               	movwf	??_processGestureData
  5745  0296  3080               	movlw	128
  5746  0297  022F               	subwf	??_processGestureData,w
  5747  0298  1D03               	skipz
  5748  0299  2A9C               	goto	u2915
  5749  029A  3014               	movlw	20
  5750  029B  0220               	subwf	?_abs,w
  5751  029C                     u2915:
  5752  029C  1803               	skipnc
  5753  029D  2876               	goto	l5360
  5754                           
  5755                           ;APDS9960.c: 859: ;APDS9960.c: 861:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  5756  029E  0020               	movlb	0	; select bank0
  5757  029F  0842               	movf	processGestureData@ud_delta,w
  5758  02A0  0443               	iorwf	processGestureData@ud_delta+1,w
  5759  02A1  1D03               	btfss	3,2
  5760  02A2  2AAD               	goto	l5460
  5761  02A3  0844               	movf	processGestureData@lr_delta,w
  5762  02A4  0445               	iorwf	processGestureData@lr_delta+1,w
  5763  02A5  1D03               	btfss	3,2
  5764  02A6  2AAD               	goto	l5460
  5765                           
  5766                           ;APDS9960.c: 862:                 gesture_near_count_++;
  5767  02A7  3001               	movlw	1
  5768  02A8  0021               	movlb	1	; select bank1
  5769  02A9  07DA               	addwf	_gesture_near_count_^(0+128),f
  5770  02AA  3000               	movlw	0
  5771  02AB  3DDB               	addwfc	(_gesture_near_count_+1)^(0+128),f
  5772                           
  5773                           ;APDS9960.c: 863:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  5774  02AC  2ABA               	goto	l1745
  5775  02AD                     l5460:
  5776  02AD  0842               	movf	processGestureData@ud_delta,w
  5777  02AE  0443               	iorwf	processGestureData@ud_delta+1,w
  5778  02AF  1D03               	btfss	3,2
  5779  02B0  2AB5               	goto	l5464
  5780  02B1  0844               	movf	processGestureData@lr_delta,w
  5781  02B2  0445               	iorwf	processGestureData@lr_delta+1,w
  5782  02B3  1903               	btfsc	3,2
  5783  02B4  2ABA               	goto	l1745
  5784  02B5                     l5464:
  5785                           
  5786                           ;APDS9960.c: 864:                 gesture_far_count_++;
  5787  02B5  3001               	movlw	1
  5788  02B6  0021               	movlb	1	; select bank1
  5789  02B7  07D8               	addwf	_gesture_far_count_^(0+128),f
  5790  02B8  3000               	movlw	0
  5791  02B9  3DD9               	addwfc	(_gesture_far_count_+1)^(0+128),f
  5792  02BA                     l1745:
  5793                           
  5794                           ;APDS9960.c: 867:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  5795  02BA  0021               	movlb	1	; select bank1
  5796  02BB  085B               	movf	(_gesture_near_count_+1)^(0+128),w
  5797  02BC  3A80               	xorlw	128
  5798  02BD  0020               	movlb	0	; select bank0
  5799  02BE  00AF               	movwf	??_processGestureData
  5800  02BF  3080               	movlw	128
  5801  02C0  022F               	subwf	??_processGestureData,w
  5802  02C1  1D03               	skipz
  5803  02C2  2AC6               	goto	u2965
  5804  02C3  300A               	movlw	10
  5805  02C4  0021               	movlb	1	; select bank1
  5806  02C5  025A               	subwf	_gesture_near_count_^(0+128),w
  5807  02C6                     u2965:
  5808  02C6  1C03               	skipc
  5809  02C7  2876               	goto	l5360
  5810  02C8  0021               	movlb	1	; select bank1
  5811  02C9  0859               	movf	(_gesture_far_count_+1)^(0+128),w
  5812  02CA  3A80               	xorlw	128
  5813  02CB  0020               	movlb	0	; select bank0
  5814  02CC  00AF               	movwf	??_processGestureData
  5815  02CD  3080               	movlw	128
  5816  02CE  022F               	subwf	??_processGestureData,w
  5817  02CF  1D03               	skipz
  5818  02D0  2AD4               	goto	u2975
  5819  02D1  3002               	movlw	2
  5820  02D2  0021               	movlb	1	; select bank1
  5821  02D3  0258               	subwf	_gesture_far_count_^(0+128),w
  5822  02D4                     u2975:
  5823  02D4  1C03               	skipc
  5824  02D5  2876               	goto	l5360
  5825                           
  5826                           ;APDS9960.c: 868:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  5827  02D6  0020               	movlb	0	; select bank0
  5828  02D7  0842               	movf	processGestureData@ud_delta,w
  5829  02D8  0443               	iorwf	processGestureData@ud_delta+1,w
  5830  02D9  1D03               	btfss	3,2
  5831  02DA  2AE1               	goto	l5474
  5832  02DB  0844               	movf	processGestureData@lr_delta,w
  5833  02DC  0445               	iorwf	processGestureData@lr_delta+1,w
  5834  02DD  1D03               	btfss	3,2
  5835  02DE  2AE1               	goto	l5474
  5836                           
  5837                           ;APDS9960.c: 869:                     gesture_state_ = NEAR_STATE;
  5838  02DF  3001               	movlw	1
  5839  02E0  2AEA               	goto	L3
  5840  02E1                     l5474:	
  5841                           ;APDS9960.c: 870:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  5842                           
  5843  02E1  0842               	movf	processGestureData@ud_delta,w
  5844  02E2  0443               	iorwf	processGestureData@ud_delta+1,w
  5845  02E3  1903               	btfsc	3,2
  5846  02E4  2AEE               	goto	l1751
  5847  02E5  0844               	movf	processGestureData@lr_delta,w
  5848  02E6  0445               	iorwf	processGestureData@lr_delta+1,w
  5849  02E7  1903               	btfsc	3,2
  5850  02E8  2AEE               	goto	l1751
  5851                           
  5852                           ;APDS9960.c: 871:                     gesture_state_ = FAR_STATE;
  5853  02E9  3002               	movlw	2
  5854  02EA                     L3:
  5855  02EA  0021               	movlb	1	; select bank1
  5856  02EB  00D6               	movwf	_gesture_state_^(0+128)
  5857  02EC  3000               	movlw	0
  5858  02ED  00D7               	movwf	(_gesture_state_^(0+128)+1)
  5859  02EE                     l1751:
  5860                           
  5861                           ;APDS9960.c: 873:                 return 1;
  5862  02EE  3001               	movlw	1
  5863  02EF  0008               	return
  5864  02F0                     l5482:
  5865                           
  5866                           ;APDS9960.c: 877:         if( (abs(ud_delta) < 20) && (abs(lr_delta) < 20) ) {
  5867  02F0  0843               	movf	processGestureData@ud_delta+1,w
  5868  02F1  00A1               	movwf	abs@a+1
  5869  02F2  0842               	movf	processGestureData@ud_delta,w
  5870  02F3  00A0               	movwf	abs@a
  5871  02F4  3191  214B  3180   	fcall	_abs
  5872  02F7  0020               	movlb	0	; select bank0
  5873  02F8  0821               	movf	?_abs+1,w
  5874  02F9  3A80               	xorlw	128
  5875  02FA  00AF               	movwf	??_processGestureData
  5876  02FB  3080               	movlw	128
  5877  02FC  022F               	subwf	??_processGestureData,w
  5878  02FD  1D03               	skipz
  5879  02FE  2B01               	goto	u3025
  5880  02FF  3014               	movlw	20
  5881  0300  0220               	subwf	?_abs,w
  5882  0301                     u3025:
  5883  0301  1803               	skipnc
  5884  0302  2876               	goto	l5360
  5885  0303  0020               	movlb	0	; select bank0
  5886  0304  0845               	movf	processGestureData@lr_delta+1,w
  5887  0305  00A1               	movwf	abs@a+1
  5888  0306  0844               	movf	processGestureData@lr_delta,w
  5889  0307  00A0               	movwf	abs@a
  5890  0308  3191  214B  3180   	fcall	_abs
  5891  030B  0020               	movlb	0	; select bank0
  5892  030C  0821               	movf	?_abs+1,w
  5893  030D  3A80               	xorlw	128
  5894  030E  00AF               	movwf	??_processGestureData
  5895  030F  3080               	movlw	128
  5896  0310  022F               	subwf	??_processGestureData,w
  5897  0311  1D03               	skipz
  5898  0312  2B15               	goto	u3035
  5899  0313  3014               	movlw	20
  5900  0314  0220               	subwf	?_abs,w
  5901  0315                     u3035:
  5902  0315  1803               	skipnc
  5903  0316  2876               	goto	l5360
  5904                           
  5905                           ;APDS9960.c: 878: ;APDS9960.c: 880:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  5906  0317  0020               	movlb	0	; select bank0
  5907  0318  0842               	movf	processGestureData@ud_delta,w
  5908  0319  0443               	iorwf	processGestureData@ud_delta+1,w
  5909  031A  1D03               	btfss	3,2
  5910  031B  2B25               	goto	l1755
  5911  031C  0844               	movf	processGestureData@lr_delta,w
  5912  031D  0445               	iorwf	processGestureData@lr_delta+1,w
  5913  031E  1D03               	btfss	3,2
  5914  031F  2B25               	goto	l1755
  5915                           
  5916                           ;APDS9960.c: 881:                 gesture_near_count_++;
  5917  0320  3001               	movlw	1
  5918  0321  0021               	movlb	1	; select bank1
  5919  0322  07DA               	addwf	_gesture_near_count_^(0+128),f
  5920  0323  3000               	movlw	0
  5921  0324  3DDB               	addwfc	(_gesture_near_count_+1)^(0+128),f
  5922  0325                     l1755:	
  5923                           ;APDS9960.c: 882:             }
  5924                           
  5925                           
  5926                           ;APDS9960.c: 884:             if( gesture_near_count_ >= 10 ) {
  5927  0325  0021               	movlb	1	; select bank1
  5928  0326  085B               	movf	(_gesture_near_count_+1)^(0+128),w
  5929  0327  3A80               	xorlw	128
  5930  0328  0020               	movlb	0	; select bank0
  5931  0329  00AF               	movwf	??_processGestureData
  5932  032A  3080               	movlw	128
  5933  032B  022F               	subwf	??_processGestureData,w
  5934  032C  1D03               	skipz
  5935  032D  2B31               	goto	u3065
  5936  032E  300A               	movlw	10
  5937  032F  0021               	movlb	1	; select bank1
  5938  0330  025A               	subwf	_gesture_near_count_^(0+128),w
  5939  0331                     u3065:
  5940  0331  1C03               	skipc
  5941  0332  2876               	goto	l5360
  5942                           
  5943                           ;APDS9960.c: 885:                 gesture_ud_count_ = 0;
  5944  0333  0020               	movlb	0	; select bank0
  5945  0334  01E2               	clrf	_gesture_ud_count_
  5946  0335  01E3               	clrf	_gesture_ud_count_+1
  5947                           
  5948                           ;APDS9960.c: 886:                 gesture_lr_count_ = 0;
  5949  0336  01E0               	clrf	_gesture_lr_count_
  5950  0337  01E1               	clrf	_gesture_lr_count_+1
  5951                           
  5952                           ;APDS9960.c: 887:                 gesture_ud_delta_ = 0;
  5953  0338  01E6               	clrf	_gesture_ud_delta_
  5954  0339  01E7               	clrf	_gesture_ud_delta_+1
  5955                           
  5956                           ;APDS9960.c: 888:                 gesture_lr_delta_ = 0;
  5957  033A  01E4               	clrf	_gesture_lr_delta_
  5958  033B  01E5               	clrf	_gesture_lr_delta_+1
  5959  033C  2876               	goto	l5360
  5960  033D                     __end_of_processGestureData:
  5961                           
  5962                           	psect	text4
  5963  117C                     __ptext4:	
  5964 ;; *************** function ___wmul *****************
  5965 ;; Defined at:
  5966 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\Umul16.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5969 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;  product         2    4[BANK0 ] unsigned int 
  5972 ;; Return value:  Size  Location     Type
  5973 ;;                  2    0[BANK0 ] unsigned int 
  5974 ;; Registers used:
  5975 ;;		wreg, status,2, status,0
  5976 ;; Tracked objects:
  5977 ;;		On entry : 1F/0
  5978 ;;		On exit  : 1F/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5981 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5985 ;;Total ram usage:        6 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    4
  5988 ;; This function calls:
  5989 ;;		Nothing
  5990 ;; This function is called by:
  5991 ;;		_processGestureData
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           
  5996                           ;psect for function ___wmul
  5997  117C                     ___wmul:
  5998                           
  5999                           ;incstack = 0
  6000                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6001  117C  01A4               	clrf	___wmul@product
  6002  117D  01A5               	clrf	___wmul@product+1
  6003  117E                     l4848:
  6004  117E  1C20               	btfss	___wmul@multiplier,0
  6005  117F  2984               	goto	l2053
  6006  1180  0822               	movf	___wmul@multiplicand,w
  6007  1181  07A4               	addwf	___wmul@product,f
  6008  1182  0823               	movf	___wmul@multiplicand+1,w
  6009  1183  3DA5               	addwfc	___wmul@product+1,f
  6010  1184                     l2053:
  6011  1184  3001               	movlw	1
  6012  1185                     u2185:
  6013  1185  35A2               	lslf	___wmul@multiplicand,f
  6014  1186  0DA3               	rlf	___wmul@multiplicand+1,f
  6015  1187  0B89               	decfsz	9,f
  6016  1188  2985               	goto	u2185
  6017  1189  3001               	movlw	1
  6018  118A                     u2195:
  6019  118A  36A1               	lsrf	___wmul@multiplier+1,f
  6020  118B  0CA0               	rrf	___wmul@multiplier,f
  6021  118C  0B89               	decfsz	9,f
  6022  118D  298A               	goto	u2195
  6023  118E  0820               	movf	___wmul@multiplier,w
  6024  118F  0421               	iorwf	___wmul@multiplier+1,w
  6025  1190  1D03               	btfss	3,2
  6026  1191  297E               	goto	l4848
  6027  1192  0825               	movf	___wmul@product+1,w
  6028  1193  00A1               	movwf	?___wmul+1
  6029  1194  0824               	movf	___wmul@product,w
  6030  1195  00A0               	movwf	?___wmul
  6031  1196  0008               	return
  6032  1197                     __end_of___wmul:
  6033                           
  6034                           	psect	text5
  6035  1705                     __ptext5:	
  6036 ;; *************** function ___awdiv *****************
  6037 ;; Defined at:
  6038 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\awdiv.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;  divisor         2    6[BANK0 ] int 
  6041 ;;  dividend        2    8[BANK0 ] int 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  quotient        2   13[BANK0 ] int 
  6044 ;;  sign            1   12[BANK0 ] unsigned char 
  6045 ;;  counter         1   11[BANK0 ] unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;                  2    6[BANK0 ] int 
  6048 ;; Registers used:
  6049 ;;		wreg, status,2, status,0
  6050 ;; Tracked objects:
  6051 ;;		On entry : 1F/0
  6052 ;;		On exit  : 1F/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6055 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;Total ram usage:        9 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    4
  6062 ;; This function calls:
  6063 ;;		Nothing
  6064 ;; This function is called by:
  6065 ;;		_processGestureData
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           
  6070                           ;psect for function ___awdiv
  6071  1705                     ___awdiv:
  6072                           
  6073                           ;incstack = 0
  6074                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6075  1705  01AC               	clrf	___awdiv@sign
  6076  1706  1FA7               	btfss	___awdiv@divisor+1,7
  6077  1707  2F0F               	goto	l4868
  6078  1708  09A6               	comf	___awdiv@divisor,f
  6079  1709  09A7               	comf	___awdiv@divisor+1,f
  6080  170A  0AA6               	incf	___awdiv@divisor,f
  6081  170B  1903               	skipnz
  6082  170C  0AA7               	incf	___awdiv@divisor+1,f
  6083  170D  01AC               	clrf	___awdiv@sign
  6084  170E  0AAC               	incf	___awdiv@sign,f
  6085  170F                     l4868:
  6086  170F  1FA9               	btfss	___awdiv@dividend+1,7
  6087  1710  2F1A               	goto	l4874
  6088  1711  09A8               	comf	___awdiv@dividend,f
  6089  1712  09A9               	comf	___awdiv@dividend+1,f
  6090  1713  0AA8               	incf	___awdiv@dividend,f
  6091  1714  1903               	skipnz
  6092  1715  0AA9               	incf	___awdiv@dividend+1,f
  6093  1716  3001               	movlw	1
  6094  1717  00AA               	movwf	??___awdiv
  6095  1718  082A               	movf	??___awdiv,w
  6096  1719  06AC               	xorwf	___awdiv@sign,f
  6097  171A                     l4874:
  6098  171A  01AD               	clrf	___awdiv@quotient
  6099  171B  01AE               	clrf	___awdiv@quotient+1
  6100  171C  0826               	movf	___awdiv@divisor,w
  6101  171D  0427               	iorwf	___awdiv@divisor+1,w
  6102  171E  1903               	btfsc	3,2
  6103  171F  2F49               	goto	l4896
  6104  1720  01AB               	clrf	___awdiv@counter
  6105  1721  0AAB               	incf	___awdiv@counter,f
  6106  1722                     l4884:
  6107  1722  1BA7               	btfsc	___awdiv@divisor+1,7
  6108  1723  2F2E               	goto	l4886
  6109  1724  3001               	movlw	1
  6110  1725                     u2245:
  6111  1725  35A6               	lslf	___awdiv@divisor,f
  6112  1726  0DA7               	rlf	___awdiv@divisor+1,f
  6113  1727  0B89               	decfsz	9,f
  6114  1728  2F25               	goto	u2245
  6115  1729  3001               	movlw	1
  6116  172A  00AA               	movwf	??___awdiv
  6117  172B  082A               	movf	??___awdiv,w
  6118  172C  07AB               	addwf	___awdiv@counter,f
  6119  172D  2F22               	goto	l4884
  6120  172E                     l4886:
  6121  172E  3001               	movlw	1
  6122  172F                     u2265:
  6123  172F  35AD               	lslf	___awdiv@quotient,f
  6124  1730  0DAE               	rlf	___awdiv@quotient+1,f
  6125  1731  0B89               	decfsz	9,f
  6126  1732  2F2F               	goto	u2265
  6127  1733  0827               	movf	___awdiv@divisor+1,w
  6128  1734  0229               	subwf	___awdiv@dividend+1,w
  6129  1735  1D03               	skipz
  6130  1736  2F39               	goto	u2275
  6131  1737  0826               	movf	___awdiv@divisor,w
  6132  1738  0228               	subwf	___awdiv@dividend,w
  6133  1739                     u2275:
  6134  1739  1C03               	skipc
  6135  173A  2F40               	goto	l4892
  6136  173B  0826               	movf	___awdiv@divisor,w
  6137  173C  02A8               	subwf	___awdiv@dividend,f
  6138  173D  0827               	movf	___awdiv@divisor+1,w
  6139  173E  3BA9               	subwfb	___awdiv@dividend+1,f
  6140  173F  142D               	bsf	___awdiv@quotient,0
  6141  1740                     l4892:
  6142  1740  3001               	movlw	1
  6143  1741                     u2285:
  6144  1741  36A7               	lsrf	___awdiv@divisor+1,f
  6145  1742  0CA6               	rrf	___awdiv@divisor,f
  6146  1743  0B89               	decfsz	9,f
  6147  1744  2F41               	goto	u2285
  6148  1745  3001               	movlw	1
  6149  1746  02AB               	subwf	___awdiv@counter,f
  6150  1747  1D03               	btfss	3,2
  6151  1748  2F2E               	goto	l4886
  6152  1749                     l4896:
  6153  1749  082C               	movf	___awdiv@sign,w
  6154  174A  1903               	btfsc	3,2
  6155  174B  2F51               	goto	l4900
  6156  174C  09AD               	comf	___awdiv@quotient,f
  6157  174D  09AE               	comf	___awdiv@quotient+1,f
  6158  174E  0AAD               	incf	___awdiv@quotient,f
  6159  174F  1903               	skipnz
  6160  1750  0AAE               	incf	___awdiv@quotient+1,f
  6161  1751                     l4900:
  6162  1751  082E               	movf	___awdiv@quotient+1,w
  6163  1752  00A7               	movwf	?___awdiv+1
  6164  1753  082D               	movf	___awdiv@quotient,w
  6165  1754  00A6               	movwf	?___awdiv
  6166  1755  0008               	return
  6167  1756                     __end_of___awdiv:
  6168                           
  6169                           	psect	text6
  6170  1566                     __ptext6:	
  6171 ;; *************** function _i2c_readDataBlock *****************
  6172 ;; Defined at:
  6173 ;;		line 203 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;  address         1    wreg     unsigned char 
  6176 ;;  reg             1   22[BANK0 ] unsigned char 
  6177 ;;  data            2   23[BANK0 ] PTR void 
  6178 ;;		 -> fifo_data(128), 
  6179 ;;  len             2   25[BANK0 ] unsigned int 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  address         1   27[BANK0 ] unsigned char 
  6182 ;;  d               4   28[BANK0 ] struct .
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      void 
  6185 ;; Registers used:
  6186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6187 ;; Tracked objects:
  6188 ;;		On entry : 1F/0
  6189 ;;		On exit  : 1F/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6192 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;Total ram usage:       10 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; Hardware stack levels required when called:   12
  6199 ;; This function calls:
  6200 ;;		_I2C_Close
  6201 ;;		_I2C_MasterWrite
  6202 ;;		_I2C_Open
  6203 ;;		_I2C_SetAddressNackCallback
  6204 ;;		_I2C_SetBuffer
  6205 ;;		_I2C_SetDataCompleteCallback
  6206 ;; This function is called by:
  6207 ;;		_readGesture
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           
  6212                           ;psect for function _i2c_readDataBlock
  6213  1566                     _i2c_readDataBlock:
  6214                           
  6215                           ;incstack = 0
  6216                           ; Regs used in _i2c_readDataBlock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6217                           ;i2c_readDataBlock@address stored from wreg
  6218  1566  00BB               	movwf	i2c_readDataBlock@address
  6219                           
  6220                           ;mcc_generated_files/drivers/i2c_simple_master.c: 203: void i2c_readDataBlock(i2c_addres
      +                          s_t address, uint8_t reg, void *data, size_t len);mcc_generated_files/drivers/i2c_simple
      +                          _master.c: 204: {;mcc_generated_files/drivers/i2c_simple_master.c: 206:     buf_t d;;mcc
      +                          _generated_files/drivers/i2c_simple_master.c: 207:     d.data = data;
  6221  1567  0838               	movf	i2c_readDataBlock@data+1,w
  6222  1568  00BF               	movwf	i2c_readDataBlock@d+3
  6223  1569  0837               	movf	i2c_readDataBlock@data,w
  6224  156A  00BE               	movwf	i2c_readDataBlock@d+2
  6225                           
  6226                           ;mcc_generated_files/drivers/i2c_simple_master.c: 208:     d.len = len;
  6227  156B  083A               	movf	i2c_readDataBlock@len+1,w
  6228  156C  00BD               	movwf	i2c_readDataBlock@d+1
  6229  156D  0839               	movf	i2c_readDataBlock@len,w
  6230  156E  00BC               	movwf	i2c_readDataBlock@d
  6231  156F                     l4906:	
  6232                           ;mcc_generated_files/drivers/i2c_simple_master.c: 210:     while(!I2C_Open(address));
  6233                           
  6234  156F  083B               	movf	i2c_readDataBlock@address,w
  6235  1570  3195  25E0  3195   	fcall	_I2C_Open
  6236  1573  3A00               	xorlw	0
  6237  1574  1903               	skipnz
  6238  1575  2D6F               	goto	l4906
  6239                           
  6240                           ;mcc_generated_files/drivers/i2c_simple_master.c: 211:     I2C_SetDataCompleteCallback(r
      +                          dBlkRegCompleteHandler,&d);
  6241  1576  300D               	movlw	low _rdBlkRegCompleteHandler
  6242  1577  00A9               	movwf	I2C_SetDataCompleteCallback@cb
  6243  1578  3012               	movlw	high _rdBlkRegCompleteHandler
  6244  1579  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
  6245  157A  303C               	movlw	low i2c_readDataBlock@d
  6246  157B  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
  6247  157C  3000               	movlw	high i2c_readDataBlock@d
  6248  157D  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
  6249  157E  319F  27A5  3195   	fcall	_I2C_SetDataCompleteCallback
  6250                           
  6251                           ;mcc_generated_files/drivers/i2c_simple_master.c: 212:     I2C_SetBuffer(&reg,1);
  6252  1581  3036               	movlw	low i2c_readDataBlock@reg
  6253  1582  00A0               	movwf	I2C_SetBuffer@buffer
  6254  1583  3000               	movlw	high i2c_readDataBlock@reg
  6255  1584  00A1               	movwf	I2C_SetBuffer@buffer+1
  6256  1585  3001               	movlw	1
  6257  1586  00A2               	movwf	I2C_SetBuffer@bufferSize
  6258  1587  3000               	movlw	0
  6259  1588  00A3               	movwf	I2C_SetBuffer@bufferSize+1
  6260  1589  3190  205E  3195   	fcall	_I2C_SetBuffer
  6261                           
  6262                           ;mcc_generated_files/drivers/i2c_simple_master.c: 213:     I2C_SetAddressNackCallback(((
      +                          void*)0),((void*)0));
  6263  158C  3000               	movlw	0
  6264  158D  0020               	movlb	0	; select bank0
  6265  158E  00A9               	movwf	I2C_SetAddressNackCallback@cb
  6266  158F  00AA               	movwf	I2C_SetAddressNackCallback@cb+1
  6267  1590  01AB               	clrf	I2C_SetAddressNackCallback@ptr
  6268  1591  319F  27B1  3195   	fcall	_I2C_SetAddressNackCallback
  6269                           
  6270                           ;mcc_generated_files/drivers/i2c_simple_master.c: 214:     I2C_MasterWrite();
  6271  1594  319F  2702  3195   	fcall	_I2C_MasterWrite
  6272  1597                     l4916:	
  6273                           ;mcc_generated_files/drivers/i2c_simple_master.c: 215:     while(I2C_BUSY == I2C_Close()
      +                          );
  6274                           
  6275  1597  3191  21D0  3195   	fcall	_I2C_Close
  6276  159A  3A01               	xorlw	1
  6277  159B  1D03               	btfss	3,2
  6278  159C  0008               	return
  6279  159D  2D97               	goto	l4916
  6280  159E                     __end_of_i2c_readDataBlock:
  6281                           
  6282                           	psect	text7
  6283  0936                     __ptext7:	
  6284 ;; *************** function _decodeGesture *****************
  6285 ;; Defined at:
  6286 ;;		line 913 in file "APDS9960.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;		None
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      _Bool 
  6293 ;; Registers used:
  6294 ;;		wreg, status,2, status,0, pclath, cstack
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 1E/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;Total ram usage:        3 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    5
  6307 ;; This function calls:
  6308 ;;		_abs
  6309 ;; This function is called by:
  6310 ;;		_readGesture
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           
  6315                           ;psect for function _decodeGesture
  6316  0936                     _decodeGesture:
  6317                           
  6318                           ;APDS9960.c: 916:     if( gesture_state_ == NEAR_STATE ) {
  6319                           
  6320                           ;incstack = 0
  6321                           ; Regs used in _decodeGesture: [wreg+status,2+status,0+pclath+cstack]
  6322  0936  0021               	movlb	1	; select bank1
  6323  0937  0356               	decf	_gesture_state_^(0+128),w
  6324  0938  0457               	iorwf	(_gesture_state_+1)^(0+128),w
  6325  0939  1D03               	btfss	3,2
  6326  093A  2941               	goto	l5506
  6327                           
  6328                           ;APDS9960.c: 917:         gesture_motion_ = DIR_NEAR;
  6329  093B  3005               	movlw	5
  6330  093C  00D4               	movwf	_gesture_motion_^(0+128)
  6331  093D  3000               	movlw	0
  6332  093E  00D5               	movwf	(_gesture_motion_^(0+128)+1)
  6333                           
  6334                           ;APDS9960.c: 918:         return 1;
  6335  093F  3001               	movlw	1
  6336  0940  0008               	return
  6337  0941                     l5506:
  6338  0941  3002               	movlw	2
  6339  0942  0656               	xorwf	_gesture_state_^(0+128),w
  6340  0943  0457               	iorwf	(_gesture_state_+1)^(0+128),w
  6341  0944  1D03               	btfss	3,2
  6342  0945  294C               	goto	l5512
  6343                           
  6344                           ;APDS9960.c: 920:         gesture_motion_ = DIR_FAR;
  6345  0946  3006               	movlw	6
  6346  0947  00D4               	movwf	_gesture_motion_^(0+128)
  6347  0948  3000               	movlw	0
  6348  0949  00D5               	movwf	(_gesture_motion_^(0+128)+1)
  6349                           
  6350                           ;APDS9960.c: 921:         return 1;
  6351  094A  3001               	movlw	1
  6352  094B  0008               	return
  6353  094C                     l5512:
  6354                           
  6355                           ;APDS9960.c: 925:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  6356  094C  0020               	movlb	0	; select bank0
  6357  094D  0A62               	incf	_gesture_ud_count_,w
  6358  094E  1D03               	skipz
  6359  094F  2959               	goto	l5518
  6360  0950  0A63               	incf	_gesture_ud_count_+1,w
  6361  0951  1D03               	btfss	3,2
  6362  0952  2959               	goto	l5518
  6363  0953  0860               	movf	_gesture_lr_count_,w
  6364  0954  0461               	iorwf	_gesture_lr_count_+1,w
  6365  0955  1D03               	btfss	3,2
  6366  0956  2959               	goto	l5518
  6367  0957                     l5516:
  6368                           
  6369                           ;APDS9960.c: 926:         gesture_motion_ = DIR_UP;
  6370  0957  3003               	movlw	3
  6371  0958  2978               	goto	L6
  6372  0959                     l5518:	
  6373                           ;APDS9960.c: 927:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
  6374                           
  6375  0959  0362               	decf	_gesture_ud_count_,w
  6376  095A  0463               	iorwf	_gesture_ud_count_+1,w
  6377  095B  1D03               	btfss	3,2
  6378  095C  2963               	goto	l5524
  6379  095D  0860               	movf	_gesture_lr_count_,w
  6380  095E  0461               	iorwf	_gesture_lr_count_+1,w
  6381  095F  1D03               	btfss	3,2
  6382  0960  2963               	goto	l5524
  6383  0961                     l5522:
  6384                           
  6385                           ;APDS9960.c: 928:         gesture_motion_ = DIR_DOWN;
  6386  0961  3004               	movlw	4
  6387  0962  2978               	goto	L6
  6388  0963                     l5524:	
  6389                           ;APDS9960.c: 929:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
  6390                           
  6391  0963  0862               	movf	_gesture_ud_count_,w
  6392  0964  0463               	iorwf	_gesture_ud_count_+1,w
  6393  0965  1D03               	btfss	3,2
  6394  0966  296D               	goto	l5530
  6395  0967  0360               	decf	_gesture_lr_count_,w
  6396  0968  0461               	iorwf	_gesture_lr_count_+1,w
  6397  0969  1D03               	btfss	3,2
  6398  096A  296D               	goto	l5530
  6399  096B                     l5528:
  6400                           
  6401                           ;APDS9960.c: 930:         gesture_motion_ = DIR_RIGHT;
  6402  096B  3002               	movlw	2
  6403  096C  2978               	goto	L6
  6404  096D                     l5530:	
  6405                           ;APDS9960.c: 931:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
  6406                           
  6407  096D  0862               	movf	_gesture_ud_count_,w
  6408  096E  0463               	iorwf	_gesture_ud_count_+1,w
  6409  096F  1D03               	btfss	3,2
  6410  0970  297D               	goto	l5536
  6411  0971  0A60               	incf	_gesture_lr_count_,w
  6412  0972  1D03               	skipz
  6413  0973  297D               	goto	l5536
  6414  0974  0A61               	incf	_gesture_lr_count_+1,w
  6415  0975  1D03               	btfss	3,2
  6416  0976  297D               	goto	l5536
  6417  0977                     l5534:
  6418                           
  6419                           ;APDS9960.c: 932:         gesture_motion_ = DIR_LEFT;
  6420  0977  3001               	movlw	1
  6421  0978                     L6:
  6422  0978  0021               	movlb	1	; select bank1
  6423  0979  00D4               	movwf	_gesture_motion_^(0+128)
  6424  097A  3000               	movlw	0
  6425  097B  00D5               	movwf	(_gesture_motion_^(0+128)+1)
  6426                           
  6427                           ;APDS9960.c: 933:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
  6428  097C  2A2B               	goto	l5580
  6429  097D                     l5536:
  6430  097D  0A62               	incf	_gesture_ud_count_,w
  6431  097E  1D03               	skipz
  6432  097F  29A8               	goto	l5546
  6433  0980  0A63               	incf	_gesture_ud_count_+1,w
  6434  0981  1D03               	btfss	3,2
  6435  0982  29A8               	goto	l5546
  6436  0983  0360               	decf	_gesture_lr_count_,w
  6437  0984  0461               	iorwf	_gesture_lr_count_+1,w
  6438  0985  1D03               	btfss	3,2
  6439  0986  29A8               	goto	l5546
  6440                           
  6441                           ;APDS9960.c: 934:         if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
  6442  0987  0865               	movf	_gesture_lr_delta_+1,w
  6443  0988  00A1               	movwf	abs@a+1
  6444  0989  0864               	movf	_gesture_lr_delta_,w
  6445  098A  00A0               	movwf	abs@a
  6446  098B  3191  214B  3189   	fcall	_abs
  6447  098E  0020               	movlb	0	; select bank0
  6448  098F  0820               	movf	?_abs,w
  6449  0990  00A4               	movwf	??_decodeGesture
  6450  0991  0821               	movf	?_abs+1,w
  6451  0992  00A5               	movwf	??_decodeGesture+1
  6452  0993  0867               	movf	_gesture_ud_delta_+1,w
  6453  0994  00A1               	movwf	abs@a+1
  6454  0995  0866               	movf	_gesture_ud_delta_,w
  6455  0996  00A0               	movwf	abs@a
  6456  0997  3191  214B  3189   	fcall	_abs
  6457  099A  0020               	movlb	0	; select bank0
  6458  099B  0825               	movf	??_decodeGesture+1,w
  6459  099C  3A80               	xorlw	128
  6460  099D  00A6               	movwf	??_decodeGesture+2
  6461  099E  0821               	movf	?_abs+1,w
  6462  099F  3A80               	xorlw	128
  6463  09A0  0226               	subwf	??_decodeGesture+2,w
  6464  09A1  1D03               	skipz
  6465  09A2  29A5               	goto	u3195
  6466  09A3  0820               	movf	?_abs,w
  6467  09A4  0224               	subwf	??_decodeGesture,w
  6468  09A5                     u3195:
  6469  09A5  1C03               	btfss	3,0
  6470  09A6  2957               	goto	l5516
  6471  09A7  296B               	goto	l5528
  6472  09A8                     l5546:
  6473  09A8  0362               	decf	_gesture_ud_count_,w
  6474  09A9  0463               	iorwf	_gesture_ud_count_+1,w
  6475  09AA  1D03               	btfss	3,2
  6476  09AB  29D3               	goto	l5556
  6477  09AC  0A60               	incf	_gesture_lr_count_,w
  6478  09AD  1D03               	skipz
  6479  09AE  29D3               	goto	l5556
  6480  09AF  0A61               	incf	_gesture_lr_count_+1,w
  6481  09B0  1D03               	btfss	3,2
  6482  09B1  29D3               	goto	l5556
  6483                           
  6484                           ;APDS9960.c: 940:         if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
  6485  09B2  0865               	movf	_gesture_lr_delta_+1,w
  6486  09B3  00A1               	movwf	abs@a+1
  6487  09B4  0864               	movf	_gesture_lr_delta_,w
  6488  09B5  00A0               	movwf	abs@a
  6489  09B6  3191  214B  3189   	fcall	_abs
  6490  09B9  0020               	movlb	0	; select bank0
  6491  09BA  0820               	movf	?_abs,w
  6492  09BB  00A4               	movwf	??_decodeGesture
  6493  09BC  0821               	movf	?_abs+1,w
  6494  09BD  00A5               	movwf	??_decodeGesture+1
  6495  09BE  0867               	movf	_gesture_ud_delta_+1,w
  6496  09BF  00A1               	movwf	abs@a+1
  6497  09C0  0866               	movf	_gesture_ud_delta_,w
  6498  09C1  00A0               	movwf	abs@a
  6499  09C2  3191  214B  3189   	fcall	_abs
  6500  09C5  0020               	movlb	0	; select bank0
  6501  09C6  0825               	movf	??_decodeGesture+1,w
  6502  09C7  3A80               	xorlw	128
  6503  09C8  00A6               	movwf	??_decodeGesture+2
  6504  09C9  0821               	movf	?_abs+1,w
  6505  09CA  3A80               	xorlw	128
  6506  09CB  0226               	subwf	??_decodeGesture+2,w
  6507  09CC  1D03               	skipz
  6508  09CD  29D0               	goto	u3225
  6509  09CE  0820               	movf	?_abs,w
  6510  09CF  0224               	subwf	??_decodeGesture,w
  6511  09D0                     u3225:
  6512  09D0  1C03               	btfss	3,0
  6513  09D1  2961               	goto	l5522
  6514  09D2  2977               	goto	l5534
  6515  09D3                     l5556:
  6516  09D3  0A62               	incf	_gesture_ud_count_,w
  6517  09D4  1D03               	skipz
  6518  09D5  2A00               	goto	l5566
  6519  09D6  0A63               	incf	_gesture_ud_count_+1,w
  6520  09D7  1D03               	btfss	3,2
  6521  09D8  2A00               	goto	l5566
  6522  09D9  0A60               	incf	_gesture_lr_count_,w
  6523  09DA  1D03               	skipz
  6524  09DB  2A00               	goto	l5566
  6525  09DC  0A61               	incf	_gesture_lr_count_+1,w
  6526  09DD  1D03               	btfss	3,2
  6527  09DE  2A00               	goto	l5566
  6528                           
  6529                           ;APDS9960.c: 946:         if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
  6530  09DF  0865               	movf	_gesture_lr_delta_+1,w
  6531  09E0  00A1               	movwf	abs@a+1
  6532  09E1  0864               	movf	_gesture_lr_delta_,w
  6533  09E2  00A0               	movwf	abs@a
  6534  09E3  3191  214B  3189   	fcall	_abs
  6535  09E6  0020               	movlb	0	; select bank0
  6536  09E7  0820               	movf	?_abs,w
  6537  09E8  00A4               	movwf	??_decodeGesture
  6538  09E9  0821               	movf	?_abs+1,w
  6539  09EA  00A5               	movwf	??_decodeGesture+1
  6540  09EB  0867               	movf	_gesture_ud_delta_+1,w
  6541  09EC  00A1               	movwf	abs@a+1
  6542  09ED  0866               	movf	_gesture_ud_delta_,w
  6543  09EE  00A0               	movwf	abs@a
  6544  09EF  3191  214B  3189   	fcall	_abs
  6545  09F2  0020               	movlb	0	; select bank0
  6546  09F3  0825               	movf	??_decodeGesture+1,w
  6547  09F4  3A80               	xorlw	128
  6548  09F5  00A6               	movwf	??_decodeGesture+2
  6549  09F6  0821               	movf	?_abs+1,w
  6550  09F7  3A80               	xorlw	128
  6551  09F8  0226               	subwf	??_decodeGesture+2,w
  6552  09F9  1D03               	skipz
  6553  09FA  29FD               	goto	u3255
  6554  09FB  0820               	movf	?_abs,w
  6555  09FC  0224               	subwf	??_decodeGesture,w
  6556  09FD                     u3255:
  6557  09FD  1C03               	btfss	3,0
  6558  09FE  2957               	goto	l5516
  6559  09FF  2977               	goto	l5534
  6560  0A00                     l5566:
  6561  0A00  0362               	decf	_gesture_ud_count_,w
  6562  0A01  0463               	iorwf	_gesture_ud_count_+1,w
  6563  0A02  1D03               	btfss	3,2
  6564  0A03  2A29               	goto	l5576
  6565  0A04  0360               	decf	_gesture_lr_count_,w
  6566  0A05  0461               	iorwf	_gesture_lr_count_+1,w
  6567  0A06  1D03               	btfss	3,2
  6568  0A07  2A29               	goto	l5576
  6569                           
  6570                           ;APDS9960.c: 952:         if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
  6571  0A08  0865               	movf	_gesture_lr_delta_+1,w
  6572  0A09  00A1               	movwf	abs@a+1
  6573  0A0A  0864               	movf	_gesture_lr_delta_,w
  6574  0A0B  00A0               	movwf	abs@a
  6575  0A0C  3191  214B  3189   	fcall	_abs
  6576  0A0F  0020               	movlb	0	; select bank0
  6577  0A10  0820               	movf	?_abs,w
  6578  0A11  00A4               	movwf	??_decodeGesture
  6579  0A12  0821               	movf	?_abs+1,w
  6580  0A13  00A5               	movwf	??_decodeGesture+1
  6581  0A14  0867               	movf	_gesture_ud_delta_+1,w
  6582  0A15  00A1               	movwf	abs@a+1
  6583  0A16  0866               	movf	_gesture_ud_delta_,w
  6584  0A17  00A0               	movwf	abs@a
  6585  0A18  3191  214B  3189   	fcall	_abs
  6586  0A1B  0020               	movlb	0	; select bank0
  6587  0A1C  0825               	movf	??_decodeGesture+1,w
  6588  0A1D  3A80               	xorlw	128
  6589  0A1E  00A6               	movwf	??_decodeGesture+2
  6590  0A1F  0821               	movf	?_abs+1,w
  6591  0A20  3A80               	xorlw	128
  6592  0A21  0226               	subwf	??_decodeGesture+2,w
  6593  0A22  1D03               	skipz
  6594  0A23  2A26               	goto	u3285
  6595  0A24  0820               	movf	?_abs,w
  6596  0A25  0224               	subwf	??_decodeGesture,w
  6597  0A26                     u3285:
  6598  0A26  1C03               	btfss	3,0
  6599  0A27  2961               	goto	l5522
  6600  0A28  296B               	goto	l5528
  6601  0A29                     l5576:
  6602                           
  6603                           ;APDS9960.c: 958:         return 0;
  6604  0A29  3000               	movlw	0
  6605  0A2A  0008               	return
  6606  0A2B                     l5580:
  6607                           
  6608                           ;APDS9960.c: 961:     return 1;
  6609  0A2B  3001               	movlw	1
  6610  0A2C  0008               	return
  6611  0A2D                     __end_of_decodeGesture:
  6612                           
  6613                           	psect	text8
  6614  114B                     __ptext8:	
  6615 ;; *************** function _abs *****************
  6616 ;; Defined at:
  6617 ;;		line 1 in file "D:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\abs.c"
  6618 ;; Parameters:    Size  Location     Type
  6619 ;;  a               2    0[BANK0 ] int 
  6620 ;; Auto vars:     Size  Location     Type
  6621 ;;		None
  6622 ;; Return value:  Size  Location     Type
  6623 ;;                  2    0[BANK0 ] int 
  6624 ;; Registers used:
  6625 ;;		wreg, status,2, status,0
  6626 ;; Tracked objects:
  6627 ;;		On entry : 1F/0
  6628 ;;		On exit  : 0/0
  6629 ;;		Unchanged: 0/0
  6630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6631 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;Total ram usage:        4 bytes
  6636 ;; Hardware stack levels used:    1
  6637 ;; Hardware stack levels required when called:    4
  6638 ;; This function calls:
  6639 ;;		Nothing
  6640 ;; This function is called by:
  6641 ;;		_processGestureData
  6642 ;;		_decodeGesture
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           
  6647                           ;psect for function _abs
  6648  114B                     _abs:
  6649                           
  6650                           ;incstack = 0
  6651                           ; Regs used in _abs: [wreg+status,2+status,0]
  6652  114B  0821               	movf	abs@a+1,w
  6653  114C  3A80               	xorlw	128
  6654  114D  00A2               	movwf	??_abs
  6655  114E  3080               	movlw	128
  6656  114F  0222               	subwf	??_abs,w
  6657  1150  1D03               	skipz
  6658  1151  2954               	goto	u2165
  6659  1152  3001               	movlw	1
  6660  1153  0220               	subwf	abs@a,w
  6661  1154                     u2165:
  6662  1154  1803               	skipnc
  6663  1155  0008               	return
  6664  1156  0020               	movlb	0	; select bank0
  6665  1157  0920               	comf	abs@a,w
  6666  1158  00A2               	movwf	??_abs
  6667  1159  0921               	comf	abs@a+1,w
  6668  115A  00A3               	movwf	??_abs+1
  6669  115B  0AA2               	incf	??_abs,f
  6670  115C  1903               	skipnz
  6671  115D  0AA3               	incf	??_abs+1,f
  6672  115E  0822               	movf	??_abs,w
  6673  115F  00A0               	movwf	?_abs
  6674  1160  0823               	movf	??_abs+1,w
  6675  1161  00A1               	movwf	?_abs+1
  6676  1162  0008               	return
  6677  1163                     __end_of_abs:
  6678                           
  6679                           	psect	text9
  6680  17A8                     __ptext9:	
  6681 ;; *************** function _enableGestureSensor *****************
  6682 ;; Defined at:
  6683 ;;		line 332 in file "APDS9960.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;  interrupts      1    wreg     _Bool 
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  interrupts      1   36[BANK0 ] _Bool 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  1    wreg      _Bool 
  6690 ;; Registers used:
  6691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 1F/0
  6694 ;;		On exit  : 1F/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;Total ram usage:        3 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:   14
  6704 ;; This function calls:
  6705 ;;		_i2c_write1ByteRegister
  6706 ;;		_resetGestureParameters
  6707 ;;		_setGestureIntEnable
  6708 ;;		_setGestureMode
  6709 ;;		_setLEDBoost
  6710 ;;		_setMode
  6711 ;; This function is called by:
  6712 ;;		_main
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           
  6717                           ;psect for function _enableGestureSensor
  6718  17A8                     _enableGestureSensor:
  6719                           
  6720                           ;incstack = 0
  6721                           ; Regs used in _enableGestureSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6722                           ;enableGestureSensor@interrupts stored from wreg
  6723  17A8  00C4               	movwf	enableGestureSensor@interrupts
  6724                           
  6725                           ;APDS9960.c: 332: _Bool enableGestureSensor(_Bool interrupts);APDS9960.c: 333: {;APDS996
      +                          0.c: 341:     resetGestureParameters();
  6726  17A9  3191  2197  3197   	fcall	_resetGestureParameters
  6727                           
  6728                           ;APDS9960.c: 343:     i2c_write1ByteRegister(0x39,0x83, 0xFF);
  6729  17AC  3083               	movlw	131
  6730  17AD  0020               	movlb	0	; select bank0
  6731  17AE  00C2               	movwf	??_enableGestureSensor
  6732  17AF  0842               	movf	??_enableGestureSensor,w
  6733  17B0  00B6               	movwf	i2c_write1ByteRegister@reg
  6734  17B1  30FF               	movlw	255
  6735  17B2  00C3               	movwf	??_enableGestureSensor+1
  6736  17B3  0843               	movf	??_enableGestureSensor+1,w
  6737  17B4  00B7               	movwf	i2c_write1ByteRegister@data
  6738  17B5  3039               	movlw	57
  6739  17B6  3193  2377  3197   	fcall	_i2c_write1ByteRegister
  6740                           
  6741                           ;APDS9960.c: 345:     i2c_write1ByteRegister(0x39,0x8E, 0x89);
  6742  17B9  308E               	movlw	142
  6743  17BA  00C2               	movwf	??_enableGestureSensor
  6744  17BB  0842               	movf	??_enableGestureSensor,w
  6745  17BC  00B6               	movwf	i2c_write1ByteRegister@reg
  6746  17BD  3089               	movlw	137
  6747  17BE  00C3               	movwf	??_enableGestureSensor+1
  6748  17BF  0843               	movf	??_enableGestureSensor+1,w
  6749  17C0  00B7               	movwf	i2c_write1ByteRegister@data
  6750  17C1  3039               	movlw	57
  6751  17C2  3193  2377  3197   	fcall	_i2c_write1ByteRegister
  6752                           
  6753                           ;APDS9960.c: 347:     if( !setLEDBoost(0) ) {
  6754  17C5  3000               	movlw	0
  6755  17C6  3194  2437  3197   	fcall	_setLEDBoost
  6756  17C9  3A00               	xorlw	0
  6757  17CA  1903               	btfsc	3,2
  6758  17CB  0008               	return
  6759                           
  6760                           ;APDS9960.c: 350:     if( interrupts ) {
  6761  17CC  0844               	movf	enableGestureSensor@interrupts,w
  6762  17CD  1903               	btfsc	3,2
  6763  17CE  2FD1               	goto	l5752
  6764                           
  6765                           ;APDS9960.c: 351:         if( !setGestureIntEnable(1) ) {
  6766  17CF  3001               	movlw	1
  6767  17D0  2FD2               	goto	L7
  6768  17D1                     l5752:
  6769                           
  6770                           ;APDS9960.c: 355:         if( !setGestureIntEnable(0) ) {
  6771  17D1  3000               	movlw	0
  6772  17D2                     L7:
  6773  17D2  3193  2321  3197   	fcall	_setGestureIntEnable
  6774  17D5  3A00               	xorlw	0
  6775  17D6  1903               	btfsc	3,2
  6776  17D7  0008               	return
  6777                           
  6778                           ;APDS9960.c: 359:     if( !setGestureMode(1) ) {
  6779  17D8  3001               	movlw	1
  6780  17D9  3192  22FC  3197   	fcall	_setGestureMode
  6781  17DC  3A00               	xorlw	0
  6782  17DD  1903               	btfsc	3,2
  6783  17DE  0008               	return
  6784                           
  6785                           ;APDS9960.c: 362:     if( !setMode(0, 1) ){
  6786  17DF  01BD               	clrf	setMode@enable
  6787  17E0  0ABD               	incf	setMode@enable,f
  6788  17E1  3000               	movlw	0
  6789  17E2  3196  26B5  3197   	fcall	_setMode
  6790  17E5  3A00               	xorlw	0
  6791  17E6  1903               	btfsc	3,2
  6792  17E7  0008               	return
  6793                           
  6794                           ;APDS9960.c: 365:     if( !setMode(3, 1) ) {
  6795  17E8  01BD               	clrf	setMode@enable
  6796  17E9  0ABD               	incf	setMode@enable,f
  6797  17EA  3003               	movlw	3
  6798  17EB  3196  26B5  3197   	fcall	_setMode
  6799  17EE  3A00               	xorlw	0
  6800  17EF  1903               	btfsc	3,2
  6801  17F0  0008               	return
  6802                           
  6803                           ;APDS9960.c: 368:     if( !setMode(2, 1) ) {
  6804  17F1  01BD               	clrf	setMode@enable
  6805  17F2  0ABD               	incf	setMode@enable,f
  6806  17F3  3002               	movlw	2
  6807  17F4  3196  26B5  3197   	fcall	_setMode
  6808  17F7  3A00               	xorlw	0
  6809  17F8  1903               	btfsc	3,2
  6810  17F9  0008               	return
  6811                           
  6812                           ;APDS9960.c: 371:     if( !setMode(6, 1) ) {
  6813  17FA  01BD               	clrf	setMode@enable
  6814  17FB  0ABD               	incf	setMode@enable,f
  6815  17FC  3006               	movlw	6
  6816  17FD  3196  26B5         	fcall	_setMode
  6817  17FF  0008               	return
  6818  1800                     __end_of_enableGestureSensor:
  6819                           
  6820                           	psect	text10
  6821  1437                     __ptext10:	
  6822 ;; *************** function _setLEDBoost *****************
  6823 ;; Defined at:
  6824 ;;		line 1224 in file "APDS9960.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;  boost           1    wreg     unsigned char 
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;  boost           1   32[BANK0 ] unsigned char 
  6829 ;;  val             1   31[BANK0 ] unsigned char 
  6830 ;; Return value:  Size  Location     Type
  6831 ;;                  1    wreg      _Bool 
  6832 ;; Registers used:
  6833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6834 ;; Tracked objects:
  6835 ;;		On entry : 1F/0
  6836 ;;		On exit  : 1F/0
  6837 ;;		Unchanged: 0/0
  6838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6840 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6842 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6843 ;;Total ram usage:        4 bytes
  6844 ;; Hardware stack levels used:    1
  6845 ;; Hardware stack levels required when called:   13
  6846 ;; This function calls:
  6847 ;;		_i2c_read1ByteRegister
  6848 ;;		_i2c_write1ByteRegister
  6849 ;; This function is called by:
  6850 ;;		_enableGestureSensor
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           
  6855                           ;psect for function _setLEDBoost
  6856  1437                     _setLEDBoost:
  6857                           
  6858                           ;incstack = 0
  6859                           ; Regs used in _setLEDBoost: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6860                           ;setLEDBoost@boost stored from wreg
  6861  1437  00C0               	movwf	setLEDBoost@boost
  6862                           
  6863                           ;APDS9960.c: 1224: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 1225: {;APDS9960.c: 1226
      +                          :     uint8_t val;;APDS9960.c: 1229:     val = i2c_read1ByteRegister(0x39,0x90);
  6864  1438  3090               	movlw	144
  6865  1439  00BD               	movwf	??_setLEDBoost
  6866  143A  083D               	movf	??_setLEDBoost,w
  6867  143B  00B6               	movwf	i2c_read1ByteRegister@reg
  6868  143C  3039               	movlw	57
  6869  143D  3196  2624  3194   	fcall	_i2c_read1ByteRegister
  6870  1440  00BE               	movwf	??_setLEDBoost+1
  6871  1441  083E               	movf	??_setLEDBoost+1,w
  6872  1442  00BF               	movwf	setLEDBoost@val
  6873                           
  6874                           ;APDS9960.c: 1232:     boost &= 0b00000011;
  6875  1443  3003               	movlw	3
  6876  1444  00BD               	movwf	??_setLEDBoost
  6877  1445  083D               	movf	??_setLEDBoost,w
  6878  1446  05C0               	andwf	setLEDBoost@boost,f
  6879                           
  6880                           ;APDS9960.c: 1233:     boost = boost << 4;
  6881  1447  0840               	movf	setLEDBoost@boost,w
  6882  1448  00BD               	movwf	??_setLEDBoost
  6883  1449  3003               	movlw	3
  6884  144A                     u2665:
  6885  144A  35BD               	lslf	??_setLEDBoost,f
  6886  144B  3EFF               	addlw	-1
  6887  144C  1D03               	skipz
  6888  144D  2C4A               	goto	u2665
  6889  144E  353D               	lslf	??_setLEDBoost,w
  6890  144F  00BE               	movwf	??_setLEDBoost+1
  6891  1450  083E               	movf	??_setLEDBoost+1,w
  6892  1451  00C0               	movwf	setLEDBoost@boost
  6893                           
  6894                           ;APDS9960.c: 1234:     val &= 0b11001111;
  6895  1452  30CF               	movlw	207
  6896  1453  00BD               	movwf	??_setLEDBoost
  6897  1454  083D               	movf	??_setLEDBoost,w
  6898  1455  05BF               	andwf	setLEDBoost@val,f
  6899                           
  6900                           ;APDS9960.c: 1235:     val |= boost;
  6901  1456  0840               	movf	setLEDBoost@boost,w
  6902  1457  00BD               	movwf	??_setLEDBoost
  6903  1458  083D               	movf	??_setLEDBoost,w
  6904  1459  04BF               	iorwf	setLEDBoost@val,f
  6905                           
  6906                           ;APDS9960.c: 1238:     i2c_write1ByteRegister(0x39,0x90, val);
  6907  145A  3090               	movlw	144
  6908  145B  00BD               	movwf	??_setLEDBoost
  6909  145C  083D               	movf	??_setLEDBoost,w
  6910  145D  00B6               	movwf	i2c_write1ByteRegister@reg
  6911  145E  083F               	movf	setLEDBoost@val,w
  6912  145F  00BE               	movwf	??_setLEDBoost+1
  6913  1460  083E               	movf	??_setLEDBoost+1,w
  6914  1461  00B7               	movwf	i2c_write1ByteRegister@data
  6915  1462  3039               	movlw	57
  6916  1463  3193  2377         	fcall	_i2c_write1ByteRegister
  6917                           
  6918                           ;APDS9960.c: 1240:     return 1;
  6919  1465  3001               	movlw	1
  6920  1466  0008               	return
  6921  1467                     __end_of_setLEDBoost:
  6922                           
  6923                           	psect	text11
  6924  12FC                     __ptext11:	
  6925 ;; *************** function _setGestureMode *****************
  6926 ;; Defined at:
  6927 ;;		line 1904 in file "APDS9960.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;  mode            1    wreg     unsigned char 
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;  mode            1   31[BANK0 ] unsigned char 
  6932 ;;  val             1   32[BANK0 ] unsigned char 
  6933 ;; Return value:  Size  Location     Type
  6934 ;;                  1    wreg      _Bool 
  6935 ;; Registers used:
  6936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6937 ;; Tracked objects:
  6938 ;;		On entry : 1F/0
  6939 ;;		On exit  : 1F/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6944 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6945 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6946 ;;Total ram usage:        4 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:   13
  6949 ;; This function calls:
  6950 ;;		_i2c_read1ByteRegister
  6951 ;;		_i2c_write1ByteRegister
  6952 ;; This function is called by:
  6953 ;;		_enableGestureSensor
  6954 ;; This function uses a non-reentrant model
  6955 ;;
  6956                           
  6957                           
  6958                           ;psect for function _setGestureMode
  6959  12FC                     _setGestureMode:
  6960                           
  6961                           ;incstack = 0
  6962                           ; Regs used in _setGestureMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6963                           ;setGestureMode@mode stored from wreg
  6964  12FC  00BF               	movwf	setGestureMode@mode
  6965                           
  6966                           ;APDS9960.c: 1904: _Bool setGestureMode(uint8_t mode);APDS9960.c: 1905: {;APDS9960.c: 19
      +                          06:     uint8_t val;;APDS9960.c: 1909:     val = i2c_read1ByteRegister(0x39,0xAB);
  6967  12FD  30AB               	movlw	171
  6968  12FE  00BD               	movwf	??_setGestureMode
  6969  12FF  083D               	movf	??_setGestureMode,w
  6970  1300  00B6               	movwf	i2c_read1ByteRegister@reg
  6971  1301  3039               	movlw	57
  6972  1302  3196  2624  3192   	fcall	_i2c_read1ByteRegister
  6973  1305  00BE               	movwf	??_setGestureMode+1
  6974  1306  083E               	movf	??_setGestureMode+1,w
  6975  1307  00C0               	movwf	setGestureMode@val
  6976                           
  6977                           ;APDS9960.c: 1912:     mode &= 0b00000001;
  6978  1308  3001               	movlw	1
  6979  1309  00BD               	movwf	??_setGestureMode
  6980  130A  083D               	movf	??_setGestureMode,w
  6981  130B  05BF               	andwf	setGestureMode@mode,f
  6982                           
  6983                           ;APDS9960.c: 1913:     val &= 0b11111110;
  6984  130C  30FE               	movlw	254
  6985  130D  00BD               	movwf	??_setGestureMode
  6986  130E  083D               	movf	??_setGestureMode,w
  6987  130F  05C0               	andwf	setGestureMode@val,f
  6988                           
  6989                           ;APDS9960.c: 1914:     val |= mode;
  6990  1310  083F               	movf	setGestureMode@mode,w
  6991  1311  00BD               	movwf	??_setGestureMode
  6992  1312  083D               	movf	??_setGestureMode,w
  6993  1313  04C0               	iorwf	setGestureMode@val,f
  6994                           
  6995                           ;APDS9960.c: 1917:     i2c_write1ByteRegister(0x39,0xAB,val);
  6996  1314  30AB               	movlw	171
  6997  1315  00BD               	movwf	??_setGestureMode
  6998  1316  083D               	movf	??_setGestureMode,w
  6999  1317  00B6               	movwf	i2c_write1ByteRegister@reg
  7000  1318  0840               	movf	setGestureMode@val,w
  7001  1319  00BE               	movwf	??_setGestureMode+1
  7002  131A  083E               	movf	??_setGestureMode+1,w
  7003  131B  00B7               	movwf	i2c_write1ByteRegister@data
  7004  131C  3039               	movlw	57
  7005  131D  3193  2377         	fcall	_i2c_write1ByteRegister
  7006                           
  7007                           ;APDS9960.c: 1919:     return 1;
  7008  131F  3001               	movlw	1
  7009  1320  0008               	return
  7010  1321                     __end_of_setGestureMode:
  7011                           
  7012                           	psect	text12
  7013  1197                     __ptext12:	
  7014 ;; *************** function _resetGestureParameters *****************
  7015 ;; Defined at:
  7016 ;;		line 688 in file "APDS9960.c"
  7017 ;; Parameters:    Size  Location     Type
  7018 ;;		None
  7019 ;; Auto vars:     Size  Location     Type
  7020 ;;		None
  7021 ;; Return value:  Size  Location     Type
  7022 ;;                  1    wreg      void 
  7023 ;; Registers used:
  7024 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7025 ;; Tracked objects:
  7026 ;;		On entry : 1F/0
  7027 ;;		On exit  : 1F/1
  7028 ;;		Unchanged: 0/0
  7029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;Total ram usage:        0 bytes
  7035 ;; Hardware stack levels used:    1
  7036 ;; Hardware stack levels required when called:    4
  7037 ;; This function calls:
  7038 ;;		Nothing
  7039 ;; This function is called by:
  7040 ;;		_enableGestureSensor
  7041 ;;		_readGesture
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           
  7046                           ;psect for function _resetGestureParameters
  7047  1197                     _resetGestureParameters:
  7048                           
  7049                           ;APDS9960.c: 690:     gesture_data_.index = 0;
  7050                           
  7051                           ;incstack = 0
  7052                           ; Regs used in _resetGestureParameters: [wreg+fsr1l+fsr1h+status,2+status,0]
  7053  1197  306C               	movlw	108
  7054  1198  0086               	movwf	6
  7055  1199  3023               	movlw	35
  7056  119A  0087               	movwf	7
  7057  119B  0181               	clrf	1
  7058                           
  7059                           ;APDS9960.c: 691:     gesture_data_.total_gestures = 0;
  7060  119C  306D               	movlw	109
  7061  119D  0086               	movwf	6
  7062  119E  3023               	movlw	35
  7063  119F  0087               	movwf	7
  7064  11A0  0181               	clrf	1
  7065                           
  7066                           ;APDS9960.c: 693:     gesture_ud_delta_ = 0;
  7067  11A1  01E6               	clrf	_gesture_ud_delta_
  7068  11A2  01E7               	clrf	_gesture_ud_delta_+1
  7069                           
  7070                           ;APDS9960.c: 694:     gesture_lr_delta_ = 0;
  7071  11A3  01E4               	clrf	_gesture_lr_delta_
  7072  11A4  01E5               	clrf	_gesture_lr_delta_+1
  7073                           
  7074                           ;APDS9960.c: 696:     gesture_ud_count_ = 0;
  7075  11A5  01E2               	clrf	_gesture_ud_count_
  7076  11A6  01E3               	clrf	_gesture_ud_count_+1
  7077                           
  7078                           ;APDS9960.c: 697:     gesture_lr_count_ = 0;
  7079  11A7  01E0               	clrf	_gesture_lr_count_
  7080  11A8  01E1               	clrf	_gesture_lr_count_+1
  7081                           
  7082                           ;APDS9960.c: 699:     gesture_near_count_ = 0;
  7083  11A9  0021               	movlb	1	; select bank1
  7084  11AA  01DA               	clrf	_gesture_near_count_^(0+128)
  7085  11AB  01DB               	clrf	(_gesture_near_count_+1)^(0+128)
  7086                           
  7087                           ;APDS9960.c: 700:     gesture_far_count_ = 0;
  7088  11AC  01D8               	clrf	_gesture_far_count_^(0+128)
  7089  11AD  01D9               	clrf	(_gesture_far_count_+1)^(0+128)
  7090                           
  7091                           ;APDS9960.c: 702:     gesture_state_ = 0;
  7092  11AE  01D6               	clrf	_gesture_state_^(0+128)
  7093  11AF  01D7               	clrf	(_gesture_state_+1)^(0+128)
  7094                           
  7095                           ;APDS9960.c: 703:     gesture_motion_ = DIR_NONE;
  7096  11B0  01D4               	clrf	_gesture_motion_^(0+128)
  7097  11B1  01D5               	clrf	(_gesture_motion_+1)^(0+128)
  7098  11B2  0008               	return
  7099  11B3                     __end_of_resetGestureParameters:
  7100                           
  7101                           	psect	text13
  7102  1291                     __ptext13:	
  7103 ;; *************** function _SYSTEM_Initialize *****************
  7104 ;; Defined at:
  7105 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;		None
  7108 ;; Auto vars:     Size  Location     Type
  7109 ;;		None
  7110 ;; Return value:  Size  Location     Type
  7111 ;;                  1    wreg      void 
  7112 ;; Registers used:
  7113 ;;		wreg, status,2, status,0, pclath, cstack
  7114 ;; Tracked objects:
  7115 ;;		On entry : B1F/0
  7116 ;;		On exit  : 1F/F
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7123 ;;Total ram usage:        0 bytes
  7124 ;; Hardware stack levels used:    1
  7125 ;; Hardware stack levels required when called:    6
  7126 ;; This function calls:
  7127 ;;		_CCP4_Initialize
  7128 ;;		_DAC_Initialize
  7129 ;;		_EUSART_Initialize
  7130 ;;		_FVR_Initialize
  7131 ;;		_I2C_Initialize
  7132 ;;		_LCD_Initialize
  7133 ;;		_OSCILLATOR_Initialize
  7134 ;;		_PIN_MANAGER_Initialize
  7135 ;;		_TMR0_Initialize
  7136 ;;		_TMR1_Initialize
  7137 ;;		_WDT_Initialize
  7138 ;; This function is called by:
  7139 ;;		_main
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           
  7144                           ;psect for function _SYSTEM_Initialize
  7145  1291                     _SYSTEM_Initialize:
  7146                           
  7147                           ;mcc_generated_files/mcc.c: 53:     I2C_Initialize();
  7148                           
  7149                           ;incstack = 0
  7150                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7151  1291  319F  277E  3192   	fcall	_I2C_Initialize
  7152                           
  7153                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  7154  1294  3188  2000  3192   	fcall	_PIN_MANAGER_Initialize
  7155                           
  7156                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  7157  1297  319F  2787  3192   	fcall	_OSCILLATOR_Initialize
  7158                           
  7159                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  7160  129A  3187  27FD  3192   	fcall	_WDT_Initialize
  7161                           
  7162                           ;mcc_generated_files/mcc.c: 57:     FVR_Initialize();
  7163  129D  319F  2706  3192   	fcall	_FVR_Initialize
  7164                           
  7165                           ;mcc_generated_files/mcc.c: 58:     DAC_Initialize();
  7166  12A0  319F  2714  3192   	fcall	_DAC_Initialize
  7167                           
  7168                           ;mcc_generated_files/mcc.c: 59:     CCP4_Initialize();
  7169  12A3  3190  2038  3192   	fcall	_CCP4_Initialize
  7170                           
  7171                           ;mcc_generated_files/mcc.c: 60:     TMR1_Initialize();
  7172  12A6  3190  2028  3192   	fcall	_TMR1_Initialize
  7173                           
  7174                           ;mcc_generated_files/mcc.c: 61:     TMR0_Initialize();
  7175  12A9  3190  2000  3192   	fcall	_TMR0_Initialize
  7176                           
  7177                           ;mcc_generated_files/mcc.c: 62:     EUSART_Initialize();
  7178  12AC  3195  259E  3192   	fcall	_EUSART_Initialize
  7179                           
  7180                           ;mcc_generated_files/mcc.c: 63:     LCD_Initialize();
  7181  12AF  3191  2133         	fcall	_LCD_Initialize
  7182  12B1  0008               	return
  7183  12B2                     __end_of_SYSTEM_Initialize:
  7184                           
  7185                           	psect	text14
  7186  07FD                     __ptext14:	
  7187 ;; *************** function _WDT_Initialize *****************
  7188 ;; Defined at:
  7189 ;;		line 80 in file "mcc_generated_files/mcc.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;		None
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		wreg
  7198 ;; Tracked objects:
  7199 ;;		On entry : 1F/1
  7200 ;;		On exit  : 1F/1
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;Total ram usage:        0 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    4
  7210 ;; This function calls:
  7211 ;;		Nothing
  7212 ;; This function is called by:
  7213 ;;		_SYSTEM_Initialize
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           
  7218                           ;psect for function _WDT_Initialize
  7219  07FD                     _WDT_Initialize:
  7220                           
  7221                           ;mcc_generated_files/mcc.c: 83:     WDTCON = 0x16;
  7222                           
  7223                           ;incstack = 0
  7224                           ; Regs used in _WDT_Initialize: [wreg]
  7225  07FD  3016               	movlw	22
  7226  07FE  0097               	movwf	23	;volatile
  7227  07FF  0008               	return
  7228  0800                     __end_of_WDT_Initialize:
  7229                           
  7230                           	psect	text15
  7231  1028                     __ptext15:	
  7232 ;; *************** function _TMR1_Initialize *****************
  7233 ;; Defined at:
  7234 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;		None
  7237 ;; Auto vars:     Size  Location     Type
  7238 ;;		None
  7239 ;; Return value:  Size  Location     Type
  7240 ;;                  1    wreg      void 
  7241 ;; Registers used:
  7242 ;;		wreg, status,2
  7243 ;; Tracked objects:
  7244 ;;		On entry : 1F/1
  7245 ;;		On exit  : 1F/0
  7246 ;;		Unchanged: 0/0
  7247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;Total ram usage:        0 bytes
  7253 ;; Hardware stack levels used:    1
  7254 ;; Hardware stack levels required when called:    4
  7255 ;; This function calls:
  7256 ;;		Nothing
  7257 ;; This function is called by:
  7258 ;;		_SYSTEM_Initialize
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           
  7263                           ;psect for function _TMR1_Initialize
  7264  1028                     _TMR1_Initialize:
  7265                           
  7266                           ;mcc_generated_files/tmr1.c: 68:     T1GCON = 0x00;
  7267                           
  7268                           ;incstack = 0
  7269                           ; Regs used in _TMR1_Initialize: [wreg+status,2]
  7270  1028  0020               	movlb	0	; select bank0
  7271  1029  0199               	clrf	25	;volatile
  7272                           
  7273                           ;mcc_generated_files/tmr1.c: 71:     TMR1H = 0x00;
  7274  102A  0197               	clrf	23	;volatile
  7275                           
  7276                           ;mcc_generated_files/tmr1.c: 74:     TMR1L = 0x00;
  7277  102B  0196               	clrf	22	;volatile
  7278                           
  7279                           ;mcc_generated_files/tmr1.c: 77:     PIR1bits.TMR1IF = 0;
  7280  102C  1011               	bcf	17,0	;volatile
  7281                           
  7282                           ;mcc_generated_files/tmr1.c: 80:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  7283  102D  0817               	movf	23,w	;volatile
  7284  102E  0021               	movlb	1	; select bank1
  7285  102F  00DF               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
  7286  1030  0020               	movlb	0	; select bank0
  7287  1031  0816               	movf	22,w	;volatile
  7288  1032  0021               	movlb	1	; select bank1
  7289  1033  00DE               	movwf	_timer1ReloadVal^(0+128)	;volatile
  7290                           
  7291                           ;mcc_generated_files/tmr1.c: 83:     T1CON = 0x31;
  7292  1034  3031               	movlw	49
  7293  1035  0020               	movlb	0	; select bank0
  7294  1036  0098               	movwf	24	;volatile
  7295  1037  0008               	return
  7296  1038                     __end_of_TMR1_Initialize:
  7297                           
  7298                           	psect	text16
  7299  1000                     __ptext16:	
  7300 ;; *************** function _TMR0_Initialize *****************
  7301 ;; Defined at:
  7302 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;		None
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;		None
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      void 
  7309 ;; Registers used:
  7310 ;;		wreg, status,2
  7311 ;; Tracked objects:
  7312 ;;		On entry : 1F/0
  7313 ;;		On exit  : 1F/1
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;Total ram usage:        0 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    4
  7323 ;; This function calls:
  7324 ;;		Nothing
  7325 ;; This function is called by:
  7326 ;;		_SYSTEM_Initialize
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           
  7331                           ;psect for function _TMR0_Initialize
  7332  1000                     _TMR0_Initialize:
  7333                           
  7334                           ;mcc_generated_files/tmr0.c: 68:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xDF 
      +                          & 0x3F));
  7335                           
  7336                           ;incstack = 0
  7337                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  7338  1000  0021               	movlb	1	; select bank1
  7339  1001  0815               	movf	21,w	;volatile
  7340  1002  39C0               	andlw	192
  7341  1003  381F               	iorlw	31
  7342  1004  0095               	movwf	21	;volatile
  7343                           
  7344                           ;mcc_generated_files/tmr0.c: 71:     TMR0 = 0x00;
  7345  1005  0020               	movlb	0	; select bank0
  7346  1006  0195               	clrf	21	;volatile
  7347                           
  7348                           ;mcc_generated_files/tmr0.c: 74:     timer0ReloadVal= 0;
  7349  1007  0021               	movlb	1	; select bank1
  7350  1008  01EB               	clrf	_timer0ReloadVal^(0+128)	;volatile
  7351                           
  7352                           ;mcc_generated_files/tmr0.c: 77:     INTCONbits.TMR0IF = 0;
  7353  1009  110B               	bcf	11,2	;volatile
  7354  100A  0008               	return
  7355  100B                     __end_of_TMR0_Initialize:
  7356                           
  7357                           	psect	text17
  7358  0800                     __ptext17:	
  7359 ;; *************** function _PIN_MANAGER_Initialize *****************
  7360 ;; Defined at:
  7361 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;		None
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;		None
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      void 
  7368 ;; Registers used:
  7369 ;;		wreg, status,2, status,0, pclath, cstack
  7370 ;; Tracked objects:
  7371 ;;		On entry : B1F/4
  7372 ;;		On exit  : 1F/1
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;Total ram usage:        0 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    5
  7382 ;; This function calls:
  7383 ;;		_IOCBF1_SetInterruptHandler
  7384 ;; This function is called by:
  7385 ;;		_SYSTEM_Initialize
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           
  7390                           ;psect for function _PIN_MANAGER_Initialize
  7391  0800                     _PIN_MANAGER_Initialize:
  7392                           
  7393                           ;mcc_generated_files/pin_manager.c: 62:     LATE = 0x00;
  7394                           
  7395                           ;incstack = 0
  7396                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7397  0800  0022               	movlb	2	; select bank2
  7398  0801  0190               	clrf	16	;volatile
  7399                           
  7400                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  7401  0802  018C               	clrf	12	;volatile
  7402                           
  7403                           ;mcc_generated_files/pin_manager.c: 64:     LATB = 0x00;
  7404  0803  018D               	clrf	13	;volatile
  7405                           
  7406                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  7407  0804  018E               	clrf	14	;volatile
  7408                           
  7409                           ;mcc_generated_files/pin_manager.c: 70:     TRISE = 0x08;
  7410  0805  3008               	movlw	8
  7411  0806  0021               	movlb	1	; select bank1
  7412  0807  0090               	movwf	16	;volatile
  7413                           
  7414                           ;mcc_generated_files/pin_manager.c: 71:     TRISA = 0x00;
  7415  0808  018C               	clrf	12	;volatile
  7416                           
  7417                           ;mcc_generated_files/pin_manager.c: 72:     TRISB = 0xCF;
  7418  0809  30CF               	movlw	207
  7419  080A  008D               	movwf	13	;volatile
  7420                           
  7421                           ;mcc_generated_files/pin_manager.c: 73:     TRISC = 0x9B;
  7422  080B  309B               	movlw	155
  7423  080C  008E               	movwf	14	;volatile
  7424                           
  7425                           ;mcc_generated_files/pin_manager.c: 78:     ANSELB = 0x0C;
  7426  080D  300C               	movlw	12
  7427  080E  0023               	movlb	3	; select bank3
  7428  080F  008D               	movwf	13	;volatile
  7429                           
  7430                           ;mcc_generated_files/pin_manager.c: 79:     ANSELA = 0x00;
  7431  0810  018C               	clrf	12	;volatile
  7432                           
  7433                           ;mcc_generated_files/pin_manager.c: 84:     WPUE = 0x00;
  7434  0811  0024               	movlb	4	; select bank4
  7435  0812  0190               	clrf	16	;volatile
  7436                           
  7437                           ;mcc_generated_files/pin_manager.c: 85:     WPUB = 0x03;
  7438  0813  3003               	movlw	3
  7439  0814  008D               	movwf	13	;volatile
  7440                           
  7441                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 0;
  7442  0815  0021               	movlb	1	; select bank1
  7443  0816  1395               	bcf	21,7	;volatile
  7444                           
  7445                           ;mcc_generated_files/pin_manager.c: 92:     APFCON = 0x00;
  7446  0817  0022               	movlb	2	; select bank2
  7447  0818  019D               	clrf	29	;volatile
  7448                           
  7449                           ;mcc_generated_files/pin_manager.c: 98:     IOCBFbits.IOCBF1 = 0;
  7450  0819  0027               	movlb	7	; select bank7
  7451  081A  1096               	bcf	22,1	;volatile
  7452                           
  7453                           ;mcc_generated_files/pin_manager.c: 100:     IOCBNbits.IOCBN1 = 1;
  7454  081B  1495               	bsf	21,1	;volatile
  7455                           
  7456                           ;mcc_generated_files/pin_manager.c: 102:     IOCBPbits.IOCBP1 = 0;
  7457  081C  1094               	bcf	20,1	;volatile
  7458                           
  7459                           ;mcc_generated_files/pin_manager.c: 107:     IOCBF1_SetInterruptHandler(IOCBF1_DefaultIn
      +                          terruptHandler);
  7460  081D  30B6               	movlw	low _IOCBF1_DefaultInterruptHandler
  7461  081E  0020               	movlb	0	; select bank0
  7462  081F  00A0               	movwf	IOCBF1_SetInterruptHandler@InterruptHandler
  7463  0820  301E               	movlw	high _IOCBF1_DefaultInterruptHandler
  7464  0821  00A1               	movwf	IOCBF1_SetInterruptHandler@InterruptHandler+1
  7465  0822  319F  2776         	fcall	_IOCBF1_SetInterruptHandler
  7466                           
  7467                           ;mcc_generated_files/pin_manager.c: 110:     INTCONbits.IOCIE = 1;
  7468  0824  158B               	bsf	11,3	;volatile
  7469  0825  0008               	return
  7470  0826                     __end_of_PIN_MANAGER_Initialize:
  7471                           
  7472                           	psect	text18
  7473  1F76                     __ptext18:	
  7474 ;; *************** function _IOCBF1_SetInterruptHandler *****************
  7475 ;; Defined at:
  7476 ;;		line 141 in file "mcc_generated_files/pin_manager.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  7479 ;;		 -> IOC_RB1_N_Handler(1), IOCBF1_DefaultInterruptHandler(1), 
  7480 ;; Auto vars:     Size  Location     Type
  7481 ;;		None
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  1    wreg      void 
  7484 ;; Registers used:
  7485 ;;		wreg
  7486 ;; Tracked objects:
  7487 ;;		On entry : 1F/0
  7488 ;;		On exit  : 1F/1
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7491 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;Total ram usage:        2 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:    4
  7498 ;; This function calls:
  7499 ;;		Nothing
  7500 ;; This function is called by:
  7501 ;;		_PIN_MANAGER_Initialize
  7502 ;;		_main
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           
  7507                           ;psect for function _IOCBF1_SetInterruptHandler
  7508  1F76                     _IOCBF1_SetInterruptHandler:
  7509                           
  7510                           ;mcc_generated_files/pin_manager.c: 142:     IOCBF1_InterruptHandler = InterruptHandler;
  7511                           
  7512                           ;incstack = 0
  7513                           ; Regs used in _IOCBF1_SetInterruptHandler: [wreg]
  7514  1F76  0821               	movf	IOCBF1_SetInterruptHandler@InterruptHandler+1,w
  7515  1F77  0021               	movlb	1	; select bank1
  7516  1F78  00EF               	movwf	(_IOCBF1_InterruptHandler+1)^(0+128)
  7517  1F79  0020               	movlb	0	; select bank0
  7518  1F7A  0820               	movf	IOCBF1_SetInterruptHandler@InterruptHandler,w
  7519  1F7B  0021               	movlb	1	; select bank1
  7520  1F7C  00EE               	movwf	_IOCBF1_InterruptHandler^(0+128)
  7521  1F7D  0008               	return
  7522  1F7E                     __end_of_IOCBF1_SetInterruptHandler:
  7523                           
  7524                           	psect	text19
  7525  1F87                     __ptext19:	
  7526 ;; *************** function _OSCILLATOR_Initialize *****************
  7527 ;; Defined at:
  7528 ;;		line 66 in file "mcc_generated_files/mcc.c"
  7529 ;; Parameters:    Size  Location     Type
  7530 ;;		None
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;		None
  7533 ;; Return value:  Size  Location     Type
  7534 ;;                  1    wreg      void 
  7535 ;; Registers used:
  7536 ;;		wreg, status,2
  7537 ;; Tracked objects:
  7538 ;;		On entry : 1F/1
  7539 ;;		On exit  : 1F/1
  7540 ;;		Unchanged: 0/0
  7541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;Total ram usage:        0 bytes
  7547 ;; Hardware stack levels used:    1
  7548 ;; Hardware stack levels required when called:    4
  7549 ;; This function calls:
  7550 ;;		Nothing
  7551 ;; This function is called by:
  7552 ;;		_SYSTEM_Initialize
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           
  7557                           ;psect for function _OSCILLATOR_Initialize
  7558  1F87                     _OSCILLATOR_Initialize:
  7559                           
  7560                           ;mcc_generated_files/mcc.c: 69:     OSCCON = 0x70;
  7561                           
  7562                           ;incstack = 0
  7563                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7564  1F87  3070               	movlw	112
  7565  1F88  0099               	movwf	25	;volatile
  7566                           
  7567                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
  7568  1F89  0198               	clrf	24	;volatile
  7569                           
  7570                           ;mcc_generated_files/mcc.c: 73:     BORCON = 0x00;
  7571  1F8A  0022               	movlb	2	; select bank2
  7572  1F8B  0196               	clrf	22	;volatile
  7573  1F8C                     l1009:	
  7574                           ;mcc_generated_files/mcc.c: 76:     {;mcc_generated_files/mcc.c: 77:     }
  7575                           
  7576                           
  7577                           ;mcc_generated_files/mcc.c: 75:     while(PLLR == 0)
  7578  1F8C  0021               	movlb	1	; select bank1
  7579  1F8D  1B1A               	btfsc	26,6	;volatile
  7580  1F8E  0008               	return
  7581  1F8F  2F8C               	goto	l1009
  7582  1F90                     __end_of_OSCILLATOR_Initialize:
  7583                           
  7584                           	psect	text20
  7585  1133                     __ptext20:	
  7586 ;; *************** function _LCD_Initialize *****************
  7587 ;; Defined at:
  7588 ;;		line 58 in file "mcc_generated_files/lcd.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;		None
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;		None
  7593 ;; Return value:  Size  Location     Type
  7594 ;;                  1    wreg      void 
  7595 ;; Registers used:
  7596 ;;		wreg, status,2
  7597 ;; Tracked objects:
  7598 ;;		On entry : 1F/1
  7599 ;;		On exit  : 1F/F
  7600 ;;		Unchanged: 0/0
  7601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7606 ;;Total ram usage:        0 bytes
  7607 ;; Hardware stack levels used:    1
  7608 ;; Hardware stack levels required when called:    4
  7609 ;; This function calls:
  7610 ;;		Nothing
  7611 ;; This function is called by:
  7612 ;;		_SYSTEM_Initialize
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           
  7617                           ;psect for function _LCD_Initialize
  7618  1133                     _LCD_Initialize:
  7619                           
  7620                           ;mcc_generated_files/lcd.c: 61:     LCDCONbits.LCDEN = 0;
  7621                           
  7622                           ;incstack = 0
  7623                           ; Regs used in _LCD_Initialize: [wreg+status,2]
  7624  1133  002F               	movlb	15	; select bank15
  7625  1134  1391               	bcf	17,7	;volatile
  7626                           
  7627                           ;mcc_generated_files/lcd.c: 65:     LCDPS = 0x01;
  7628  1135  3001               	movlw	1
  7629  1136  0092               	movwf	18	;volatile
  7630                           
  7631                           ;mcc_generated_files/lcd.c: 68:     LCDREF = 0xA0;
  7632  1137  30A0               	movlw	160
  7633  1138  0093               	movwf	19	;volatile
  7634                           
  7635                           ;mcc_generated_files/lcd.c: 71:     LCDRL = 0x10;
  7636  1139  3010               	movlw	16
  7637  113A  0095               	movwf	21	;volatile
  7638                           
  7639                           ;mcc_generated_files/lcd.c: 74:     LCDCST = 0x00;
  7640  113B  0194               	clrf	20	;volatile
  7641                           
  7642                           ;mcc_generated_files/lcd.c: 77:  LCDDATA0 = 0x00;
  7643  113C  01A0               	clrf	32	;volatile
  7644                           
  7645                           ;mcc_generated_files/lcd.c: 78:  LCDDATA1 = 0x00;
  7646  113D  01A1               	clrf	33	;volatile
  7647                           
  7648                           ;mcc_generated_files/lcd.c: 79:  LCDDATA3 = 0x00;
  7649  113E  01A3               	clrf	35	;volatile
  7650                           
  7651                           ;mcc_generated_files/lcd.c: 80:  LCDDATA4 = 0x00;
  7652  113F  01A4               	clrf	36	;volatile
  7653                           
  7654                           ;mcc_generated_files/lcd.c: 81:  LCDDATA6 = 0x00;
  7655  1140  01A6               	clrf	38	;volatile
  7656                           
  7657                           ;mcc_generated_files/lcd.c: 82:  LCDDATA7 = 0x00;
  7658  1141  01A7               	clrf	39	;volatile
  7659                           
  7660                           ;mcc_generated_files/lcd.c: 83:  LCDDATA9 = 0x00;
  7661  1142  01A9               	clrf	41	;volatile
  7662                           
  7663                           ;mcc_generated_files/lcd.c: 84:  LCDDATA10 = 0x00;
  7664  1143  01AA               	clrf	42	;volatile
  7665                           
  7666                           ;mcc_generated_files/lcd.c: 87:  LCDSE0 = 0xBE;
  7667  1144  30BE               	movlw	190
  7668  1145  0098               	movwf	24	;volatile
  7669                           
  7670                           ;mcc_generated_files/lcd.c: 88:  LCDSE1 = 0x14;
  7671  1146  3014               	movlw	20
  7672  1147  0099               	movwf	25	;volatile
  7673                           
  7674                           ;mcc_generated_files/lcd.c: 91:     LCDCON = 0xCB;
  7675  1148  30CB               	movlw	203
  7676  1149  0091               	movwf	17	;volatile
  7677  114A  0008               	return
  7678  114B                     __end_of_LCD_Initialize:
  7679                           
  7680                           	psect	text21
  7681  1F7E                     __ptext21:	
  7682 ;; *************** function _I2C_Initialize *****************
  7683 ;; Defined at:
  7684 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;		None
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;		None
  7689 ;; Return value:  Size  Location     Type
  7690 ;;                  1    wreg      void 
  7691 ;; Registers used:
  7692 ;;		wreg, status,2
  7693 ;; Tracked objects:
  7694 ;;		On entry : B1F/0
  7695 ;;		On exit  : B1F/4
  7696 ;;		Unchanged: B00/0
  7697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;Total ram usage:        0 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:    4
  7705 ;; This function calls:
  7706 ;;		Nothing
  7707 ;; This function is called by:
  7708 ;;		_SYSTEM_Initialize
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           
  7713                           ;psect for function _I2C_Initialize
  7714  1F7E                     _I2C_Initialize:
  7715                           
  7716                           ;mcc_generated_files/i2c_master.c: 169:     SSPSTAT = 0x00;
  7717                           
  7718                           ;incstack = 0
  7719                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  7720  1F7E  0024               	movlb	4	; select bank4
  7721  1F7F  0194               	clrf	20	;volatile
  7722                           
  7723                           ;mcc_generated_files/i2c_master.c: 170:     SSPCON1 = 0x08;
  7724  1F80  3008               	movlw	8
  7725  1F81  0095               	movwf	21	;volatile
  7726                           
  7727                           ;mcc_generated_files/i2c_master.c: 171:     SSPCON2 = 0x00;
  7728  1F82  0196               	clrf	22	;volatile
  7729                           
  7730                           ;mcc_generated_files/i2c_master.c: 172:     SSPADD = 0x4F;
  7731  1F83  304F               	movlw	79
  7732  1F84  0092               	movwf	18	;volatile
  7733                           
  7734                           ;mcc_generated_files/i2c_master.c: 173:     SSPCON1bits.SSPEN = 0;
  7735  1F85  1295               	bcf	21,5	;volatile
  7736  1F86  0008               	return
  7737  1F87                     __end_of_I2C_Initialize:
  7738                           
  7739                           	psect	text22
  7740  1F06                     __ptext22:	
  7741 ;; *************** function _FVR_Initialize *****************
  7742 ;; Defined at:
  7743 ;;		line 58 in file "mcc_generated_files/fvr.c"
  7744 ;; Parameters:    Size  Location     Type
  7745 ;;		None
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;		None
  7748 ;; Return value:  Size  Location     Type
  7749 ;;                  1    wreg      void 
  7750 ;; Registers used:
  7751 ;;		wreg
  7752 ;; Tracked objects:
  7753 ;;		On entry : 1F/1
  7754 ;;		On exit  : 1F/2
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7761 ;;Total ram usage:        0 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    4
  7764 ;; This function calls:
  7765 ;;		Nothing
  7766 ;; This function is called by:
  7767 ;;		_SYSTEM_Initialize
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           
  7772                           ;psect for function _FVR_Initialize
  7773  1F06                     _FVR_Initialize:
  7774                           
  7775                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x8A;
  7776                           
  7777                           ;incstack = 0
  7778                           ; Regs used in _FVR_Initialize: [wreg]
  7779  1F06  308A               	movlw	138
  7780  1F07  0022               	movlb	2	; select bank2
  7781  1F08  0097               	movwf	23	;volatile
  7782  1F09  0008               	return
  7783  1F0A                     __end_of_FVR_Initialize:
  7784                           
  7785                           	psect	text23
  7786  159E                     __ptext23:	
  7787 ;; *************** function _EUSART_Initialize *****************
  7788 ;; Defined at:
  7789 ;;		line 88 in file "mcc_generated_files/eusart.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;		None
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;		None
  7794 ;; Return value:  Size  Location     Type
  7795 ;;                  1    wreg      void 
  7796 ;; Registers used:
  7797 ;;		wreg, status,2, status,0, pclath, cstack
  7798 ;; Tracked objects:
  7799 ;;		On entry : 1F/1
  7800 ;;		On exit  : 1F/1
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7805 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7807 ;;Total ram usage:        1 bytes
  7808 ;; Hardware stack levels used:    1
  7809 ;; Hardware stack levels required when called:    5
  7810 ;; This function calls:
  7811 ;;		_EUSART_SetErrorHandler
  7812 ;;		_EUSART_SetFramingErrorHandler
  7813 ;;		_EUSART_SetOverrunErrorHandler
  7814 ;;		_EUSART_SetRxInterruptHandler
  7815 ;;		_EUSART_SetTxInterruptHandler
  7816 ;; This function is called by:
  7817 ;;		_SYSTEM_Initialize
  7818 ;; This function uses a non-reentrant model
  7819 ;;
  7820                           
  7821                           
  7822                           ;psect for function _EUSART_Initialize
  7823  159E                     _EUSART_Initialize:
  7824                           
  7825                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  7826                           
  7827                           ;incstack = 0
  7828                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7829  159E  1291               	bcf	17,5	;volatile
  7830                           
  7831                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  7832  159F  30FA               	movlw	low _EUSART_Receive_ISR
  7833  15A0  0020               	movlb	0	; select bank0
  7834  15A1  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  7835  15A2  3014               	movlw	high _EUSART_Receive_ISR
  7836  15A3  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  7837  15A4  319F  2766  3195   	fcall	_EUSART_SetRxInterruptHandler
  7838                           
  7839                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  7840  15A7  1211               	bcf	17,4	;volatile
  7841                           
  7842                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  7843  15A8  30B3               	movlw	low _EUSART_Transmit_ISR
  7844  15A9  0020               	movlb	0	; select bank0
  7845  15AA  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  7846  15AB  3011               	movlw	high _EUSART_Transmit_ISR
  7847  15AC  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  7848  15AD  319F  276E  3195   	fcall	_EUSART_SetTxInterruptHandler
  7849                           
  7850                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  7851  15B0  3008               	movlw	8
  7852  15B1  0023               	movlb	3	; select bank3
  7853  15B2  009F               	movwf	31	;volatile
  7854                           
  7855                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  7856  15B3  3090               	movlw	144
  7857  15B4  009D               	movwf	29	;volatile
  7858                           
  7859                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  7860  15B5  3024               	movlw	36
  7861  15B6  009E               	movwf	30	;volatile
  7862                           
  7863                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0x40;
  7864  15B7  3040               	movlw	64
  7865  15B8  009B               	movwf	27	;volatile
  7866                           
  7867                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x03;
  7868  15B9  3003               	movlw	3
  7869  15BA  009C               	movwf	28	;volatile
  7870                           
  7871                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  7872  15BB  30B5               	movlw	low _EUSART_DefaultFramingErrorHandler
  7873  15BC  0020               	movlb	0	; select bank0
  7874  15BD  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  7875  15BE  301E               	movlw	high _EUSART_DefaultFramingErrorHandler
  7876  15BF  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  7877  15C0  319F  2756  3195   	fcall	_EUSART_SetFramingErrorHandler
  7878                           
  7879                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  7880  15C3  30D6               	movlw	low _EUSART_DefaultOverrunErrorHandler
  7881  15C4  0020               	movlb	0	; select bank0
  7882  15C5  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  7883  15C6  301E               	movlw	high _EUSART_DefaultOverrunErrorHandler
  7884  15C7  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  7885  15C8  319F  275E  3195   	fcall	_EUSART_SetOverrunErrorHandler
  7886                           
  7887                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  7888  15CB  30BB               	movlw	low _EUSART_DefaultErrorHandler
  7889  15CC  0020               	movlb	0	; select bank0
  7890  15CD  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
  7891  15CE  301E               	movlw	high _EUSART_DefaultErrorHandler
  7892  15CF  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  7893  15D0  319F  274E         	fcall	_EUSART_SetErrorHandler
  7894                           
  7895                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  7896  15D2  01EC               	clrf	_eusartRxLastError^(0+128)	;volatile
  7897                           
  7898                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  7899  15D3  0020               	movlb	0	; select bank0
  7900  15D4  01EF               	clrf	_eusartTxHead	;volatile
  7901                           
  7902                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  7903  15D5  01EE               	clrf	_eusartTxTail	;volatile
  7904                           
  7905                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  7906  15D6  3008               	movlw	8
  7907  15D7  00A2               	movwf	??_EUSART_Initialize
  7908  15D8  0822               	movf	??_EUSART_Initialize,w
  7909  15D9  00ED               	movwf	_eusartTxBufferRemaining	;volatile
  7910                           
  7911                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  7912  15DA  01EC               	clrf	_eusartRxHead	;volatile
  7913                           
  7914                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  7915  15DB  01FD               	clrf	_eusartRxTail	;volatile
  7916                           
  7917                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  7918  15DC  0021               	movlb	1	; select bank1
  7919  15DD  01ED               	clrf	_eusartRxCount^(0+128)	;volatile
  7920                           
  7921                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  7922  15DE  1691               	bsf	17,5	;volatile
  7923  15DF  0008               	return
  7924  15E0                     __end_of_EUSART_Initialize:
  7925                           
  7926                           	psect	text24
  7927  1F6E                     __ptext24:	
  7928 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  7929 ;; Defined at:
  7930 ;;		line 276 in file "mcc_generated_files/eusart.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  7933 ;;		 -> EUSART_Transmit_ISR(1), 
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;		None
  7936 ;; Return value:  Size  Location     Type
  7937 ;;                  1    wreg      void 
  7938 ;; Registers used:
  7939 ;;		wreg
  7940 ;; Tracked objects:
  7941 ;;		On entry : 1F/0
  7942 ;;		On exit  : 1F/1
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7945 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;Total ram usage:        2 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    4
  7952 ;; This function calls:
  7953 ;;		Nothing
  7954 ;; This function is called by:
  7955 ;;		_EUSART_Initialize
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           
  7960                           ;psect for function _EUSART_SetTxInterruptHandler
  7961  1F6E                     _EUSART_SetTxInterruptHandler:
  7962                           
  7963                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  7964                           
  7965                           ;incstack = 0
  7966                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  7967  1F6E  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  7968  1F6F  0021               	movlb	1	; select bank1
  7969  1F70  00E9               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  7970  1F71  0020               	movlb	0	; select bank0
  7971  1F72  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  7972  1F73  0021               	movlb	1	; select bank1
  7973  1F74  00E8               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  7974  1F75  0008               	return
  7975  1F76                     __end_of_EUSART_SetTxInterruptHandler:
  7976                           
  7977                           	psect	text25
  7978  1F66                     __ptext25:	
  7979 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  7980 ;; Defined at:
  7981 ;;		line 280 in file "mcc_generated_files/eusart.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  7984 ;;		 -> EUSART_Receive_ISR(1), 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;		None
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  1    wreg      void 
  7989 ;; Registers used:
  7990 ;;		wreg
  7991 ;; Tracked objects:
  7992 ;;		On entry : 1F/0
  7993 ;;		On exit  : 1F/1
  7994 ;;		Unchanged: 0/0
  7995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7996 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;Total ram usage:        2 bytes
  8001 ;; Hardware stack levels used:    1
  8002 ;; Hardware stack levels required when called:    4
  8003 ;; This function calls:
  8004 ;;		Nothing
  8005 ;; This function is called by:
  8006 ;;		_EUSART_Initialize
  8007 ;; This function uses a non-reentrant model
  8008 ;;
  8009                           
  8010                           
  8011                           ;psect for function _EUSART_SetRxInterruptHandler
  8012  1F66                     _EUSART_SetRxInterruptHandler:
  8013                           
  8014                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  8015                           
  8016                           ;incstack = 0
  8017                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  8018  1F66  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  8019  1F67  0021               	movlb	1	; select bank1
  8020  1F68  00E7               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  8021  1F69  0020               	movlb	0	; select bank0
  8022  1F6A  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  8023  1F6B  0021               	movlb	1	; select bank1
  8024  1F6C  00E6               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  8025  1F6D  0008               	return
  8026  1F6E                     __end_of_EUSART_SetRxInterruptHandler:
  8027                           
  8028                           	psect	text26
  8029  1F5E                     __ptext26:	
  8030 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  8031 ;; Defined at:
  8032 ;;		line 268 in file "mcc_generated_files/eusart.c"
  8033 ;; Parameters:    Size  Location     Type
  8034 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8035 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  8036 ;; Auto vars:     Size  Location     Type
  8037 ;;		None
  8038 ;; Return value:  Size  Location     Type
  8039 ;;                  1    wreg      void 
  8040 ;; Registers used:
  8041 ;;		wreg
  8042 ;; Tracked objects:
  8043 ;;		On entry : 1F/0
  8044 ;;		On exit  : 1F/1
  8045 ;;		Unchanged: 0/0
  8046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8047 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;Total ram usage:        2 bytes
  8052 ;; Hardware stack levels used:    1
  8053 ;; Hardware stack levels required when called:    4
  8054 ;; This function calls:
  8055 ;;		Nothing
  8056 ;; This function is called by:
  8057 ;;		_EUSART_Initialize
  8058 ;; This function uses a non-reentrant model
  8059 ;;
  8060                           
  8061                           
  8062                           ;psect for function _EUSART_SetOverrunErrorHandler
  8063  1F5E                     _EUSART_SetOverrunErrorHandler:
  8064                           
  8065                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  8066                           
  8067                           ;incstack = 0
  8068                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  8069  1F5E  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  8070  1F5F  0021               	movlb	1	; select bank1
  8071  1F60  00E3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  8072  1F61  0020               	movlb	0	; select bank0
  8073  1F62  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  8074  1F63  0021               	movlb	1	; select bank1
  8075  1F64  00E2               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  8076  1F65  0008               	return
  8077  1F66                     __end_of_EUSART_SetOverrunErrorHandler:
  8078                           
  8079                           	psect	text27
  8080  1F56                     __ptext27:	
  8081 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  8082 ;; Defined at:
  8083 ;;		line 264 in file "mcc_generated_files/eusart.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8086 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;		None
  8089 ;; Return value:  Size  Location     Type
  8090 ;;                  1    wreg      void 
  8091 ;; Registers used:
  8092 ;;		wreg
  8093 ;; Tracked objects:
  8094 ;;		On entry : 1F/0
  8095 ;;		On exit  : 1F/1
  8096 ;;		Unchanged: 0/0
  8097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8098 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8101 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;Total ram usage:        2 bytes
  8103 ;; Hardware stack levels used:    1
  8104 ;; Hardware stack levels required when called:    4
  8105 ;; This function calls:
  8106 ;;		Nothing
  8107 ;; This function is called by:
  8108 ;;		_EUSART_Initialize
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           
  8113                           ;psect for function _EUSART_SetFramingErrorHandler
  8114  1F56                     _EUSART_SetFramingErrorHandler:
  8115                           
  8116                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  8117                           
  8118                           ;incstack = 0
  8119                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  8120  1F56  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  8121  1F57  0021               	movlb	1	; select bank1
  8122  1F58  00E5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  8123  1F59  0020               	movlb	0	; select bank0
  8124  1F5A  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  8125  1F5B  0021               	movlb	1	; select bank1
  8126  1F5C  00E4               	movwf	_EUSART_FramingErrorHandler^(0+128)
  8127  1F5D  0008               	return
  8128  1F5E                     __end_of_EUSART_SetFramingErrorHandler:
  8129                           
  8130                           	psect	text28
  8131  1F4E                     __ptext28:	
  8132 ;; *************** function _EUSART_SetErrorHandler *****************
  8133 ;; Defined at:
  8134 ;;		line 272 in file "mcc_generated_files/eusart.c"
  8135 ;; Parameters:    Size  Location     Type
  8136 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8137 ;;		 -> EUSART_DefaultErrorHandler(1), 
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;		None
  8140 ;; Return value:  Size  Location     Type
  8141 ;;                  1    wreg      void 
  8142 ;; Registers used:
  8143 ;;		wreg
  8144 ;; Tracked objects:
  8145 ;;		On entry : 1F/0
  8146 ;;		On exit  : 1F/1
  8147 ;;		Unchanged: 0/0
  8148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8149 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8152 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;Total ram usage:        2 bytes
  8154 ;; Hardware stack levels used:    1
  8155 ;; Hardware stack levels required when called:    4
  8156 ;; This function calls:
  8157 ;;		Nothing
  8158 ;; This function is called by:
  8159 ;;		_EUSART_Initialize
  8160 ;; This function uses a non-reentrant model
  8161 ;;
  8162                           
  8163                           
  8164                           ;psect for function _EUSART_SetErrorHandler
  8165  1F4E                     _EUSART_SetErrorHandler:
  8166                           
  8167                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  8168                           
  8169                           ;incstack = 0
  8170                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  8171  1F4E  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  8172  1F4F  0021               	movlb	1	; select bank1
  8173  1F50  00E1               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  8174  1F51  0020               	movlb	0	; select bank0
  8175  1F52  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
  8176  1F53  0021               	movlb	1	; select bank1
  8177  1F54  00E0               	movwf	_EUSART_ErrorHandler^(0+128)
  8178  1F55  0008               	return
  8179  1F56                     __end_of_EUSART_SetErrorHandler:
  8180                           
  8181                           	psect	text29
  8182  1F14                     __ptext29:	
  8183 ;; *************** function _DAC_Initialize *****************
  8184 ;; Defined at:
  8185 ;;		line 58 in file "mcc_generated_files/dac.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;		None
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;		None
  8190 ;; Return value:  Size  Location     Type
  8191 ;;                  1    wreg      void 
  8192 ;; Registers used:
  8193 ;;		wreg
  8194 ;; Tracked objects:
  8195 ;;		On entry : 1F/2
  8196 ;;		On exit  : 1F/2
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;Total ram usage:        0 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; Hardware stack levels required when called:    4
  8206 ;; This function calls:
  8207 ;;		Nothing
  8208 ;; This function is called by:
  8209 ;;		_SYSTEM_Initialize
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213                           
  8214                           ;psect for function _DAC_Initialize
  8215  1F14                     _DAC_Initialize:
  8216                           
  8217                           ;mcc_generated_files/dac.c: 61:     DACCON0 = 0x88;
  8218                           
  8219                           ;incstack = 0
  8220                           ; Regs used in _DAC_Initialize: [wreg]
  8221  1F14  3088               	movlw	136
  8222  1F15  0098               	movwf	24	;volatile
  8223                           
  8224                           ;mcc_generated_files/dac.c: 63:     DACCON1 = 0x10;
  8225  1F16  3010               	movlw	16
  8226  1F17  0099               	movwf	25	;volatile
  8227  1F18  0008               	return
  8228  1F19                     __end_of_DAC_Initialize:
  8229                           
  8230                           	psect	text30
  8231  1038                     __ptext30:	
  8232 ;; *************** function _CCP4_Initialize *****************
  8233 ;; Defined at:
  8234 ;;		line 65 in file "mcc_generated_files/ccp4.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;		None
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;		None
  8239 ;; Return value:  Size  Location     Type
  8240 ;;                  1    wreg      void 
  8241 ;; Registers used:
  8242 ;;		wreg, status,2, status,0, pclath, cstack
  8243 ;; Tracked objects:
  8244 ;;		On entry : 1F/2
  8245 ;;		On exit  : 1F/1
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;Total ram usage:        0 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:    5
  8255 ;; This function calls:
  8256 ;;		_CCP4_SetCallBack
  8257 ;; This function is called by:
  8258 ;;		_SYSTEM_Initialize
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           
  8263                           ;psect for function _CCP4_Initialize
  8264  1038                     _CCP4_Initialize:
  8265                           
  8266                           ;mcc_generated_files/ccp4.c: 70:  CCP4CON = 0x04;
  8267                           
  8268                           ;incstack = 0
  8269                           ; Regs used in _CCP4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8270  1038  3004               	movlw	4
  8271  1039  0026               	movlb	6	; select bank6
  8272  103A  009A               	movwf	26	;volatile
  8273                           
  8274                           ;mcc_generated_files/ccp4.c: 73:  CCPR4L = 0x00;
  8275  103B  0198               	clrf	24	;volatile
  8276                           
  8277                           ;mcc_generated_files/ccp4.c: 76:  CCPR4H = 0x00;
  8278  103C  0199               	clrf	25	;volatile
  8279                           
  8280                           ;mcc_generated_files/ccp4.c: 79:     CCP4_SetCallBack(CCP4_DefaultCallBack);
  8281  103D  30B4               	movlw	low _CCP4_DefaultCallBack
  8282  103E  0020               	movlb	0	; select bank0
  8283  103F  00A0               	movwf	CCP4_SetCallBack@customCallBack
  8284  1040  301E               	movlw	high _CCP4_DefaultCallBack
  8285  1041  00A1               	movwf	CCP4_SetCallBack@customCallBack+1
  8286  1042  319F  2746         	fcall	_CCP4_SetCallBack
  8287                           
  8288                           ;mcc_generated_files/ccp4.c: 83:     PIR3bits.CCP4IF = 0;
  8289  1044  0020               	movlb	0	; select bank0
  8290  1045  1293               	bcf	19,5	;volatile
  8291                           
  8292                           ;mcc_generated_files/ccp4.c: 86:     PIE3bits.CCP4IE = 1;
  8293  1046  0021               	movlb	1	; select bank1
  8294  1047  1693               	bsf	19,5	;volatile
  8295  1048  0008               	return
  8296  1049                     __end_of_CCP4_Initialize:
  8297                           
  8298                           	psect	text31
  8299  1F46                     __ptext31:	
  8300 ;; *************** function _CCP4_SetCallBack *****************
  8301 ;; Defined at:
  8302 ;;		line 104 in file "mcc_generated_files/ccp4.c"
  8303 ;; Parameters:    Size  Location     Type
  8304 ;;  customCallBa    2    0[BANK0 ] PTR FTN(unsigned short ,
  8305 ;;		 -> CCP4_CallBack@main$F2147(1), CCP4_DefaultCallBack(1), 
  8306 ;; Auto vars:     Size  Location     Type
  8307 ;;		None
  8308 ;; Return value:  Size  Location     Type
  8309 ;;                  1    wreg      void 
  8310 ;; Registers used:
  8311 ;;		wreg
  8312 ;; Tracked objects:
  8313 ;;		On entry : 1F/0
  8314 ;;		On exit  : 1F/1
  8315 ;;		Unchanged: 0/0
  8316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8317 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;Total ram usage:        2 bytes
  8322 ;; Hardware stack levels used:    1
  8323 ;; Hardware stack levels required when called:    4
  8324 ;; This function calls:
  8325 ;;		Nothing
  8326 ;; This function is called by:
  8327 ;;		_CCP4_Initialize
  8328 ;;		_main
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           
  8333                           ;psect for function _CCP4_SetCallBack
  8334  1F46                     _CCP4_SetCallBack:
  8335                           
  8336                           ;mcc_generated_files/ccp4.c: 105:     CCP4_CallBack = customCallBack;
  8337                           
  8338                           ;incstack = 0
  8339                           ; Regs used in _CCP4_SetCallBack: [wreg]
  8340  1F46  0821               	movf	CCP4_SetCallBack@customCallBack+1,w
  8341  1F47  0021               	movlb	1	; select bank1
  8342  1F48  00DD               	movwf	(_CCP4_CallBack+1)^(0+128)
  8343  1F49  0020               	movlb	0	; select bank0
  8344  1F4A  0820               	movf	CCP4_SetCallBack@customCallBack,w
  8345  1F4B  0021               	movlb	1	; select bank1
  8346  1F4C  00DC               	movwf	_CCP4_CallBack^(0+128)
  8347  1F4D  0008               	return
  8348  1F4E                     __end_of_CCP4_SetCallBack:
  8349                           
  8350                           	psect	text32
  8351  033D                     __ptext32:	
  8352 ;; *************** function _LCD_Digit4Num *****************
  8353 ;; Defined at:
  8354 ;;		line 407 in file "main.c"
  8355 ;; Parameters:    Size  Location     Type
  8356 ;;  num             1    wreg     unsigned char 
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;  num             1    2[BANK0 ] unsigned char 
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  1    wreg      void 
  8361 ;; Registers used:
  8362 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8363 ;; Tracked objects:
  8364 ;;		On entry : 10/0
  8365 ;;		On exit  : 1F/F
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8369 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8370 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8371 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8372 ;;Total ram usage:        3 bytes
  8373 ;; Hardware stack levels used:    1
  8374 ;; Hardware stack levels required when called:    4
  8375 ;; This function calls:
  8376 ;;		Nothing
  8377 ;; This function is called by:
  8378 ;;		_main
  8379 ;; This function uses a non-reentrant model
  8380 ;;
  8381                           
  8382                           
  8383                           ;psect for function _LCD_Digit4Num
  8384  033D                     _LCD_Digit4Num:
  8385                           
  8386                           ;incstack = 0
  8387                           ; Regs used in _LCD_Digit4Num: [wreg-fsr0h+status,2+status,0]
  8388                           ;LCD_Digit4Num@num stored from wreg
  8389  033D  0020               	movlb	0	; select bank0
  8390  033E  00A2               	movwf	LCD_Digit4Num@num
  8391                           
  8392                           ;main.c: 407: void LCD_Digit4Num (unsigned char num);main.c: 408: {;main.c: 409:     swi
      +                          tch (num)
  8393  033F  2C4E               	goto	l5728
  8394  0340                     l1457:
  8395  0340  002F               	movlb	15	; select bank15
  8396  0341  152A               	bsf	42,2	;volatile
  8397  0342  1529               	bsf	41,2	;volatile
  8398  0343  1523               	bsf	35,2	;volatile
  8399  0344  1520               	bsf	32,2	;volatile
  8400  0345  1524               	bsf	36,2	;volatile
  8401  0346  1527               	bsf	39,2	;volatile
  8402  0347  1126               	bcf	38,2	;volatile
  8403  0348  0008               	return
  8404  0349                     l1460:
  8405  0349  002F               	movlb	15	; select bank15
  8406  034A  112A               	bcf	42,2	;volatile
  8407  034B  1529               	bsf	41,2	;volatile
  8408  034C  1523               	bsf	35,2	;volatile
  8409  034D  1120               	bcf	32,2	;volatile
  8410  034E  1124               	bcf	36,2	;volatile
  8411  034F  1127               	bcf	39,2	;volatile
  8412  0350  1126               	bcf	38,2	;volatile
  8413  0351  0008               	return
  8414  0352                     l1462:
  8415  0352  002F               	movlb	15	; select bank15
  8416  0353  152A               	bsf	42,2	;volatile
  8417  0354  1529               	bsf	41,2	;volatile
  8418  0355  1123               	bcf	35,2	;volatile
  8419  0356  1520               	bsf	32,2	;volatile
  8420  0357  1524               	bsf	36,2	;volatile
  8421  0358  1127               	bcf	39,2	;volatile
  8422  0359  1526               	bsf	38,2	;volatile
  8423  035A  0008               	return
  8424  035B                     l1464:
  8425  035B  002F               	movlb	15	; select bank15
  8426  035C  152A               	bsf	42,2	;volatile
  8427  035D  1529               	bsf	41,2	;volatile
  8428  035E  1523               	bsf	35,2	;volatile
  8429  035F  1520               	bsf	32,2	;volatile
  8430  0360  1124               	bcf	36,2	;volatile
  8431  0361  1127               	bcf	39,2	;volatile
  8432  0362  1526               	bsf	38,2	;volatile
  8433  0363  0008               	return
  8434  0364                     l1466:
  8435  0364  002F               	movlb	15	; select bank15
  8436  0365  112A               	bcf	42,2	;volatile
  8437  0366  1529               	bsf	41,2	;volatile
  8438  0367  1523               	bsf	35,2	;volatile
  8439  0368  1120               	bcf	32,2	;volatile
  8440  0369  1124               	bcf	36,2	;volatile
  8441  036A  1527               	bsf	39,2	;volatile
  8442  036B  1526               	bsf	38,2	;volatile
  8443  036C  0008               	return
  8444  036D                     l1468:
  8445  036D  002F               	movlb	15	; select bank15
  8446  036E  152A               	bsf	42,2	;volatile
  8447  036F  1129               	bcf	41,2	;volatile
  8448  0370  1523               	bsf	35,2	;volatile
  8449  0371  1520               	bsf	32,2	;volatile
  8450  0372  1124               	bcf	36,2	;volatile
  8451  0373  1527               	bsf	39,2	;volatile
  8452  0374  1526               	bsf	38,2	;volatile
  8453  0375  0008               	return
  8454  0376                     l1470:
  8455  0376  002F               	movlb	15	; select bank15
  8456  0377  152A               	bsf	42,2	;volatile
  8457  0378  1129               	bcf	41,2	;volatile
  8458  0379  1523               	bsf	35,2	;volatile
  8459  037A  1520               	bsf	32,2	;volatile
  8460  037B  1524               	bsf	36,2	;volatile
  8461  037C  1527               	bsf	39,2	;volatile
  8462  037D  1526               	bsf	38,2	;volatile
  8463  037E  0008               	return
  8464  037F                     l1472:
  8465  037F  002F               	movlb	15	; select bank15
  8466  0380  152A               	bsf	42,2	;volatile
  8467  0381  1529               	bsf	41,2	;volatile
  8468  0382  1523               	bsf	35,2	;volatile
  8469  0383  1120               	bcf	32,2	;volatile
  8470  0384  1124               	bcf	36,2	;volatile
  8471  0385  1127               	bcf	39,2	;volatile
  8472  0386  1126               	bcf	38,2	;volatile
  8473  0387  0008               	return
  8474  0388                     l1474:
  8475  0388  002F               	movlb	15	; select bank15
  8476  0389  152A               	bsf	42,2	;volatile
  8477  038A  1529               	bsf	41,2	;volatile
  8478  038B  1523               	bsf	35,2	;volatile
  8479  038C  1520               	bsf	32,2	;volatile
  8480  038D  1524               	bsf	36,2	;volatile
  8481  038E  1527               	bsf	39,2	;volatile
  8482  038F  1526               	bsf	38,2	;volatile
  8483  0390  0008               	return
  8484  0391                     l1476:
  8485  0391  002F               	movlb	15	; select bank15
  8486  0392  152A               	bsf	42,2	;volatile
  8487  0393  1529               	bsf	41,2	;volatile
  8488  0394  1523               	bsf	35,2	;volatile
  8489  0395  1520               	bsf	32,2	;volatile
  8490  0396  1124               	bcf	36,2	;volatile
  8491  0397  1527               	bsf	39,2	;volatile
  8492  0398  1526               	bsf	38,2	;volatile
  8493  0399  0008               	return
  8494  039A                     l1479:
  8495  039A  002F               	movlb	15	; select bank15
  8496  039B  152A               	bsf	42,2	;volatile
  8497  039C  1529               	bsf	41,2	;volatile
  8498  039D  1523               	bsf	35,2	;volatile
  8499  039E  1120               	bcf	32,2	;volatile
  8500  039F  1524               	bsf	36,2	;volatile
  8501  03A0  1527               	bsf	39,2	;volatile
  8502  03A1  1526               	bsf	38,2	;volatile
  8503  03A2  0008               	return
  8504  03A3                     l1482:
  8505  03A3  002F               	movlb	15	; select bank15
  8506  03A4  112A               	bcf	42,2	;volatile
  8507  03A5  1129               	bcf	41,2	;volatile
  8508  03A6  1523               	bsf	35,2	;volatile
  8509  03A7  1520               	bsf	32,2	;volatile
  8510  03A8  1524               	bsf	36,2	;volatile
  8511  03A9  1527               	bsf	39,2	;volatile
  8512  03AA  1526               	bsf	38,2	;volatile
  8513  03AB  0008               	return
  8514  03AC                     l1485:
  8515  03AC  002F               	movlb	15	; select bank15
  8516  03AD  152A               	bsf	42,2	;volatile
  8517  03AE  1129               	bcf	41,2	;volatile
  8518  03AF  1123               	bcf	35,2	;volatile
  8519  03B0  1520               	bsf	32,2	;volatile
  8520  03B1  1524               	bsf	36,2	;volatile
  8521  03B2  1527               	bsf	39,2	;volatile
  8522  03B3  1126               	bcf	38,2	;volatile
  8523  03B4  0008               	return
  8524  03B5                     l1488:
  8525  03B5  002F               	movlb	15	; select bank15
  8526  03B6  112A               	bcf	42,2	;volatile
  8527  03B7  1529               	bsf	41,2	;volatile
  8528  03B8  1523               	bsf	35,2	;volatile
  8529  03B9  1520               	bsf	32,2	;volatile
  8530  03BA  1524               	bsf	36,2	;volatile
  8531  03BB  1127               	bcf	39,2	;volatile
  8532  03BC  1526               	bsf	38,2	;volatile
  8533  03BD  0008               	return
  8534  03BE                     l1491:
  8535  03BE  002F               	movlb	15	; select bank15
  8536  03BF  152A               	bsf	42,2	;volatile
  8537  03C0  1129               	bcf	41,2	;volatile
  8538  03C1  1123               	bcf	35,2	;volatile
  8539  03C2  1520               	bsf	32,2	;volatile
  8540  03C3  1524               	bsf	36,2	;volatile
  8541  03C4  1527               	bsf	39,2	;volatile
  8542  03C5  1526               	bsf	38,2	;volatile
  8543  03C6  0008               	return
  8544  03C7                     l1494:
  8545  03C7  002F               	movlb	15	; select bank15
  8546  03C8  152A               	bsf	42,2	;volatile
  8547  03C9  1129               	bcf	41,2	;volatile
  8548  03CA  1123               	bcf	35,2	;volatile
  8549  03CB  1120               	bcf	32,2	;volatile
  8550  03CC  1524               	bsf	36,2	;volatile
  8551  03CD  1527               	bsf	39,2	;volatile
  8552  03CE  1526               	bsf	38,2	;volatile
  8553  03CF  0008               	return
  8554  03D0                     l1496:
  8555  03D0  002F               	movlb	15	; select bank15
  8556  03D1  152A               	bsf	42,2	;volatile
  8557  03D2  1129               	bcf	41,2	;volatile
  8558  03D3  1523               	bsf	35,2	;volatile
  8559  03D4  1520               	bsf	32,2	;volatile
  8560  03D5  1524               	bsf	36,2	;volatile
  8561  03D6  1527               	bsf	39,2	;volatile
  8562  03D7  1526               	bsf	38,2	;volatile
  8563  03D8  0008               	return
  8564  03D9                     l1498:
  8565  03D9  002F               	movlb	15	; select bank15
  8566  03DA  112A               	bcf	42,2	;volatile
  8567  03DB  1529               	bsf	41,2	;volatile
  8568  03DC  1523               	bsf	35,2	;volatile
  8569  03DD  1120               	bcf	32,2	;volatile
  8570  03DE  1524               	bsf	36,2	;volatile
  8571  03DF  1527               	bsf	39,2	;volatile
  8572  03E0  1526               	bsf	38,2	;volatile
  8573  03E1  0008               	return
  8574  03E2                     l1500:
  8575  03E2  002F               	movlb	15	; select bank15
  8576  03E3  112A               	bcf	42,2	;volatile
  8577  03E4  1129               	bcf	41,2	;volatile
  8578  03E5  1123               	bcf	35,2	;volatile
  8579  03E6  1120               	bcf	32,2	;volatile
  8580  03E7  1524               	bsf	36,2	;volatile
  8581  03E8  1527               	bsf	39,2	;volatile
  8582  03E9  1126               	bcf	38,2	;volatile
  8583  03EA  0008               	return
  8584  03EB                     l1502:
  8585  03EB  002F               	movlb	15	; select bank15
  8586  03EC  112A               	bcf	42,2	;volatile
  8587  03ED  1529               	bsf	41,2	;volatile
  8588  03EE  1523               	bsf	35,2	;volatile
  8589  03EF  1520               	bsf	32,2	;volatile
  8590  03F0  1524               	bsf	36,2	;volatile
  8591  03F1  1127               	bcf	39,2	;volatile
  8592  03F2  1126               	bcf	38,2	;volatile
  8593  03F3  0008               	return
  8594  03F4                     l1504:
  8595  03F4  002F               	movlb	15	; select bank15
  8596  03F5  112A               	bcf	42,2	;volatile
  8597  03F6  1129               	bcf	41,2	;volatile
  8598  03F7  1123               	bcf	35,2	;volatile
  8599  03F8  1520               	bsf	32,2	;volatile
  8600  03F9  1524               	bsf	36,2	;volatile
  8601  03FA  1527               	bsf	39,2	;volatile
  8602  03FB  1126               	bcf	38,2	;volatile
  8603  03FC  0008               	return
  8604  03FD                     l1506:
  8605  03FD  002F               	movlb	15	; select bank15
  8606  03FE  112A               	bcf	42,2	;volatile
  8607  03FF  1129               	bcf	41,2	;volatile
  8608  0400  1523               	bsf	35,2	;volatile
  8609  0401  1120               	bcf	32,2	;volatile
  8610  0402  1524               	bsf	36,2	;volatile
  8611  0403  1127               	bcf	39,2	;volatile
  8612  0404  1526               	bsf	38,2	;volatile
  8613  0405  0008               	return
  8614  0406                     l1508:
  8615  0406  002F               	movlb	15	; select bank15
  8616  0407  112A               	bcf	42,2	;volatile
  8617  0408  1129               	bcf	41,2	;volatile
  8618  0409  1523               	bsf	35,2	;volatile
  8619  040A  1520               	bsf	32,2	;volatile
  8620  040B  1524               	bsf	36,2	;volatile
  8621  040C  1127               	bcf	39,2	;volatile
  8622  040D  1526               	bsf	38,2	;volatile
  8623  040E  0008               	return
  8624  040F                     l1510:
  8625  040F  002F               	movlb	15	; select bank15
  8626  0410  152A               	bsf	42,2	;volatile
  8627  0411  1529               	bsf	41,2	;volatile
  8628  0412  1123               	bcf	35,2	;volatile
  8629  0413  1120               	bcf	32,2	;volatile
  8630  0414  1524               	bsf	36,2	;volatile
  8631  0415  1527               	bsf	39,2	;volatile
  8632  0416  1526               	bsf	38,2	;volatile
  8633  0417  0008               	return
  8634  0418                     l1512:
  8635  0418  002F               	movlb	15	; select bank15
  8636  0419  112A               	bcf	42,2	;volatile
  8637  041A  1129               	bcf	41,2	;volatile
  8638  041B  1123               	bcf	35,2	;volatile
  8639  041C  1120               	bcf	32,2	;volatile
  8640  041D  1524               	bsf	36,2	;volatile
  8641  041E  1127               	bcf	39,2	;volatile
  8642  041F  1526               	bsf	38,2	;volatile
  8643  0420  0008               	return
  8644  0421                     l1514:
  8645  0421  002F               	movlb	15	; select bank15
  8646  0422  112A               	bcf	42,2	;volatile
  8647  0423  1129               	bcf	41,2	;volatile
  8648  0424  1523               	bsf	35,2	;volatile
  8649  0425  1520               	bsf	32,2	;volatile
  8650  0426  1124               	bcf	36,2	;volatile
  8651  0427  1527               	bsf	39,2	;volatile
  8652  0428  1526               	bsf	38,2	;volatile
  8653  0429  0008               	return
  8654  042A                     l1516:
  8655  042A  002F               	movlb	15	; select bank15
  8656  042B  112A               	bcf	42,2	;volatile
  8657  042C  1129               	bcf	41,2	;volatile
  8658  042D  1123               	bcf	35,2	;volatile
  8659  042E  1520               	bsf	32,2	;volatile
  8660  042F  1524               	bsf	36,2	;volatile
  8661  0430  1527               	bsf	39,2	;volatile
  8662  0431  1526               	bsf	38,2	;volatile
  8663  0432  0008               	return
  8664  0433                     l1518:
  8665  0433  002F               	movlb	15	; select bank15
  8666  0434  112A               	bcf	42,2	;volatile
  8667  0435  1529               	bsf	41,2	;volatile
  8668  0436  1523               	bsf	35,2	;volatile
  8669  0437  1520               	bsf	32,2	;volatile
  8670  0438  1524               	bsf	36,2	;volatile
  8671  0439  1527               	bsf	39,2	;volatile
  8672  043A  1126               	bcf	38,2	;volatile
  8673  043B  0008               	return
  8674  043C                     l1520:
  8675  043C  002F               	movlb	15	; select bank15
  8676  043D  112A               	bcf	42,2	;volatile
  8677  043E  1529               	bsf	41,2	;volatile
  8678  043F  1523               	bsf	35,2	;volatile
  8679  0440  1520               	bsf	32,2	;volatile
  8680  0441  1124               	bcf	36,2	;volatile
  8681  0442  1527               	bsf	39,2	;volatile
  8682  0443  1526               	bsf	38,2	;volatile
  8683  0444  0008               	return
  8684  0445                     l1521:	
  8685                           ;main.c: 441:         default: LCDDATA10bits.SEG10COM3 = 0; LCDDATA9bits.SEG2COM3 = 0; L
      +                          CDDATA3bits.SEG2COM1 = 0; LCDDATA0bits.SEG2COM0 = 0; LCDDATA4bits.SEG10COM1 = 0; LCDDATA
      +                          7bits.SEG10COM2 = 0; LCDDATA6bits.SEG2COM2 = 0;
  8686                           
  8687  0445  002F               	movlb	15	; select bank15
  8688  0446  112A               	bcf	42,2	;volatile
  8689  0447  1129               	bcf	41,2	;volatile
  8690  0448  1123               	bcf	35,2	;volatile
  8691  0449  1120               	bcf	32,2	;volatile
  8692  044A  1124               	bcf	36,2	;volatile
  8693  044B  1127               	bcf	39,2	;volatile
  8694  044C  1126               	bcf	38,2	;volatile
  8695                           
  8696                           ;main.c: 442:     }
  8697  044D  0008               	return
  8698  044E                     l5728:
  8699  044E  0822               	movf	LCD_Digit4Num@num,w
  8700  044F  00A0               	movwf	??_LCD_Digit4Num
  8701  0450  01A1               	clrf	??_LCD_Digit4Num+1
  8702                           
  8703                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8704                           ; Switch size 1, requested type "simple"
  8705                           ; Number of cases is 1, Range of values is 0 to 0
  8706                           ; switch strategies available:
  8707                           ; Name         Instructions Cycles
  8708                           ; simple_byte            4     3 (average)
  8709                           ; direct_byte            8     6 (fixed)
  8710                           ; jumptable            260     6 (fixed)
  8711                           ;	Chosen strategy is simple_byte
  8712  0451  0821               	movf	??_LCD_Digit4Num+1,w
  8713  0452  3A00               	xorlw	0	; case 0
  8714  0453  1903               	skipnz
  8715  0454  2C56               	goto	l6164
  8716  0455  2C45               	goto	l1521
  8717  0456                     l6164:
  8718                           
  8719                           ; Switch size 1, requested type "simple"
  8720                           ; Number of cases is 64, Range of values is 0 to 121
  8721                           ; switch strategies available:
  8722                           ; Name         Instructions Cycles
  8723                           ; simple_byte          193    97 (average)
  8724                           ; direct_byte          250     6 (fixed)
  8725                           ; jumptable            260     6 (fixed)
  8726                           ;	Chosen strategy is simple_byte
  8727  0456  0820               	movf	??_LCD_Digit4Num,w
  8728  0457  3A00               	xorlw	0	; case 0
  8729  0458  1903               	skipnz
  8730  0459  2B40               	goto	l1457
  8731  045A  3A01               	xorlw	1	; case 1
  8732  045B  1903               	skipnz
  8733  045C  2B49               	goto	l1460
  8734  045D  3A03               	xorlw	3	; case 2
  8735  045E  1903               	skipnz
  8736  045F  2B52               	goto	l1462
  8737  0460  3A01               	xorlw	1	; case 3
  8738  0461  1903               	skipnz
  8739  0462  2B5B               	goto	l1464
  8740  0463  3A07               	xorlw	7	; case 4
  8741  0464  1903               	skipnz
  8742  0465  2B64               	goto	l1466
  8743  0466  3A01               	xorlw	1	; case 5
  8744  0467  1903               	skipnz
  8745  0468  2B6D               	goto	l1468
  8746  0469  3A03               	xorlw	3	; case 6
  8747  046A  1903               	skipnz
  8748  046B  2B76               	goto	l1470
  8749  046C  3A01               	xorlw	1	; case 7
  8750  046D  1903               	skipnz
  8751  046E  2B7F               	goto	l1472
  8752  046F  3A0F               	xorlw	15	; case 8
  8753  0470  1903               	skipnz
  8754  0471  2B88               	goto	l1474
  8755  0472  3A01               	xorlw	1	; case 9
  8756  0473  1903               	skipnz
  8757  0474  2B91               	goto	l1476
  8758  0475  3A03               	xorlw	3	; case 10
  8759  0476  1903               	skipnz
  8760  0477  2B9A               	goto	l1479
  8761  0478  3A01               	xorlw	1	; case 11
  8762  0479  1903               	skipnz
  8763  047A  2BA3               	goto	l1482
  8764  047B  3A07               	xorlw	7	; case 12
  8765  047C  1903               	skipnz
  8766  047D  2BAC               	goto	l1485
  8767  047E  3A01               	xorlw	1	; case 13
  8768  047F  1903               	skipnz
  8769  0480  2BB5               	goto	l1488
  8770  0481  3A03               	xorlw	3	; case 14
  8771  0482  1903               	skipnz
  8772  0483  2BBE               	goto	l1491
  8773  0484  3A01               	xorlw	1	; case 15
  8774  0485  1903               	skipnz
  8775  0486  2BC7               	goto	l1494
  8776  0487  3A3F               	xorlw	63	; case 48
  8777  0488  1903               	skipnz
  8778  0489  2B40               	goto	l1457
  8779  048A  3A01               	xorlw	1	; case 49
  8780  048B  1903               	skipnz
  8781  048C  2B49               	goto	l1460
  8782  048D  3A03               	xorlw	3	; case 50
  8783  048E  1903               	skipnz
  8784  048F  2B52               	goto	l1462
  8785  0490  3A01               	xorlw	1	; case 51
  8786  0491  1903               	skipnz
  8787  0492  2B5B               	goto	l1464
  8788  0493  3A07               	xorlw	7	; case 52
  8789  0494  1903               	skipnz
  8790  0495  2B64               	goto	l1466
  8791  0496  3A01               	xorlw	1	; case 53
  8792  0497  1903               	skipnz
  8793  0498  2B6D               	goto	l1468
  8794  0499  3A03               	xorlw	3	; case 54
  8795  049A  1903               	skipnz
  8796  049B  2B76               	goto	l1470
  8797  049C  3A01               	xorlw	1	; case 55
  8798  049D  1903               	skipnz
  8799  049E  2B7F               	goto	l1472
  8800  049F  3A0F               	xorlw	15	; case 56
  8801  04A0  1903               	skipnz
  8802  04A1  2B88               	goto	l1474
  8803  04A2  3A01               	xorlw	1	; case 57
  8804  04A3  1903               	skipnz
  8805  04A4  2B91               	goto	l1476
  8806  04A5  3A78               	xorlw	120	; case 65
  8807  04A6  1903               	skipnz
  8808  04A7  2B9A               	goto	l1479
  8809  04A8  3A03               	xorlw	3	; case 66
  8810  04A9  1903               	skipnz
  8811  04AA  2BA3               	goto	l1482
  8812  04AB  3A01               	xorlw	1	; case 67
  8813  04AC  1903               	skipnz
  8814  04AD  2BAC               	goto	l1485
  8815  04AE  3A07               	xorlw	7	; case 68
  8816  04AF  1903               	skipnz
  8817  04B0  2BB5               	goto	l1488
  8818  04B1  3A01               	xorlw	1	; case 69
  8819  04B2  1903               	skipnz
  8820  04B3  2BBE               	goto	l1491
  8821  04B4  3A03               	xorlw	3	; case 70
  8822  04B5  1903               	skipnz
  8823  04B6  2BC7               	goto	l1494
  8824  04B7  3A01               	xorlw	1	; case 71
  8825  04B8  1903               	skipnz
  8826  04B9  2BD0               	goto	l1496
  8827  04BA  3A0F               	xorlw	15	; case 72
  8828  04BB  1903               	skipnz
  8829  04BC  2BD9               	goto	l1498
  8830  04BD  3A01               	xorlw	1	; case 73
  8831  04BE  1903               	skipnz
  8832  04BF  2BE2               	goto	l1500
  8833  04C0  3A03               	xorlw	3	; case 74
  8834  04C1  1903               	skipnz
  8835  04C2  2BEB               	goto	l1502
  8836  04C3  3A06               	xorlw	6	; case 76
  8837  04C4  1903               	skipnz
  8838  04C5  2BF4               	goto	l1504
  8839  04C6  3A02               	xorlw	2	; case 78
  8840  04C7  1903               	skipnz
  8841  04C8  2BFD               	goto	l1506
  8842  04C9  3A01               	xorlw	1	; case 79
  8843  04CA  1903               	skipnz
  8844  04CB  2C06               	goto	l1508
  8845  04CC  3A1F               	xorlw	31	; case 80
  8846  04CD  1903               	skipnz
  8847  04CE  2C0F               	goto	l1510
  8848  04CF  3A02               	xorlw	2	; case 82
  8849  04D0  1903               	skipnz
  8850  04D1  2C18               	goto	l1512
  8851  04D2  3A01               	xorlw	1	; case 83
  8852  04D3  1903               	skipnz
  8853  04D4  2C21               	goto	l1514
  8854  04D5  3A07               	xorlw	7	; case 84
  8855  04D6  1903               	skipnz
  8856  04D7  2C2A               	goto	l1516
  8857  04D8  3A01               	xorlw	1	; case 85
  8858  04D9  1903               	skipnz
  8859  04DA  2C33               	goto	l1518
  8860  04DB  3A0C               	xorlw	12	; case 89
  8861  04DC  1903               	skipnz
  8862  04DD  2C3C               	goto	l1520
  8863  04DE  3A38               	xorlw	56	; case 97
  8864  04DF  1903               	skipnz
  8865  04E0  2B9A               	goto	l1479
  8866  04E1  3A03               	xorlw	3	; case 98
  8867  04E2  1903               	skipnz
  8868  04E3  2BA3               	goto	l1482
  8869  04E4  3A01               	xorlw	1	; case 99
  8870  04E5  1903               	skipnz
  8871  04E6  2BAC               	goto	l1485
  8872  04E7  3A07               	xorlw	7	; case 100
  8873  04E8  1903               	skipnz
  8874  04E9  2BB5               	goto	l1488
  8875  04EA  3A01               	xorlw	1	; case 101
  8876  04EB  1903               	skipnz
  8877  04EC  2BBE               	goto	l1491
  8878  04ED  3A03               	xorlw	3	; case 102
  8879  04EE  1903               	skipnz
  8880  04EF  2BC7               	goto	l1494
  8881  04F0  3A01               	xorlw	1	; case 103
  8882  04F1  1903               	skipnz
  8883  04F2  2BD0               	goto	l1496
  8884  04F3  3A0F               	xorlw	15	; case 104
  8885  04F4  1903               	skipnz
  8886  04F5  2BD9               	goto	l1498
  8887  04F6  3A01               	xorlw	1	; case 105
  8888  04F7  1903               	skipnz
  8889  04F8  2BE2               	goto	l1500
  8890  04F9  3A03               	xorlw	3	; case 106
  8891  04FA  1903               	skipnz
  8892  04FB  2BEB               	goto	l1502
  8893  04FC  3A06               	xorlw	6	; case 108
  8894  04FD  1903               	skipnz
  8895  04FE  2BF4               	goto	l1504
  8896  04FF  3A02               	xorlw	2	; case 110
  8897  0500  1903               	skipnz
  8898  0501  2BFD               	goto	l1506
  8899  0502  3A01               	xorlw	1	; case 111
  8900  0503  1903               	skipnz
  8901  0504  2C06               	goto	l1508
  8902  0505  3A1F               	xorlw	31	; case 112
  8903  0506  1903               	skipnz
  8904  0507  2C0F               	goto	l1510
  8905  0508  3A02               	xorlw	2	; case 114
  8906  0509  1903               	skipnz
  8907  050A  2C18               	goto	l1512
  8908  050B  3A01               	xorlw	1	; case 115
  8909  050C  1903               	skipnz
  8910  050D  2C21               	goto	l1514
  8911  050E  3A07               	xorlw	7	; case 116
  8912  050F  1903               	skipnz
  8913  0510  2C2A               	goto	l1516
  8914  0511  3A01               	xorlw	1	; case 117
  8915  0512  1903               	skipnz
  8916  0513  2C33               	goto	l1518
  8917  0514  3A0C               	xorlw	12	; case 121
  8918  0515  1903               	skipnz
  8919  0516  2C3C               	goto	l1520
  8920  0517  2C45               	goto	l1521
  8921  0518  0008               	return
  8922  0519                     __end_of_LCD_Digit4Num:
  8923                           
  8924                           	psect	text33
  8925  0519                     __ptext33:	
  8926 ;; *************** function _LCD_Digit3Num *****************
  8927 ;; Defined at:
  8928 ;;		line 369 in file "main.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;  num             1    wreg     unsigned char 
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  num             1    2[BANK0 ] unsigned char 
  8933 ;; Return value:  Size  Location     Type
  8934 ;;                  1    wreg      void 
  8935 ;; Registers used:
  8936 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8937 ;; Tracked objects:
  8938 ;;		On entry : 10/F
  8939 ;;		On exit  : 1F/F
  8940 ;;		Unchanged: 0/0
  8941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;Total ram usage:        3 bytes
  8947 ;; Hardware stack levels used:    1
  8948 ;; Hardware stack levels required when called:    4
  8949 ;; This function calls:
  8950 ;;		Nothing
  8951 ;; This function is called by:
  8952 ;;		_main
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           
  8957                           ;psect for function _LCD_Digit3Num
  8958  0519                     _LCD_Digit3Num:
  8959                           
  8960                           ;incstack = 0
  8961                           ; Regs used in _LCD_Digit3Num: [wreg-fsr0h+status,2+status,0]
  8962                           ;LCD_Digit3Num@num stored from wreg
  8963  0519  0020               	movlb	0	; select bank0
  8964  051A  00A2               	movwf	LCD_Digit3Num@num
  8965                           
  8966                           ;main.c: 369: void LCD_Digit3Num (unsigned char num);main.c: 370: {;main.c: 371:     swi
      +                          tch (num)
  8967  051B  2E2A               	goto	l5796
  8968  051C                     l1396:	
  8969                           ;main.c: 372:     {;main.c: 373:         case 0: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits
      +                          .SEG1COM3 = 1; LCDDATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3CO
      +                          M1 = 1; LCDDATA6bits.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 0; break;
  8970                           
  8971  051C  002F               	movlb	15	; select bank15
  8972  051D  15A9               	bsf	41,3	;volatile
  8973  051E  14A9               	bsf	41,1	;volatile
  8974  051F  14A3               	bsf	35,1	;volatile
  8975  0520  14A0               	bsf	32,1	;volatile
  8976  0521  15A3               	bsf	35,3	;volatile
  8977  0522  15A6               	bsf	38,3	;volatile
  8978  0523  10A6               	bcf	38,1	;volatile
  8979  0524  0008               	return
  8980  0525                     l1398:	
  8981                           ;main.c: 374:         case 1: LCDDATA9bits.SEG3COM3 = 0; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 0; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bit
      +                          s.SEG3COM2 = 0; LCDDATA6bits.SEG1COM2 = 0; break;
  8982                           
  8983  0525  002F               	movlb	15	; select bank15
  8984  0526  11A9               	bcf	41,3	;volatile
  8985  0527  14A9               	bsf	41,1	;volatile
  8986  0528  14A3               	bsf	35,1	;volatile
  8987  0529  10A0               	bcf	32,1	;volatile
  8988  052A  11A3               	bcf	35,3	;volatile
  8989  052B  11A6               	bcf	38,3	;volatile
  8990  052C  10A6               	bcf	38,1	;volatile
  8991  052D  0008               	return
  8992  052E                     l1399:	
  8993                           ;main.c: 375:         case 2: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 0; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 1; LCDDATA6bit
      +                          s.SEG3COM2 = 0; LCDDATA6bits.SEG1COM2 = 1; break;
  8994                           
  8995  052E  002F               	movlb	15	; select bank15
  8996  052F  15A9               	bsf	41,3	;volatile
  8997  0530  14A9               	bsf	41,1	;volatile
  8998  0531  10A3               	bcf	35,1	;volatile
  8999  0532  14A0               	bsf	32,1	;volatile
  9000  0533  15A3               	bsf	35,3	;volatile
  9001  0534  11A6               	bcf	38,3	;volatile
  9002  0535  14A6               	bsf	38,1	;volatile
  9003  0536  0008               	return
  9004  0537                     l1400:	
  9005                           ;main.c: 376:         case 3: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bit
      +                          s.SEG3COM2 = 0; LCDDATA6bits.SEG1COM2 = 1; break;
  9006                           
  9007  0537  002F               	movlb	15	; select bank15
  9008  0538  15A9               	bsf	41,3	;volatile
  9009  0539  14A9               	bsf	41,1	;volatile
  9010  053A  14A3               	bsf	35,1	;volatile
  9011  053B  14A0               	bsf	32,1	;volatile
  9012  053C  11A3               	bcf	35,3	;volatile
  9013  053D  11A6               	bcf	38,3	;volatile
  9014  053E  14A6               	bsf	38,1	;volatile
  9015  053F  0008               	return
  9016  0540                     l1401:	
  9017                           ;main.c: 377:         case 4: LCDDATA9bits.SEG3COM3 = 0; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 0; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bit
      +                          s.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9018                           
  9019  0540  002F               	movlb	15	; select bank15
  9020  0541  11A9               	bcf	41,3	;volatile
  9021  0542  14A9               	bsf	41,1	;volatile
  9022  0543  14A3               	bsf	35,1	;volatile
  9023  0544  10A0               	bcf	32,1	;volatile
  9024  0545  11A3               	bcf	35,3	;volatile
  9025  0546  15A6               	bsf	38,3	;volatile
  9026  0547  14A6               	bsf	38,1	;volatile
  9027  0548  0008               	return
  9028  0549                     l1402:	
  9029                           ;main.c: 378:         case 5: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 0; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bit
      +                          s.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9030                           
  9031  0549  002F               	movlb	15	; select bank15
  9032  054A  15A9               	bsf	41,3	;volatile
  9033  054B  10A9               	bcf	41,1	;volatile
  9034  054C  14A3               	bsf	35,1	;volatile
  9035  054D  14A0               	bsf	32,1	;volatile
  9036  054E  11A3               	bcf	35,3	;volatile
  9037  054F  15A6               	bsf	38,3	;volatile
  9038  0550  14A6               	bsf	38,1	;volatile
  9039  0551  0008               	return
  9040  0552                     l1403:	
  9041                           ;main.c: 379:         case 6: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 0; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 1; LCDDATA6bit
      +                          s.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9042                           
  9043  0552  002F               	movlb	15	; select bank15
  9044  0553  15A9               	bsf	41,3	;volatile
  9045  0554  10A9               	bcf	41,1	;volatile
  9046  0555  14A3               	bsf	35,1	;volatile
  9047  0556  14A0               	bsf	32,1	;volatile
  9048  0557  15A3               	bsf	35,3	;volatile
  9049  0558  15A6               	bsf	38,3	;volatile
  9050  0559  14A6               	bsf	38,1	;volatile
  9051  055A  0008               	return
  9052  055B                     l1404:	
  9053                           ;main.c: 380:         case 7: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 0; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bit
      +                          s.SEG3COM2 = 0; LCDDATA6bits.SEG1COM2 = 0; break;
  9054                           
  9055  055B  002F               	movlb	15	; select bank15
  9056  055C  15A9               	bsf	41,3	;volatile
  9057  055D  14A9               	bsf	41,1	;volatile
  9058  055E  14A3               	bsf	35,1	;volatile
  9059  055F  10A0               	bcf	32,1	;volatile
  9060  0560  11A3               	bcf	35,3	;volatile
  9061  0561  11A6               	bcf	38,3	;volatile
  9062  0562  10A6               	bcf	38,1	;volatile
  9063  0563  0008               	return
  9064  0564                     l1405:	
  9065                           ;main.c: 381:         case 8: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 1; LCDDATA6bit
      +                          s.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9066                           
  9067  0564  002F               	movlb	15	; select bank15
  9068  0565  15A9               	bsf	41,3	;volatile
  9069  0566  14A9               	bsf	41,1	;volatile
  9070  0567  14A3               	bsf	35,1	;volatile
  9071  0568  14A0               	bsf	32,1	;volatile
  9072  0569  15A3               	bsf	35,3	;volatile
  9073  056A  15A6               	bsf	38,3	;volatile
  9074  056B  14A6               	bsf	38,1	;volatile
  9075  056C  0008               	return
  9076  056D                     l1406:	
  9077                           ;main.c: 382:         case 9: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bit
      +                          s.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9078                           
  9079  056D  002F               	movlb	15	; select bank15
  9080  056E  15A9               	bsf	41,3	;volatile
  9081  056F  14A9               	bsf	41,1	;volatile
  9082  0570  14A3               	bsf	35,1	;volatile
  9083  0571  14A0               	bsf	32,1	;volatile
  9084  0572  11A3               	bcf	35,3	;volatile
  9085  0573  15A6               	bsf	38,3	;volatile
  9086  0574  14A6               	bsf	38,1	;volatile
  9087  0575  0008               	return
  9088  0576                     l1409:
  9089  0576  002F               	movlb	15	; select bank15
  9090  0577  15A9               	bsf	41,3	;volatile
  9091  0578  14A9               	bsf	41,1	;volatile
  9092  0579  14A3               	bsf	35,1	;volatile
  9093  057A  10A0               	bcf	32,1	;volatile
  9094  057B  15A3               	bsf	35,3	;volatile
  9095  057C  15A6               	bsf	38,3	;volatile
  9096  057D  14A6               	bsf	38,1	;volatile
  9097  057E  0008               	return
  9098  057F                     l1412:
  9099  057F  002F               	movlb	15	; select bank15
  9100  0580  11A9               	bcf	41,3	;volatile
  9101  0581  10A9               	bcf	41,1	;volatile
  9102  0582  14A3               	bsf	35,1	;volatile
  9103  0583  14A0               	bsf	32,1	;volatile
  9104  0584  15A3               	bsf	35,3	;volatile
  9105  0585  15A6               	bsf	38,3	;volatile
  9106  0586  14A6               	bsf	38,1	;volatile
  9107  0587  0008               	return
  9108  0588                     l1415:
  9109  0588  002F               	movlb	15	; select bank15
  9110  0589  15A9               	bsf	41,3	;volatile
  9111  058A  10A9               	bcf	41,1	;volatile
  9112  058B  10A3               	bcf	35,1	;volatile
  9113  058C  14A0               	bsf	32,1	;volatile
  9114  058D  15A3               	bsf	35,3	;volatile
  9115  058E  15A6               	bsf	38,3	;volatile
  9116  058F  10A6               	bcf	38,1	;volatile
  9117  0590  0008               	return
  9118  0591                     l1418:
  9119  0591  002F               	movlb	15	; select bank15
  9120  0592  11A9               	bcf	41,3	;volatile
  9121  0593  14A9               	bsf	41,1	;volatile
  9122  0594  14A3               	bsf	35,1	;volatile
  9123  0595  14A0               	bsf	32,1	;volatile
  9124  0596  15A3               	bsf	35,3	;volatile
  9125  0597  11A6               	bcf	38,3	;volatile
  9126  0598  14A6               	bsf	38,1	;volatile
  9127  0599  0008               	return
  9128  059A                     l1421:
  9129  059A  002F               	movlb	15	; select bank15
  9130  059B  15A9               	bsf	41,3	;volatile
  9131  059C  10A9               	bcf	41,1	;volatile
  9132  059D  10A3               	bcf	35,1	;volatile
  9133  059E  14A0               	bsf	32,1	;volatile
  9134  059F  15A3               	bsf	35,3	;volatile
  9135  05A0  15A6               	bsf	38,3	;volatile
  9136  05A1  14A6               	bsf	38,1	;volatile
  9137  05A2  0008               	return
  9138  05A3                     l1424:
  9139  05A3  002F               	movlb	15	; select bank15
  9140  05A4  15A9               	bsf	41,3	;volatile
  9141  05A5  10A9               	bcf	41,1	;volatile
  9142  05A6  10A3               	bcf	35,1	;volatile
  9143  05A7  10A0               	bcf	32,1	;volatile
  9144  05A8  15A3               	bsf	35,3	;volatile
  9145  05A9  15A6               	bsf	38,3	;volatile
  9146  05AA  14A6               	bsf	38,1	;volatile
  9147  05AB  0008               	return
  9148  05AC                     l1426:
  9149  05AC  002F               	movlb	15	; select bank15
  9150  05AD  15A9               	bsf	41,3	;volatile
  9151  05AE  10A9               	bcf	41,1	;volatile
  9152  05AF  14A3               	bsf	35,1	;volatile
  9153  05B0  14A0               	bsf	32,1	;volatile
  9154  05B1  15A3               	bsf	35,3	;volatile
  9155  05B2  15A6               	bsf	38,3	;volatile
  9156  05B3  10A6               	bcf	38,1	;volatile
  9157  05B4  0008               	return
  9158  05B5                     l1428:
  9159  05B5  002F               	movlb	15	; select bank15
  9160  05B6  11A9               	bcf	41,3	;volatile
  9161  05B7  14A9               	bsf	41,1	;volatile
  9162  05B8  14A3               	bsf	35,1	;volatile
  9163  05B9  10A0               	bcf	32,1	;volatile
  9164  05BA  15A3               	bsf	35,3	;volatile
  9165  05BB  15A6               	bsf	38,3	;volatile
  9166  05BC  14A6               	bsf	38,1	;volatile
  9167  05BD  0008               	return
  9168  05BE                     l1430:
  9169  05BE  002F               	movlb	15	; select bank15
  9170  05BF  11A9               	bcf	41,3	;volatile
  9171  05C0  10A9               	bcf	41,1	;volatile
  9172  05C1  10A3               	bcf	35,1	;volatile
  9173  05C2  10A0               	bcf	32,1	;volatile
  9174  05C3  15A3               	bsf	35,3	;volatile
  9175  05C4  15A6               	bsf	38,3	;volatile
  9176  05C5  10A6               	bcf	38,1	;volatile
  9177  05C6  0008               	return
  9178  05C7                     l1432:
  9179  05C7  002F               	movlb	15	; select bank15
  9180  05C8  11A9               	bcf	41,3	;volatile
  9181  05C9  14A9               	bsf	41,1	;volatile
  9182  05CA  14A3               	bsf	35,1	;volatile
  9183  05CB  14A0               	bsf	32,1	;volatile
  9184  05CC  15A3               	bsf	35,3	;volatile
  9185  05CD  11A6               	bcf	38,3	;volatile
  9186  05CE  10A6               	bcf	38,1	;volatile
  9187  05CF  0008               	return
  9188  05D0                     l1434:
  9189  05D0  002F               	movlb	15	; select bank15
  9190  05D1  11A9               	bcf	41,3	;volatile
  9191  05D2  10A9               	bcf	41,1	;volatile
  9192  05D3  10A3               	bcf	35,1	;volatile
  9193  05D4  14A0               	bsf	32,1	;volatile
  9194  05D5  15A3               	bsf	35,3	;volatile
  9195  05D6  15A6               	bsf	38,3	;volatile
  9196  05D7  10A6               	bcf	38,1	;volatile
  9197  05D8  0008               	return
  9198  05D9                     l1436:
  9199  05D9  002F               	movlb	15	; select bank15
  9200  05DA  11A9               	bcf	41,3	;volatile
  9201  05DB  10A9               	bcf	41,1	;volatile
  9202  05DC  14A3               	bsf	35,1	;volatile
  9203  05DD  10A0               	bcf	32,1	;volatile
  9204  05DE  15A3               	bsf	35,3	;volatile
  9205  05DF  11A6               	bcf	38,3	;volatile
  9206  05E0  14A6               	bsf	38,1	;volatile
  9207  05E1  0008               	return
  9208  05E2                     l1438:
  9209  05E2  002F               	movlb	15	; select bank15
  9210  05E3  11A9               	bcf	41,3	;volatile
  9211  05E4  10A9               	bcf	41,1	;volatile
  9212  05E5  14A3               	bsf	35,1	;volatile
  9213  05E6  14A0               	bsf	32,1	;volatile
  9214  05E7  15A3               	bsf	35,3	;volatile
  9215  05E8  11A6               	bcf	38,3	;volatile
  9216  05E9  14A6               	bsf	38,1	;volatile
  9217  05EA  0008               	return
  9218  05EB                     l1440:
  9219  05EB  002F               	movlb	15	; select bank15
  9220  05EC  15A9               	bsf	41,3	;volatile
  9221  05ED  14A9               	bsf	41,1	;volatile
  9222  05EE  10A3               	bcf	35,1	;volatile
  9223  05EF  10A0               	bcf	32,1	;volatile
  9224  05F0  15A3               	bsf	35,3	;volatile
  9225  05F1  15A6               	bsf	38,3	;volatile
  9226  05F2  14A6               	bsf	38,1	;volatile
  9227  05F3  0008               	return
  9228  05F4                     l1442:
  9229  05F4  002F               	movlb	15	; select bank15
  9230  05F5  11A9               	bcf	41,3	;volatile
  9231  05F6  10A9               	bcf	41,1	;volatile
  9232  05F7  10A3               	bcf	35,1	;volatile
  9233  05F8  10A0               	bcf	32,1	;volatile
  9234  05F9  15A3               	bsf	35,3	;volatile
  9235  05FA  11A6               	bcf	38,3	;volatile
  9236  05FB  14A6               	bsf	38,1	;volatile
  9237  05FC  0008               	return
  9238  05FD                     l1444:
  9239  05FD  002F               	movlb	15	; select bank15
  9240  05FE  11A9               	bcf	41,3	;volatile
  9241  05FF  10A9               	bcf	41,1	;volatile
  9242  0600  14A3               	bsf	35,1	;volatile
  9243  0601  14A0               	bsf	32,1	;volatile
  9244  0602  11A3               	bcf	35,3	;volatile
  9245  0603  15A6               	bsf	38,3	;volatile
  9246  0604  14A6               	bsf	38,1	;volatile
  9247  0605  0008               	return
  9248  0606                     l1446:
  9249  0606  002F               	movlb	15	; select bank15
  9250  0607  11A9               	bcf	41,3	;volatile
  9251  0608  10A9               	bcf	41,1	;volatile
  9252  0609  10A3               	bcf	35,1	;volatile
  9253  060A  14A0               	bsf	32,1	;volatile
  9254  060B  15A3               	bsf	35,3	;volatile
  9255  060C  15A6               	bsf	38,3	;volatile
  9256  060D  14A6               	bsf	38,1	;volatile
  9257  060E  0008               	return
  9258  060F                     l1448:
  9259  060F  002F               	movlb	15	; select bank15
  9260  0610  11A9               	bcf	41,3	;volatile
  9261  0611  14A9               	bsf	41,1	;volatile
  9262  0612  14A3               	bsf	35,1	;volatile
  9263  0613  14A0               	bsf	32,1	;volatile
  9264  0614  15A3               	bsf	35,3	;volatile
  9265  0615  15A6               	bsf	38,3	;volatile
  9266  0616  10A6               	bcf	38,1	;volatile
  9267  0617  0008               	return
  9268  0618                     l1450:
  9269  0618  002F               	movlb	15	; select bank15
  9270  0619  11A9               	bcf	41,3	;volatile
  9271  061A  14A9               	bsf	41,1	;volatile
  9272  061B  14A3               	bsf	35,1	;volatile
  9273  061C  14A0               	bsf	32,1	;volatile
  9274  061D  11A3               	bcf	35,3	;volatile
  9275  061E  15A6               	bsf	38,3	;volatile
  9276  061F  14A6               	bsf	38,1	;volatile
  9277  0620  0008               	return
  9278  0621                     l1451:	
  9279                           ;main.c: 403:         default: LCDDATA9bits.SEG3COM3 = 0; LCDDATA9bits.SEG1COM3 = 0; LCD
      +                          DATA3bits.SEG1COM1 = 0; LCDDATA0bits.SEG1COM0 = 0; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bi
      +                          ts.SEG3COM2 = 0; LCDDATA6bits.SEG1COM2 = 0;
  9280                           
  9281  0621  002F               	movlb	15	; select bank15
  9282  0622  11A9               	bcf	41,3	;volatile
  9283  0623  10A9               	bcf	41,1	;volatile
  9284  0624  10A3               	bcf	35,1	;volatile
  9285  0625  10A0               	bcf	32,1	;volatile
  9286  0626  11A3               	bcf	35,3	;volatile
  9287  0627  11A6               	bcf	38,3	;volatile
  9288  0628  10A6               	bcf	38,1	;volatile
  9289                           
  9290                           ;main.c: 404:     }
  9291  0629  0008               	return
  9292  062A                     l5796:
  9293  062A  0822               	movf	LCD_Digit3Num@num,w
  9294  062B  00A0               	movwf	??_LCD_Digit3Num
  9295  062C  01A1               	clrf	??_LCD_Digit3Num+1
  9296                           
  9297                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9298                           ; Switch size 1, requested type "simple"
  9299                           ; Number of cases is 1, Range of values is 0 to 0
  9300                           ; switch strategies available:
  9301                           ; Name         Instructions Cycles
  9302                           ; simple_byte            4     3 (average)
  9303                           ; direct_byte            8     6 (fixed)
  9304                           ; jumptable            260     6 (fixed)
  9305                           ;	Chosen strategy is simple_byte
  9306  062D  0821               	movf	??_LCD_Digit3Num+1,w
  9307  062E  3A00               	xorlw	0	; case 0
  9308  062F  1903               	skipnz
  9309  0630  2E32               	goto	l6166
  9310  0631  2E21               	goto	l1451
  9311  0632                     l6166:
  9312                           
  9313                           ; Switch size 1, requested type "simple"
  9314                           ; Number of cases is 54, Range of values is 0 to 121
  9315                           ; switch strategies available:
  9316                           ; Name         Instructions Cycles
  9317                           ; simple_byte          163    82 (average)
  9318                           ; direct_byte          250     6 (fixed)
  9319                           ; jumptable            260     6 (fixed)
  9320                           ;	Chosen strategy is simple_byte
  9321  0632  0820               	movf	??_LCD_Digit3Num,w
  9322  0633  3A00               	xorlw	0	; case 0
  9323  0634  1903               	skipnz
  9324  0635  2D1C               	goto	l1396
  9325  0636  3A01               	xorlw	1	; case 1
  9326  0637  1903               	skipnz
  9327  0638  2D25               	goto	l1398
  9328  0639  3A03               	xorlw	3	; case 2
  9329  063A  1903               	skipnz
  9330  063B  2D2E               	goto	l1399
  9331  063C  3A01               	xorlw	1	; case 3
  9332  063D  1903               	skipnz
  9333  063E  2D37               	goto	l1400
  9334  063F  3A07               	xorlw	7	; case 4
  9335  0640  1903               	skipnz
  9336  0641  2D40               	goto	l1401
  9337  0642  3A01               	xorlw	1	; case 5
  9338  0643  1903               	skipnz
  9339  0644  2D49               	goto	l1402
  9340  0645  3A03               	xorlw	3	; case 6
  9341  0646  1903               	skipnz
  9342  0647  2D52               	goto	l1403
  9343  0648  3A01               	xorlw	1	; case 7
  9344  0649  1903               	skipnz
  9345  064A  2D5B               	goto	l1404
  9346  064B  3A0F               	xorlw	15	; case 8
  9347  064C  1903               	skipnz
  9348  064D  2D64               	goto	l1405
  9349  064E  3A01               	xorlw	1	; case 9
  9350  064F  1903               	skipnz
  9351  0650  2D6D               	goto	l1406
  9352  0651  3A03               	xorlw	3	; case 10
  9353  0652  1903               	skipnz
  9354  0653  2D76               	goto	l1409
  9355  0654  3A01               	xorlw	1	; case 11
  9356  0655  1903               	skipnz
  9357  0656  2D7F               	goto	l1412
  9358  0657  3A07               	xorlw	7	; case 12
  9359  0658  1903               	skipnz
  9360  0659  2D88               	goto	l1415
  9361  065A  3A01               	xorlw	1	; case 13
  9362  065B  1903               	skipnz
  9363  065C  2D91               	goto	l1418
  9364  065D  3A03               	xorlw	3	; case 14
  9365  065E  1903               	skipnz
  9366  065F  2D9A               	goto	l1421
  9367  0660  3A01               	xorlw	1	; case 15
  9368  0661  1903               	skipnz
  9369  0662  2DA3               	goto	l1424
  9370  0663  3A4E               	xorlw	78	; case 65
  9371  0664  1903               	skipnz
  9372  0665  2D76               	goto	l1409
  9373  0666  3A03               	xorlw	3	; case 66
  9374  0667  1903               	skipnz
  9375  0668  2D7F               	goto	l1412
  9376  0669  3A01               	xorlw	1	; case 67
  9377  066A  1903               	skipnz
  9378  066B  2D88               	goto	l1415
  9379  066C  3A07               	xorlw	7	; case 68
  9380  066D  1903               	skipnz
  9381  066E  2D91               	goto	l1418
  9382  066F  3A01               	xorlw	1	; case 69
  9383  0670  1903               	skipnz
  9384  0671  2D9A               	goto	l1421
  9385  0672  3A03               	xorlw	3	; case 70
  9386  0673  1903               	skipnz
  9387  0674  2DA3               	goto	l1424
  9388  0675  3A01               	xorlw	1	; case 71
  9389  0676  1903               	skipnz
  9390  0677  2DAC               	goto	l1426
  9391  0678  3A0F               	xorlw	15	; case 72
  9392  0679  1903               	skipnz
  9393  067A  2DB5               	goto	l1428
  9394  067B  3A01               	xorlw	1	; case 73
  9395  067C  1903               	skipnz
  9396  067D  2DBE               	goto	l1430
  9397  067E  3A03               	xorlw	3	; case 74
  9398  067F  1903               	skipnz
  9399  0680  2DC7               	goto	l1432
  9400  0681  3A06               	xorlw	6	; case 76
  9401  0682  1903               	skipnz
  9402  0683  2DD0               	goto	l1434
  9403  0684  3A02               	xorlw	2	; case 78
  9404  0685  1903               	skipnz
  9405  0686  2DD9               	goto	l1436
  9406  0687  3A01               	xorlw	1	; case 79
  9407  0688  1903               	skipnz
  9408  0689  2DE2               	goto	l1438
  9409  068A  3A1F               	xorlw	31	; case 80
  9410  068B  1903               	skipnz
  9411  068C  2DEB               	goto	l1440
  9412  068D  3A02               	xorlw	2	; case 82
  9413  068E  1903               	skipnz
  9414  068F  2DF4               	goto	l1442
  9415  0690  3A01               	xorlw	1	; case 83
  9416  0691  1903               	skipnz
  9417  0692  2DFD               	goto	l1444
  9418  0693  3A07               	xorlw	7	; case 84
  9419  0694  1903               	skipnz
  9420  0695  2E06               	goto	l1446
  9421  0696  3A01               	xorlw	1	; case 85
  9422  0697  1903               	skipnz
  9423  0698  2E0F               	goto	l1448
  9424  0699  3A0C               	xorlw	12	; case 89
  9425  069A  1903               	skipnz
  9426  069B  2E18               	goto	l1450
  9427  069C  3A38               	xorlw	56	; case 97
  9428  069D  1903               	skipnz
  9429  069E  2D76               	goto	l1409
  9430  069F  3A03               	xorlw	3	; case 98
  9431  06A0  1903               	skipnz
  9432  06A1  2D7F               	goto	l1412
  9433  06A2  3A01               	xorlw	1	; case 99
  9434  06A3  1903               	skipnz
  9435  06A4  2D88               	goto	l1415
  9436  06A5  3A07               	xorlw	7	; case 100
  9437  06A6  1903               	skipnz
  9438  06A7  2D91               	goto	l1418
  9439  06A8  3A01               	xorlw	1	; case 101
  9440  06A9  1903               	skipnz
  9441  06AA  2D9A               	goto	l1421
  9442  06AB  3A03               	xorlw	3	; case 102
  9443  06AC  1903               	skipnz
  9444  06AD  2DA3               	goto	l1424
  9445  06AE  3A01               	xorlw	1	; case 103
  9446  06AF  1903               	skipnz
  9447  06B0  2DAC               	goto	l1426
  9448  06B1  3A0F               	xorlw	15	; case 104
  9449  06B2  1903               	skipnz
  9450  06B3  2DB5               	goto	l1428
  9451  06B4  3A01               	xorlw	1	; case 105
  9452  06B5  1903               	skipnz
  9453  06B6  2DBE               	goto	l1430
  9454  06B7  3A03               	xorlw	3	; case 106
  9455  06B8  1903               	skipnz
  9456  06B9  2DC7               	goto	l1432
  9457  06BA  3A06               	xorlw	6	; case 108
  9458  06BB  1903               	skipnz
  9459  06BC  2DD0               	goto	l1434
  9460  06BD  3A02               	xorlw	2	; case 110
  9461  06BE  1903               	skipnz
  9462  06BF  2DD9               	goto	l1436
  9463  06C0  3A01               	xorlw	1	; case 111
  9464  06C1  1903               	skipnz
  9465  06C2  2DE2               	goto	l1438
  9466  06C3  3A1F               	xorlw	31	; case 112
  9467  06C4  1903               	skipnz
  9468  06C5  2DEB               	goto	l1440
  9469  06C6  3A02               	xorlw	2	; case 114
  9470  06C7  1903               	skipnz
  9471  06C8  2DF4               	goto	l1442
  9472  06C9  3A01               	xorlw	1	; case 115
  9473  06CA  1903               	skipnz
  9474  06CB  2DFD               	goto	l1444
  9475  06CC  3A07               	xorlw	7	; case 116
  9476  06CD  1903               	skipnz
  9477  06CE  2E06               	goto	l1446
  9478  06CF  3A01               	xorlw	1	; case 117
  9479  06D0  1903               	skipnz
  9480  06D1  2E0F               	goto	l1448
  9481  06D2  3A0C               	xorlw	12	; case 121
  9482  06D3  1903               	skipnz
  9483  06D4  2E18               	goto	l1450
  9484  06D5  2E21               	goto	l1451
  9485  06D6  0008               	return
  9486  06D7                     __end_of_LCD_Digit3Num:
  9487                           
  9488                           	psect	text34
  9489  0E42                     __ptext34:	
  9490 ;; *************** function _LCD_Digit2Num *****************
  9491 ;; Defined at:
  9492 ;;		line 331 in file "main.c"
  9493 ;; Parameters:    Size  Location     Type
  9494 ;;  num             1    wreg     unsigned char 
  9495 ;; Auto vars:     Size  Location     Type
  9496 ;;  num             1    2[BANK0 ] unsigned char 
  9497 ;; Return value:  Size  Location     Type
  9498 ;;                  1    wreg      void 
  9499 ;; Registers used:
  9500 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9501 ;; Tracked objects:
  9502 ;;		On entry : 10/F
  9503 ;;		On exit  : 1F/F
  9504 ;;		Unchanged: 0/0
  9505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9510 ;;Total ram usage:        3 bytes
  9511 ;; Hardware stack levels used:    1
  9512 ;; Hardware stack levels required when called:    4
  9513 ;; This function calls:
  9514 ;;		Nothing
  9515 ;; This function is called by:
  9516 ;;		_main
  9517 ;; This function uses a non-reentrant model
  9518 ;;
  9519                           
  9520                           
  9521                           ;psect for function _LCD_Digit2Num
  9522  0E42                     _LCD_Digit2Num:
  9523                           
  9524                           ;incstack = 0
  9525                           ; Regs used in _LCD_Digit2Num: [wreg-fsr0h+status,2+status,0]
  9526                           ;LCD_Digit2Num@num stored from wreg
  9527  0E42  0020               	movlb	0	; select bank0
  9528  0E43  00A2               	movwf	LCD_Digit2Num@num
  9529                           
  9530                           ;main.c: 331: void LCD_Digit2Num (unsigned char num);main.c: 332: {;main.c: 333:     swi
      +                          tch (num)
  9531  0E44  2F53               	goto	l5786
  9532  0E45                     l1336:	
  9533                           ;main.c: 334:     {;main.c: 335:         case 0: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bit
      +                          s.SEG12COM3 = 1; LCDDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SE
      +                          G5COM1 = 1; LCDDATA6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 0; break;
  9534                           
  9535  0E45  002F               	movlb	15	; select bank15
  9536  0E46  16A9               	bsf	41,5	;volatile
  9537  0E47  162A               	bsf	42,4	;volatile
  9538  0E48  1624               	bsf	36,4	;volatile
  9539  0E49  1621               	bsf	33,4	;volatile
  9540  0E4A  16A3               	bsf	35,5	;volatile
  9541  0E4B  16A6               	bsf	38,5	;volatile
  9542  0E4C  1227               	bcf	39,4	;volatile
  9543  0E4D  0008               	return
  9544  0E4E                     l1338:	
  9545                           ;main.c: 336:         case 1: LCDDATA9bits.SEG5COM3 = 0; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 0; LCDDATA3bits.SEG5COM1 = 0; LCDDATA
      +                          6bits.SEG5COM2 = 0; LCDDATA7bits.SEG12COM2 = 0; break;
  9546                           
  9547  0E4E  002F               	movlb	15	; select bank15
  9548  0E4F  12A9               	bcf	41,5	;volatile
  9549  0E50  162A               	bsf	42,4	;volatile
  9550  0E51  1624               	bsf	36,4	;volatile
  9551  0E52  1221               	bcf	33,4	;volatile
  9552  0E53  12A3               	bcf	35,5	;volatile
  9553  0E54  12A6               	bcf	38,5	;volatile
  9554  0E55  1227               	bcf	39,4	;volatile
  9555  0E56  0008               	return
  9556  0E57                     l1339:	
  9557                           ;main.c: 337:         case 2: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 0; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 1; LCDDATA
      +                          6bits.SEG5COM2 = 0; LCDDATA7bits.SEG12COM2 = 1; break;
  9558                           
  9559  0E57  002F               	movlb	15	; select bank15
  9560  0E58  16A9               	bsf	41,5	;volatile
  9561  0E59  162A               	bsf	42,4	;volatile
  9562  0E5A  1224               	bcf	36,4	;volatile
  9563  0E5B  1621               	bsf	33,4	;volatile
  9564  0E5C  16A3               	bsf	35,5	;volatile
  9565  0E5D  12A6               	bcf	38,5	;volatile
  9566  0E5E  1627               	bsf	39,4	;volatile
  9567  0E5F  0008               	return
  9568  0E60                     l1340:	
  9569                           ;main.c: 338:         case 3: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 0; LCDDATA
      +                          6bits.SEG5COM2 = 0; LCDDATA7bits.SEG12COM2 = 1; break;
  9570                           
  9571  0E60  002F               	movlb	15	; select bank15
  9572  0E61  16A9               	bsf	41,5	;volatile
  9573  0E62  162A               	bsf	42,4	;volatile
  9574  0E63  1624               	bsf	36,4	;volatile
  9575  0E64  1621               	bsf	33,4	;volatile
  9576  0E65  12A3               	bcf	35,5	;volatile
  9577  0E66  12A6               	bcf	38,5	;volatile
  9578  0E67  1627               	bsf	39,4	;volatile
  9579  0E68  0008               	return
  9580  0E69                     l1341:	
  9581                           ;main.c: 339:         case 4: LCDDATA9bits.SEG5COM3 = 0; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 0; LCDDATA3bits.SEG5COM1 = 0; LCDDATA
      +                          6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9582                           
  9583  0E69  002F               	movlb	15	; select bank15
  9584  0E6A  12A9               	bcf	41,5	;volatile
  9585  0E6B  162A               	bsf	42,4	;volatile
  9586  0E6C  1624               	bsf	36,4	;volatile
  9587  0E6D  1221               	bcf	33,4	;volatile
  9588  0E6E  12A3               	bcf	35,5	;volatile
  9589  0E6F  16A6               	bsf	38,5	;volatile
  9590  0E70  1627               	bsf	39,4	;volatile
  9591  0E71  0008               	return
  9592  0E72                     l1342:	
  9593                           ;main.c: 340:         case 5: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 0; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 0; LCDDATA
      +                          6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9594                           
  9595  0E72  002F               	movlb	15	; select bank15
  9596  0E73  16A9               	bsf	41,5	;volatile
  9597  0E74  122A               	bcf	42,4	;volatile
  9598  0E75  1624               	bsf	36,4	;volatile
  9599  0E76  1621               	bsf	33,4	;volatile
  9600  0E77  12A3               	bcf	35,5	;volatile
  9601  0E78  16A6               	bsf	38,5	;volatile
  9602  0E79  1627               	bsf	39,4	;volatile
  9603  0E7A  0008               	return
  9604  0E7B                     l1343:	
  9605                           ;main.c: 341:         case 6: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 0; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 1; LCDDATA
      +                          6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9606                           
  9607  0E7B  002F               	movlb	15	; select bank15
  9608  0E7C  16A9               	bsf	41,5	;volatile
  9609  0E7D  122A               	bcf	42,4	;volatile
  9610  0E7E  1624               	bsf	36,4	;volatile
  9611  0E7F  1621               	bsf	33,4	;volatile
  9612  0E80  16A3               	bsf	35,5	;volatile
  9613  0E81  16A6               	bsf	38,5	;volatile
  9614  0E82  1627               	bsf	39,4	;volatile
  9615  0E83  0008               	return
  9616  0E84                     l1344:	
  9617                           ;main.c: 342:         case 7: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 0; LCDDATA3bits.SEG5COM1 = 0; LCDDATA
      +                          6bits.SEG5COM2 = 0; LCDDATA7bits.SEG12COM2 = 0; break;
  9618                           
  9619  0E84  002F               	movlb	15	; select bank15
  9620  0E85  16A9               	bsf	41,5	;volatile
  9621  0E86  162A               	bsf	42,4	;volatile
  9622  0E87  1624               	bsf	36,4	;volatile
  9623  0E88  1221               	bcf	33,4	;volatile
  9624  0E89  12A3               	bcf	35,5	;volatile
  9625  0E8A  12A6               	bcf	38,5	;volatile
  9626  0E8B  1227               	bcf	39,4	;volatile
  9627  0E8C  0008               	return
  9628  0E8D                     l1345:	
  9629                           ;main.c: 343:         case 8: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 1; LCDDATA
      +                          6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9630                           
  9631  0E8D  002F               	movlb	15	; select bank15
  9632  0E8E  16A9               	bsf	41,5	;volatile
  9633  0E8F  162A               	bsf	42,4	;volatile
  9634  0E90  1624               	bsf	36,4	;volatile
  9635  0E91  1621               	bsf	33,4	;volatile
  9636  0E92  16A3               	bsf	35,5	;volatile
  9637  0E93  16A6               	bsf	38,5	;volatile
  9638  0E94  1627               	bsf	39,4	;volatile
  9639  0E95  0008               	return
  9640  0E96                     l1346:	
  9641                           ;main.c: 344:         case 9: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 0; LCDDATA
      +                          6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9642                           
  9643  0E96  002F               	movlb	15	; select bank15
  9644  0E97  16A9               	bsf	41,5	;volatile
  9645  0E98  162A               	bsf	42,4	;volatile
  9646  0E99  1624               	bsf	36,4	;volatile
  9647  0E9A  1621               	bsf	33,4	;volatile
  9648  0E9B  12A3               	bcf	35,5	;volatile
  9649  0E9C  16A6               	bsf	38,5	;volatile
  9650  0E9D  1627               	bsf	39,4	;volatile
  9651  0E9E  0008               	return
  9652  0E9F                     l1349:
  9653  0E9F  002F               	movlb	15	; select bank15
  9654  0EA0  16A9               	bsf	41,5	;volatile
  9655  0EA1  162A               	bsf	42,4	;volatile
  9656  0EA2  1624               	bsf	36,4	;volatile
  9657  0EA3  1221               	bcf	33,4	;volatile
  9658  0EA4  16A3               	bsf	35,5	;volatile
  9659  0EA5  16A6               	bsf	38,5	;volatile
  9660  0EA6  1627               	bsf	39,4	;volatile
  9661  0EA7  0008               	return
  9662  0EA8                     l1352:
  9663  0EA8  002F               	movlb	15	; select bank15
  9664  0EA9  12A9               	bcf	41,5	;volatile
  9665  0EAA  122A               	bcf	42,4	;volatile
  9666  0EAB  1624               	bsf	36,4	;volatile
  9667  0EAC  1621               	bsf	33,4	;volatile
  9668  0EAD  16A3               	bsf	35,5	;volatile
  9669  0EAE  16A6               	bsf	38,5	;volatile
  9670  0EAF  1627               	bsf	39,4	;volatile
  9671  0EB0  0008               	return
  9672  0EB1                     l1355:
  9673  0EB1  002F               	movlb	15	; select bank15
  9674  0EB2  16A9               	bsf	41,5	;volatile
  9675  0EB3  122A               	bcf	42,4	;volatile
  9676  0EB4  1224               	bcf	36,4	;volatile
  9677  0EB5  1621               	bsf	33,4	;volatile
  9678  0EB6  16A3               	bsf	35,5	;volatile
  9679  0EB7  16A6               	bsf	38,5	;volatile
  9680  0EB8  1227               	bcf	39,4	;volatile
  9681  0EB9  0008               	return
  9682  0EBA                     l1358:
  9683  0EBA  002F               	movlb	15	; select bank15
  9684  0EBB  12A9               	bcf	41,5	;volatile
  9685  0EBC  162A               	bsf	42,4	;volatile
  9686  0EBD  1624               	bsf	36,4	;volatile
  9687  0EBE  1621               	bsf	33,4	;volatile
  9688  0EBF  16A3               	bsf	35,5	;volatile
  9689  0EC0  12A6               	bcf	38,5	;volatile
  9690  0EC1  1627               	bsf	39,4	;volatile
  9691  0EC2  0008               	return
  9692  0EC3                     l1361:
  9693  0EC3  002F               	movlb	15	; select bank15
  9694  0EC4  16A9               	bsf	41,5	;volatile
  9695  0EC5  122A               	bcf	42,4	;volatile
  9696  0EC6  1224               	bcf	36,4	;volatile
  9697  0EC7  1621               	bsf	33,4	;volatile
  9698  0EC8  16A3               	bsf	35,5	;volatile
  9699  0EC9  16A6               	bsf	38,5	;volatile
  9700  0ECA  1627               	bsf	39,4	;volatile
  9701  0ECB  0008               	return
  9702  0ECC                     l1364:
  9703  0ECC  002F               	movlb	15	; select bank15
  9704  0ECD  16A9               	bsf	41,5	;volatile
  9705  0ECE  122A               	bcf	42,4	;volatile
  9706  0ECF  1224               	bcf	36,4	;volatile
  9707  0ED0  1221               	bcf	33,4	;volatile
  9708  0ED1  16A3               	bsf	35,5	;volatile
  9709  0ED2  16A6               	bsf	38,5	;volatile
  9710  0ED3  1627               	bsf	39,4	;volatile
  9711  0ED4  0008               	return
  9712  0ED5                     l1366:
  9713  0ED5  002F               	movlb	15	; select bank15
  9714  0ED6  16A9               	bsf	41,5	;volatile
  9715  0ED7  122A               	bcf	42,4	;volatile
  9716  0ED8  1624               	bsf	36,4	;volatile
  9717  0ED9  1621               	bsf	33,4	;volatile
  9718  0EDA  16A3               	bsf	35,5	;volatile
  9719  0EDB  16A6               	bsf	38,5	;volatile
  9720  0EDC  1227               	bcf	39,4	;volatile
  9721  0EDD  0008               	return
  9722  0EDE                     l1368:
  9723  0EDE  002F               	movlb	15	; select bank15
  9724  0EDF  12A9               	bcf	41,5	;volatile
  9725  0EE0  162A               	bsf	42,4	;volatile
  9726  0EE1  1624               	bsf	36,4	;volatile
  9727  0EE2  1221               	bcf	33,4	;volatile
  9728  0EE3  16A3               	bsf	35,5	;volatile
  9729  0EE4  16A6               	bsf	38,5	;volatile
  9730  0EE5  1627               	bsf	39,4	;volatile
  9731  0EE6  0008               	return
  9732  0EE7                     l1370:
  9733  0EE7  002F               	movlb	15	; select bank15
  9734  0EE8  12A9               	bcf	41,5	;volatile
  9735  0EE9  122A               	bcf	42,4	;volatile
  9736  0EEA  1224               	bcf	36,4	;volatile
  9737  0EEB  1221               	bcf	33,4	;volatile
  9738  0EEC  16A3               	bsf	35,5	;volatile
  9739  0EED  16A6               	bsf	38,5	;volatile
  9740  0EEE  1227               	bcf	39,4	;volatile
  9741  0EEF  0008               	return
  9742  0EF0                     l1372:
  9743  0EF0  002F               	movlb	15	; select bank15
  9744  0EF1  12A9               	bcf	41,5	;volatile
  9745  0EF2  162A               	bsf	42,4	;volatile
  9746  0EF3  1624               	bsf	36,4	;volatile
  9747  0EF4  1621               	bsf	33,4	;volatile
  9748  0EF5  16A3               	bsf	35,5	;volatile
  9749  0EF6  12A6               	bcf	38,5	;volatile
  9750  0EF7  1227               	bcf	39,4	;volatile
  9751  0EF8  0008               	return
  9752  0EF9                     l1374:
  9753  0EF9  002F               	movlb	15	; select bank15
  9754  0EFA  12A9               	bcf	41,5	;volatile
  9755  0EFB  122A               	bcf	42,4	;volatile
  9756  0EFC  1224               	bcf	36,4	;volatile
  9757  0EFD  1621               	bsf	33,4	;volatile
  9758  0EFE  16A3               	bsf	35,5	;volatile
  9759  0EFF  16A6               	bsf	38,5	;volatile
  9760  0F00  1227               	bcf	39,4	;volatile
  9761  0F01  0008               	return
  9762  0F02                     l1376:
  9763  0F02  002F               	movlb	15	; select bank15
  9764  0F03  12A9               	bcf	41,5	;volatile
  9765  0F04  122A               	bcf	42,4	;volatile
  9766  0F05  1624               	bsf	36,4	;volatile
  9767  0F06  1221               	bcf	33,4	;volatile
  9768  0F07  16A3               	bsf	35,5	;volatile
  9769  0F08  12A6               	bcf	38,5	;volatile
  9770  0F09  1627               	bsf	39,4	;volatile
  9771  0F0A  0008               	return
  9772  0F0B                     l1378:
  9773  0F0B  002F               	movlb	15	; select bank15
  9774  0F0C  12A9               	bcf	41,5	;volatile
  9775  0F0D  122A               	bcf	42,4	;volatile
  9776  0F0E  1624               	bsf	36,4	;volatile
  9777  0F0F  1621               	bsf	33,4	;volatile
  9778  0F10  16A3               	bsf	35,5	;volatile
  9779  0F11  12A6               	bcf	38,5	;volatile
  9780  0F12  1627               	bsf	39,4	;volatile
  9781  0F13  0008               	return
  9782  0F14                     l1380:
  9783  0F14  002F               	movlb	15	; select bank15
  9784  0F15  16A9               	bsf	41,5	;volatile
  9785  0F16  162A               	bsf	42,4	;volatile
  9786  0F17  1224               	bcf	36,4	;volatile
  9787  0F18  1221               	bcf	33,4	;volatile
  9788  0F19  16A3               	bsf	35,5	;volatile
  9789  0F1A  16A6               	bsf	38,5	;volatile
  9790  0F1B  1627               	bsf	39,4	;volatile
  9791  0F1C  0008               	return
  9792  0F1D                     l1382:
  9793  0F1D  002F               	movlb	15	; select bank15
  9794  0F1E  12A9               	bcf	41,5	;volatile
  9795  0F1F  122A               	bcf	42,4	;volatile
  9796  0F20  1224               	bcf	36,4	;volatile
  9797  0F21  1221               	bcf	33,4	;volatile
  9798  0F22  16A3               	bsf	35,5	;volatile
  9799  0F23  12A6               	bcf	38,5	;volatile
  9800  0F24  1627               	bsf	39,4	;volatile
  9801  0F25  0008               	return
  9802  0F26                     l1384:
  9803  0F26  002F               	movlb	15	; select bank15
  9804  0F27  12A9               	bcf	41,5	;volatile
  9805  0F28  122A               	bcf	42,4	;volatile
  9806  0F29  1624               	bsf	36,4	;volatile
  9807  0F2A  1621               	bsf	33,4	;volatile
  9808  0F2B  12A3               	bcf	35,5	;volatile
  9809  0F2C  16A6               	bsf	38,5	;volatile
  9810  0F2D  1627               	bsf	39,4	;volatile
  9811  0F2E  0008               	return
  9812  0F2F                     l1386:
  9813  0F2F  002F               	movlb	15	; select bank15
  9814  0F30  12A9               	bcf	41,5	;volatile
  9815  0F31  122A               	bcf	42,4	;volatile
  9816  0F32  1224               	bcf	36,4	;volatile
  9817  0F33  1621               	bsf	33,4	;volatile
  9818  0F34  16A3               	bsf	35,5	;volatile
  9819  0F35  16A6               	bsf	38,5	;volatile
  9820  0F36  1627               	bsf	39,4	;volatile
  9821  0F37  0008               	return
  9822  0F38                     l1388:
  9823  0F38  002F               	movlb	15	; select bank15
  9824  0F39  12A9               	bcf	41,5	;volatile
  9825  0F3A  162A               	bsf	42,4	;volatile
  9826  0F3B  1624               	bsf	36,4	;volatile
  9827  0F3C  1621               	bsf	33,4	;volatile
  9828  0F3D  16A3               	bsf	35,5	;volatile
  9829  0F3E  16A6               	bsf	38,5	;volatile
  9830  0F3F  1227               	bcf	39,4	;volatile
  9831  0F40  0008               	return
  9832  0F41                     l1390:
  9833  0F41  002F               	movlb	15	; select bank15
  9834  0F42  12A9               	bcf	41,5	;volatile
  9835  0F43  162A               	bsf	42,4	;volatile
  9836  0F44  1624               	bsf	36,4	;volatile
  9837  0F45  1621               	bsf	33,4	;volatile
  9838  0F46  12A3               	bcf	35,5	;volatile
  9839  0F47  16A6               	bsf	38,5	;volatile
  9840  0F48  1627               	bsf	39,4	;volatile
  9841  0F49  0008               	return
  9842  0F4A                     l1391:	
  9843                           ;main.c: 365:         default: LCDDATA9bits.SEG5COM3 = 0; LCDDATA10bits.SEG12COM3 = 0; L
      +                          CDDATA4bits.SEG12COM1 = 0; LCDDATA1bits.SEG12COM0 = 0; LCDDATA3bits.SEG5COM1 = 0; LCDDAT
      +                          A6bits.SEG5COM2 = 0; LCDDATA7bits.SEG12COM2 = 0;
  9844                           
  9845  0F4A  002F               	movlb	15	; select bank15
  9846  0F4B  12A9               	bcf	41,5	;volatile
  9847  0F4C  122A               	bcf	42,4	;volatile
  9848  0F4D  1224               	bcf	36,4	;volatile
  9849  0F4E  1221               	bcf	33,4	;volatile
  9850  0F4F  12A3               	bcf	35,5	;volatile
  9851  0F50  12A6               	bcf	38,5	;volatile
  9852  0F51  1227               	bcf	39,4	;volatile
  9853                           
  9854                           ;main.c: 366:     }
  9855  0F52  0008               	return
  9856  0F53                     l5786:
  9857  0F53  0822               	movf	LCD_Digit2Num@num,w
  9858  0F54  00A0               	movwf	??_LCD_Digit2Num
  9859  0F55  01A1               	clrf	??_LCD_Digit2Num+1
  9860                           
  9861                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9862                           ; Switch size 1, requested type "simple"
  9863                           ; Number of cases is 1, Range of values is 0 to 0
  9864                           ; switch strategies available:
  9865                           ; Name         Instructions Cycles
  9866                           ; simple_byte            4     3 (average)
  9867                           ; direct_byte            8     6 (fixed)
  9868                           ; jumptable            260     6 (fixed)
  9869                           ;	Chosen strategy is simple_byte
  9870  0F56  0821               	movf	??_LCD_Digit2Num+1,w
  9871  0F57  3A00               	xorlw	0	; case 0
  9872  0F58  1903               	skipnz
  9873  0F59  2F5B               	goto	l6168
  9874  0F5A  2F4A               	goto	l1391
  9875  0F5B                     l6168:
  9876                           
  9877                           ; Switch size 1, requested type "simple"
  9878                           ; Number of cases is 54, Range of values is 0 to 121
  9879                           ; switch strategies available:
  9880                           ; Name         Instructions Cycles
  9881                           ; simple_byte          163    82 (average)
  9882                           ; direct_byte          250     6 (fixed)
  9883                           ; jumptable            260     6 (fixed)
  9884                           ;	Chosen strategy is simple_byte
  9885  0F5B  0820               	movf	??_LCD_Digit2Num,w
  9886  0F5C  3A00               	xorlw	0	; case 0
  9887  0F5D  1903               	skipnz
  9888  0F5E  2E45               	goto	l1336
  9889  0F5F  3A01               	xorlw	1	; case 1
  9890  0F60  1903               	skipnz
  9891  0F61  2E4E               	goto	l1338
  9892  0F62  3A03               	xorlw	3	; case 2
  9893  0F63  1903               	skipnz
  9894  0F64  2E57               	goto	l1339
  9895  0F65  3A01               	xorlw	1	; case 3
  9896  0F66  1903               	skipnz
  9897  0F67  2E60               	goto	l1340
  9898  0F68  3A07               	xorlw	7	; case 4
  9899  0F69  1903               	skipnz
  9900  0F6A  2E69               	goto	l1341
  9901  0F6B  3A01               	xorlw	1	; case 5
  9902  0F6C  1903               	skipnz
  9903  0F6D  2E72               	goto	l1342
  9904  0F6E  3A03               	xorlw	3	; case 6
  9905  0F6F  1903               	skipnz
  9906  0F70  2E7B               	goto	l1343
  9907  0F71  3A01               	xorlw	1	; case 7
  9908  0F72  1903               	skipnz
  9909  0F73  2E84               	goto	l1344
  9910  0F74  3A0F               	xorlw	15	; case 8
  9911  0F75  1903               	skipnz
  9912  0F76  2E8D               	goto	l1345
  9913  0F77  3A01               	xorlw	1	; case 9
  9914  0F78  1903               	skipnz
  9915  0F79  2E96               	goto	l1346
  9916  0F7A  3A03               	xorlw	3	; case 10
  9917  0F7B  1903               	skipnz
  9918  0F7C  2E9F               	goto	l1349
  9919  0F7D  3A01               	xorlw	1	; case 11
  9920  0F7E  1903               	skipnz
  9921  0F7F  2EA8               	goto	l1352
  9922  0F80  3A07               	xorlw	7	; case 12
  9923  0F81  1903               	skipnz
  9924  0F82  2EB1               	goto	l1355
  9925  0F83  3A01               	xorlw	1	; case 13
  9926  0F84  1903               	skipnz
  9927  0F85  2EBA               	goto	l1358
  9928  0F86  3A03               	xorlw	3	; case 14
  9929  0F87  1903               	skipnz
  9930  0F88  2EC3               	goto	l1361
  9931  0F89  3A01               	xorlw	1	; case 15
  9932  0F8A  1903               	skipnz
  9933  0F8B  2ECC               	goto	l1364
  9934  0F8C  3A4E               	xorlw	78	; case 65
  9935  0F8D  1903               	skipnz
  9936  0F8E  2E9F               	goto	l1349
  9937  0F8F  3A03               	xorlw	3	; case 66
  9938  0F90  1903               	skipnz
  9939  0F91  2EA8               	goto	l1352
  9940  0F92  3A01               	xorlw	1	; case 67
  9941  0F93  1903               	skipnz
  9942  0F94  2EB1               	goto	l1355
  9943  0F95  3A07               	xorlw	7	; case 68
  9944  0F96  1903               	skipnz
  9945  0F97  2EBA               	goto	l1358
  9946  0F98  3A01               	xorlw	1	; case 69
  9947  0F99  1903               	skipnz
  9948  0F9A  2EC3               	goto	l1361
  9949  0F9B  3A03               	xorlw	3	; case 70
  9950  0F9C  1903               	skipnz
  9951  0F9D  2ECC               	goto	l1364
  9952  0F9E  3A01               	xorlw	1	; case 71
  9953  0F9F  1903               	skipnz
  9954  0FA0  2ED5               	goto	l1366
  9955  0FA1  3A0F               	xorlw	15	; case 72
  9956  0FA2  1903               	skipnz
  9957  0FA3  2EDE               	goto	l1368
  9958  0FA4  3A01               	xorlw	1	; case 73
  9959  0FA5  1903               	skipnz
  9960  0FA6  2EE7               	goto	l1370
  9961  0FA7  3A03               	xorlw	3	; case 74
  9962  0FA8  1903               	skipnz
  9963  0FA9  2EF0               	goto	l1372
  9964  0FAA  3A06               	xorlw	6	; case 76
  9965  0FAB  1903               	skipnz
  9966  0FAC  2EF9               	goto	l1374
  9967  0FAD  3A02               	xorlw	2	; case 78
  9968  0FAE  1903               	skipnz
  9969  0FAF  2F02               	goto	l1376
  9970  0FB0  3A01               	xorlw	1	; case 79
  9971  0FB1  1903               	skipnz
  9972  0FB2  2F0B               	goto	l1378
  9973  0FB3  3A1F               	xorlw	31	; case 80
  9974  0FB4  1903               	skipnz
  9975  0FB5  2F14               	goto	l1380
  9976  0FB6  3A02               	xorlw	2	; case 82
  9977  0FB7  1903               	skipnz
  9978  0FB8  2F1D               	goto	l1382
  9979  0FB9  3A01               	xorlw	1	; case 83
  9980  0FBA  1903               	skipnz
  9981  0FBB  2F26               	goto	l1384
  9982  0FBC  3A07               	xorlw	7	; case 84
  9983  0FBD  1903               	skipnz
  9984  0FBE  2F2F               	goto	l1386
  9985  0FBF  3A01               	xorlw	1	; case 85
  9986  0FC0  1903               	skipnz
  9987  0FC1  2F38               	goto	l1388
  9988  0FC2  3A0C               	xorlw	12	; case 89
  9989  0FC3  1903               	skipnz
  9990  0FC4  2F41               	goto	l1390
  9991  0FC5  3A38               	xorlw	56	; case 97
  9992  0FC6  1903               	skipnz
  9993  0FC7  2E9F               	goto	l1349
  9994  0FC8  3A03               	xorlw	3	; case 98
  9995  0FC9  1903               	skipnz
  9996  0FCA  2EA8               	goto	l1352
  9997  0FCB  3A01               	xorlw	1	; case 99
  9998  0FCC  1903               	skipnz
  9999  0FCD  2EB1               	goto	l1355
 10000  0FCE  3A07               	xorlw	7	; case 100
 10001  0FCF  1903               	skipnz
 10002  0FD0  2EBA               	goto	l1358
 10003  0FD1  3A01               	xorlw	1	; case 101
 10004  0FD2  1903               	skipnz
 10005  0FD3  2EC3               	goto	l1361
 10006  0FD4  3A03               	xorlw	3	; case 102
 10007  0FD5  1903               	skipnz
 10008  0FD6  2ECC               	goto	l1364
 10009  0FD7  3A01               	xorlw	1	; case 103
 10010  0FD8  1903               	skipnz
 10011  0FD9  2ED5               	goto	l1366
 10012  0FDA  3A0F               	xorlw	15	; case 104
 10013  0FDB  1903               	skipnz
 10014  0FDC  2EDE               	goto	l1368
 10015  0FDD  3A01               	xorlw	1	; case 105
 10016  0FDE  1903               	skipnz
 10017  0FDF  2EE7               	goto	l1370
 10018  0FE0  3A03               	xorlw	3	; case 106
 10019  0FE1  1903               	skipnz
 10020  0FE2  2EF0               	goto	l1372
 10021  0FE3  3A06               	xorlw	6	; case 108
 10022  0FE4  1903               	skipnz
 10023  0FE5  2EF9               	goto	l1374
 10024  0FE6  3A02               	xorlw	2	; case 110
 10025  0FE7  1903               	skipnz
 10026  0FE8  2F02               	goto	l1376
 10027  0FE9  3A01               	xorlw	1	; case 111
 10028  0FEA  1903               	skipnz
 10029  0FEB  2F0B               	goto	l1378
 10030  0FEC  3A1F               	xorlw	31	; case 112
 10031  0FED  1903               	skipnz
 10032  0FEE  2F14               	goto	l1380
 10033  0FEF  3A02               	xorlw	2	; case 114
 10034  0FF0  1903               	skipnz
 10035  0FF1  2F1D               	goto	l1382
 10036  0FF2  3A01               	xorlw	1	; case 115
 10037  0FF3  1903               	skipnz
 10038  0FF4  2F26               	goto	l1384
 10039  0FF5  3A07               	xorlw	7	; case 116
 10040  0FF6  1903               	skipnz
 10041  0FF7  2F2F               	goto	l1386
 10042  0FF8  3A01               	xorlw	1	; case 117
 10043  0FF9  1903               	skipnz
 10044  0FFA  2F38               	goto	l1388
 10045  0FFB  3A0C               	xorlw	12	; case 121
 10046  0FFC  1903               	skipnz
 10047  0FFD  2F41               	goto	l1390
 10048  0FFE  2F4A               	goto	l1391
 10049  0FFF  0008               	return
 10050  1000                     __end_of_LCD_Digit2Num:
 10051                           
 10052                           	psect	text35
 10053  0C85                     __ptext35:	
 10054 ;; *************** function _LCD_Digit1Num *****************
 10055 ;; Defined at:
 10056 ;;		line 293 in file "main.c"
 10057 ;; Parameters:    Size  Location     Type
 10058 ;;  num             1    wreg     unsigned char 
 10059 ;; Auto vars:     Size  Location     Type
 10060 ;;  num             1    2[BANK0 ] unsigned char 
 10061 ;; Return value:  Size  Location     Type
 10062 ;;                  1    wreg      void 
 10063 ;; Registers used:
 10064 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10065 ;; Tracked objects:
 10066 ;;		On entry : 1F/0
 10067 ;;		On exit  : 1F/F
 10068 ;;		Unchanged: 0/0
 10069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10073 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;Total ram usage:        3 bytes
 10075 ;; Hardware stack levels used:    1
 10076 ;; Hardware stack levels required when called:    4
 10077 ;; This function calls:
 10078 ;;		Nothing
 10079 ;; This function is called by:
 10080 ;;		_main
 10081 ;; This function uses a non-reentrant model
 10082 ;;
 10083                           
 10084                           
 10085                           ;psect for function _LCD_Digit1Num
 10086  0C85                     _LCD_Digit1Num:
 10087                           
 10088                           ;incstack = 0
 10089                           ; Regs used in _LCD_Digit1Num: [wreg-fsr0h+status,2+status,0]
 10090                           ;LCD_Digit1Num@num stored from wreg
 10091  0C85  00A2               	movwf	LCD_Digit1Num@num
 10092                           
 10093                           ;main.c: 293: void LCD_Digit1Num (unsigned char num);main.c: 294: {;main.c: 295:     swi
      +                          tch (num)
 10094  0C86  2D95               	goto	l5778
 10095  0C87                     l1276:	
 10096                           ;main.c: 296:     {;main.c: 297:         case 0: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits
      +                          .SEG7COM3 = 1; LCDDATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4CO
      +                          M1 = 1; LCDDATA6bits.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 0; break;
 10097                           
 10098  0C87  002F               	movlb	15	; select bank15
 10099  0C88  1629               	bsf	41,4	;volatile
 10100  0C89  17A9               	bsf	41,7	;volatile
 10101  0C8A  17A3               	bsf	35,7	;volatile
 10102  0C8B  17A0               	bsf	32,7	;volatile
 10103  0C8C  1623               	bsf	35,4	;volatile
 10104  0C8D  1626               	bsf	38,4	;volatile
 10105  0C8E  13A6               	bcf	38,7	;volatile
 10106  0C8F  0008               	return
 10107  0C90                     l1278:	
 10108                           ;main.c: 298:         case 1: LCDDATA9bits.SEG4COM3 = 0; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 0; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bit
      +                          s.SEG4COM2 = 0; LCDDATA6bits.SEG7COM2 = 0; break;
 10109                           
 10110  0C90  002F               	movlb	15	; select bank15
 10111  0C91  1229               	bcf	41,4	;volatile
 10112  0C92  17A9               	bsf	41,7	;volatile
 10113  0C93  17A3               	bsf	35,7	;volatile
 10114  0C94  13A0               	bcf	32,7	;volatile
 10115  0C95  1223               	bcf	35,4	;volatile
 10116  0C96  1226               	bcf	38,4	;volatile
 10117  0C97  13A6               	bcf	38,7	;volatile
 10118  0C98  0008               	return
 10119  0C99                     l1279:	
 10120                           ;main.c: 299:         case 2: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 0; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 1; LCDDATA6bit
      +                          s.SEG4COM2 = 0; LCDDATA6bits.SEG7COM2 = 1; break;
 10121                           
 10122  0C99  002F               	movlb	15	; select bank15
 10123  0C9A  1629               	bsf	41,4	;volatile
 10124  0C9B  17A9               	bsf	41,7	;volatile
 10125  0C9C  13A3               	bcf	35,7	;volatile
 10126  0C9D  17A0               	bsf	32,7	;volatile
 10127  0C9E  1623               	bsf	35,4	;volatile
 10128  0C9F  1226               	bcf	38,4	;volatile
 10129  0CA0  17A6               	bsf	38,7	;volatile
 10130  0CA1  0008               	return
 10131  0CA2                     l1280:	
 10132                           ;main.c: 300:         case 3: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bit
      +                          s.SEG4COM2 = 0; LCDDATA6bits.SEG7COM2 = 1; break;
 10133                           
 10134  0CA2  002F               	movlb	15	; select bank15
 10135  0CA3  1629               	bsf	41,4	;volatile
 10136  0CA4  17A9               	bsf	41,7	;volatile
 10137  0CA5  17A3               	bsf	35,7	;volatile
 10138  0CA6  17A0               	bsf	32,7	;volatile
 10139  0CA7  1223               	bcf	35,4	;volatile
 10140  0CA8  1226               	bcf	38,4	;volatile
 10141  0CA9  17A6               	bsf	38,7	;volatile
 10142  0CAA  0008               	return
 10143  0CAB                     l1281:	
 10144                           ;main.c: 301:         case 4: LCDDATA9bits.SEG4COM3 = 0; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 0; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bit
      +                          s.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10145                           
 10146  0CAB  002F               	movlb	15	; select bank15
 10147  0CAC  1229               	bcf	41,4	;volatile
 10148  0CAD  17A9               	bsf	41,7	;volatile
 10149  0CAE  17A3               	bsf	35,7	;volatile
 10150  0CAF  13A0               	bcf	32,7	;volatile
 10151  0CB0  1223               	bcf	35,4	;volatile
 10152  0CB1  1626               	bsf	38,4	;volatile
 10153  0CB2  17A6               	bsf	38,7	;volatile
 10154  0CB3  0008               	return
 10155  0CB4                     l1282:	
 10156                           ;main.c: 302:         case 5: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 0; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bit
      +                          s.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10157                           
 10158  0CB4  002F               	movlb	15	; select bank15
 10159  0CB5  1629               	bsf	41,4	;volatile
 10160  0CB6  13A9               	bcf	41,7	;volatile
 10161  0CB7  17A3               	bsf	35,7	;volatile
 10162  0CB8  17A0               	bsf	32,7	;volatile
 10163  0CB9  1223               	bcf	35,4	;volatile
 10164  0CBA  1626               	bsf	38,4	;volatile
 10165  0CBB  17A6               	bsf	38,7	;volatile
 10166  0CBC  0008               	return
 10167  0CBD                     l1283:	
 10168                           ;main.c: 303:         case 6: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 0; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 1; LCDDATA6bit
      +                          s.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10169                           
 10170  0CBD  002F               	movlb	15	; select bank15
 10171  0CBE  1629               	bsf	41,4	;volatile
 10172  0CBF  13A9               	bcf	41,7	;volatile
 10173  0CC0  17A3               	bsf	35,7	;volatile
 10174  0CC1  17A0               	bsf	32,7	;volatile
 10175  0CC2  1623               	bsf	35,4	;volatile
 10176  0CC3  1626               	bsf	38,4	;volatile
 10177  0CC4  17A6               	bsf	38,7	;volatile
 10178  0CC5  0008               	return
 10179  0CC6                     l1284:	
 10180                           ;main.c: 304:         case 7: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 0; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bit
      +                          s.SEG4COM2 = 0; LCDDATA6bits.SEG7COM2 = 0; break;
 10181                           
 10182  0CC6  002F               	movlb	15	; select bank15
 10183  0CC7  1629               	bsf	41,4	;volatile
 10184  0CC8  17A9               	bsf	41,7	;volatile
 10185  0CC9  17A3               	bsf	35,7	;volatile
 10186  0CCA  13A0               	bcf	32,7	;volatile
 10187  0CCB  1223               	bcf	35,4	;volatile
 10188  0CCC  1226               	bcf	38,4	;volatile
 10189  0CCD  13A6               	bcf	38,7	;volatile
 10190  0CCE  0008               	return
 10191  0CCF                     l1285:	
 10192                           ;main.c: 305:         case 8: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 1; LCDDATA6bit
      +                          s.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10193                           
 10194  0CCF  002F               	movlb	15	; select bank15
 10195  0CD0  1629               	bsf	41,4	;volatile
 10196  0CD1  17A9               	bsf	41,7	;volatile
 10197  0CD2  17A3               	bsf	35,7	;volatile
 10198  0CD3  17A0               	bsf	32,7	;volatile
 10199  0CD4  1623               	bsf	35,4	;volatile
 10200  0CD5  1626               	bsf	38,4	;volatile
 10201  0CD6  17A6               	bsf	38,7	;volatile
 10202  0CD7  0008               	return
 10203  0CD8                     l1286:	
 10204                           ;main.c: 306:         case 9: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bit
      +                          s.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10205                           
 10206  0CD8  002F               	movlb	15	; select bank15
 10207  0CD9  1629               	bsf	41,4	;volatile
 10208  0CDA  17A9               	bsf	41,7	;volatile
 10209  0CDB  17A3               	bsf	35,7	;volatile
 10210  0CDC  17A0               	bsf	32,7	;volatile
 10211  0CDD  1223               	bcf	35,4	;volatile
 10212  0CDE  1626               	bsf	38,4	;volatile
 10213  0CDF  17A6               	bsf	38,7	;volatile
 10214  0CE0  0008               	return
 10215  0CE1                     l1289:
 10216  0CE1  002F               	movlb	15	; select bank15
 10217  0CE2  1629               	bsf	41,4	;volatile
 10218  0CE3  17A9               	bsf	41,7	;volatile
 10219  0CE4  17A3               	bsf	35,7	;volatile
 10220  0CE5  13A0               	bcf	32,7	;volatile
 10221  0CE6  1623               	bsf	35,4	;volatile
 10222  0CE7  1626               	bsf	38,4	;volatile
 10223  0CE8  17A6               	bsf	38,7	;volatile
 10224  0CE9  0008               	return
 10225  0CEA                     l1292:
 10226  0CEA  002F               	movlb	15	; select bank15
 10227  0CEB  1229               	bcf	41,4	;volatile
 10228  0CEC  13A9               	bcf	41,7	;volatile
 10229  0CED  17A3               	bsf	35,7	;volatile
 10230  0CEE  17A0               	bsf	32,7	;volatile
 10231  0CEF  1623               	bsf	35,4	;volatile
 10232  0CF0  1626               	bsf	38,4	;volatile
 10233  0CF1  17A6               	bsf	38,7	;volatile
 10234  0CF2  0008               	return
 10235  0CF3                     l1295:
 10236  0CF3  002F               	movlb	15	; select bank15
 10237  0CF4  1629               	bsf	41,4	;volatile
 10238  0CF5  13A9               	bcf	41,7	;volatile
 10239  0CF6  13A3               	bcf	35,7	;volatile
 10240  0CF7  17A0               	bsf	32,7	;volatile
 10241  0CF8  1623               	bsf	35,4	;volatile
 10242  0CF9  1626               	bsf	38,4	;volatile
 10243  0CFA  13A6               	bcf	38,7	;volatile
 10244  0CFB  0008               	return
 10245  0CFC                     l1298:
 10246  0CFC  002F               	movlb	15	; select bank15
 10247  0CFD  1229               	bcf	41,4	;volatile
 10248  0CFE  17A9               	bsf	41,7	;volatile
 10249  0CFF  17A3               	bsf	35,7	;volatile
 10250  0D00  17A0               	bsf	32,7	;volatile
 10251  0D01  1623               	bsf	35,4	;volatile
 10252  0D02  1226               	bcf	38,4	;volatile
 10253  0D03  17A6               	bsf	38,7	;volatile
 10254  0D04  0008               	return
 10255  0D05                     l1301:
 10256  0D05  002F               	movlb	15	; select bank15
 10257  0D06  1629               	bsf	41,4	;volatile
 10258  0D07  17A9               	bsf	41,7	;volatile
 10259  0D08  13A3               	bcf	35,7	;volatile
 10260  0D09  13A0               	bcf	32,7	;volatile
 10261  0D0A  1623               	bsf	35,4	;volatile
 10262  0D0B  1626               	bsf	38,4	;volatile
 10263  0D0C  17A6               	bsf	38,7	;volatile
 10264  0D0D  0008               	return
 10265  0D0E                     l1304:
 10266  0D0E  002F               	movlb	15	; select bank15
 10267  0D0F  1629               	bsf	41,4	;volatile
 10268  0D10  13A9               	bcf	41,7	;volatile
 10269  0D11  13A3               	bcf	35,7	;volatile
 10270  0D12  13A0               	bcf	32,7	;volatile
 10271  0D13  1623               	bsf	35,4	;volatile
 10272  0D14  1626               	bsf	38,4	;volatile
 10273  0D15  17A6               	bsf	38,7	;volatile
 10274  0D16  0008               	return
 10275  0D17                     l1306:
 10276  0D17  002F               	movlb	15	; select bank15
 10277  0D18  1629               	bsf	41,4	;volatile
 10278  0D19  13A9               	bcf	41,7	;volatile
 10279  0D1A  17A3               	bsf	35,7	;volatile
 10280  0D1B  17A0               	bsf	32,7	;volatile
 10281  0D1C  1623               	bsf	35,4	;volatile
 10282  0D1D  1626               	bsf	38,4	;volatile
 10283  0D1E  13A6               	bcf	38,7	;volatile
 10284  0D1F  0008               	return
 10285  0D20                     l1308:
 10286  0D20  002F               	movlb	15	; select bank15
 10287  0D21  1229               	bcf	41,4	;volatile
 10288  0D22  17A9               	bsf	41,7	;volatile
 10289  0D23  17A3               	bsf	35,7	;volatile
 10290  0D24  13A0               	bcf	32,7	;volatile
 10291  0D25  1623               	bsf	35,4	;volatile
 10292  0D26  1626               	bsf	38,4	;volatile
 10293  0D27  17A6               	bsf	38,7	;volatile
 10294  0D28  0008               	return
 10295  0D29                     l1310:
 10296  0D29  002F               	movlb	15	; select bank15
 10297  0D2A  1229               	bcf	41,4	;volatile
 10298  0D2B  13A9               	bcf	41,7	;volatile
 10299  0D2C  13A3               	bcf	35,7	;volatile
 10300  0D2D  13A0               	bcf	32,7	;volatile
 10301  0D2E  1623               	bsf	35,4	;volatile
 10302  0D2F  1626               	bsf	38,4	;volatile
 10303  0D30  13A6               	bcf	38,7	;volatile
 10304  0D31  0008               	return
 10305  0D32                     l1312:
 10306  0D32  002F               	movlb	15	; select bank15
 10307  0D33  1229               	bcf	41,4	;volatile
 10308  0D34  17A9               	bsf	41,7	;volatile
 10309  0D35  17A3               	bsf	35,7	;volatile
 10310  0D36  17A0               	bsf	32,7	;volatile
 10311  0D37  1623               	bsf	35,4	;volatile
 10312  0D38  1226               	bcf	38,4	;volatile
 10313  0D39  13A6               	bcf	38,7	;volatile
 10314  0D3A  0008               	return
 10315  0D3B                     l1314:
 10316  0D3B  002F               	movlb	15	; select bank15
 10317  0D3C  1229               	bcf	41,4	;volatile
 10318  0D3D  13A9               	bcf	41,7	;volatile
 10319  0D3E  13A3               	bcf	35,7	;volatile
 10320  0D3F  17A0               	bsf	32,7	;volatile
 10321  0D40  1623               	bsf	35,4	;volatile
 10322  0D41  1626               	bsf	38,4	;volatile
 10323  0D42  13A6               	bcf	38,7	;volatile
 10324  0D43  0008               	return
 10325  0D44                     l1316:
 10326  0D44  002F               	movlb	15	; select bank15
 10327  0D45  1229               	bcf	41,4	;volatile
 10328  0D46  13A9               	bcf	41,7	;volatile
 10329  0D47  17A3               	bsf	35,7	;volatile
 10330  0D48  13A0               	bcf	32,7	;volatile
 10331  0D49  1623               	bsf	35,4	;volatile
 10332  0D4A  1226               	bcf	38,4	;volatile
 10333  0D4B  17A6               	bsf	38,7	;volatile
 10334  0D4C  0008               	return
 10335  0D4D                     l1318:
 10336  0D4D  002F               	movlb	15	; select bank15
 10337  0D4E  1229               	bcf	41,4	;volatile
 10338  0D4F  13A9               	bcf	41,7	;volatile
 10339  0D50  17A3               	bsf	35,7	;volatile
 10340  0D51  17A0               	bsf	32,7	;volatile
 10341  0D52  1623               	bsf	35,4	;volatile
 10342  0D53  1226               	bcf	38,4	;volatile
 10343  0D54  17A6               	bsf	38,7	;volatile
 10344  0D55  0008               	return
 10345  0D56                     l1320:
 10346  0D56  002F               	movlb	15	; select bank15
 10347  0D57  1629               	bsf	41,4	;volatile
 10348  0D58  17A9               	bsf	41,7	;volatile
 10349  0D59  13A3               	bcf	35,7	;volatile
 10350  0D5A  13A0               	bcf	32,7	;volatile
 10351  0D5B  1623               	bsf	35,4	;volatile
 10352  0D5C  1626               	bsf	38,4	;volatile
 10353  0D5D  17A6               	bsf	38,7	;volatile
 10354  0D5E  0008               	return
 10355  0D5F                     l1322:
 10356  0D5F  002F               	movlb	15	; select bank15
 10357  0D60  1229               	bcf	41,4	;volatile
 10358  0D61  13A9               	bcf	41,7	;volatile
 10359  0D62  13A3               	bcf	35,7	;volatile
 10360  0D63  13A0               	bcf	32,7	;volatile
 10361  0D64  1623               	bsf	35,4	;volatile
 10362  0D65  1226               	bcf	38,4	;volatile
 10363  0D66  17A6               	bsf	38,7	;volatile
 10364  0D67  0008               	return
 10365  0D68                     l1324:
 10366  0D68  002F               	movlb	15	; select bank15
 10367  0D69  1229               	bcf	41,4	;volatile
 10368  0D6A  13A9               	bcf	41,7	;volatile
 10369  0D6B  17A3               	bsf	35,7	;volatile
 10370  0D6C  17A0               	bsf	32,7	;volatile
 10371  0D6D  1223               	bcf	35,4	;volatile
 10372  0D6E  1626               	bsf	38,4	;volatile
 10373  0D6F  17A6               	bsf	38,7	;volatile
 10374  0D70  0008               	return
 10375  0D71                     l1326:
 10376  0D71  002F               	movlb	15	; select bank15
 10377  0D72  1229               	bcf	41,4	;volatile
 10378  0D73  13A9               	bcf	41,7	;volatile
 10379  0D74  13A3               	bcf	35,7	;volatile
 10380  0D75  17A0               	bsf	32,7	;volatile
 10381  0D76  1623               	bsf	35,4	;volatile
 10382  0D77  1626               	bsf	38,4	;volatile
 10383  0D78  17A6               	bsf	38,7	;volatile
 10384  0D79  0008               	return
 10385  0D7A                     l1328:
 10386  0D7A  002F               	movlb	15	; select bank15
 10387  0D7B  1229               	bcf	41,4	;volatile
 10388  0D7C  17A9               	bsf	41,7	;volatile
 10389  0D7D  17A3               	bsf	35,7	;volatile
 10390  0D7E  17A0               	bsf	32,7	;volatile
 10391  0D7F  1623               	bsf	35,4	;volatile
 10392  0D80  1626               	bsf	38,4	;volatile
 10393  0D81  13A6               	bcf	38,7	;volatile
 10394  0D82  0008               	return
 10395  0D83                     l1330:
 10396  0D83  002F               	movlb	15	; select bank15
 10397  0D84  1229               	bcf	41,4	;volatile
 10398  0D85  17A9               	bsf	41,7	;volatile
 10399  0D86  17A3               	bsf	35,7	;volatile
 10400  0D87  17A0               	bsf	32,7	;volatile
 10401  0D88  1223               	bcf	35,4	;volatile
 10402  0D89  1626               	bsf	38,4	;volatile
 10403  0D8A  17A6               	bsf	38,7	;volatile
 10404  0D8B  0008               	return
 10405  0D8C                     l1331:	
 10406                           ;main.c: 327:         default: LCDDATA9bits.SEG4COM3 = 0; LCDDATA9bits.SEG7COM3 = 0; LCD
      +                          DATA3bits.SEG7COM1 = 0; LCDDATA0bits.SEG7COM0 = 0; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bi
      +                          ts.SEG4COM2 = 0; LCDDATA6bits.SEG7COM2 = 0;
 10407                           
 10408  0D8C  002F               	movlb	15	; select bank15
 10409  0D8D  1229               	bcf	41,4	;volatile
 10410  0D8E  13A9               	bcf	41,7	;volatile
 10411  0D8F  13A3               	bcf	35,7	;volatile
 10412  0D90  13A0               	bcf	32,7	;volatile
 10413  0D91  1223               	bcf	35,4	;volatile
 10414  0D92  1226               	bcf	38,4	;volatile
 10415  0D93  13A6               	bcf	38,7	;volatile
 10416                           
 10417                           ;main.c: 328:     }
 10418  0D94  0008               	return
 10419  0D95                     l5778:
 10420  0D95  0822               	movf	LCD_Digit1Num@num,w
 10421  0D96  00A0               	movwf	??_LCD_Digit1Num
 10422  0D97  01A1               	clrf	??_LCD_Digit1Num+1
 10423                           
 10424                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10425                           ; Switch size 1, requested type "simple"
 10426                           ; Number of cases is 1, Range of values is 0 to 0
 10427                           ; switch strategies available:
 10428                           ; Name         Instructions Cycles
 10429                           ; simple_byte            4     3 (average)
 10430                           ; direct_byte            8     6 (fixed)
 10431                           ; jumptable            260     6 (fixed)
 10432                           ;	Chosen strategy is simple_byte
 10433  0D98  0821               	movf	??_LCD_Digit1Num+1,w
 10434  0D99  3A00               	xorlw	0	; case 0
 10435  0D9A  1903               	skipnz
 10436  0D9B  2D9D               	goto	l6170
 10437  0D9C  2D8C               	goto	l1331
 10438  0D9D                     l6170:
 10439                           
 10440                           ; Switch size 1, requested type "simple"
 10441                           ; Number of cases is 54, Range of values is 0 to 121
 10442                           ; switch strategies available:
 10443                           ; Name         Instructions Cycles
 10444                           ; simple_byte          163    82 (average)
 10445                           ; direct_byte          250     6 (fixed)
 10446                           ; jumptable            260     6 (fixed)
 10447                           ;	Chosen strategy is simple_byte
 10448  0D9D  0820               	movf	??_LCD_Digit1Num,w
 10449  0D9E  3A00               	xorlw	0	; case 0
 10450  0D9F  1903               	skipnz
 10451  0DA0  2C87               	goto	l1276
 10452  0DA1  3A01               	xorlw	1	; case 1
 10453  0DA2  1903               	skipnz
 10454  0DA3  2C90               	goto	l1278
 10455  0DA4  3A03               	xorlw	3	; case 2
 10456  0DA5  1903               	skipnz
 10457  0DA6  2C99               	goto	l1279
 10458  0DA7  3A01               	xorlw	1	; case 3
 10459  0DA8  1903               	skipnz
 10460  0DA9  2CA2               	goto	l1280
 10461  0DAA  3A07               	xorlw	7	; case 4
 10462  0DAB  1903               	skipnz
 10463  0DAC  2CAB               	goto	l1281
 10464  0DAD  3A01               	xorlw	1	; case 5
 10465  0DAE  1903               	skipnz
 10466  0DAF  2CB4               	goto	l1282
 10467  0DB0  3A03               	xorlw	3	; case 6
 10468  0DB1  1903               	skipnz
 10469  0DB2  2CBD               	goto	l1283
 10470  0DB3  3A01               	xorlw	1	; case 7
 10471  0DB4  1903               	skipnz
 10472  0DB5  2CC6               	goto	l1284
 10473  0DB6  3A0F               	xorlw	15	; case 8
 10474  0DB7  1903               	skipnz
 10475  0DB8  2CCF               	goto	l1285
 10476  0DB9  3A01               	xorlw	1	; case 9
 10477  0DBA  1903               	skipnz
 10478  0DBB  2CD8               	goto	l1286
 10479  0DBC  3A03               	xorlw	3	; case 10
 10480  0DBD  1903               	skipnz
 10481  0DBE  2CE1               	goto	l1289
 10482  0DBF  3A01               	xorlw	1	; case 11
 10483  0DC0  1903               	skipnz
 10484  0DC1  2CEA               	goto	l1292
 10485  0DC2  3A07               	xorlw	7	; case 12
 10486  0DC3  1903               	skipnz
 10487  0DC4  2CF3               	goto	l1295
 10488  0DC5  3A01               	xorlw	1	; case 13
 10489  0DC6  1903               	skipnz
 10490  0DC7  2CFC               	goto	l1298
 10491  0DC8  3A03               	xorlw	3	; case 14
 10492  0DC9  1903               	skipnz
 10493  0DCA  2D05               	goto	l1301
 10494  0DCB  3A01               	xorlw	1	; case 15
 10495  0DCC  1903               	skipnz
 10496  0DCD  2D0E               	goto	l1304
 10497  0DCE  3A4E               	xorlw	78	; case 65
 10498  0DCF  1903               	skipnz
 10499  0DD0  2CE1               	goto	l1289
 10500  0DD1  3A03               	xorlw	3	; case 66
 10501  0DD2  1903               	skipnz
 10502  0DD3  2CEA               	goto	l1292
 10503  0DD4  3A01               	xorlw	1	; case 67
 10504  0DD5  1903               	skipnz
 10505  0DD6  2CF3               	goto	l1295
 10506  0DD7  3A07               	xorlw	7	; case 68
 10507  0DD8  1903               	skipnz
 10508  0DD9  2CFC               	goto	l1298
 10509  0DDA  3A01               	xorlw	1	; case 69
 10510  0DDB  1903               	skipnz
 10511  0DDC  2D05               	goto	l1301
 10512  0DDD  3A03               	xorlw	3	; case 70
 10513  0DDE  1903               	skipnz
 10514  0DDF  2D0E               	goto	l1304
 10515  0DE0  3A01               	xorlw	1	; case 71
 10516  0DE1  1903               	skipnz
 10517  0DE2  2D17               	goto	l1306
 10518  0DE3  3A0F               	xorlw	15	; case 72
 10519  0DE4  1903               	skipnz
 10520  0DE5  2D20               	goto	l1308
 10521  0DE6  3A01               	xorlw	1	; case 73
 10522  0DE7  1903               	skipnz
 10523  0DE8  2D29               	goto	l1310
 10524  0DE9  3A03               	xorlw	3	; case 74
 10525  0DEA  1903               	skipnz
 10526  0DEB  2D32               	goto	l1312
 10527  0DEC  3A06               	xorlw	6	; case 76
 10528  0DED  1903               	skipnz
 10529  0DEE  2D3B               	goto	l1314
 10530  0DEF  3A02               	xorlw	2	; case 78
 10531  0DF0  1903               	skipnz
 10532  0DF1  2D44               	goto	l1316
 10533  0DF2  3A01               	xorlw	1	; case 79
 10534  0DF3  1903               	skipnz
 10535  0DF4  2D4D               	goto	l1318
 10536  0DF5  3A1F               	xorlw	31	; case 80
 10537  0DF6  1903               	skipnz
 10538  0DF7  2D56               	goto	l1320
 10539  0DF8  3A02               	xorlw	2	; case 82
 10540  0DF9  1903               	skipnz
 10541  0DFA  2D5F               	goto	l1322
 10542  0DFB  3A01               	xorlw	1	; case 83
 10543  0DFC  1903               	skipnz
 10544  0DFD  2D68               	goto	l1324
 10545  0DFE  3A07               	xorlw	7	; case 84
 10546  0DFF  1903               	skipnz
 10547  0E00  2D71               	goto	l1326
 10548  0E01  3A01               	xorlw	1	; case 85
 10549  0E02  1903               	skipnz
 10550  0E03  2D7A               	goto	l1328
 10551  0E04  3A0C               	xorlw	12	; case 89
 10552  0E05  1903               	skipnz
 10553  0E06  2D83               	goto	l1330
 10554  0E07  3A38               	xorlw	56	; case 97
 10555  0E08  1903               	skipnz
 10556  0E09  2CE1               	goto	l1289
 10557  0E0A  3A03               	xorlw	3	; case 98
 10558  0E0B  1903               	skipnz
 10559  0E0C  2CEA               	goto	l1292
 10560  0E0D  3A01               	xorlw	1	; case 99
 10561  0E0E  1903               	skipnz
 10562  0E0F  2CF3               	goto	l1295
 10563  0E10  3A07               	xorlw	7	; case 100
 10564  0E11  1903               	skipnz
 10565  0E12  2CFC               	goto	l1298
 10566  0E13  3A01               	xorlw	1	; case 101
 10567  0E14  1903               	skipnz
 10568  0E15  2D05               	goto	l1301
 10569  0E16  3A03               	xorlw	3	; case 102
 10570  0E17  1903               	skipnz
 10571  0E18  2D0E               	goto	l1304
 10572  0E19  3A01               	xorlw	1	; case 103
 10573  0E1A  1903               	skipnz
 10574  0E1B  2D17               	goto	l1306
 10575  0E1C  3A0F               	xorlw	15	; case 104
 10576  0E1D  1903               	skipnz
 10577  0E1E  2D20               	goto	l1308
 10578  0E1F  3A01               	xorlw	1	; case 105
 10579  0E20  1903               	skipnz
 10580  0E21  2D29               	goto	l1310
 10581  0E22  3A03               	xorlw	3	; case 106
 10582  0E23  1903               	skipnz
 10583  0E24  2D32               	goto	l1312
 10584  0E25  3A06               	xorlw	6	; case 108
 10585  0E26  1903               	skipnz
 10586  0E27  2D3B               	goto	l1314
 10587  0E28  3A02               	xorlw	2	; case 110
 10588  0E29  1903               	skipnz
 10589  0E2A  2D44               	goto	l1316
 10590  0E2B  3A01               	xorlw	1	; case 111
 10591  0E2C  1903               	skipnz
 10592  0E2D  2D4D               	goto	l1318
 10593  0E2E  3A1F               	xorlw	31	; case 112
 10594  0E2F  1903               	skipnz
 10595  0E30  2D56               	goto	l1320
 10596  0E31  3A02               	xorlw	2	; case 114
 10597  0E32  1903               	skipnz
 10598  0E33  2D5F               	goto	l1322
 10599  0E34  3A01               	xorlw	1	; case 115
 10600  0E35  1903               	skipnz
 10601  0E36  2D68               	goto	l1324
 10602  0E37  3A07               	xorlw	7	; case 116
 10603  0E38  1903               	skipnz
 10604  0E39  2D71               	goto	l1326
 10605  0E3A  3A01               	xorlw	1	; case 117
 10606  0E3B  1903               	skipnz
 10607  0E3C  2D7A               	goto	l1328
 10608  0E3D  3A0C               	xorlw	12	; case 121
 10609  0E3E  1903               	skipnz
 10610  0E3F  2D83               	goto	l1330
 10611  0E40  2D8C               	goto	l1331
 10612  0E41  0008               	return
 10613  0E42                     __end_of_LCD_Digit1Num:
 10614                           
 10615                           	psect	text36
 10616  06D7                     __ptext36:	
 10617 ;; *************** function _APDS9960Init *****************
 10618 ;; Defined at:
 10619 ;;		line 58 in file "APDS9960.c"
 10620 ;; Parameters:    Size  Location     Type
 10621 ;;		None
 10622 ;; Auto vars:     Size  Location     Type
 10623 ;;  id              1   36[BANK0 ] unsigned char 
 10624 ;; Return value:  Size  Location     Type
 10625 ;;                  1    wreg      _Bool 
 10626 ;; Registers used:
 10627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10628 ;; Tracked objects:
 10629 ;;		On entry : 1F/1
 10630 ;;		On exit  : 1F/0
 10631 ;;		Unchanged: 0/0
 10632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10636 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10637 ;;Total ram usage:        3 bytes
 10638 ;; Hardware stack levels used:    1
 10639 ;; Hardware stack levels required when called:   14
 10640 ;; This function calls:
 10641 ;;		_i2c_read1ByteRegister
 10642 ;;		_i2c_write1ByteRegister
 10643 ;;		_setAmbientLightGain
 10644 ;;		_setGestureEnterThresh
 10645 ;;		_setGestureExitThresh
 10646 ;;		_setGestureGain
 10647 ;;		_setGestureIntEnable
 10648 ;;		_setGestureLEDDrive
 10649 ;;		_setGestureWaitTime
 10650 ;;		_setLEDDrive
 10651 ;;		_setLightIntHighThreshold
 10652 ;;		_setLightIntLowThreshold
 10653 ;;		_setMode
 10654 ;;		_setProxIntHighThresh
 10655 ;;		_setProxIntLowThresh
 10656 ;;		_setProximityGain
 10657 ;; This function is called by:
 10658 ;;		_main
 10659 ;; This function uses a non-reentrant model
 10660 ;;
 10661                           
 10662                           
 10663                           ;psect for function _APDS9960Init
 10664  06D7                     _APDS9960Init:
 10665                           
 10666                           ;APDS9960.c: 60:     uint8_t id;;APDS9960.c: 65:     id = i2c_read1ByteRegister(0x39, 0x
      +                          92);
 10667                           
 10668                           ;incstack = 0
 10669                           ; Regs used in _APDS9960Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10670  06D7  3092               	movlw	146
 10671  06D8  0020               	movlb	0	; select bank0
 10672  06D9  00C2               	movwf	??_APDS9960Init
 10673  06DA  0842               	movf	??_APDS9960Init,w
 10674  06DB  00B6               	movwf	i2c_read1ByteRegister@reg
 10675  06DC  3039               	movlw	57
 10676  06DD  3196  2624  3186   	fcall	_i2c_read1ByteRegister
 10677  06E0  00C3               	movwf	??_APDS9960Init+1
 10678  06E1  0843               	movf	??_APDS9960Init+1,w
 10679  06E2  00C4               	movwf	APDS9960Init@id
 10680                           
 10681                           ;APDS9960.c: 67:     if( !(id == 0xAB || id == 0x9C) ) {
 10682  06E3  30AB               	movlw	171
 10683  06E4  0644               	xorwf	APDS9960Init@id,w
 10684  06E5  1903               	btfsc	3,2
 10685  06E6  2EED               	goto	l5638
 10686  06E7  309C               	movlw	156
 10687  06E8  0644               	xorwf	APDS9960Init@id,w
 10688  06E9  1903               	btfsc	3,2
 10689  06EA  2EED               	goto	l5638
 10690  06EB                     l5634:
 10691                           
 10692                           ;APDS9960.c: 68:         return 0;
 10693  06EB  3000               	movlw	0
 10694  06EC  0008               	return
 10695  06ED                     l5638:
 10696                           
 10697                           ;APDS9960.c: 72:     if( !setMode(7, 0) ) {
 10698  06ED  01BD               	clrf	setMode@enable
 10699  06EE  3007               	movlw	7
 10700  06EF  3196  26B5  3186   	fcall	_setMode
 10701  06F2  3A00               	xorlw	0
 10702  06F3  1903               	btfsc	3,2
 10703  06F4  2EEB               	goto	l5634
 10704                           
 10705                           ;APDS9960.c: 77:     i2c_write1ByteRegister(0x39,0x81,219);
 10706  06F5  3081               	movlw	129
 10707  06F6  00C2               	movwf	??_APDS9960Init
 10708  06F7  0842               	movf	??_APDS9960Init,w
 10709  06F8  00B6               	movwf	i2c_write1ByteRegister@reg
 10710  06F9  30DB               	movlw	219
 10711  06FA  00C3               	movwf	??_APDS9960Init+1
 10712  06FB  0843               	movf	??_APDS9960Init+1,w
 10713  06FC  00B7               	movwf	i2c_write1ByteRegister@data
 10714  06FD  3039               	movlw	57
 10715  06FE  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10716                           
 10717                           ;APDS9960.c: 79:     i2c_write1ByteRegister(0x39,0x83, 246);
 10718  0701  3083               	movlw	131
 10719  0702  00C2               	movwf	??_APDS9960Init
 10720  0703  0842               	movf	??_APDS9960Init,w
 10721  0704  00B6               	movwf	i2c_write1ByteRegister@reg
 10722  0705  30F6               	movlw	246
 10723  0706  00C3               	movwf	??_APDS9960Init+1
 10724  0707  0843               	movf	??_APDS9960Init+1,w
 10725  0708  00B7               	movwf	i2c_write1ByteRegister@data
 10726  0709  3039               	movlw	57
 10727  070A  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10728                           
 10729                           ;APDS9960.c: 81:     i2c_write1ByteRegister(0x39,0x8E, 0x87);
 10730  070D  308E               	movlw	142
 10731  070E  00C2               	movwf	??_APDS9960Init
 10732  070F  0842               	movf	??_APDS9960Init,w
 10733  0710  00B6               	movwf	i2c_write1ByteRegister@reg
 10734  0711  3087               	movlw	135
 10735  0712  00C3               	movwf	??_APDS9960Init+1
 10736  0713  0843               	movf	??_APDS9960Init+1,w
 10737  0714  00B7               	movwf	i2c_write1ByteRegister@data
 10738  0715  3039               	movlw	57
 10739  0716  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10740                           
 10741                           ;APDS9960.c: 83:     i2c_write1ByteRegister(0x39,0x9D, 0);
 10742  0719  309D               	movlw	157
 10743  071A  00C2               	movwf	??_APDS9960Init
 10744  071B  0842               	movf	??_APDS9960Init,w
 10745  071C  00B6               	movwf	i2c_write1ByteRegister@reg
 10746  071D  01B7               	clrf	i2c_write1ByteRegister@data
 10747  071E  3039               	movlw	57
 10748  071F  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10749                           
 10750                           ;APDS9960.c: 85:     i2c_write1ByteRegister(0x39,0x9E, 0);
 10751  0722  309E               	movlw	158
 10752  0723  00C2               	movwf	??_APDS9960Init
 10753  0724  0842               	movf	??_APDS9960Init,w
 10754  0725  00B6               	movwf	i2c_write1ByteRegister@reg
 10755  0726  01B7               	clrf	i2c_write1ByteRegister@data
 10756  0727  3039               	movlw	57
 10757  0728  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10758                           
 10759                           ;APDS9960.c: 87:     i2c_write1ByteRegister(0x39,0x8D, 0x60);
 10760  072B  308D               	movlw	141
 10761  072C  00C2               	movwf	??_APDS9960Init
 10762  072D  0842               	movf	??_APDS9960Init,w
 10763  072E  00B6               	movwf	i2c_write1ByteRegister@reg
 10764  072F  3060               	movlw	96
 10765  0730  00C3               	movwf	??_APDS9960Init+1
 10766  0731  0843               	movf	??_APDS9960Init+1,w
 10767  0732  00B7               	movwf	i2c_write1ByteRegister@data
 10768  0733  3039               	movlw	57
 10769  0734  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10770                           
 10771                           ;APDS9960.c: 89:     if( !setLEDDrive(0) ) {
 10772  0737  3000               	movlw	0
 10773  0738  3194  2407  3186   	fcall	_setLEDDrive
 10774  073B  3A00               	xorlw	0
 10775  073C  1903               	btfsc	3,2
 10776  073D  2EEB               	goto	l5634
 10777                           
 10778                           ;APDS9960.c: 92:     if( !setProximityGain(2) ) {
 10779  073E  3002               	movlw	2
 10780  073F  3194  24C9  3186   	fcall	_setProximityGain
 10781  0742  3A00               	xorlw	0
 10782  0743  1903               	btfsc	3,2
 10783  0744  2EEB               	goto	l5634
 10784                           
 10785                           ;APDS9960.c: 95:     if( !setAmbientLightGain(1) ) {
 10786  0745  3001               	movlw	1
 10787  0746  3192  22B2  3186   	fcall	_setAmbientLightGain
 10788  0749  3A00               	xorlw	0
 10789  074A  1903               	btfsc	3,2
 10790  074B  2EEB               	goto	l5634
 10791                           
 10792                           ;APDS9960.c: 98:     if( !setProxIntLowThresh(0) ) {
 10793  074C  3000               	movlw	0
 10794  074D  3190  200B  3186   	fcall	_setProxIntLowThresh
 10795  0750  3A00               	xorlw	0
 10796  0751  1903               	btfsc	3,2
 10797  0752  2EEB               	goto	l5634
 10798                           
 10799                           ;APDS9960.c: 101:     if( !setProxIntHighThresh(50) ) {
 10800  0753  3032               	movlw	50
 10801  0754  319F  27F2  3186   	fcall	_setProxIntHighThresh
 10802  0757  3A00               	xorlw	0
 10803  0758  1903               	btfsc	3,2
 10804  0759  2EEB               	goto	l5634
 10805                           
 10806                           ;APDS9960.c: 104:     if( !setLightIntLowThreshold(0xFFFF) ) {
 10807  075A  30FF               	movlw	255
 10808  075B  00B9               	movwf	setLightIntLowThreshold@threshold
 10809  075C  30FF               	movlw	255
 10810  075D  00BA               	movwf	setLightIntLowThreshold@threshold+1
 10811  075E  3192  2270  3186   	fcall	_setLightIntLowThreshold
 10812  0761  3A00               	xorlw	0
 10813  0762  1903               	btfsc	3,2
 10814  0763  2EEB               	goto	l5634
 10815                           
 10816                           ;APDS9960.c: 107:     if( !setLightIntHighThreshold(0) ) {
 10817  0764  3000               	movlw	0
 10818  0765  00B9               	movwf	setLightIntHighThreshold@threshold
 10819  0766  00BA               	movwf	setLightIntHighThreshold@threshold+1
 10820  0767  3192  224F  3186   	fcall	_setLightIntHighThreshold
 10821  076A  3A00               	xorlw	0
 10822  076B  1903               	btfsc	3,2
 10823  076C  2EEB               	goto	l5634
 10824                           
 10825                           ;APDS9960.c: 111:     i2c_write1ByteRegister(0x39,0x8C, 0x11);
 10826  076D  308C               	movlw	140
 10827  076E  00C2               	movwf	??_APDS9960Init
 10828  076F  0842               	movf	??_APDS9960Init,w
 10829  0770  00B6               	movwf	i2c_write1ByteRegister@reg
 10830  0771  3011               	movlw	17
 10831  0772  00C3               	movwf	??_APDS9960Init+1
 10832  0773  0843               	movf	??_APDS9960Init+1,w
 10833  0774  00B7               	movwf	i2c_write1ByteRegister@data
 10834  0775  3039               	movlw	57
 10835  0776  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10836                           
 10837                           ;APDS9960.c: 113:     i2c_write1ByteRegister(0x39,0x90, 0x01);
 10838  0779  3090               	movlw	144
 10839  077A  00C2               	movwf	??_APDS9960Init
 10840  077B  0842               	movf	??_APDS9960Init,w
 10841  077C  00B6               	movwf	i2c_write1ByteRegister@reg
 10842  077D  01B7               	clrf	i2c_write1ByteRegister@data
 10843  077E  0AB7               	incf	i2c_write1ByteRegister@data,f
 10844  077F  3039               	movlw	57
 10845  0780  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10846                           
 10847                           ;APDS9960.c: 115:     i2c_write1ByteRegister(0x39,0x9F, 0);
 10848  0783  309F               	movlw	159
 10849  0784  00C2               	movwf	??_APDS9960Init
 10850  0785  0842               	movf	??_APDS9960Init,w
 10851  0786  00B6               	movwf	i2c_write1ByteRegister@reg
 10852  0787  01B7               	clrf	i2c_write1ByteRegister@data
 10853  0788  3039               	movlw	57
 10854  0789  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10855                           
 10856                           ;APDS9960.c: 118:     if( !setGestureEnterThresh(40) ) {
 10857  078C  3028               	movlw	40
 10858  078D  319F  27D6  3186   	fcall	_setGestureEnterThresh
 10859  0790  3A00               	xorlw	0
 10860  0791  1903               	btfsc	3,2
 10861  0792  2EEB               	goto	l5634
 10862                           
 10863                           ;APDS9960.c: 121:     if( !setGestureExitThresh(30) ) {
 10864  0793  301E               	movlw	30
 10865  0794  319F  27E4  3186   	fcall	_setGestureExitThresh
 10866  0797  3A00               	xorlw	0
 10867  0798  1903               	btfsc	3,2
 10868  0799  2EEB               	goto	l5634
 10869                           
 10870                           ;APDS9960.c: 125:     i2c_write1ByteRegister(0x39,0xA2, 0x40);
 10871  079A  30A2               	movlw	162
 10872  079B  00C2               	movwf	??_APDS9960Init
 10873  079C  0842               	movf	??_APDS9960Init,w
 10874  079D  00B6               	movwf	i2c_write1ByteRegister@reg
 10875  079E  3040               	movlw	64
 10876  079F  00C3               	movwf	??_APDS9960Init+1
 10877  07A0  0843               	movf	??_APDS9960Init+1,w
 10878  07A1  00B7               	movwf	i2c_write1ByteRegister@data
 10879  07A2  3039               	movlw	57
 10880  07A3  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10881                           
 10882                           ;APDS9960.c: 127:     if( !setGestureGain(2) ) {
 10883  07A6  3002               	movlw	2
 10884  07A7  3193  23A7  3186   	fcall	_setGestureGain
 10885  07AA  3A00               	xorlw	0
 10886  07AB  1903               	btfsc	3,2
 10887  07AC  2EEB               	goto	l5634
 10888                           
 10889                           ;APDS9960.c: 130:     if( !setGestureLEDDrive(0) ) {
 10890  07AD  3000               	movlw	0
 10891  07AE  3193  23D7  3186   	fcall	_setGestureLEDDrive
 10892  07B1  3A00               	xorlw	0
 10893  07B2  1903               	btfsc	3,2
 10894  07B3  2EEB               	goto	l5634
 10895                           
 10896                           ;APDS9960.c: 133:     if( !setGestureWaitTime(1) ) {
 10897  07B4  3001               	movlw	1
 10898  07B5  3192  22D7  3186   	fcall	_setGestureWaitTime
 10899  07B8  3A00               	xorlw	0
 10900  07B9  1903               	btfsc	3,2
 10901  07BA  2EEB               	goto	l5634
 10902                           
 10903                           ;APDS9960.c: 137:     i2c_write1ByteRegister(0x39,0xA4, 0);
 10904  07BB  30A4               	movlw	164
 10905  07BC  00C2               	movwf	??_APDS9960Init
 10906  07BD  0842               	movf	??_APDS9960Init,w
 10907  07BE  00B6               	movwf	i2c_write1ByteRegister@reg
 10908  07BF  01B7               	clrf	i2c_write1ByteRegister@data
 10909  07C0  3039               	movlw	57
 10910  07C1  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10911                           
 10912                           ;APDS9960.c: 139:     i2c_write1ByteRegister(0x39,0xA5, 0);
 10913  07C4  30A5               	movlw	165
 10914  07C5  00C2               	movwf	??_APDS9960Init
 10915  07C6  0842               	movf	??_APDS9960Init,w
 10916  07C7  00B6               	movwf	i2c_write1ByteRegister@reg
 10917  07C8  01B7               	clrf	i2c_write1ByteRegister@data
 10918  07C9  3039               	movlw	57
 10919  07CA  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10920                           
 10921                           ;APDS9960.c: 141:     i2c_write1ByteRegister(0x39,0xA7, 0);
 10922  07CD  30A7               	movlw	167
 10923  07CE  00C2               	movwf	??_APDS9960Init
 10924  07CF  0842               	movf	??_APDS9960Init,w
 10925  07D0  00B6               	movwf	i2c_write1ByteRegister@reg
 10926  07D1  01B7               	clrf	i2c_write1ByteRegister@data
 10927  07D2  3039               	movlw	57
 10928  07D3  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10929                           
 10930                           ;APDS9960.c: 143:     i2c_write1ByteRegister(0x39,0xA9, 0);
 10931  07D6  30A9               	movlw	169
 10932  07D7  00C2               	movwf	??_APDS9960Init
 10933  07D8  0842               	movf	??_APDS9960Init,w
 10934  07D9  00B6               	movwf	i2c_write1ByteRegister@reg
 10935  07DA  01B7               	clrf	i2c_write1ByteRegister@data
 10936  07DB  3039               	movlw	57
 10937  07DC  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10938                           
 10939                           ;APDS9960.c: 145:     i2c_write1ByteRegister(0x39,0xA6, 0xC9);
 10940  07DF  30A6               	movlw	166
 10941  07E0  00C2               	movwf	??_APDS9960Init
 10942  07E1  0842               	movf	??_APDS9960Init,w
 10943  07E2  00B6               	movwf	i2c_write1ByteRegister@reg
 10944  07E3  30C9               	movlw	201
 10945  07E4  00C3               	movwf	??_APDS9960Init+1
 10946  07E5  0843               	movf	??_APDS9960Init+1,w
 10947  07E6  00B7               	movwf	i2c_write1ByteRegister@data
 10948  07E7  3039               	movlw	57
 10949  07E8  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10950                           
 10951                           ;APDS9960.c: 147:     i2c_write1ByteRegister(0x39,0xAA, 0);
 10952  07EB  30AA               	movlw	170
 10953  07EC  00C2               	movwf	??_APDS9960Init
 10954  07ED  0842               	movf	??_APDS9960Init,w
 10955  07EE  00B6               	movwf	i2c_write1ByteRegister@reg
 10956  07EF  01B7               	clrf	i2c_write1ByteRegister@data
 10957  07F0  3039               	movlw	57
 10958  07F1  3193  2377  3186   	fcall	_i2c_write1ByteRegister
 10959                           
 10960                           ;APDS9960.c: 149:     if( !setGestureIntEnable(0) ) {
 10961  07F4  3000               	movlw	0
 10962  07F5  3193  2321  3186   	fcall	_setGestureIntEnable
 10963  07F8  3A00               	xorlw	0
 10964  07F9  1903               	btfsc	3,2
 10965  07FA  2EEB               	goto	l5634
 10966                           
 10967                           ;APDS9960.c: 153:     return 1;
 10968  07FB  3001               	movlw	1
 10969  07FC  0008               	return
 10970  07FD                     __end_of_APDS9960Init:
 10971                           
 10972                           	psect	text37
 10973  14C9                     __ptext37:	
 10974 ;; *************** function _setProximityGain *****************
 10975 ;; Defined at:
 10976 ;;		line 1115 in file "APDS9960.c"
 10977 ;; Parameters:    Size  Location     Type
 10978 ;;  drive           1    wreg     unsigned char 
 10979 ;; Auto vars:     Size  Location     Type
 10980 ;;  drive           1   32[BANK0 ] unsigned char 
 10981 ;;  val             1   31[BANK0 ] unsigned char 
 10982 ;; Return value:  Size  Location     Type
 10983 ;;                  1    wreg      _Bool 
 10984 ;; Registers used:
 10985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10986 ;; Tracked objects:
 10987 ;;		On entry : 10/F
 10988 ;;		On exit  : 1F/0
 10989 ;;		Unchanged: 0/0
 10990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10992 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10993 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10994 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10995 ;;Total ram usage:        4 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; Hardware stack levels required when called:   13
 10998 ;; This function calls:
 10999 ;;		_i2c_read1ByteRegister
 11000 ;;		_i2c_write1ByteRegister
 11001 ;; This function is called by:
 11002 ;;		_main
 11003 ;;		_APDS9960Init
 11004 ;; This function uses a non-reentrant model
 11005 ;;
 11006                           
 11007                           
 11008                           ;psect for function _setProximityGain
 11009  14C9                     _setProximityGain:
 11010                           
 11011                           ;incstack = 0
 11012                           ; Regs used in _setProximityGain: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11013                           ;setProximityGain@drive stored from wreg
 11014  14C9  0020               	movlb	0	; select bank0
 11015  14CA  00C0               	movwf	setProximityGain@drive
 11016                           
 11017                           ;APDS9960.c: 1115: _Bool setProximityGain(uint8_t drive);APDS9960.c: 1116: {;APDS9960.c:
      +                           1117:     uint8_t val;;APDS9960.c: 1120:     val = i2c_read1ByteRegister(0x39,0x8F);
 11018  14CB  308F               	movlw	143
 11019  14CC  00BD               	movwf	??_setProximityGain
 11020  14CD  083D               	movf	??_setProximityGain,w
 11021  14CE  00B6               	movwf	i2c_read1ByteRegister@reg
 11022  14CF  3039               	movlw	57
 11023  14D0  3196  2624  3194   	fcall	_i2c_read1ByteRegister
 11024  14D3  00BE               	movwf	??_setProximityGain+1
 11025  14D4  083E               	movf	??_setProximityGain+1,w
 11026  14D5  00BF               	movwf	setProximityGain@val
 11027                           
 11028                           ;APDS9960.c: 1123:     drive &= 0b00000011;
 11029  14D6  3003               	movlw	3
 11030  14D7  00BD               	movwf	??_setProximityGain
 11031  14D8  083D               	movf	??_setProximityGain,w
 11032  14D9  05C0               	andwf	setProximityGain@drive,f
 11033                           
 11034                           ;APDS9960.c: 1124:     drive = drive << 2;
 11035  14DA  0840               	movf	setProximityGain@drive,w
 11036  14DB  00BD               	movwf	??_setProximityGain
 11037  14DC  3001               	movlw	1
 11038  14DD                     u2355:
 11039  14DD  35BD               	lslf	??_setProximityGain,f
 11040  14DE  3EFF               	addlw	-1
 11041  14DF  1D03               	skipz
 11042  14E0  2CDD               	goto	u2355
 11043  14E1  353D               	lslf	??_setProximityGain,w
 11044  14E2  00BE               	movwf	??_setProximityGain+1
 11045  14E3  083E               	movf	??_setProximityGain+1,w
 11046  14E4  00C0               	movwf	setProximityGain@drive
 11047                           
 11048                           ;APDS9960.c: 1125:     val &= 0b11110011;
 11049  14E5  30F3               	movlw	243
 11050  14E6  00BD               	movwf	??_setProximityGain
 11051  14E7  083D               	movf	??_setProximityGain,w
 11052  14E8  05BF               	andwf	setProximityGain@val,f
 11053                           
 11054                           ;APDS9960.c: 1126:     val |= drive;
 11055  14E9  0840               	movf	setProximityGain@drive,w
 11056  14EA  00BD               	movwf	??_setProximityGain
 11057  14EB  083D               	movf	??_setProximityGain,w
 11058  14EC  04BF               	iorwf	setProximityGain@val,f
 11059                           
 11060                           ;APDS9960.c: 1129:     i2c_write1ByteRegister(0x39,0x8F, val);
 11061  14ED  308F               	movlw	143
 11062  14EE  00BD               	movwf	??_setProximityGain
 11063  14EF  083D               	movf	??_setProximityGain,w
 11064  14F0  00B6               	movwf	i2c_write1ByteRegister@reg
 11065  14F1  083F               	movf	setProximityGain@val,w
 11066  14F2  00BE               	movwf	??_setProximityGain+1
 11067  14F3  083E               	movf	??_setProximityGain+1,w
 11068  14F4  00B7               	movwf	i2c_write1ByteRegister@data
 11069  14F5  3039               	movlw	57
 11070  14F6  3193  2377         	fcall	_i2c_write1ByteRegister
 11071                           
 11072                           ;APDS9960.c: 1131:     return 1;
 11073  14F8  3001               	movlw	1
 11074  14F9  0008               	return
 11075  14FA                     __end_of_setProximityGain:
 11076                           
 11077                           	psect	text38
 11078  100B                     __ptext38:	
 11079 ;; *************** function _setProxIntLowThresh *****************
 11080 ;; Defined at:
 11081 ;;		line 989 in file "APDS9960.c"
 11082 ;; Parameters:    Size  Location     Type
 11083 ;;  threshold       1    wreg     unsigned char 
 11084 ;; Auto vars:     Size  Location     Type
 11085 ;;  threshold       1   27[BANK0 ] unsigned char 
 11086 ;; Return value:  Size  Location     Type
 11087 ;;                  1    wreg      _Bool 
 11088 ;; Registers used:
 11089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11090 ;; Tracked objects:
 11091 ;;		On entry : 1F/0
 11092 ;;		On exit  : 1F/0
 11093 ;;		Unchanged: 0/0
 11094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11097 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11098 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11099 ;;Total ram usage:        3 bytes
 11100 ;; Hardware stack levels used:    1
 11101 ;; Hardware stack levels required when called:   13
 11102 ;; This function calls:
 11103 ;;		_i2c_write1ByteRegister
 11104 ;; This function is called by:
 11105 ;;		_APDS9960Init
 11106 ;; This function uses a non-reentrant model
 11107 ;;
 11108                           
 11109                           
 11110                           ;psect for function _setProxIntLowThresh
 11111  100B                     _setProxIntLowThresh:
 11112                           
 11113                           ;incstack = 0
 11114                           ; Regs used in _setProxIntLowThresh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11115                           ;setProxIntLowThresh@threshold stored from wreg
 11116  100B  00BB               	movwf	setProxIntLowThresh@threshold
 11117                           
 11118                           ;APDS9960.c: 989: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 990: {;APDS99
      +                          60.c: 991:     i2c_write1ByteRegister(0x39,0x89, threshold);
 11119  100C  3089               	movlw	137
 11120  100D  00B9               	movwf	??_setProxIntLowThresh
 11121  100E  0839               	movf	??_setProxIntLowThresh,w
 11122  100F  00B6               	movwf	i2c_write1ByteRegister@reg
 11123  1010  083B               	movf	setProxIntLowThresh@threshold,w
 11124  1011  00BA               	movwf	??_setProxIntLowThresh+1
 11125  1012  083A               	movf	??_setProxIntLowThresh+1,w
 11126  1013  00B7               	movwf	i2c_write1ByteRegister@data
 11127  1014  3039               	movlw	57
 11128  1015  3193  2377         	fcall	_i2c_write1ByteRegister
 11129                           
 11130                           ;APDS9960.c: 993:     return 1;
 11131  1017  3001               	movlw	1
 11132  1018  0008               	return
 11133  1019                     __end_of_setProxIntLowThresh:
 11134                           
 11135                           	psect	text39
 11136  1FF2                     __ptext39:	
 11137 ;; *************** function _setProxIntHighThresh *****************
 11138 ;; Defined at:
 11139 ;;		line 1017 in file "APDS9960.c"
 11140 ;; Parameters:    Size  Location     Type
 11141 ;;  threshold       1    wreg     unsigned char 
 11142 ;; Auto vars:     Size  Location     Type
 11143 ;;  threshold       1   27[BANK0 ] unsigned char 
 11144 ;; Return value:  Size  Location     Type
 11145 ;;                  1    wreg      _Bool 
 11146 ;; Registers used:
 11147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11148 ;; Tracked objects:
 11149 ;;		On entry : 1F/0
 11150 ;;		On exit  : 1F/0
 11151 ;;		Unchanged: 0/0
 11152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11155 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11156 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11157 ;;Total ram usage:        3 bytes
 11158 ;; Hardware stack levels used:    1
 11159 ;; Hardware stack levels required when called:   13
 11160 ;; This function calls:
 11161 ;;		_i2c_write1ByteRegister
 11162 ;; This function is called by:
 11163 ;;		_APDS9960Init
 11164 ;; This function uses a non-reentrant model
 11165 ;;
 11166                           
 11167                           
 11168                           ;psect for function _setProxIntHighThresh
 11169  1FF2                     _setProxIntHighThresh:
 11170                           
 11171                           ;incstack = 0
 11172                           ; Regs used in _setProxIntHighThresh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11173                           ;setProxIntHighThresh@threshold stored from wreg
 11174  1FF2  00BB               	movwf	setProxIntHighThresh@threshold
 11175                           
 11176                           ;APDS9960.c: 1017: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 1018: {;APD
      +                          S9960.c: 1019:     i2c_write1ByteRegister(0x39,0x8B, threshold);
 11177  1FF3  308B               	movlw	139
 11178  1FF4  00B9               	movwf	??_setProxIntHighThresh
 11179  1FF5  0839               	movf	??_setProxIntHighThresh,w
 11180  1FF6  00B6               	movwf	i2c_write1ByteRegister@reg
 11181  1FF7  083B               	movf	setProxIntHighThresh@threshold,w
 11182  1FF8  00BA               	movwf	??_setProxIntHighThresh+1
 11183  1FF9  083A               	movf	??_setProxIntHighThresh+1,w
 11184  1FFA  00B7               	movwf	i2c_write1ByteRegister@data
 11185  1FFB  3039               	movlw	57
 11186  1FFC  3193  2377         	fcall	_i2c_write1ByteRegister
 11187                           
 11188                           ;APDS9960.c: 1021:     return 1;
 11189  1FFE  3001               	movlw	1
 11190  1FFF  0008               	return
 11191  2000                     __end_of_setProxIntHighThresh:
 11192                           
 11193                           	psect	text40
 11194  16B5                     __ptext40:	
 11195 ;; *************** function _setMode *****************
 11196 ;; Defined at:
 11197 ;;		line 193 in file "APDS9960.c"
 11198 ;; Parameters:    Size  Location     Type
 11199 ;;  mode            1    wreg     unsigned char 
 11200 ;;  enable          1   29[BANK0 ] unsigned char 
 11201 ;; Auto vars:     Size  Location     Type
 11202 ;;  mode            1   33[BANK0 ] unsigned char 
 11203 ;;  reg_val         1   32[BANK0 ] unsigned char 
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  1    wreg      _Bool 
 11206 ;; Registers used:
 11207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11208 ;; Tracked objects:
 11209 ;;		On entry : 1F/0
 11210 ;;		On exit  : 1F/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11213 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;Total ram usage:        5 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:   13
 11220 ;; This function calls:
 11221 ;;		_i2c_read1ByteRegister
 11222 ;;		_i2c_write1ByteRegister
 11223 ;; This function is called by:
 11224 ;;		_APDS9960Init
 11225 ;;		_enableGestureSensor
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           
 11230                           ;psect for function _setMode
 11231  16B5                     _setMode:
 11232                           
 11233                           ;incstack = 0
 11234                           ; Regs used in _setMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11235                           ;setMode@mode stored from wreg
 11236  16B5  00C1               	movwf	setMode@mode
 11237                           
 11238                           ;APDS9960.c: 193: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 194: {;APDS996
      +                          0.c: 195:     uint8_t reg_val;;APDS9960.c: 198:     reg_val = (i2c_read1ByteRegister(0x3
      +                          9,0x80));
 11239  16B6  3080               	movlw	128
 11240  16B7  00BE               	movwf	??_setMode
 11241  16B8  083E               	movf	??_setMode,w
 11242  16B9  00B6               	movwf	i2c_read1ByteRegister@reg
 11243  16BA  3039               	movlw	57
 11244  16BB  3196  2624  3196   	fcall	_i2c_read1ByteRegister
 11245  16BE  00BF               	movwf	??_setMode+1
 11246  16BF  083F               	movf	??_setMode+1,w
 11247  16C0  00C0               	movwf	setMode@reg_val
 11248                           
 11249                           ;APDS9960.c: 199:     if( reg_val == 0xFF ) {
 11250  16C1  0A40               	incf	setMode@reg_val,w
 11251  16C2  1D03               	btfss	3,2
 11252  16C3  2EC6               	goto	l5162
 11253                           
 11254                           ;APDS9960.c: 200:         return 0;
 11255  16C4  3000               	movlw	0
 11256  16C5  0008               	return
 11257  16C6                     l5162:
 11258                           
 11259                           ;APDS9960.c: 204:     enable = enable & 0x01;
 11260  16C6  083D               	movf	setMode@enable,w
 11261  16C7  3901               	andlw	1
 11262  16C8  00BE               	movwf	??_setMode
 11263  16C9  083E               	movf	??_setMode,w
 11264  16CA  00BD               	movwf	setMode@enable
 11265                           
 11266                           ;APDS9960.c: 205:     if( mode >= 0 && mode <= 6 ) {
 11267  16CB  3007               	movlw	7
 11268  16CC  0241               	subwf	setMode@mode,w
 11269  16CD  1803               	skipnc
 11270  16CE  2EEB               	goto	l5172
 11271                           
 11272                           ;APDS9960.c: 206:         if (enable) {
 11273  16CF  083D               	movf	setMode@enable,w
 11274  16D0  1903               	btfsc	3,2
 11275  16D1  2EDE               	goto	l5170
 11276                           
 11277                           ;APDS9960.c: 207:             reg_val |= (1 << mode);
 11278  16D2  3001               	movlw	1
 11279  16D3  00BE               	movwf	??_setMode
 11280  16D4  0A41               	incf	setMode@mode,w
 11281  16D5  2ED7               	goto	u2594
 11282  16D6                     u2595:
 11283  16D6  35BE               	lslf	??_setMode,f
 11284  16D7                     u2594:
 11285  16D7  0B89               	decfsz	9,f
 11286  16D8  2ED6               	goto	u2595
 11287  16D9  083E               	movf	??_setMode,w
 11288  16DA  00BF               	movwf	??_setMode+1
 11289  16DB  083F               	movf	??_setMode+1,w
 11290  16DC  04C0               	iorwf	setMode@reg_val,f
 11291                           
 11292                           ;APDS9960.c: 208:         } else {
 11293  16DD  2EF8               	goto	l5180
 11294  16DE                     l5170:
 11295                           
 11296                           ;APDS9960.c: 209:             reg_val &= ~(1 << mode);
 11297  16DE  3001               	movlw	1
 11298  16DF  00BE               	movwf	??_setMode
 11299  16E0  0A41               	incf	setMode@mode,w
 11300  16E1  2EE3               	goto	u2604
 11301  16E2                     u2605:
 11302  16E2  35BE               	lslf	??_setMode,f
 11303  16E3                     u2604:
 11304  16E3  0B89               	decfsz	9,f
 11305  16E4  2EE2               	goto	u2605
 11306  16E5  083E               	movf	??_setMode,w
 11307  16E6  3AFF               	xorlw	255
 11308  16E7  00BF               	movwf	??_setMode+1
 11309  16E8  083F               	movf	??_setMode+1,w
 11310  16E9  05C0               	andwf	setMode@reg_val,f
 11311  16EA  2EF8               	goto	l5180
 11312  16EB                     l5172:
 11313  16EB  3007               	movlw	7
 11314  16EC  0641               	xorwf	setMode@mode,w
 11315  16ED  1D03               	btfss	3,2
 11316  16EE  2EF8               	goto	l5180
 11317                           
 11318                           ;APDS9960.c: 212:         if (enable) {
 11319  16EF  083D               	movf	setMode@enable,w
 11320  16F0  1903               	btfsc	3,2
 11321  16F1  2EF7               	goto	l5178
 11322                           
 11323                           ;APDS9960.c: 213:             reg_val = 0x7F;
 11324  16F2  307F               	movlw	127
 11325  16F3  00BE               	movwf	??_setMode
 11326  16F4  083E               	movf	??_setMode,w
 11327  16F5  00C0               	movwf	setMode@reg_val
 11328                           
 11329                           ;APDS9960.c: 214:         } else {
 11330  16F6  2EF8               	goto	l5180
 11331  16F7                     l5178:
 11332                           
 11333                           ;APDS9960.c: 215:             reg_val = 0x00;
 11334  16F7  01C0               	clrf	setMode@reg_val
 11335  16F8                     l5180:
 11336                           
 11337                           ;APDS9960.c: 220:     i2c_write1ByteRegister(0x39,0x80, reg_val);
 11338  16F8  3080               	movlw	128
 11339  16F9  00BE               	movwf	??_setMode
 11340  16FA  083E               	movf	??_setMode,w
 11341  16FB  00B6               	movwf	i2c_write1ByteRegister@reg
 11342  16FC  0840               	movf	setMode@reg_val,w
 11343  16FD  00BF               	movwf	??_setMode+1
 11344  16FE  083F               	movf	??_setMode+1,w
 11345  16FF  00B7               	movwf	i2c_write1ByteRegister@data
 11346  1700  3039               	movlw	57
 11347  1701  3193  2377         	fcall	_i2c_write1ByteRegister
 11348                           
 11349                           ;APDS9960.c: 222:     return 1;
 11350  1703  3001               	movlw	1
 11351  1704  0008               	return
 11352  1705                     __end_of_setMode:
 11353                           
 11354                           	psect	text41
 11355  1270                     __ptext41:	
 11356 ;; *************** function _setLightIntLowThreshold *****************
 11357 ;; Defined at:
 11358 ;;		line 1599 in file "APDS9960.c"
 11359 ;; Parameters:    Size  Location     Type
 11360 ;;  threshold       2   25[BANK0 ] unsigned short 
 11361 ;; Auto vars:     Size  Location     Type
 11362 ;;  val_high        1   30[BANK0 ] unsigned char 
 11363 ;;  val_low         1   29[BANK0 ] unsigned char 
 11364 ;; Return value:  Size  Location     Type
 11365 ;;                  1    wreg      _Bool 
 11366 ;; Registers used:
 11367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11368 ;; Tracked objects:
 11369 ;;		On entry : 1F/0
 11370 ;;		On exit  : 1F/0
 11371 ;;		Unchanged: 0/0
 11372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11373 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11376 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11377 ;;Total ram usage:        6 bytes
 11378 ;; Hardware stack levels used:    1
 11379 ;; Hardware stack levels required when called:   13
 11380 ;; This function calls:
 11381 ;;		_i2c_write1ByteRegister
 11382 ;; This function is called by:
 11383 ;;		_APDS9960Init
 11384 ;; This function uses a non-reentrant model
 11385 ;;
 11386                           
 11387                           
 11388                           ;psect for function _setLightIntLowThreshold
 11389  1270                     _setLightIntLowThreshold:
 11390                           
 11391                           ;APDS9960.c: 1599: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 1600: {
      +                          ;APDS9960.c: 1601:     uint8_t val_low;;APDS9960.c: 1602:     uint8_t val_high;;APDS9960
      +                          .c: 1605:     val_low = threshold & 0x00FF;
 11392                           
 11393                           ;incstack = 0
 11394                           ; Regs used in _setLightIntLowThreshold: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11395  1270  0839               	movf	setLightIntLowThreshold@threshold,w
 11396  1271  00BB               	movwf	??_setLightIntLowThreshold
 11397  1272  083B               	movf	??_setLightIntLowThreshold,w
 11398  1273  00BD               	movwf	setLightIntLowThreshold@val_low
 11399                           
 11400                           ;APDS9960.c: 1606:     val_high = (threshold & 0xFF00) >> 8;
 11401  1274  083A               	movf	setLightIntLowThreshold@threshold+1,w
 11402  1275  00BB               	movwf	??_setLightIntLowThreshold
 11403  1276  083B               	movf	??_setLightIntLowThreshold,w
 11404  1277  00BE               	movwf	setLightIntLowThreshold@val_high
 11405                           
 11406                           ;APDS9960.c: 1609:     i2c_write1ByteRegister(0x39,0x84, val_low);
 11407  1278  3084               	movlw	132
 11408  1279  00BB               	movwf	??_setLightIntLowThreshold
 11409  127A  083B               	movf	??_setLightIntLowThreshold,w
 11410  127B  00B6               	movwf	i2c_write1ByteRegister@reg
 11411  127C  083D               	movf	setLightIntLowThreshold@val_low,w
 11412  127D  00BC               	movwf	??_setLightIntLowThreshold+1
 11413  127E  083C               	movf	??_setLightIntLowThreshold+1,w
 11414  127F  00B7               	movwf	i2c_write1ByteRegister@data
 11415  1280  3039               	movlw	57
 11416  1281  3193  2377  3192   	fcall	_i2c_write1ByteRegister
 11417                           
 11418                           ;APDS9960.c: 1612:     i2c_write1ByteRegister(0x39,0x85, val_high);
 11419  1284  3085               	movlw	133
 11420  1285  00BB               	movwf	??_setLightIntLowThreshold
 11421  1286  083B               	movf	??_setLightIntLowThreshold,w
 11422  1287  00B6               	movwf	i2c_write1ByteRegister@reg
 11423  1288  083E               	movf	setLightIntLowThreshold@val_high,w
 11424  1289  00BC               	movwf	??_setLightIntLowThreshold+1
 11425  128A  083C               	movf	??_setLightIntLowThreshold+1,w
 11426  128B  00B7               	movwf	i2c_write1ByteRegister@data
 11427  128C  3039               	movlw	57
 11428  128D  3193  2377         	fcall	_i2c_write1ByteRegister
 11429                           
 11430                           ;APDS9960.c: 1614:     return 1;
 11431  128F  3001               	movlw	1
 11432  1290  0008               	return
 11433  1291                     __end_of_setLightIntLowThreshold:
 11434                           
 11435                           	psect	text42
 11436  124F                     __ptext42:	
 11437 ;; *************** function _setLightIntHighThreshold *****************
 11438 ;; Defined at:
 11439 ;;		line 1645 in file "APDS9960.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;  threshold       2   25[BANK0 ] unsigned short 
 11442 ;; Auto vars:     Size  Location     Type
 11443 ;;  val_high        1   30[BANK0 ] unsigned char 
 11444 ;;  val_low         1   29[BANK0 ] unsigned char 
 11445 ;; Return value:  Size  Location     Type
 11446 ;;                  1    wreg      _Bool 
 11447 ;; Registers used:
 11448 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11449 ;; Tracked objects:
 11450 ;;		On entry : 1F/0
 11451 ;;		On exit  : 1F/0
 11452 ;;		Unchanged: 0/0
 11453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11454 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11455 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;Total ram usage:        6 bytes
 11459 ;; Hardware stack levels used:    1
 11460 ;; Hardware stack levels required when called:   13
 11461 ;; This function calls:
 11462 ;;		_i2c_write1ByteRegister
 11463 ;; This function is called by:
 11464 ;;		_APDS9960Init
 11465 ;; This function uses a non-reentrant model
 11466 ;;
 11467                           
 11468                           
 11469                           ;psect for function _setLightIntHighThreshold
 11470  124F                     _setLightIntHighThreshold:
 11471                           
 11472                           ;APDS9960.c: 1645: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 1646: 
      +                          {;APDS9960.c: 1647:     uint8_t val_low;;APDS9960.c: 1648:     uint8_t val_high;;APDS996
      +                          0.c: 1651:     val_low = threshold & 0x00FF;
 11473                           
 11474                           ;incstack = 0
 11475                           ; Regs used in _setLightIntHighThreshold: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11476  124F  0839               	movf	setLightIntHighThreshold@threshold,w
 11477  1250  00BB               	movwf	??_setLightIntHighThreshold
 11478  1251  083B               	movf	??_setLightIntHighThreshold,w
 11479  1252  00BD               	movwf	setLightIntHighThreshold@val_low
 11480                           
 11481                           ;APDS9960.c: 1652:     val_high = (threshold & 0xFF00) >> 8;
 11482  1253  083A               	movf	setLightIntHighThreshold@threshold+1,w
 11483  1254  00BB               	movwf	??_setLightIntHighThreshold
 11484  1255  083B               	movf	??_setLightIntHighThreshold,w
 11485  1256  00BE               	movwf	setLightIntHighThreshold@val_high
 11486                           
 11487                           ;APDS9960.c: 1655:     i2c_write1ByteRegister(0x39,0x86, val_low);
 11488  1257  3086               	movlw	134
 11489  1258  00BB               	movwf	??_setLightIntHighThreshold
 11490  1259  083B               	movf	??_setLightIntHighThreshold,w
 11491  125A  00B6               	movwf	i2c_write1ByteRegister@reg
 11492  125B  083D               	movf	setLightIntHighThreshold@val_low,w
 11493  125C  00BC               	movwf	??_setLightIntHighThreshold+1
 11494  125D  083C               	movf	??_setLightIntHighThreshold+1,w
 11495  125E  00B7               	movwf	i2c_write1ByteRegister@data
 11496  125F  3039               	movlw	57
 11497  1260  3193  2377  3192   	fcall	_i2c_write1ByteRegister
 11498                           
 11499                           ;APDS9960.c: 1658:     i2c_write1ByteRegister(0x39,0x87, val_high);
 11500  1263  3087               	movlw	135
 11501  1264  00BB               	movwf	??_setLightIntHighThreshold
 11502  1265  083B               	movf	??_setLightIntHighThreshold,w
 11503  1266  00B6               	movwf	i2c_write1ByteRegister@reg
 11504  1267  083E               	movf	setLightIntHighThreshold@val_high,w
 11505  1268  00BC               	movwf	??_setLightIntHighThreshold+1
 11506  1269  083C               	movf	??_setLightIntHighThreshold+1,w
 11507  126A  00B7               	movwf	i2c_write1ByteRegister@data
 11508  126B  3039               	movlw	57
 11509  126C  3193  2377         	fcall	_i2c_write1ByteRegister
 11510                           
 11511                           ;APDS9960.c: 1660:     return 1;
 11512  126E  3001               	movlw	1
 11513  126F  0008               	return
 11514  1270                     __end_of_setLightIntHighThreshold:
 11515                           
 11516                           	psect	text43
 11517  1407                     __ptext43:	
 11518 ;; *************** function _setLEDDrive *****************
 11519 ;; Defined at:
 11520 ;;		line 1060 in file "APDS9960.c"
 11521 ;; Parameters:    Size  Location     Type
 11522 ;;  drive           1    wreg     unsigned char 
 11523 ;; Auto vars:     Size  Location     Type
 11524 ;;  drive           1   32[BANK0 ] unsigned char 
 11525 ;;  val             1   31[BANK0 ] unsigned char 
 11526 ;; Return value:  Size  Location     Type
 11527 ;;                  1    wreg      _Bool 
 11528 ;; Registers used:
 11529 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11530 ;; Tracked objects:
 11531 ;;		On entry : 1F/0
 11532 ;;		On exit  : 1F/0
 11533 ;;		Unchanged: 0/0
 11534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11536 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11539 ;;Total ram usage:        4 bytes
 11540 ;; Hardware stack levels used:    1
 11541 ;; Hardware stack levels required when called:   13
 11542 ;; This function calls:
 11543 ;;		_i2c_read1ByteRegister
 11544 ;;		_i2c_write1ByteRegister
 11545 ;; This function is called by:
 11546 ;;		_APDS9960Init
 11547 ;; This function uses a non-reentrant model
 11548 ;;
 11549                           
 11550                           
 11551                           ;psect for function _setLEDDrive
 11552  1407                     _setLEDDrive:
 11553                           
 11554                           ;incstack = 0
 11555                           ; Regs used in _setLEDDrive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11556                           ;setLEDDrive@drive stored from wreg
 11557  1407  00C0               	movwf	setLEDDrive@drive
 11558                           
 11559                           ;APDS9960.c: 1060: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 1061: {;APDS9960.c: 1062
      +                          :     uint8_t val;;APDS9960.c: 1065:     val = i2c_read1ByteRegister(0x39,0x8F);
 11560  1408  308F               	movlw	143
 11561  1409  00BD               	movwf	??_setLEDDrive
 11562  140A  083D               	movf	??_setLEDDrive,w
 11563  140B  00B6               	movwf	i2c_read1ByteRegister@reg
 11564  140C  3039               	movlw	57
 11565  140D  3196  2624  3194   	fcall	_i2c_read1ByteRegister
 11566  1410  00BE               	movwf	??_setLEDDrive+1
 11567  1411  083E               	movf	??_setLEDDrive+1,w
 11568  1412  00BF               	movwf	setLEDDrive@val
 11569                           
 11570                           ;APDS9960.c: 1068:     drive &= 0b00000011;
 11571  1413  3003               	movlw	3
 11572  1414  00BD               	movwf	??_setLEDDrive
 11573  1415  083D               	movf	??_setLEDDrive,w
 11574  1416  05C0               	andwf	setLEDDrive@drive,f
 11575                           
 11576                           ;APDS9960.c: 1069:     drive = drive << 6;
 11577  1417  0840               	movf	setLEDDrive@drive,w
 11578  1418  00BD               	movwf	??_setLEDDrive
 11579  1419  3005               	movlw	5
 11580  141A                     u2635:
 11581  141A  35BD               	lslf	??_setLEDDrive,f
 11582  141B  3EFF               	addlw	-1
 11583  141C  1D03               	skipz
 11584  141D  2C1A               	goto	u2635
 11585  141E  353D               	lslf	??_setLEDDrive,w
 11586  141F  00BE               	movwf	??_setLEDDrive+1
 11587  1420  083E               	movf	??_setLEDDrive+1,w
 11588  1421  00C0               	movwf	setLEDDrive@drive
 11589                           
 11590                           ;APDS9960.c: 1070:     val &= 0b00111111;
 11591  1422  303F               	movlw	63
 11592  1423  00BD               	movwf	??_setLEDDrive
 11593  1424  083D               	movf	??_setLEDDrive,w
 11594  1425  05BF               	andwf	setLEDDrive@val,f
 11595                           
 11596                           ;APDS9960.c: 1071:     val |= drive;
 11597  1426  0840               	movf	setLEDDrive@drive,w
 11598  1427  00BD               	movwf	??_setLEDDrive
 11599  1428  083D               	movf	??_setLEDDrive,w
 11600  1429  04BF               	iorwf	setLEDDrive@val,f
 11601                           
 11602                           ;APDS9960.c: 1074:     i2c_write1ByteRegister(0x39,0x8F, val);
 11603  142A  308F               	movlw	143
 11604  142B  00BD               	movwf	??_setLEDDrive
 11605  142C  083D               	movf	??_setLEDDrive,w
 11606  142D  00B6               	movwf	i2c_write1ByteRegister@reg
 11607  142E  083F               	movf	setLEDDrive@val,w
 11608  142F  00BE               	movwf	??_setLEDDrive+1
 11609  1430  083E               	movf	??_setLEDDrive+1,w
 11610  1431  00B7               	movwf	i2c_write1ByteRegister@data
 11611  1432  3039               	movlw	57
 11612  1433  3193  2377         	fcall	_i2c_write1ByteRegister
 11613                           
 11614                           ;APDS9960.c: 1076:     return 1;
 11615  1435  3001               	movlw	1
 11616  1436  0008               	return
 11617  1437                     __end_of_setLEDDrive:
 11618                           
 11619                           	psect	text44
 11620  12D7                     __ptext44:	
 11621 ;; *************** function _setGestureWaitTime *****************
 11622 ;; Defined at:
 11623 ;;		line 1553 in file "APDS9960.c"
 11624 ;; Parameters:    Size  Location     Type
 11625 ;;  time            1    wreg     unsigned char 
 11626 ;; Auto vars:     Size  Location     Type
 11627 ;;  time            1   31[BANK0 ] unsigned char 
 11628 ;;  val             1   32[BANK0 ] unsigned char 
 11629 ;; Return value:  Size  Location     Type
 11630 ;;                  1    wreg      _Bool 
 11631 ;; Registers used:
 11632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11633 ;; Tracked objects:
 11634 ;;		On entry : 1F/0
 11635 ;;		On exit  : 1F/0
 11636 ;;		Unchanged: 0/0
 11637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;Total ram usage:        4 bytes
 11643 ;; Hardware stack levels used:    1
 11644 ;; Hardware stack levels required when called:   13
 11645 ;; This function calls:
 11646 ;;		_i2c_read1ByteRegister
 11647 ;;		_i2c_write1ByteRegister
 11648 ;; This function is called by:
 11649 ;;		_APDS9960Init
 11650 ;; This function uses a non-reentrant model
 11651 ;;
 11652                           
 11653                           
 11654                           ;psect for function _setGestureWaitTime
 11655  12D7                     _setGestureWaitTime:
 11656                           
 11657                           ;incstack = 0
 11658                           ; Regs used in _setGestureWaitTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11659                           ;setGestureWaitTime@time stored from wreg
 11660  12D7  00BF               	movwf	setGestureWaitTime@time
 11661                           
 11662                           ;APDS9960.c: 1553: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 1554: {;APDS9960.c
      +                          : 1555:     uint8_t val;;APDS9960.c: 1558:     val = i2c_read1ByteRegister(0x39,0xA3);
 11663  12D8  30A3               	movlw	163
 11664  12D9  00BD               	movwf	??_setGestureWaitTime
 11665  12DA  083D               	movf	??_setGestureWaitTime,w
 11666  12DB  00B6               	movwf	i2c_read1ByteRegister@reg
 11667  12DC  3039               	movlw	57
 11668  12DD  3196  2624  3192   	fcall	_i2c_read1ByteRegister
 11669  12E0  00BE               	movwf	??_setGestureWaitTime+1
 11670  12E1  083E               	movf	??_setGestureWaitTime+1,w
 11671  12E2  00C0               	movwf	setGestureWaitTime@val
 11672                           
 11673                           ;APDS9960.c: 1561:     time &= 0b00000111;
 11674  12E3  3007               	movlw	7
 11675  12E4  00BD               	movwf	??_setGestureWaitTime
 11676  12E5  083D               	movf	??_setGestureWaitTime,w
 11677  12E6  05BF               	andwf	setGestureWaitTime@time,f
 11678                           
 11679                           ;APDS9960.c: 1562:     val &= 0b11111000;
 11680  12E7  30F8               	movlw	248
 11681  12E8  00BD               	movwf	??_setGestureWaitTime
 11682  12E9  083D               	movf	??_setGestureWaitTime,w
 11683  12EA  05C0               	andwf	setGestureWaitTime@val,f
 11684                           
 11685                           ;APDS9960.c: 1563:     val |= time;
 11686  12EB  083F               	movf	setGestureWaitTime@time,w
 11687  12EC  00BD               	movwf	??_setGestureWaitTime
 11688  12ED  083D               	movf	??_setGestureWaitTime,w
 11689  12EE  04C0               	iorwf	setGestureWaitTime@val,f
 11690                           
 11691                           ;APDS9960.c: 1566:     i2c_write1ByteRegister(0x39,0xA3, val);
 11692  12EF  30A3               	movlw	163
 11693  12F0  00BD               	movwf	??_setGestureWaitTime
 11694  12F1  083D               	movf	??_setGestureWaitTime,w
 11695  12F2  00B6               	movwf	i2c_write1ByteRegister@reg
 11696  12F3  0840               	movf	setGestureWaitTime@val,w
 11697  12F4  00BE               	movwf	??_setGestureWaitTime+1
 11698  12F5  083E               	movf	??_setGestureWaitTime+1,w
 11699  12F6  00B7               	movwf	i2c_write1ByteRegister@data
 11700  12F7  3039               	movlw	57
 11701  12F8  3193  2377         	fcall	_i2c_write1ByteRegister
 11702                           
 11703                           ;APDS9960.c: 1568:     return 1;
 11704  12FA  3001               	movlw	1
 11705  12FB  0008               	return
 11706  12FC                     __end_of_setGestureWaitTime:
 11707                           
 11708                           	psect	text45
 11709  13D7                     __ptext45:	
 11710 ;; *************** function _setGestureLEDDrive *****************
 11711 ;; Defined at:
 11712 ;;		line 1490 in file "APDS9960.c"
 11713 ;; Parameters:    Size  Location     Type
 11714 ;;  drive           1    wreg     unsigned char 
 11715 ;; Auto vars:     Size  Location     Type
 11716 ;;  drive           1   32[BANK0 ] unsigned char 
 11717 ;;  val             1   31[BANK0 ] unsigned char 
 11718 ;; Return value:  Size  Location     Type
 11719 ;;                  1    wreg      _Bool 
 11720 ;; Registers used:
 11721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11722 ;; Tracked objects:
 11723 ;;		On entry : 1F/0
 11724 ;;		On exit  : 1F/0
 11725 ;;		Unchanged: 0/0
 11726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11728 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11729 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11730 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11731 ;;Total ram usage:        4 bytes
 11732 ;; Hardware stack levels used:    1
 11733 ;; Hardware stack levels required when called:   13
 11734 ;; This function calls:
 11735 ;;		_i2c_read1ByteRegister
 11736 ;;		_i2c_write1ByteRegister
 11737 ;; This function is called by:
 11738 ;;		_APDS9960Init
 11739 ;; This function uses a non-reentrant model
 11740 ;;
 11741                           
 11742                           
 11743                           ;psect for function _setGestureLEDDrive
 11744  13D7                     _setGestureLEDDrive:
 11745                           
 11746                           ;incstack = 0
 11747                           ; Regs used in _setGestureLEDDrive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11748                           ;setGestureLEDDrive@drive stored from wreg
 11749  13D7  00C0               	movwf	setGestureLEDDrive@drive
 11750                           
 11751                           ;APDS9960.c: 1490: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 1491: {;APDS9960.
      +                          c: 1492:     uint8_t val;;APDS9960.c: 1495:     val = i2c_read1ByteRegister(0x39,0xA3);
 11752  13D8  30A3               	movlw	163
 11753  13D9  00BD               	movwf	??_setGestureLEDDrive
 11754  13DA  083D               	movf	??_setGestureLEDDrive,w
 11755  13DB  00B6               	movwf	i2c_read1ByteRegister@reg
 11756  13DC  3039               	movlw	57
 11757  13DD  3196  2624  3193   	fcall	_i2c_read1ByteRegister
 11758  13E0  00BE               	movwf	??_setGestureLEDDrive+1
 11759  13E1  083E               	movf	??_setGestureLEDDrive+1,w
 11760  13E2  00BF               	movwf	setGestureLEDDrive@val
 11761                           
 11762                           ;APDS9960.c: 1498:     drive &= 0b00000011;
 11763  13E3  3003               	movlw	3
 11764  13E4  00BD               	movwf	??_setGestureLEDDrive
 11765  13E5  083D               	movf	??_setGestureLEDDrive,w
 11766  13E6  05C0               	andwf	setGestureLEDDrive@drive,f
 11767                           
 11768                           ;APDS9960.c: 1499:     drive = drive << 3;
 11769  13E7  0840               	movf	setGestureLEDDrive@drive,w
 11770  13E8  00BD               	movwf	??_setGestureLEDDrive
 11771  13E9  3002               	movlw	2
 11772  13EA                     u2655:
 11773  13EA  35BD               	lslf	??_setGestureLEDDrive,f
 11774  13EB  3EFF               	addlw	-1
 11775  13EC  1D03               	skipz
 11776  13ED  2BEA               	goto	u2655
 11777  13EE  353D               	lslf	??_setGestureLEDDrive,w
 11778  13EF  00BE               	movwf	??_setGestureLEDDrive+1
 11779  13F0  083E               	movf	??_setGestureLEDDrive+1,w
 11780  13F1  00C0               	movwf	setGestureLEDDrive@drive
 11781                           
 11782                           ;APDS9960.c: 1500:     val &= 0b11100111;
 11783  13F2  30E7               	movlw	231
 11784  13F3  00BD               	movwf	??_setGestureLEDDrive
 11785  13F4  083D               	movf	??_setGestureLEDDrive,w
 11786  13F5  05BF               	andwf	setGestureLEDDrive@val,f
 11787                           
 11788                           ;APDS9960.c: 1501:     val |= drive;
 11789  13F6  0840               	movf	setGestureLEDDrive@drive,w
 11790  13F7  00BD               	movwf	??_setGestureLEDDrive
 11791  13F8  083D               	movf	??_setGestureLEDDrive,w
 11792  13F9  04BF               	iorwf	setGestureLEDDrive@val,f
 11793                           
 11794                           ;APDS9960.c: 1504:     i2c_write1ByteRegister(0x39,0xA3, val);
 11795  13FA  30A3               	movlw	163
 11796  13FB  00BD               	movwf	??_setGestureLEDDrive
 11797  13FC  083D               	movf	??_setGestureLEDDrive,w
 11798  13FD  00B6               	movwf	i2c_write1ByteRegister@reg
 11799  13FE  083F               	movf	setGestureLEDDrive@val,w
 11800  13FF  00BE               	movwf	??_setGestureLEDDrive+1
 11801  1400  083E               	movf	??_setGestureLEDDrive+1,w
 11802  1401  00B7               	movwf	i2c_write1ByteRegister@data
 11803  1402  3039               	movlw	57
 11804  1403  3193  2377         	fcall	_i2c_write1ByteRegister
 11805                           
 11806                           ;APDS9960.c: 1506:     return 1;
 11807  1405  3001               	movlw	1
 11808  1406  0008               	return
 11809  1407                     __end_of_setGestureLEDDrive:
 11810                           
 11811                           	psect	text46
 11812  1321                     __ptext46:	
 11813 ;; *************** function _setGestureIntEnable *****************
 11814 ;; Defined at:
 11815 ;;		line 1835 in file "APDS9960.c"
 11816 ;; Parameters:    Size  Location     Type
 11817 ;;  enable          1    wreg     unsigned char 
 11818 ;; Auto vars:     Size  Location     Type
 11819 ;;  enable          1   32[BANK0 ] unsigned char 
 11820 ;;  val             1   31[BANK0 ] unsigned char 
 11821 ;; Return value:  Size  Location     Type
 11822 ;;                  1    wreg      _Bool 
 11823 ;; Registers used:
 11824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11825 ;; Tracked objects:
 11826 ;;		On entry : 1F/0
 11827 ;;		On exit  : 1F/0
 11828 ;;		Unchanged: 0/0
 11829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11831 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11834 ;;Total ram usage:        4 bytes
 11835 ;; Hardware stack levels used:    1
 11836 ;; Hardware stack levels required when called:   13
 11837 ;; This function calls:
 11838 ;;		_i2c_read1ByteRegister
 11839 ;;		_i2c_write1ByteRegister
 11840 ;; This function is called by:
 11841 ;;		_APDS9960Init
 11842 ;;		_enableGestureSensor
 11843 ;; This function uses a non-reentrant model
 11844 ;;
 11845                           
 11846                           
 11847                           ;psect for function _setGestureIntEnable
 11848  1321                     _setGestureIntEnable:
 11849                           
 11850                           ;incstack = 0
 11851                           ; Regs used in _setGestureIntEnable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11852                           ;setGestureIntEnable@enable stored from wreg
 11853  1321  00C0               	movwf	setGestureIntEnable@enable
 11854                           
 11855                           ;APDS9960.c: 1835: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 1836: {;APDS996
      +                          0.c: 1837:     uint8_t val;;APDS9960.c: 1840:     val = i2c_read1ByteRegister(0x39,0xAB)
      +                          ;
 11856  1322  30AB               	movlw	171
 11857  1323  00BD               	movwf	??_setGestureIntEnable
 11858  1324  083D               	movf	??_setGestureIntEnable,w
 11859  1325  00B6               	movwf	i2c_read1ByteRegister@reg
 11860  1326  3039               	movlw	57
 11861  1327  3196  2624  3193   	fcall	_i2c_read1ByteRegister
 11862  132A  00BE               	movwf	??_setGestureIntEnable+1
 11863  132B  083E               	movf	??_setGestureIntEnable+1,w
 11864  132C  00BF               	movwf	setGestureIntEnable@val
 11865                           
 11866                           ;APDS9960.c: 1843:     enable &= 0b00000001;
 11867  132D  3001               	movlw	1
 11868  132E  00BD               	movwf	??_setGestureIntEnable
 11869  132F  083D               	movf	??_setGestureIntEnable,w
 11870  1330  05C0               	andwf	setGestureIntEnable@enable,f
 11871                           
 11872                           ;APDS9960.c: 1844:     enable = enable << 1;
 11873  1331  3540               	lslf	setGestureIntEnable@enable,w
 11874  1332  00BD               	movwf	??_setGestureIntEnable
 11875  1333  083D               	movf	??_setGestureIntEnable,w
 11876  1334  00C0               	movwf	setGestureIntEnable@enable
 11877                           
 11878                           ;APDS9960.c: 1845:     val &= 0b11111101;
 11879  1335  30FD               	movlw	253
 11880  1336  00BD               	movwf	??_setGestureIntEnable
 11881  1337  083D               	movf	??_setGestureIntEnable,w
 11882  1338  05BF               	andwf	setGestureIntEnable@val,f
 11883                           
 11884                           ;APDS9960.c: 1846:     val |= enable;
 11885  1339  0840               	movf	setGestureIntEnable@enable,w
 11886  133A  00BD               	movwf	??_setGestureIntEnable
 11887  133B  083D               	movf	??_setGestureIntEnable,w
 11888  133C  04BF               	iorwf	setGestureIntEnable@val,f
 11889                           
 11890                           ;APDS9960.c: 1849:     i2c_write1ByteRegister(0x39,0xAB, val);
 11891  133D  30AB               	movlw	171
 11892  133E  00BD               	movwf	??_setGestureIntEnable
 11893  133F  083D               	movf	??_setGestureIntEnable,w
 11894  1340  00B6               	movwf	i2c_write1ByteRegister@reg
 11895  1341  083F               	movf	setGestureIntEnable@val,w
 11896  1342  00BE               	movwf	??_setGestureIntEnable+1
 11897  1343  083E               	movf	??_setGestureIntEnable+1,w
 11898  1344  00B7               	movwf	i2c_write1ByteRegister@data
 11899  1345  3039               	movlw	57
 11900  1346  3193  2377         	fcall	_i2c_write1ByteRegister
 11901                           
 11902                           ;APDS9960.c: 1851:     return 1;
 11903  1348  3001               	movlw	1
 11904  1349  0008               	return
 11905  134A                     __end_of_setGestureIntEnable:
 11906                           
 11907                           	psect	text47
 11908  13A7                     __ptext47:	
 11909 ;; *************** function _setGestureGain *****************
 11910 ;; Defined at:
 11911 ;;		line 1435 in file "APDS9960.c"
 11912 ;; Parameters:    Size  Location     Type
 11913 ;;  gain            1    wreg     unsigned char 
 11914 ;; Auto vars:     Size  Location     Type
 11915 ;;  gain            1   32[BANK0 ] unsigned char 
 11916 ;;  val             1   31[BANK0 ] unsigned char 
 11917 ;; Return value:  Size  Location     Type
 11918 ;;                  1    wreg      _Bool 
 11919 ;; Registers used:
 11920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11921 ;; Tracked objects:
 11922 ;;		On entry : 1F/0
 11923 ;;		On exit  : 1F/0
 11924 ;;		Unchanged: 0/0
 11925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11930 ;;Total ram usage:        4 bytes
 11931 ;; Hardware stack levels used:    1
 11932 ;; Hardware stack levels required when called:   13
 11933 ;; This function calls:
 11934 ;;		_i2c_read1ByteRegister
 11935 ;;		_i2c_write1ByteRegister
 11936 ;; This function is called by:
 11937 ;;		_APDS9960Init
 11938 ;; This function uses a non-reentrant model
 11939 ;;
 11940                           
 11941                           
 11942                           ;psect for function _setGestureGain
 11943  13A7                     _setGestureGain:
 11944                           
 11945                           ;incstack = 0
 11946                           ; Regs used in _setGestureGain: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11947                           ;setGestureGain@gain stored from wreg
 11948  13A7  00C0               	movwf	setGestureGain@gain
 11949                           
 11950                           ;APDS9960.c: 1435: _Bool setGestureGain(uint8_t gain);APDS9960.c: 1436: {;APDS9960.c: 14
      +                          37:     uint8_t val;;APDS9960.c: 1440:     val = i2c_read1ByteRegister(0x39,0xA3);
 11951  13A8  30A3               	movlw	163
 11952  13A9  00BD               	movwf	??_setGestureGain
 11953  13AA  083D               	movf	??_setGestureGain,w
 11954  13AB  00B6               	movwf	i2c_read1ByteRegister@reg
 11955  13AC  3039               	movlw	57
 11956  13AD  3196  2624  3193   	fcall	_i2c_read1ByteRegister
 11957  13B0  00BE               	movwf	??_setGestureGain+1
 11958  13B1  083E               	movf	??_setGestureGain+1,w
 11959  13B2  00BF               	movwf	setGestureGain@val
 11960                           
 11961                           ;APDS9960.c: 1443:     gain &= 0b00000011;
 11962  13B3  3003               	movlw	3
 11963  13B4  00BD               	movwf	??_setGestureGain
 11964  13B5  083D               	movf	??_setGestureGain,w
 11965  13B6  05C0               	andwf	setGestureGain@gain,f
 11966                           
 11967                           ;APDS9960.c: 1444:     gain = gain << 5;
 11968  13B7  0840               	movf	setGestureGain@gain,w
 11969  13B8  00BD               	movwf	??_setGestureGain
 11970  13B9  3004               	movlw	4
 11971  13BA                     u2645:
 11972  13BA  35BD               	lslf	??_setGestureGain,f
 11973  13BB  3EFF               	addlw	-1
 11974  13BC  1D03               	skipz
 11975  13BD  2BBA               	goto	u2645
 11976  13BE  353D               	lslf	??_setGestureGain,w
 11977  13BF  00BE               	movwf	??_setGestureGain+1
 11978  13C0  083E               	movf	??_setGestureGain+1,w
 11979  13C1  00C0               	movwf	setGestureGain@gain
 11980                           
 11981                           ;APDS9960.c: 1445:     val &= 0b10011111;
 11982  13C2  309F               	movlw	159
 11983  13C3  00BD               	movwf	??_setGestureGain
 11984  13C4  083D               	movf	??_setGestureGain,w
 11985  13C5  05BF               	andwf	setGestureGain@val,f
 11986                           
 11987                           ;APDS9960.c: 1446:     val |= gain;
 11988  13C6  0840               	movf	setGestureGain@gain,w
 11989  13C7  00BD               	movwf	??_setGestureGain
 11990  13C8  083D               	movf	??_setGestureGain,w
 11991  13C9  04BF               	iorwf	setGestureGain@val,f
 11992                           
 11993                           ;APDS9960.c: 1449:     i2c_write1ByteRegister(0x39,0xA3, val);
 11994  13CA  30A3               	movlw	163
 11995  13CB  00BD               	movwf	??_setGestureGain
 11996  13CC  083D               	movf	??_setGestureGain,w
 11997  13CD  00B6               	movwf	i2c_write1ByteRegister@reg
 11998  13CE  083F               	movf	setGestureGain@val,w
 11999  13CF  00BE               	movwf	??_setGestureGain+1
 12000  13D0  083E               	movf	??_setGestureGain+1,w
 12001  13D1  00B7               	movwf	i2c_write1ByteRegister@data
 12002  13D2  3039               	movlw	57
 12003  13D3  3193  2377         	fcall	_i2c_write1ByteRegister
 12004                           
 12005                           ;APDS9960.c: 1451:     return 1;
 12006  13D5  3001               	movlw	1
 12007  13D6  0008               	return
 12008  13D7                     __end_of_setGestureGain:
 12009                           
 12010                           	psect	text48
 12011  1FE4                     __ptext48:	
 12012 ;; *************** function _setGestureExitThresh *****************
 12013 ;; Defined at:
 12014 ;;		line 1392 in file "APDS9960.c"
 12015 ;; Parameters:    Size  Location     Type
 12016 ;;  threshold       1    wreg     unsigned char 
 12017 ;; Auto vars:     Size  Location     Type
 12018 ;;  threshold       1   27[BANK0 ] unsigned char 
 12019 ;; Return value:  Size  Location     Type
 12020 ;;                  1    wreg      _Bool 
 12021 ;; Registers used:
 12022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12023 ;; Tracked objects:
 12024 ;;		On entry : 1F/0
 12025 ;;		On exit  : 1F/0
 12026 ;;		Unchanged: 0/0
 12027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12030 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12031 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12032 ;;Total ram usage:        3 bytes
 12033 ;; Hardware stack levels used:    1
 12034 ;; Hardware stack levels required when called:   13
 12035 ;; This function calls:
 12036 ;;		_i2c_write1ByteRegister
 12037 ;; This function is called by:
 12038 ;;		_APDS9960Init
 12039 ;; This function uses a non-reentrant model
 12040 ;;
 12041                           
 12042                           
 12043                           ;psect for function _setGestureExitThresh
 12044  1FE4                     _setGestureExitThresh:
 12045                           
 12046                           ;incstack = 0
 12047                           ; Regs used in _setGestureExitThresh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12048                           ;setGestureExitThresh@threshold stored from wreg
 12049  1FE4  00BB               	movwf	setGestureExitThresh@threshold
 12050                           
 12051                           ;APDS9960.c: 1392: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 1393: {;APD
      +                          S9960.c: 1394:     i2c_write1ByteRegister(0x39,0xA1, threshold);
 12052  1FE5  30A1               	movlw	161
 12053  1FE6  00B9               	movwf	??_setGestureExitThresh
 12054  1FE7  0839               	movf	??_setGestureExitThresh,w
 12055  1FE8  00B6               	movwf	i2c_write1ByteRegister@reg
 12056  1FE9  083B               	movf	setGestureExitThresh@threshold,w
 12057  1FEA  00BA               	movwf	??_setGestureExitThresh+1
 12058  1FEB  083A               	movf	??_setGestureExitThresh+1,w
 12059  1FEC  00B7               	movwf	i2c_write1ByteRegister@data
 12060  1FED  3039               	movlw	57
 12061  1FEE  3193  2377         	fcall	_i2c_write1ByteRegister
 12062                           
 12063                           ;APDS9960.c: 1396:     return 1;
 12064  1FF0  3001               	movlw	1
 12065  1FF1  0008               	return
 12066  1FF2                     __end_of_setGestureExitThresh:
 12067                           
 12068                           	psect	text49
 12069  1FD6                     __ptext49:	
 12070 ;; *************** function _setGestureEnterThresh *****************
 12071 ;; Defined at:
 12072 ;;		line 1364 in file "APDS9960.c"
 12073 ;; Parameters:    Size  Location     Type
 12074 ;;  threshold       1    wreg     unsigned char 
 12075 ;; Auto vars:     Size  Location     Type
 12076 ;;  threshold       1   27[BANK0 ] unsigned char 
 12077 ;; Return value:  Size  Location     Type
 12078 ;;                  1    wreg      _Bool 
 12079 ;; Registers used:
 12080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12081 ;; Tracked objects:
 12082 ;;		On entry : 1F/0
 12083 ;;		On exit  : 1F/0
 12084 ;;		Unchanged: 0/0
 12085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12087 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12088 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12089 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12090 ;;Total ram usage:        3 bytes
 12091 ;; Hardware stack levels used:    1
 12092 ;; Hardware stack levels required when called:   13
 12093 ;; This function calls:
 12094 ;;		_i2c_write1ByteRegister
 12095 ;; This function is called by:
 12096 ;;		_APDS9960Init
 12097 ;; This function uses a non-reentrant model
 12098 ;;
 12099                           
 12100                           
 12101                           ;psect for function _setGestureEnterThresh
 12102  1FD6                     _setGestureEnterThresh:
 12103                           
 12104                           ;incstack = 0
 12105                           ; Regs used in _setGestureEnterThresh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12106                           ;setGestureEnterThresh@threshold stored from wreg
 12107  1FD6  00BB               	movwf	setGestureEnterThresh@threshold
 12108                           
 12109                           ;APDS9960.c: 1364: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 1365: {;AP
      +                          DS9960.c: 1366:     i2c_write1ByteRegister(0x39,0xA0, threshold);
 12110  1FD7  30A0               	movlw	160
 12111  1FD8  00B9               	movwf	??_setGestureEnterThresh
 12112  1FD9  0839               	movf	??_setGestureEnterThresh,w
 12113  1FDA  00B6               	movwf	i2c_write1ByteRegister@reg
 12114  1FDB  083B               	movf	setGestureEnterThresh@threshold,w
 12115  1FDC  00BA               	movwf	??_setGestureEnterThresh+1
 12116  1FDD  083A               	movf	??_setGestureEnterThresh+1,w
 12117  1FDE  00B7               	movwf	i2c_write1ByteRegister@data
 12118  1FDF  3039               	movlw	57
 12119  1FE0  3193  2377         	fcall	_i2c_write1ByteRegister
 12120                           
 12121                           ;APDS9960.c: 1368:     return 1;
 12122  1FE2  3001               	movlw	1
 12123  1FE3  0008               	return
 12124  1FE4                     __end_of_setGestureEnterThresh:
 12125                           
 12126                           	psect	text50
 12127  12B2                     __ptext50:	
 12128 ;; *************** function _setAmbientLightGain *****************
 12129 ;; Defined at:
 12130 ;;		line 1170 in file "APDS9960.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;  drive           1    wreg     unsigned char 
 12133 ;; Auto vars:     Size  Location     Type
 12134 ;;  drive           1   31[BANK0 ] unsigned char 
 12135 ;;  val             1   32[BANK0 ] unsigned char 
 12136 ;; Return value:  Size  Location     Type
 12137 ;;                  1    wreg      _Bool 
 12138 ;; Registers used:
 12139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12140 ;; Tracked objects:
 12141 ;;		On entry : 1F/0
 12142 ;;		On exit  : 1F/0
 12143 ;;		Unchanged: 0/0
 12144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;Total ram usage:        4 bytes
 12150 ;; Hardware stack levels used:    1
 12151 ;; Hardware stack levels required when called:   13
 12152 ;; This function calls:
 12153 ;;		_i2c_read1ByteRegister
 12154 ;;		_i2c_write1ByteRegister
 12155 ;; This function is called by:
 12156 ;;		_APDS9960Init
 12157 ;; This function uses a non-reentrant model
 12158 ;;
 12159                           
 12160                           
 12161                           ;psect for function _setAmbientLightGain
 12162  12B2                     _setAmbientLightGain:
 12163                           
 12164                           ;incstack = 0
 12165                           ; Regs used in _setAmbientLightGain: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12166                           ;setAmbientLightGain@drive stored from wreg
 12167  12B2  00BF               	movwf	setAmbientLightGain@drive
 12168                           
 12169                           ;APDS9960.c: 1170: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 1171: {;APDS9960
      +                          .c: 1172:     uint8_t val;;APDS9960.c: 1175:     val = i2c_read1ByteRegister(0x39,0x8F);
 12170  12B3  308F               	movlw	143
 12171  12B4  00BD               	movwf	??_setAmbientLightGain
 12172  12B5  083D               	movf	??_setAmbientLightGain,w
 12173  12B6  00B6               	movwf	i2c_read1ByteRegister@reg
 12174  12B7  3039               	movlw	57
 12175  12B8  3196  2624  3192   	fcall	_i2c_read1ByteRegister
 12176  12BB  00BE               	movwf	??_setAmbientLightGain+1
 12177  12BC  083E               	movf	??_setAmbientLightGain+1,w
 12178  12BD  00C0               	movwf	setAmbientLightGain@val
 12179                           
 12180                           ;APDS9960.c: 1178:     drive &= 0b00000011;
 12181  12BE  3003               	movlw	3
 12182  12BF  00BD               	movwf	??_setAmbientLightGain
 12183  12C0  083D               	movf	??_setAmbientLightGain,w
 12184  12C1  05BF               	andwf	setAmbientLightGain@drive,f
 12185                           
 12186                           ;APDS9960.c: 1179:     val &= 0b11111100;
 12187  12C2  30FC               	movlw	252
 12188  12C3  00BD               	movwf	??_setAmbientLightGain
 12189  12C4  083D               	movf	??_setAmbientLightGain,w
 12190  12C5  05C0               	andwf	setAmbientLightGain@val,f
 12191                           
 12192                           ;APDS9960.c: 1180:     val |= drive;
 12193  12C6  083F               	movf	setAmbientLightGain@drive,w
 12194  12C7  00BD               	movwf	??_setAmbientLightGain
 12195  12C8  083D               	movf	??_setAmbientLightGain,w
 12196  12C9  04C0               	iorwf	setAmbientLightGain@val,f
 12197                           
 12198                           ;APDS9960.c: 1183:     i2c_write1ByteRegister(0x39,0x8F, val);
 12199  12CA  308F               	movlw	143
 12200  12CB  00BD               	movwf	??_setAmbientLightGain
 12201  12CC  083D               	movf	??_setAmbientLightGain,w
 12202  12CD  00B6               	movwf	i2c_write1ByteRegister@reg
 12203  12CE  0840               	movf	setAmbientLightGain@val,w
 12204  12CF  00BE               	movwf	??_setAmbientLightGain+1
 12205  12D0  083E               	movf	??_setAmbientLightGain+1,w
 12206  12D1  00B7               	movwf	i2c_write1ByteRegister@data
 12207  12D2  3039               	movlw	57
 12208  12D3  3193  2377         	fcall	_i2c_write1ByteRegister
 12209                           
 12210                           ;APDS9960.c: 1185:     return 1;
 12211  12D5  3001               	movlw	1
 12212  12D6  0008               	return
 12213  12D7                     __end_of_setAmbientLightGain:
 12214                           
 12215                           	psect	text51
 12216  1377                     __ptext51:	
 12217 ;; *************** function _i2c_write1ByteRegister *****************
 12218 ;; Defined at:
 12219 ;;		line 51 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12220 ;; Parameters:    Size  Location     Type
 12221 ;;  address         1    wreg     unsigned char 
 12222 ;;  reg             1   22[BANK0 ] unsigned char 
 12223 ;;  data            1   23[BANK0 ] unsigned char 
 12224 ;; Auto vars:     Size  Location     Type
 12225 ;;  address         1   24[BANK0 ] unsigned char 
 12226 ;; Return value:  Size  Location     Type
 12227 ;;                  1    wreg      void 
 12228 ;; Registers used:
 12229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12230 ;; Tracked objects:
 12231 ;;		On entry : 1F/0
 12232 ;;		On exit  : 1F/0
 12233 ;;		Unchanged: 0/0
 12234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12235 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12238 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;Total ram usage:        3 bytes
 12240 ;; Hardware stack levels used:    1
 12241 ;; Hardware stack levels required when called:   12
 12242 ;; This function calls:
 12243 ;;		_I2C_Close
 12244 ;;		_I2C_MasterWrite
 12245 ;;		_I2C_Open
 12246 ;;		_I2C_SetAddressNackCallback
 12247 ;;		_I2C_SetBuffer
 12248 ;;		_I2C_SetDataCompleteCallback
 12249 ;; This function is called by:
 12250 ;;		_APDS9960Init
 12251 ;;		_setMode
 12252 ;;		_enableGestureSensor
 12253 ;;		_setProxIntLowThresh
 12254 ;;		_setProxIntHighThresh
 12255 ;;		_setLEDDrive
 12256 ;;		_setProximityGain
 12257 ;;		_setAmbientLightGain
 12258 ;;		_setLEDBoost
 12259 ;;		_setGestureEnterThresh
 12260 ;;		_setGestureExitThresh
 12261 ;;		_setGestureGain
 12262 ;;		_setGestureLEDDrive
 12263 ;;		_setGestureWaitTime
 12264 ;;		_setLightIntLowThreshold
 12265 ;;		_setLightIntHighThreshold
 12266 ;;		_setGestureIntEnable
 12267 ;;		_setGestureMode
 12268 ;; This function uses a non-reentrant model
 12269 ;;
 12270                           
 12271                           
 12272                           ;psect for function _i2c_write1ByteRegister
 12273  1377                     _i2c_write1ByteRegister:
 12274                           
 12275                           ;incstack = 0
 12276                           ; Regs used in _i2c_write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12277                           ;i2c_write1ByteRegister@address stored from wreg
 12278  1377  00B8               	movwf	i2c_write1ByteRegister@address
 12279  1378                     l4764:	
 12280                           ;mcc_generated_files/drivers/i2c_simple_master.c: 51: void i2c_write1ByteRegister(i2c_ad
      +                          dress_t address, uint8_t reg, uint8_t data);mcc_generated_files/drivers/i2c_simple_maste
      +                          r.c: 52: {;mcc_generated_files/drivers/i2c_simple_master.c: 53:     while(!I2C_Open(addr
      +                          ess));
 12281                           
 12282  1378  0838               	movf	i2c_write1ByteRegister@address,w
 12283  1379  3195  25E0  3193   	fcall	_I2C_Open
 12284  137C  3A00               	xorlw	0
 12285  137D  1903               	skipnz
 12286  137E  2B78               	goto	l4764
 12287                           
 12288                           ;mcc_generated_files/drivers/i2c_simple_master.c: 54:     I2C_SetDataCompleteCallback(wr
      +                          1RegCompleteHandler,&data);
 12289  137F  308B               	movlw	low _wr1RegCompleteHandler
 12290  1380  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 12291  1381  3010               	movlw	high _wr1RegCompleteHandler
 12292  1382  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 12293  1383  3037               	movlw	low i2c_write1ByteRegister@data
 12294  1384  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 12295  1385  3000               	movlw	high i2c_write1ByteRegister@data
 12296  1386  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 12297  1387  319F  27A5  3193   	fcall	_I2C_SetDataCompleteCallback
 12298                           
 12299                           ;mcc_generated_files/drivers/i2c_simple_master.c: 55:     I2C_SetBuffer(&reg,1);
 12300  138A  3036               	movlw	low i2c_write1ByteRegister@reg
 12301  138B  00A0               	movwf	I2C_SetBuffer@buffer
 12302  138C  3000               	movlw	high i2c_write1ByteRegister@reg
 12303  138D  00A1               	movwf	I2C_SetBuffer@buffer+1
 12304  138E  3001               	movlw	1
 12305  138F  00A2               	movwf	I2C_SetBuffer@bufferSize
 12306  1390  3000               	movlw	0
 12307  1391  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 12308  1392  3190  205E  3193   	fcall	_I2C_SetBuffer
 12309                           
 12310                           ;mcc_generated_files/drivers/i2c_simple_master.c: 56:     I2C_SetAddressNackCallback(((v
      +                          oid*)0),((void*)0));
 12311  1395  3000               	movlw	0
 12312  1396  0020               	movlb	0	; select bank0
 12313  1397  00A9               	movwf	I2C_SetAddressNackCallback@cb
 12314  1398  00AA               	movwf	I2C_SetAddressNackCallback@cb+1
 12315  1399  01AB               	clrf	I2C_SetAddressNackCallback@ptr
 12316  139A  319F  27B1  3193   	fcall	_I2C_SetAddressNackCallback
 12317                           
 12318                           ;mcc_generated_files/drivers/i2c_simple_master.c: 57:     I2C_MasterWrite();
 12319  139D  319F  2702  3193   	fcall	_I2C_MasterWrite
 12320  13A0                     l4774:	
 12321                           ;mcc_generated_files/drivers/i2c_simple_master.c: 58:     while(I2C_BUSY == I2C_Close())
      +                          ;
 12322                           
 12323  13A0  3191  21D0  3193   	fcall	_I2C_Close
 12324  13A3  3A01               	xorlw	1
 12325  13A4  1D03               	btfss	3,2
 12326  13A5  0008               	return
 12327  13A6  2BA0               	goto	l4774
 12328  13A7                     __end_of_i2c_write1ByteRegister:
 12329                           
 12330                           	psect	text52
 12331  1624                     __ptext52:	
 12332 ;; *************** function _i2c_read1ByteRegister *****************
 12333 ;; Defined at:
 12334 ;;		line 97 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12335 ;; Parameters:    Size  Location     Type
 12336 ;;  address         1    wreg     unsigned char 
 12337 ;;  reg             1   22[BANK0 ] unsigned char 
 12338 ;; Auto vars:     Size  Location     Type
 12339 ;;  address         1   24[BANK0 ] unsigned char 
 12340 ;;  x               2   26[BANK0 ] int 
 12341 ;;  d2              1   28[BANK0 ] unsigned char 
 12342 ;;  e               1   25[BANK0 ] enum E355
 12343 ;; Return value:  Size  Location     Type
 12344 ;;                  1    wreg      unsigned char 
 12345 ;; Registers used:
 12346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12347 ;; Tracked objects:
 12348 ;;		On entry : 1F/0
 12349 ;;		On exit  : 1F/0
 12350 ;;		Unchanged: 0/0
 12351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12352 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12353 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12355 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12356 ;;Total ram usage:        7 bytes
 12357 ;; Hardware stack levels used:    1
 12358 ;; Hardware stack levels required when called:   12
 12359 ;; This function calls:
 12360 ;;		_I2C_Close
 12361 ;;		_I2C_MasterWrite
 12362 ;;		_I2C_Open
 12363 ;;		_I2C_SetAddressNackCallback
 12364 ;;		_I2C_SetBuffer
 12365 ;;		_I2C_SetDataCompleteCallback
 12366 ;; This function is called by:
 12367 ;;		_APDS9960Init
 12368 ;;		_setMode
 12369 ;;		_readGesture
 12370 ;;		_setLEDDrive
 12371 ;;		_setProximityGain
 12372 ;;		_setAmbientLightGain
 12373 ;;		_setLEDBoost
 12374 ;;		_setGestureGain
 12375 ;;		_setGestureLEDDrive
 12376 ;;		_setGestureWaitTime
 12377 ;;		_setGestureIntEnable
 12378 ;;		_setGestureMode
 12379 ;; This function uses a non-reentrant model
 12380 ;;
 12381                           
 12382                           
 12383                           ;psect for function _i2c_read1ByteRegister
 12384  1624                     _i2c_read1ByteRegister:
 12385                           
 12386                           ;incstack = 0
 12387                           ; Regs used in _i2c_read1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12388                           ;i2c_read1ByteRegister@address stored from wreg
 12389  1624  00B8               	movwf	i2c_read1ByteRegister@address
 12390                           
 12391                           ;mcc_generated_files/drivers/i2c_simple_master.c: 97: uint8_t i2c_read1ByteRegister(i2c_
      +                          address_t address, uint8_t reg);mcc_generated_files/drivers/i2c_simple_master.c: 98: {;m
      +                          cc_generated_files/drivers/i2c_simple_master.c: 99:     uint8_t d2=42;
 12392  1625  302A               	movlw	42
 12393  1626  00B7               	movwf	??_i2c_read1ByteRegister
 12394  1627  0837               	movf	??_i2c_read1ByteRegister,w
 12395  1628  00BC               	movwf	i2c_read1ByteRegister@d2
 12396                           
 12397                           ;mcc_generated_files/drivers/i2c_simple_master.c: 100:     i2c_error_t e;;mcc_generated_
      +                          files/drivers/i2c_simple_master.c: 101:     int x;;mcc_generated_files/drivers/i2c_simpl
      +                          e_master.c: 103:     for(x = 2; x != 0; x--)
 12398  1629  3002               	movlw	2
 12399  162A  00BA               	movwf	i2c_read1ByteRegister@x
 12400  162B  3000               	movlw	0
 12401  162C  00BB               	movwf	i2c_read1ByteRegister@x+1
 12402  162D                     l4782:
 12403  162D  0838               	movf	i2c_read1ByteRegister@address,w
 12404  162E  3195  25E0  3196   	fcall	_I2C_Open
 12405  1631  3A00               	xorlw	0
 12406  1632  1903               	skipnz
 12407  1633  2E2D               	goto	l4782
 12408                           
 12409                           ;mcc_generated_files/drivers/i2c_simple_master.c: 106:         I2C_SetDataCompleteCallba
      +                          ck(rd1RegCompleteHandler,&d2);
 12410  1634  30A3               	movlw	low _rd1RegCompleteHandler
 12411  1635  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 12412  1636  3010               	movlw	high _rd1RegCompleteHandler
 12413  1637  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 12414  1638  303C               	movlw	low i2c_read1ByteRegister@d2
 12415  1639  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 12416  163A  3000               	movlw	high i2c_read1ByteRegister@d2
 12417  163B  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 12418  163C  319F  27A5  3196   	fcall	_I2C_SetDataCompleteCallback
 12419                           
 12420                           ;mcc_generated_files/drivers/i2c_simple_master.c: 107:         I2C_SetBuffer(&reg,1);
 12421  163F  3036               	movlw	low i2c_read1ByteRegister@reg
 12422  1640  00A0               	movwf	I2C_SetBuffer@buffer
 12423  1641  3000               	movlw	high i2c_read1ByteRegister@reg
 12424  1642  00A1               	movwf	I2C_SetBuffer@buffer+1
 12425  1643  3001               	movlw	1
 12426  1644  00A2               	movwf	I2C_SetBuffer@bufferSize
 12427  1645  3000               	movlw	0
 12428  1646  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 12429  1647  3190  205E  3196   	fcall	_I2C_SetBuffer
 12430                           
 12431                           ;mcc_generated_files/drivers/i2c_simple_master.c: 108:         I2C_SetAddressNackCallbac
      +                          k(((void*)0),((void*)0));
 12432  164A  3000               	movlw	0
 12433  164B  0020               	movlb	0	; select bank0
 12434  164C  00A9               	movwf	I2C_SetAddressNackCallback@cb
 12435  164D  00AA               	movwf	I2C_SetAddressNackCallback@cb+1
 12436  164E  01AB               	clrf	I2C_SetAddressNackCallback@ptr
 12437  164F  319F  27B1  3196   	fcall	_I2C_SetAddressNackCallback
 12438                           
 12439                           ;mcc_generated_files/drivers/i2c_simple_master.c: 109:         I2C_MasterWrite();
 12440  1652  319F  2702  3196   	fcall	_I2C_MasterWrite
 12441  1655                     l4792:	
 12442                           ;mcc_generated_files/drivers/i2c_simple_master.c: 110:         while(I2C_BUSY == (e = I2
      +                          C_Close()));
 12443                           
 12444  1655  3191  21D0  3196   	fcall	_I2C_Close
 12445  1658  00B7               	movwf	??_i2c_read1ByteRegister
 12446  1659  0837               	movf	??_i2c_read1ByteRegister,w
 12447  165A  00B9               	movwf	i2c_read1ByteRegister@e
 12448  165B  0339               	decf	i2c_read1ByteRegister@e,w
 12449  165C  1903               	btfsc	3,2
 12450  165D  2E55               	goto	l4792
 12451                           
 12452                           ;mcc_generated_files/drivers/i2c_simple_master.c: 111:         if(e==I2C_NOERR) break;
 12453  165E  0839               	movf	i2c_read1ByteRegister@e,w
 12454  165F  1903               	btfsc	3,2
 12455  1660  2E69               	goto	l4802
 12456                           
 12457                           ;mcc_generated_files/drivers/i2c_simple_master.c: 112:     }
 12458  1661  30FF               	movlw	255
 12459  1662  07BA               	addwf	i2c_read1ByteRegister@x,f
 12460  1663  30FF               	movlw	255
 12461  1664  3DBB               	addwfc	i2c_read1ByteRegister@x+1,f
 12462  1665  083A               	movf	i2c_read1ByteRegister@x,w
 12463  1666  043B               	iorwf	i2c_read1ByteRegister@x+1,w
 12464  1667  1D03               	btfss	3,2
 12465  1668  2E2D               	goto	l4782
 12466  1669                     l4802:
 12467                           
 12468                           ;mcc_generated_files/drivers/i2c_simple_master.c: 115:     return d2;
 12469  1669  083C               	movf	i2c_read1ByteRegister@d2,w
 12470  166A  0008               	return
 12471  166B                     __end_of_i2c_read1ByteRegister:
 12472                           
 12473                           	psect	text53
 12474  1FB1                     __ptext53:	
 12475 ;; *************** function _I2C_SetAddressNackCallback *****************
 12476 ;; Defined at:
 12477 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
 12478 ;; Parameters:    Size  Location     Type
 12479 ;;  cb              2    9[BANK0 ] PTR FTN(PTR void ,)enum 
 12480 ;;		 -> Absolute function(1), 
 12481 ;;  ptr             1   11[BANK0 ] PTR void 
 12482 ;;		 -> NULL(0), 
 12483 ;; Auto vars:     Size  Location     Type
 12484 ;;		None
 12485 ;; Return value:  Size  Location     Type
 12486 ;;                  1    wreg      void 
 12487 ;; Registers used:
 12488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12489 ;; Tracked objects:
 12490 ;;		On entry : 1F/0
 12491 ;;		On exit  : 1F/0
 12492 ;;		Unchanged: 0/0
 12493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12494 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12497 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12498 ;;Total ram usage:        3 bytes
 12499 ;; Hardware stack levels used:    1
 12500 ;; Hardware stack levels required when called:    5
 12501 ;; This function calls:
 12502 ;;		_I2C_SetCallback
 12503 ;; This function is called by:
 12504 ;;		_i2c_write1ByteRegister
 12505 ;;		_i2c_read1ByteRegister
 12506 ;;		_i2c_readDataBlock
 12507 ;; This function uses a non-reentrant model
 12508 ;;
 12509                           
 12510                           
 12511                           ;psect for function _I2C_SetAddressNackCallback
 12512  1FB1                     _I2C_SetAddressNackCallback:
 12513                           
 12514                           ;mcc_generated_files/i2c_master.c: 283: void I2C_SetAddressNackCallback(i2c_callback_t c
      +                          b, void *ptr);mcc_generated_files/i2c_master.c: 284: {;mcc_generated_files/i2c_master.c:
      +                           285:     I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
 12515                           
 12516                           ;incstack = 0
 12517                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12518  1FB1  082A               	movf	I2C_SetAddressNackCallback@cb+1,w
 12519  1FB2  00A1               	movwf	I2C_SetCallback@cb+1
 12520  1FB3  0829               	movf	I2C_SetAddressNackCallback@cb,w
 12521  1FB4  00A0               	movwf	I2C_SetCallback@cb
 12522  1FB5  082B               	movf	I2C_SetAddressNackCallback@ptr,w
 12523  1FB6  00A2               	movwf	I2C_SetCallback@ptr
 12524  1FB7  3000               	movlw	0
 12525  1FB8  00A3               	movwf	I2C_SetCallback@ptr+1
 12526  1FB9  3002               	movlw	2
 12527  1FBA  3197  2756         	fcall	_I2C_SetCallback
 12528  1FBC  0008               	return
 12529  1FBD                     __end_of_I2C_SetAddressNackCallback:
 12530                           
 12531                           	psect	text54
 12532  15E0                     __ptext54:	
 12533 ;; *************** function _I2C_Open *****************
 12534 ;; Defined at:
 12535 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
 12536 ;; Parameters:    Size  Location     Type
 12537 ;;  address         1    wreg     unsigned char 
 12538 ;; Auto vars:     Size  Location     Type
 12539 ;;  address         1    0[BANK0 ] unsigned char 
 12540 ;;  returnValue     1    1[BANK0 ] enum E355
 12541 ;; Return value:  Size  Location     Type
 12542 ;;                  1    wreg      enum E355
 12543 ;; Registers used:
 12544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12545 ;; Tracked objects:
 12546 ;;		On entry : 1F/0
 12547 ;;		On exit  : 1F/0
 12548 ;;		Unchanged: 0/0
 12549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12551 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12553 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12554 ;;Total ram usage:        2 bytes
 12555 ;; Hardware stack levels used:    1
 12556 ;; Hardware stack levels required when called:    5
 12557 ;; This function calls:
 12558 ;;		_I2C_MasterClearIrq
 12559 ;;		_I2C_MasterOpen
 12560 ;; This function is called by:
 12561 ;;		_i2c_write1ByteRegister
 12562 ;;		_i2c_read1ByteRegister
 12563 ;;		_i2c_readDataBlock
 12564 ;; This function uses a non-reentrant model
 12565 ;;
 12566                           
 12567                           
 12568                           ;psect for function _I2C_Open
 12569  15E0                     _I2C_Open:
 12570                           
 12571                           ;incstack = 0
 12572                           ; Regs used in _I2C_Open: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12573                           ;I2C_Open@address stored from wreg
 12574  15E0  00A0               	movwf	I2C_Open@address
 12575                           
 12576                           ;mcc_generated_files/i2c_master.c: 176: i2c_error_t I2C_Open(i2c_address_t address);mcc_
      +                          generated_files/i2c_master.c: 177: {;mcc_generated_files/i2c_master.c: 178:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
 12577  15E1  01A1               	clrf	I2C_Open@returnValue
 12578  15E2  0AA1               	incf	I2C_Open@returnValue,f
 12579                           
 12580                           ;mcc_generated_files/i2c_master.c: 180:     if(!I2C_Status.inUse)
 12581  15E3  0021               	movlb	1	; select bank1
 12582  15E4  1943               	btfsc	(_I2C_Status^(0+128)+35),2
 12583  15E5  2E21               	goto	l4734
 12584                           
 12585                           ;mcc_generated_files/i2c_master.c: 181:     {;mcc_generated_files/i2c_master.c: 182:    
      +                               I2C_Status.address = address;
 12586  15E6  30BC               	movlw	low (_I2C_Status+28)
 12587  15E7  0086               	movwf	6
 12588  15E8  3000               	movlw	high (_I2C_Status+28)
 12589  15E9  0087               	movwf	7
 12590  15EA  0020               	movlb	0	; select bank0
 12591  15EB  0820               	movf	I2C_Open@address,w
 12592  15EC  0081               	movwf	1
 12593                           
 12594                           ;mcc_generated_files/i2c_master.c: 183:         I2C_Status.busy = 0;
 12595  15ED  0021               	movlb	1	; select bank1
 12596  15EE  10C3               	bcf	(_I2C_Status^(0+128)+35),1
 12597                           
 12598                           ;mcc_generated_files/i2c_master.c: 184:         I2C_Status.inUse = 1;
 12599  15EF  1543               	bsf	(_I2C_Status^(0+128)+35),2
 12600                           
 12601                           ;mcc_generated_files/i2c_master.c: 185:         I2C_Status.addressNackCheck = 0;
 12602  15F0  1043               	bcf	(_I2C_Status^(0+128)+35),0
 12603                           
 12604                           ;mcc_generated_files/i2c_master.c: 186:         I2C_Status.state = I2C_RESET;
 12605  15F1  30C1               	movlw	low (_I2C_Status+33)
 12606  15F2  0086               	movwf	6
 12607  15F3  3000               	movlw	high (_I2C_Status+33)
 12608  15F4  0087               	movwf	7
 12609  15F5  300E               	movlw	14
 12610  15F6  0081               	movwf	1
 12611                           
 12612                           ;mcc_generated_files/i2c_master.c: 187:         I2C_Status.time_out_value = 500;
 12613  15F7  30F4               	movlw	244
 12614  15F8  00BA               	movwf	(_I2C_Status^(0+128)+26)
 12615  15F9  3001               	movlw	1
 12616  15FA  00BB               	movwf	(_I2C_Status^(0+128)+27)
 12617                           
 12618                           ;mcc_generated_files/i2c_master.c: 188:         I2C_Status.bufferFree = 1;
 12619  15FB  15C3               	bsf	(_I2C_Status^(0+128)+35),3
 12620                           
 12621                           ;mcc_generated_files/i2c_master.c: 191:         I2C_Status.callbackTable[I2C_DATA_COMPLE
      +                          TE]=I2C_CallbackReturnStop;
 12622  15FC  30B7               	movlw	low _I2C_CallbackReturnStop
 12623  15FD  00A0               	movwf	_I2C_Status^(0+128)
 12624  15FE  301E               	movlw	high _I2C_CallbackReturnStop
 12625  15FF  00A1               	movwf	(_I2C_Status^(0+128)+1)
 12626                           
 12627                           ;mcc_generated_files/i2c_master.c: 192:         I2C_Status.callbackPayload[I2C_DATA_COMP
      +                          LETE] = ((void*)0);
 12628  1600  01AC               	clrf	(_I2C_Status^(0+128)+12)
 12629  1601  01AD               	clrf	((_I2C_Status+1)^(0+128)+12)
 12630                           
 12631                           ;mcc_generated_files/i2c_master.c: 193:         I2C_Status.callbackTable[I2C_WRITE_COLLI
      +                          SION]=I2C_CallbackReturnStop;
 12632  1602  30B7               	movlw	low _I2C_CallbackReturnStop
 12633  1603  00A2               	movwf	(_I2C_Status^(0+128)+2)
 12634  1604  301E               	movlw	high _I2C_CallbackReturnStop
 12635  1605  00A3               	movwf	(_I2C_Status^(0+128)+3)
 12636                           
 12637                           ;mcc_generated_files/i2c_master.c: 194:         I2C_Status.callbackPayload[I2C_WRITE_COL
      +                          LISION] = ((void*)0);
 12638  1606  01AE               	clrf	(_I2C_Status^(0+128)+14)
 12639  1607  01AF               	clrf	((_I2C_Status+1)^(0+128)+14)
 12640                           
 12641                           ;mcc_generated_files/i2c_master.c: 195:         I2C_Status.callbackTable[I2C_ADDR_NACK]=
      +                          I2C_CallbackReturnStop;
 12642  1608  30B7               	movlw	low _I2C_CallbackReturnStop
 12643  1609  00A4               	movwf	(_I2C_Status^(0+128)+4)
 12644  160A  301E               	movlw	high _I2C_CallbackReturnStop
 12645  160B  00A5               	movwf	(_I2C_Status^(0+128)+5)
 12646                           
 12647                           ;mcc_generated_files/i2c_master.c: 196:         I2C_Status.callbackPayload[I2C_ADDR_NACK
      +                          ] = ((void*)0);
 12648  160C  01B0               	clrf	(_I2C_Status^(0+128)+16)
 12649  160D  01B1               	clrf	((_I2C_Status+1)^(0+128)+16)
 12650                           
 12651                           ;mcc_generated_files/i2c_master.c: 197:         I2C_Status.callbackTable[I2C_DATA_NACK]=
      +                          I2C_CallbackReturnStop;
 12652  160E  30B7               	movlw	low _I2C_CallbackReturnStop
 12653  160F  00A6               	movwf	(_I2C_Status^(0+128)+6)
 12654  1610  301E               	movlw	high _I2C_CallbackReturnStop
 12655  1611  00A7               	movwf	(_I2C_Status^(0+128)+7)
 12656                           
 12657                           ;mcc_generated_files/i2c_master.c: 198:         I2C_Status.callbackPayload[I2C_DATA_NACK
      +                          ] = ((void*)0);
 12658  1612  01B2               	clrf	(_I2C_Status^(0+128)+18)
 12659  1613  01B3               	clrf	((_I2C_Status+1)^(0+128)+18)
 12660                           
 12661                           ;mcc_generated_files/i2c_master.c: 199:         I2C_Status.callbackTable[I2C_TIMEOUT]=I2
      +                          C_CallbackReturnReset;
 12662  1614  30B9               	movlw	low _I2C_CallbackReturnReset
 12663  1615  00A8               	movwf	(_I2C_Status^(0+128)+8)
 12664  1616  301E               	movlw	high _I2C_CallbackReturnReset
 12665  1617  00A9               	movwf	(_I2C_Status^(0+128)+9)
 12666                           
 12667                           ;mcc_generated_files/i2c_master.c: 200:         I2C_Status.callbackPayload[I2C_TIMEOUT] 
      +                          = ((void*)0);
 12668  1618  01B4               	clrf	(_I2C_Status^(0+128)+20)
 12669  1619  01B5               	clrf	((_I2C_Status+1)^(0+128)+20)
 12670                           
 12671                           ;mcc_generated_files/i2c_master.c: 202:         I2C_MasterClearIrq();
 12672  161A  319E  26BE  3195   	fcall	_I2C_MasterClearIrq
 12673                           
 12674                           ;mcc_generated_files/i2c_master.c: 203:         I2C_MasterOpen();
 12675  161D  319F  279A         	fcall	_I2C_MasterOpen
 12676                           
 12677                           ;mcc_generated_files/i2c_master.c: 204:         returnValue = I2C_NOERR;
 12678  161F  0020               	movlb	0	; select bank0
 12679  1620  01A1               	clrf	I2C_Open@returnValue
 12680  1621                     l4734:
 12681                           
 12682                           ;mcc_generated_files/i2c_master.c: 206:     return returnValue;
 12683  1621  0020               	movlb	0	; select bank0
 12684  1622  0821               	movf	I2C_Open@returnValue,w
 12685  1623  0008               	return
 12686  1624                     __end_of_I2C_Open:
 12687                           
 12688                           	psect	text55
 12689  1F9A                     __ptext55:	
 12690 ;; *************** function _I2C_MasterOpen *****************
 12691 ;; Defined at:
 12692 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
 12693 ;; Parameters:    Size  Location     Type
 12694 ;;		None
 12695 ;; Auto vars:     Size  Location     Type
 12696 ;;		None
 12697 ;; Return value:  Size  Location     Type
 12698 ;;                  1    wreg      _Bool 
 12699 ;; Registers used:
 12700 ;;		wreg, status,2
 12701 ;; Tracked objects:
 12702 ;;		On entry : 1F/0
 12703 ;;		On exit  : 1F/4
 12704 ;;		Unchanged: 0/0
 12705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12710 ;;Total ram usage:        0 bytes
 12711 ;; Hardware stack levels used:    1
 12712 ;; Hardware stack levels required when called:    4
 12713 ;; This function calls:
 12714 ;;		Nothing
 12715 ;; This function is called by:
 12716 ;;		_I2C_Open
 12717 ;; This function uses a non-reentrant model
 12718 ;;
 12719                           
 12720                           
 12721                           ;psect for function _I2C_MasterOpen
 12722  1F9A                     _I2C_MasterOpen:
 12723                           
 12724                           ;mcc_generated_files/i2c_master.c: 545:     if(!SSPCON1bits.SSPEN)
 12725                           
 12726                           ;incstack = 0
 12727                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
 12728  1F9A  0024               	movlb	4	; select bank4
 12729  1F9B  1A95               	btfsc	21,5	;volatile
 12730  1F9C  0008               	return
 12731                           
 12732                           ;mcc_generated_files/i2c_master.c: 546:     {;mcc_generated_files/i2c_master.c: 547:    
      +                               SSPSTAT = 0x00;
 12733  1F9D  0194               	clrf	20	;volatile
 12734                           
 12735                           ;mcc_generated_files/i2c_master.c: 548:         SSPCON1 = 0x08;
 12736  1F9E  3008               	movlw	8
 12737  1F9F  0095               	movwf	21	;volatile
 12738                           
 12739                           ;mcc_generated_files/i2c_master.c: 549:         SSPCON2 = 0x00;
 12740  1FA0  0196               	clrf	22	;volatile
 12741                           
 12742                           ;mcc_generated_files/i2c_master.c: 550:         SSPADD = 0x4F;
 12743  1FA1  304F               	movlw	79
 12744  1FA2  0092               	movwf	18	;volatile
 12745                           
 12746                           ;mcc_generated_files/i2c_master.c: 551:         SSPCON1bits.SSPEN = 1;
 12747  1FA3  1695               	bsf	21,5	;volatile
 12748  1FA4  0008               	return
 12749  1FA5                     __end_of_I2C_MasterOpen:
 12750                           
 12751                           	psect	text56
 12752  1F02                     __ptext56:	
 12753 ;; *************** function _I2C_MasterWrite *****************
 12754 ;; Defined at:
 12755 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
 12756 ;; Parameters:    Size  Location     Type
 12757 ;;		None
 12758 ;; Auto vars:     Size  Location     Type
 12759 ;;		None
 12760 ;; Return value:  Size  Location     Type
 12761 ;;                  1    wreg      enum E355
 12762 ;; Registers used:
 12763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12764 ;; Tracked objects:
 12765 ;;		On entry : 1F/0
 12766 ;;		On exit  : 1F/0
 12767 ;;		Unchanged: 0/0
 12768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;Total ram usage:        0 bytes
 12774 ;; Hardware stack levels used:    1
 12775 ;; Hardware stack levels required when called:   11
 12776 ;; This function calls:
 12777 ;;		_I2C_MasterOperation
 12778 ;; This function is called by:
 12779 ;;		_i2c_write1ByteRegister
 12780 ;;		_i2c_read1ByteRegister
 12781 ;;		_i2c_readDataBlock
 12782 ;; This function uses a non-reentrant model
 12783 ;;
 12784                           
 12785                           
 12786                           ;psect for function _I2C_MasterWrite
 12787  1F02                     _I2C_MasterWrite:
 12788                           
 12789                           ;mcc_generated_files/i2c_master.c: 253:     return I2C_MasterOperation(0);;	Return value
      +                           of _I2C_MasterWrite is never used
 12790                           
 12791                           ;incstack = 0
 12792                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12793  1F02  3000               	movlw	0
 12794  1F03  3191  21ED         	fcall	_I2C_MasterOperation
 12795  1F05  0008               	return
 12796  1F06                     __end_of_I2C_MasterWrite:
 12797                           
 12798                           	psect	text57
 12799  11ED                     __ptext57:	
 12800 ;; *************** function _I2C_MasterOperation *****************
 12801 ;; Defined at:
 12802 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
 12803 ;; Parameters:    Size  Location     Type
 12804 ;;  read            1    wreg     _Bool 
 12805 ;; Auto vars:     Size  Location     Type
 12806 ;;  read            1   20[BANK0 ] _Bool 
 12807 ;;  returnValue     1   21[BANK0 ] enum E355
 12808 ;; Return value:  Size  Location     Type
 12809 ;;                  1    wreg      enum E355
 12810 ;; Registers used:
 12811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12812 ;; Tracked objects:
 12813 ;;		On entry : 1F/0
 12814 ;;		On exit  : 1F/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;Total ram usage:        2 bytes
 12822 ;; Hardware stack levels used:    1
 12823 ;; Hardware stack levels required when called:   10
 12824 ;; This function calls:
 12825 ;;		_I2C_MasterStart
 12826 ;;		_I2C_Poller
 12827 ;; This function is called by:
 12828 ;;		_I2C_MasterWrite
 12829 ;; This function uses a non-reentrant model
 12830 ;;
 12831                           
 12832                           
 12833                           ;psect for function _I2C_MasterOperation
 12834  11ED                     _I2C_MasterOperation:
 12835                           
 12836                           ;incstack = 0
 12837                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12838                           ;I2C_MasterOperation@read stored from wreg
 12839  11ED  00B4               	movwf	I2C_MasterOperation@read
 12840                           
 12841                           ;mcc_generated_files/i2c_master.c: 224: i2c_error_t I2C_MasterOperation(_Bool read);mcc_
      +                          generated_files/i2c_master.c: 225: {;mcc_generated_files/i2c_master.c: 226:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
 12842  11EE  01B5               	clrf	I2C_MasterOperation@returnValue
 12843  11EF  0AB5               	incf	I2C_MasterOperation@returnValue,f
 12844                           
 12845                           ;mcc_generated_files/i2c_master.c: 227:     if(!I2C_Status.busy)
 12846  11F0  0021               	movlb	1	; select bank1
 12847  11F1  18C3               	btfsc	(_I2C_Status^(0+128)+35),1
 12848  11F2  2A0A               	goto	l4688
 12849                           
 12850                           ;mcc_generated_files/i2c_master.c: 228:     {;mcc_generated_files/i2c_master.c: 229:    
      +                               I2C_Status.busy = 1;
 12851  11F3  14C3               	bsf	(_I2C_Status^(0+128)+35),1
 12852                           
 12853                           ;mcc_generated_files/i2c_master.c: 230:         returnValue = I2C_NOERR;
 12854  11F4  0020               	movlb	0	; select bank0
 12855  11F5  01B5               	clrf	I2C_MasterOperation@returnValue
 12856                           
 12857                           ;mcc_generated_files/i2c_master.c: 232:         if(read)
 12858  11F6  0834               	movf	I2C_MasterOperation@read,w
 12859  11F7  1903               	btfsc	3,2
 12860  11F8  29FF               	goto	l4682
 12861                           
 12862                           ;mcc_generated_files/i2c_master.c: 233:         {;mcc_generated_files/i2c_master.c: 234:
      +                                       I2C_Status.state = I2C_SEND_ADR_READ;
 12863  11F9  30C1               	movlw	low (_I2C_Status+33)
 12864  11FA  0086               	movwf	6
 12865  11FB  3000               	movlw	high (_I2C_Status+33)
 12866  11FC  0087               	movwf	7
 12867  11FD  3001               	movlw	1
 12868  11FE  2A04               	goto	L8
 12869  11FF                     l4682:	
 12870                           ;mcc_generated_files/i2c_master.c: 235:         }
 12871                           
 12872                           
 12873                           ;mcc_generated_files/i2c_master.c: 237:         {;mcc_generated_files/i2c_master.c: 238:
      +                                       I2C_Status.state = I2C_SEND_ADR_WRITE;
 12874  11FF  30C1               	movlw	low (_I2C_Status+33)
 12875  1200  0086               	movwf	6
 12876  1201  3000               	movlw	high (_I2C_Status+33)
 12877  1202  0087               	movwf	7
 12878  1203  3002               	movlw	2
 12879  1204                     L8:
 12880  1204  0081               	movwf	1
 12881                           
 12882                           ;mcc_generated_files/i2c_master.c: 240:         I2C_MasterStart();
 12883  1205  319E  26C7  3191   	fcall	_I2C_MasterStart
 12884                           
 12885                           ;mcc_generated_files/i2c_master.c: 241:         I2C_Poller();
 12886  1208  319F  2790         	fcall	_I2C_Poller
 12887  120A                     l4688:
 12888                           
 12889                           ;mcc_generated_files/i2c_master.c: 243:     return returnValue;
 12890  120A  0020               	movlb	0	; select bank0
 12891  120B  0835               	movf	I2C_MasterOperation@returnValue,w
 12892  120C  0008               	return
 12893  120D                     __end_of_I2C_MasterOperation:
 12894                           
 12895                           	psect	text58
 12896  1F90                     __ptext58:	
 12897 ;; *************** function _I2C_Poller *****************
 12898 ;; Defined at:
 12899 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
 12900 ;; Parameters:    Size  Location     Type
 12901 ;;		None
 12902 ;; Auto vars:     Size  Location     Type
 12903 ;;		None
 12904 ;; Return value:  Size  Location     Type
 12905 ;;                  1    wreg      void 
 12906 ;; Registers used:
 12907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12908 ;; Tracked objects:
 12909 ;;		On entry : 1F/4
 12910 ;;		On exit  : 1F/1
 12911 ;;		Unchanged: 0/0
 12912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12917 ;;Total ram usage:        0 bytes
 12918 ;; Hardware stack levels used:    1
 12919 ;; Hardware stack levels required when called:    9
 12920 ;; This function calls:
 12921 ;;		_I2C_MasterFsm
 12922 ;;		_I2C_MasterWaitForEvent
 12923 ;; This function is called by:
 12924 ;;		_I2C_MasterOperation
 12925 ;; This function uses a non-reentrant model
 12926 ;;
 12927                           
 12928                           
 12929                           ;psect for function _I2C_Poller
 12930  1F90                     _I2C_Poller:
 12931  1F90                     l4654:	
 12932                           ;mcc_generated_files/i2c_master.c: 314:     while(I2C_Status.busy)
 12933                           
 12934                           ;incstack = 0
 12935                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12936                           
 12937                           
 12938                           ;mcc_generated_files/i2c_master.c: 314:     while(I2C_Status.busy)
 12939  1F90  0021               	movlb	1	; select bank1
 12940  1F91  1CC3               	btfss	(_I2C_Status^(0+128)+35),1
 12941  1F92  0008               	return
 12942                           
 12943                           ;mcc_generated_files/i2c_master.c: 315:     {;mcc_generated_files/i2c_master.c: 316:    
      +                               I2C_MasterWaitForEvent();
 12944  1F93  319E  26FE  319F   	fcall	_I2C_MasterWaitForEvent
 12945                           
 12946                           ;mcc_generated_files/i2c_master.c: 317:         I2C_MasterFsm();
 12947  1F96  3193  234A  319F   	fcall	_I2C_MasterFsm
 12948  1F99  2F90               	goto	l4654
 12949  1F9A                     __end_of_I2C_Poller:
 12950                           
 12951                           	psect	text59
 12952  1EFE                     __ptext59:	
 12953 ;; *************** function _I2C_MasterWaitForEvent *****************
 12954 ;; Defined at:
 12955 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
 12956 ;; Parameters:    Size  Location     Type
 12957 ;;		None
 12958 ;; Auto vars:     Size  Location     Type
 12959 ;;		None
 12960 ;; Return value:  Size  Location     Type
 12961 ;;                  1    wreg      void 
 12962 ;; Registers used:
 12963 ;;		None
 12964 ;; Tracked objects:
 12965 ;;		On entry : 1A/1
 12966 ;;		On exit  : 1F/0
 12967 ;;		Unchanged: 0/0
 12968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;Total ram usage:        0 bytes
 12974 ;; Hardware stack levels used:    1
 12975 ;; Hardware stack levels required when called:    4
 12976 ;; This function calls:
 12977 ;;		Nothing
 12978 ;; This function is called by:
 12979 ;;		_I2C_Poller
 12980 ;; This function uses a non-reentrant model
 12981 ;;
 12982                           
 12983                           
 12984                           ;psect for function _I2C_MasterWaitForEvent
 12985  1EFE                     _I2C_MasterWaitForEvent:
 12986  1EFE                     l967:	
 12987                           ;incstack = 0
 12988                           ; Regs used in _I2C_MasterWaitForEvent: []
 12989                           ;mcc_generated_files/i2c_master.c: 652:     while(1)
 12990                           
 12991                           
 12992                           ;mcc_generated_files/i2c_master.c: 653:     {;mcc_generated_files/i2c_master.c: 654:    
      +                               if(PIR1bits.SSPIF)
 12993  1EFE  0020               	movlb	0	; select bank0
 12994  1EFF  1991               	btfsc	17,3	;volatile
 12995  1F00  0008               	return
 12996  1F01  2EFE               	goto	l967
 12997  1F02                     __end_of_I2C_MasterWaitForEvent:
 12998                           
 12999                           	psect	text60
 13000  134A                     __ptext60:	
 13001 ;; *************** function _I2C_MasterFsm *****************
 13002 ;; Defined at:
 13003 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
 13004 ;; Parameters:    Size  Location     Type
 13005 ;;		None
 13006 ;; Auto vars:     Size  Location     Type
 13007 ;;		None
 13008 ;; Return value:  Size  Location     Type
 13009 ;;                  1    wreg      void 
 13010 ;; Registers used:
 13011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13012 ;; Tracked objects:
 13013 ;;		On entry : 1F/0
 13014 ;;		On exit  : 1F/0
 13015 ;;		Unchanged: 0/0
 13016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13019 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13020 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;Total ram usage:        3 bytes
 13022 ;; Hardware stack levels used:    1
 13023 ;; Hardware stack levels required when called:    8
 13024 ;; This function calls:
 13025 ;;		_I2C_DO_ADDRESS_NACK
 13026 ;;		_I2C_DO_IDLE
 13027 ;;		_I2C_DO_RCEN
 13028 ;;		_I2C_DO_RESET
 13029 ;;		_I2C_DO_RX
 13030 ;;		_I2C_DO_RX_ACK
 13031 ;;		_I2C_DO_RX_NACK_RESTART
 13032 ;;		_I2C_DO_RX_NACK_STOP
 13033 ;;		_I2C_DO_SEND_ADR_READ
 13034 ;;		_I2C_DO_SEND_ADR_WRITE
 13035 ;;		_I2C_DO_SEND_RESTART
 13036 ;;		_I2C_DO_SEND_RESTART_READ
 13037 ;;		_I2C_DO_SEND_RESTART_WRITE
 13038 ;;		_I2C_DO_SEND_STOP
 13039 ;;		_I2C_DO_TX
 13040 ;;		_I2C_DO_TX_EMPTY
 13041 ;;		_I2C_MasterClearIrq
 13042 ;;		_I2C_MasterIsNack
 13043 ;; This function is called by:
 13044 ;;		_I2C_Poller
 13045 ;; This function uses a non-reentrant model
 13046 ;;
 13047                           
 13048                           
 13049                           ;psect for function _I2C_MasterFsm
 13050  134A                     _I2C_MasterFsm:
 13051                           
 13052                           ;mcc_generated_files/i2c_master.c: 323:     I2C_MasterClearIrq();
 13053                           
 13054                           ;incstack = 0
 13055                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13056  134A  319E  26BE  3193   	fcall	_I2C_MasterClearIrq
 13057                           
 13058                           ;mcc_generated_files/i2c_master.c: 325:     if(I2C_Status.addressNackCheck && I2C_Master
      +                          IsNack())
 13059  134D  0021               	movlb	1	; select bank1
 13060  134E  1C43               	btfss	(_I2C_Status^(0+128)+35),0
 13061  134F  2B5C               	goto	l4644
 13062  1350  319F  272B  3193   	fcall	_I2C_MasterIsNack
 13063  1353  3A00               	xorlw	0
 13064  1354  1903               	skipnz
 13065  1355  2B5C               	goto	l4644
 13066                           
 13067                           ;mcc_generated_files/i2c_master.c: 326:     {;mcc_generated_files/i2c_master.c: 327:    
      +                               I2C_Status.state = I2C_ADDRESS_NACK;
 13068  1356  30C1               	movlw	low (_I2C_Status+33)
 13069  1357  0086               	movwf	6
 13070  1358  3000               	movlw	high (_I2C_Status+33)
 13071  1359  0087               	movwf	7
 13072  135A  300F               	movlw	15
 13073  135B  0081               	movwf	1
 13074  135C                     l4644:
 13075                           
 13076                           ;mcc_generated_files/i2c_master.c: 329:     I2C_Status.state = i2c_fsmStateTable[I2C_Sta
      +                          tus.state]();
 13077  135C  0021               	movlb	1	; select bank1
 13078  135D  0841               	movf	(_I2C_Status^(0+128)+33),w
 13079  135E  0020               	movlb	0	; select bank0
 13080  135F  00B1               	movwf	??_I2C_MasterFsm
 13081  1360  01B2               	clrf	??_I2C_MasterFsm+1
 13082  1361  35B1               	lslf	??_I2C_MasterFsm,f
 13083  1362  0DB2               	rlf	??_I2C_MasterFsm+1,f
 13084  1363  3000               	movlw	low (_i2c_fsmStateTable| (0+32768))
 13085  1364  0731               	addwf	??_I2C_MasterFsm,w
 13086  1365  0084               	movwf	4
 13087  1366  3098               	movlw	high (_i2c_fsmStateTable| (0+32768))
 13088  1367  3D32               	addwfc	??_I2C_MasterFsm+1,w
 13089  1368  0085               	movwf	5
 13090  1369  3F01               	moviw [1]fsr0
 13091  136A  008A               	movwf	10
 13092  136B  3F00               	moviw [0]fsr0
 13093  136C  000A               	callw
 13094  136D  3193               	pagesel	$
 13095  136E  0020               	movlb	0	; select bank0
 13096  136F  00B3               	movwf	??_I2C_MasterFsm+2
 13097  1370  30C1               	movlw	low (_I2C_Status+33)
 13098  1371  0086               	movwf	6
 13099  1372  3000               	movlw	high (_I2C_Status+33)
 13100  1373  0087               	movwf	7
 13101  1374  0833               	movf	??_I2C_MasterFsm+2,w
 13102  1375  0081               	movwf	1
 13103  1376  0008               	return
 13104  1377                     __end_of_I2C_MasterFsm:
 13105                           
 13106                           	psect	text61
 13107  1498                     __ptext61:	
 13108 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
 13109 ;; Defined at:
 13110 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
 13111 ;; Parameters:    Size  Location     Type
 13112 ;;		None
 13113 ;; Auto vars:     Size  Location     Type
 13114 ;;		None
 13115 ;; Return value:  Size  Location     Type
 13116 ;;                  1    wreg      enum E3090
 13117 ;; Registers used:
 13118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13119 ;; Tracked objects:
 13120 ;;		On entry : 1F/0
 13121 ;;		On exit  : 1F/4
 13122 ;;		Unchanged: 0/0
 13123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13126 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13127 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13128 ;;Total ram usage:        2 bytes
 13129 ;; Hardware stack levels used:    1
 13130 ;; Hardware stack levels required when called:    7
 13131 ;; This function calls:
 13132 ;;		Absolute function
 13133 ;;		_I2C_CallbackReturnReset
 13134 ;;		_I2C_CallbackReturnStop
 13135 ;;		_I2C_DO_SEND_RESTART
 13136 ;;		_I2C_DO_SEND_STOP
 13137 ;;		_rd1RegCompleteHandler
 13138 ;;		_rd1RegCompleteHandler@i2c_master_example$F143
 13139 ;;		_rd2RegCompleteHandler
 13140 ;;		_rd2RegCompleteHandler@i2c_master_example$F154
 13141 ;;		_rdBlkRegCompleteHandler
 13142 ;;		_rdBlkRegCompleteHandler@i2c_master_example$F177
 13143 ;;		_wr1RegCompleteHandler
 13144 ;;		_wr1RegCompleteHandler@i2c_master_example$F160
 13145 ;;		_wr2RegCompleteHandler
 13146 ;;		_wr2RegCompleteHandler@i2c_master_example$F166
 13147 ;; This function is called by:
 13148 ;;		_I2C_MasterFsm
 13149 ;; This function uses a non-reentrant model
 13150 ;;
 13151                           
 13152                           
 13153                           ;psect for function _I2C_DO_ADDRESS_NACK
 13154  1498                     _I2C_DO_ADDRESS_NACK:
 13155                           
 13156                           ;mcc_generated_files/i2c_master.c: 502:     I2C_Status.addressNackCheck = 0;
 13157                           
 13158                           ;incstack = 0
 13159                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13160  1498  0021               	movlb	1	; select bank1
 13161  1499  1043               	bcf	(_I2C_Status^(0+128)+35),0
 13162                           
 13163                           ;mcc_generated_files/i2c_master.c: 503:     I2C_Status.error = I2C_FAIL;
 13164  149A  30C2               	movlw	low (_I2C_Status+34)
 13165  149B  0086               	movwf	6
 13166  149C  3000               	movlw	high (_I2C_Status+34)
 13167  149D  0087               	movwf	7
 13168  149E  3002               	movlw	2
 13169  149F  0081               	movwf	1
 13170                           
 13171                           ;mcc_generated_files/i2c_master.c: 504:     switch(I2C_Status.callbackTable[I2C_ADDR_NAC
      +                          K](I2C_Status.callbackPayload[I2C_ADDR_NACK]))
 13172  14A0  2CA7               	goto	l4628
 13173  14A1                     l4618:
 13174                           
 13175                           ;mcc_generated_files/i2c_master.c: 508:             return I2C_DO_SEND_RESTART();
 13176  14A1  319E  26EA         	fcall	_I2C_DO_SEND_RESTART
 13177  14A3  0008               	return
 13178  14A4                     l4622:
 13179                           
 13180                           ;mcc_generated_files/i2c_master.c: 510:             return I2C_DO_SEND_STOP();
 13181  14A4  319E  26EE         	fcall	_I2C_DO_SEND_STOP
 13182  14A6  0008               	return
 13183  14A7                     l4628:
 13184  14A7  0831               	movf	((_I2C_Status+1)^(0+128)+16),w
 13185  14A8  0020               	movlb	0	; select bank0
 13186  14A9  00AE               	movwf	I2C_CallbackReturnReset@funPtr+1
 13187  14AA  0021               	movlb	1	; select bank1
 13188  14AB  0830               	movf	(_I2C_Status^(0+128)+16),w
 13189  14AC  0020               	movlb	0	; select bank0
 13190  14AD  00AD               	movwf	I2C_CallbackReturnReset@funPtr
 13191  14AE  30A0               	movlw	low _I2C_Status
 13192  14AF  0086               	movwf	6
 13193  14B0  3000               	movlw	high _I2C_Status
 13194  14B1  0087               	movwf	7
 13195  14B2  3144               	addfsr 1,4
 13196  14B3  3F41               	moviw [1]fsr1
 13197  14B4  008A               	movwf	10
 13198  14B5  3F40               	moviw [0]fsr1
 13199  14B6  000A               	callw
 13200  14B7  3194               	pagesel	$
 13201  14B8  0020               	movlb	0	; select bank0
 13202  14B9  00AF               	movwf	??_I2C_DO_ADDRESS_NACK
 13203  14BA  01B0               	clrf	??_I2C_DO_ADDRESS_NACK+1
 13204                           
 13205                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13206                           ; Switch size 1, requested type "simple"
 13207                           ; Number of cases is 1, Range of values is 0 to 0
 13208                           ; switch strategies available:
 13209                           ; Name         Instructions Cycles
 13210                           ; simple_byte            4     3 (average)
 13211                           ; direct_byte            8     6 (fixed)
 13212                           ; jumptable            260     6 (fixed)
 13213                           ;	Chosen strategy is simple_byte
 13214  14BB  0830               	movf	??_I2C_DO_ADDRESS_NACK+1,w
 13215  14BC  3A00               	xorlw	0	; case 0
 13216  14BD  1903               	skipnz
 13217  14BE  2CC0               	goto	l6172
 13218  14BF  2CA4               	goto	l4622
 13219  14C0                     l6172:
 13220                           
 13221                           ; Switch size 1, requested type "simple"
 13222                           ; Number of cases is 2, Range of values is 2 to 3
 13223                           ; switch strategies available:
 13224                           ; Name         Instructions Cycles
 13225                           ; simple_byte            7     4 (average)
 13226                           ; direct_byte           13     9 (fixed)
 13227                           ; jumptable            263     9 (fixed)
 13228                           ;	Chosen strategy is simple_byte
 13229  14C0  082F               	movf	??_I2C_DO_ADDRESS_NACK,w
 13230  14C1  3A02               	xorlw	2	; case 2
 13231  14C2  1903               	skipnz
 13232  14C3  2CA1               	goto	l4618
 13233  14C4  3A01               	xorlw	1	; case 3
 13234  14C5  1903               	skipnz
 13235  14C6  2CA1               	goto	l4618
 13236  14C7  2CA4               	goto	l4622
 13237  14C8  0008               	return
 13238  14C9                     __end_of_I2C_DO_ADDRESS_NACK:
 13239                           
 13240                           	psect	text62
 13241  1F0F                     __ptext62:	
 13242 ;; *************** function _I2C_DO_RESET *****************
 13243 ;; Defined at:
 13244 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
 13245 ;; Parameters:    Size  Location     Type
 13246 ;;		None
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;		None
 13249 ;; Return value:  Size  Location     Type
 13250 ;;                  1    wreg      enum E3090
 13251 ;; Registers used:
 13252 ;;		wreg, status,2
 13253 ;; Tracked objects:
 13254 ;;		On entry : 1F/0
 13255 ;;		On exit  : 1F/1
 13256 ;;		Unchanged: 0/0
 13257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;Total ram usage:        0 bytes
 13263 ;; Hardware stack levels used:    1
 13264 ;; Hardware stack levels required when called:    4
 13265 ;; This function calls:
 13266 ;;		Nothing
 13267 ;; This function is called by:
 13268 ;;		_I2C_MasterFsm
 13269 ;; This function uses a non-reentrant model
 13270 ;;
 13271                           
 13272                           
 13273                           ;psect for function _I2C_DO_RESET
 13274  1F0F                     _I2C_DO_RESET:
 13275                           
 13276                           ;mcc_generated_files/i2c_master.c: 496:     I2C_Status.busy = 0;
 13277                           
 13278                           ;incstack = 0
 13279                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
 13280  1F0F  0021               	movlb	1	; select bank1
 13281  1F10  10C3               	bcf	(_I2C_Status^(0+128)+35),1
 13282                           
 13283                           ;mcc_generated_files/i2c_master.c: 497:     I2C_Status.error = I2C_NOERR;
 13284  1F11  01C2               	clrf	(_I2C_Status^(0+128)+34)
 13285                           
 13286                           ;mcc_generated_files/i2c_master.c: 498:     return I2C_RESET;
 13287  1F12  300E               	movlw	14
 13288  1F13  0008               	return
 13289  1F14                     __end_of_I2C_DO_RESET:
 13290                           
 13291                           	psect	text63
 13292  1EFA                     __ptext63:	
 13293 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
 13294 ;; Defined at:
 13295 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
 13296 ;; Parameters:    Size  Location     Type
 13297 ;;		None
 13298 ;; Auto vars:     Size  Location     Type
 13299 ;;		None
 13300 ;; Return value:  Size  Location     Type
 13301 ;;                  1    wreg      enum E3090
 13302 ;; Registers used:
 13303 ;;		wreg, status,2, status,0, pclath, cstack
 13304 ;; Tracked objects:
 13305 ;;		On entry : 1F/0
 13306 ;;		On exit  : 1F/4
 13307 ;;		Unchanged: 0/0
 13308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;Total ram usage:        0 bytes
 13314 ;; Hardware stack levels used:    1
 13315 ;; Hardware stack levels required when called:    5
 13316 ;; This function calls:
 13317 ;;		_I2C_MasterSendNack
 13318 ;; This function is called by:
 13319 ;;		_I2C_DO_RX
 13320 ;;		_I2C_MasterFsm
 13321 ;; This function uses a non-reentrant model
 13322 ;;
 13323                           
 13324                           
 13325                           ;psect for function _I2C_DO_RX_NACK_RESTART
 13326  1EFA                     _I2C_DO_RX_NACK_RESTART:
 13327                           
 13328                           ;mcc_generated_files/i2c_master.c: 490:     I2C_MasterSendNack();
 13329                           
 13330                           ;incstack = 0
 13331                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 13332  1EFA  319E  26DA         	fcall	_I2C_MasterSendNack
 13333                           
 13334                           ;mcc_generated_files/i2c_master.c: 491:     return I2C_SEND_RESTART;
 13335  1EFC  3009               	movlw	9
 13336  1EFD  0008               	return
 13337  1EFE                     __end_of_I2C_DO_RX_NACK_RESTART:
 13338                           
 13339                           	psect	text64
 13340  1EF6                     __ptext64:	
 13341 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
 13342 ;; Defined at:
 13343 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
 13344 ;; Parameters:    Size  Location     Type
 13345 ;;		None
 13346 ;; Auto vars:     Size  Location     Type
 13347 ;;		None
 13348 ;; Return value:  Size  Location     Type
 13349 ;;                  1    wreg      enum E3090
 13350 ;; Registers used:
 13351 ;;		wreg, status,2, status,0, pclath, cstack
 13352 ;; Tracked objects:
 13353 ;;		On entry : 1F/0
 13354 ;;		On exit  : 1F/4
 13355 ;;		Unchanged: 0/0
 13356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13361 ;;Total ram usage:        0 bytes
 13362 ;; Hardware stack levels used:    1
 13363 ;; Hardware stack levels required when called:    5
 13364 ;; This function calls:
 13365 ;;		_I2C_MasterSendNack
 13366 ;; This function is called by:
 13367 ;;		_I2C_DO_RX
 13368 ;;		_I2C_MasterFsm
 13369 ;; This function uses a non-reentrant model
 13370 ;;
 13371                           
 13372                           
 13373                           ;psect for function _I2C_DO_RX_NACK_STOP
 13374  1EF6                     _I2C_DO_RX_NACK_STOP:
 13375                           
 13376                           ;mcc_generated_files/i2c_master.c: 484:     I2C_MasterSendNack();
 13377                           
 13378                           ;incstack = 0
 13379                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 13380  1EF6  319E  26DA         	fcall	_I2C_MasterSendNack
 13381                           
 13382                           ;mcc_generated_files/i2c_master.c: 485:     return I2C_SEND_STOP;
 13383  1EF8  300A               	movlw	10
 13384  1EF9  0008               	return
 13385  1EFA                     __end_of_I2C_DO_RX_NACK_STOP:
 13386                           
 13387                           	psect	text65
 13388  1EF2                     __ptext65:	
 13389 ;; *************** function _I2C_DO_RX_ACK *****************
 13390 ;; Defined at:
 13391 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
 13392 ;; Parameters:    Size  Location     Type
 13393 ;;		None
 13394 ;; Auto vars:     Size  Location     Type
 13395 ;;		None
 13396 ;; Return value:  Size  Location     Type
 13397 ;;                  1    wreg      enum E3090
 13398 ;; Registers used:
 13399 ;;		wreg, status,2, status,0, pclath, cstack
 13400 ;; Tracked objects:
 13401 ;;		On entry : 1F/0
 13402 ;;		On exit  : 1F/4
 13403 ;;		Unchanged: 0/0
 13404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;Total ram usage:        0 bytes
 13410 ;; Hardware stack levels used:    1
 13411 ;; Hardware stack levels required when called:    5
 13412 ;; This function calls:
 13413 ;;		_I2C_MasterSendAck
 13414 ;; This function is called by:
 13415 ;;		_I2C_MasterFsm
 13416 ;; This function uses a non-reentrant model
 13417 ;;
 13418                           
 13419                           
 13420                           ;psect for function _I2C_DO_RX_ACK
 13421  1EF2                     _I2C_DO_RX_ACK:
 13422                           
 13423                           ;mcc_generated_files/i2c_master.c: 477:     I2C_MasterSendAck();
 13424                           
 13425                           ;incstack = 0
 13426                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
 13427  1EF2  319E  26DE         	fcall	_I2C_MasterSendAck
 13428                           
 13429                           ;mcc_generated_files/i2c_master.c: 478:     return I2C_RCEN;
 13430  1EF4  3005               	movlw	5
 13431  1EF5  0008               	return
 13432  1EF6                     __end_of_I2C_DO_RX_ACK:
 13433                           
 13434                           	psect	text66
 13435  1EEE                     __ptext66:	
 13436 ;; *************** function _I2C_DO_SEND_STOP *****************
 13437 ;; Defined at:
 13438 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
 13439 ;; Parameters:    Size  Location     Type
 13440 ;;		None
 13441 ;; Auto vars:     Size  Location     Type
 13442 ;;		None
 13443 ;; Return value:  Size  Location     Type
 13444 ;;                  1    wreg      enum E3090
 13445 ;; Registers used:
 13446 ;;		wreg, status,2, status,0, pclath, cstack
 13447 ;; Tracked objects:
 13448 ;;		On entry : 1F/0
 13449 ;;		On exit  : 1F/4
 13450 ;;		Unchanged: 0/0
 13451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13456 ;;Total ram usage:        0 bytes
 13457 ;; Hardware stack levels used:    1
 13458 ;; Hardware stack levels required when called:    5
 13459 ;; This function calls:
 13460 ;;		_I2C_MasterStop
 13461 ;; This function is called by:
 13462 ;;		_I2C_DO_TX
 13463 ;;		_I2C_DO_TX_EMPTY
 13464 ;;		_I2C_DO_ADDRESS_NACK
 13465 ;;		_I2C_MasterFsm
 13466 ;; This function uses a non-reentrant model
 13467 ;;
 13468                           
 13469                           
 13470                           ;psect for function _I2C_DO_SEND_STOP
 13471  1EEE                     _I2C_DO_SEND_STOP:
 13472                           
 13473                           ;mcc_generated_files/i2c_master.c: 471:     I2C_MasterStop();
 13474                           
 13475                           ;incstack = 0
 13476                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 13477  1EEE  319E  26CD         	fcall	_I2C_MasterStop
 13478                           
 13479                           ;mcc_generated_files/i2c_master.c: 472:     return I2C_IDLE;
 13480  1EF0  3000               	movlw	0
 13481  1EF1  0008               	return
 13482  1EF2                     __end_of_I2C_DO_SEND_STOP:
 13483                           
 13484                           	psect	text67
 13485  1EEA                     __ptext67:	
 13486 ;; *************** function _I2C_DO_SEND_RESTART *****************
 13487 ;; Defined at:
 13488 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
 13489 ;; Parameters:    Size  Location     Type
 13490 ;;		None
 13491 ;; Auto vars:     Size  Location     Type
 13492 ;;		None
 13493 ;; Return value:  Size  Location     Type
 13494 ;;                  1    wreg      enum E3090
 13495 ;; Registers used:
 13496 ;;		wreg, status,2, status,0, pclath, cstack
 13497 ;; Tracked objects:
 13498 ;;		On entry : 1F/0
 13499 ;;		On exit  : 1F/4
 13500 ;;		Unchanged: 0/0
 13501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13506 ;;Total ram usage:        0 bytes
 13507 ;; Hardware stack levels used:    1
 13508 ;; Hardware stack levels required when called:    5
 13509 ;; This function calls:
 13510 ;;		_I2C_MasterEnableRestart
 13511 ;; This function is called by:
 13512 ;;		_I2C_DO_TX_EMPTY
 13513 ;;		_I2C_DO_ADDRESS_NACK
 13514 ;;		_I2C_MasterFsm
 13515 ;; This function uses a non-reentrant model
 13516 ;;
 13517                           
 13518                           
 13519                           ;psect for function _I2C_DO_SEND_RESTART
 13520  1EEA                     _I2C_DO_SEND_RESTART:
 13521                           
 13522                           ;mcc_generated_files/i2c_master.c: 465:     I2C_MasterEnableRestart();
 13523                           
 13524                           ;incstack = 0
 13525                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 13526  1EEA  319E  26CA         	fcall	_I2C_MasterEnableRestart
 13527                           
 13528                           ;mcc_generated_files/i2c_master.c: 466:     return I2C_SEND_ADR_READ;
 13529  1EEC  3001               	movlw	1
 13530  1EED  0008               	return
 13531  1EEE                     __end_of_I2C_DO_SEND_RESTART:
 13532                           
 13533                           	psect	text68
 13534  1EE6                     __ptext68:	
 13535 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
 13536 ;; Defined at:
 13537 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
 13538 ;; Parameters:    Size  Location     Type
 13539 ;;		None
 13540 ;; Auto vars:     Size  Location     Type
 13541 ;;		None
 13542 ;; Return value:  Size  Location     Type
 13543 ;;                  1    wreg      enum E3090
 13544 ;; Registers used:
 13545 ;;		wreg, status,2, status,0, pclath, cstack
 13546 ;; Tracked objects:
 13547 ;;		On entry : 1F/0
 13548 ;;		On exit  : 1F/4
 13549 ;;		Unchanged: 0/0
 13550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13555 ;;Total ram usage:        0 bytes
 13556 ;; Hardware stack levels used:    1
 13557 ;; Hardware stack levels required when called:    5
 13558 ;; This function calls:
 13559 ;;		_I2C_MasterEnableRestart
 13560 ;; This function is called by:
 13561 ;;		_I2C_DO_TX
 13562 ;;		_I2C_MasterFsm
 13563 ;; This function uses a non-reentrant model
 13564 ;;
 13565                           
 13566                           
 13567                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
 13568  1EE6                     _I2C_DO_SEND_RESTART_WRITE:
 13569                           
 13570                           ;mcc_generated_files/i2c_master.c: 458:     I2C_MasterEnableRestart();
 13571                           
 13572                           ;incstack = 0
 13573                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 13574  1EE6  319E  26CA         	fcall	_I2C_MasterEnableRestart
 13575                           
 13576                           ;mcc_generated_files/i2c_master.c: 459:     return I2C_SEND_ADR_WRITE;
 13577  1EE8  3002               	movlw	2
 13578  1EE9  0008               	return
 13579  1EEA                     __end_of_I2C_DO_SEND_RESTART_WRITE:
 13580                           
 13581                           	psect	text69
 13582  1EE2                     __ptext69:	
 13583 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
 13584 ;; Defined at:
 13585 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
 13586 ;; Parameters:    Size  Location     Type
 13587 ;;		None
 13588 ;; Auto vars:     Size  Location     Type
 13589 ;;		None
 13590 ;; Return value:  Size  Location     Type
 13591 ;;                  1    wreg      enum E3090
 13592 ;; Registers used:
 13593 ;;		wreg, status,2, status,0, pclath, cstack
 13594 ;; Tracked objects:
 13595 ;;		On entry : 1F/0
 13596 ;;		On exit  : 1F/4
 13597 ;;		Unchanged: 0/0
 13598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;Total ram usage:        0 bytes
 13604 ;; Hardware stack levels used:    1
 13605 ;; Hardware stack levels required when called:    5
 13606 ;; This function calls:
 13607 ;;		_I2C_MasterEnableRestart
 13608 ;; This function is called by:
 13609 ;;		_I2C_DO_TX
 13610 ;;		_I2C_MasterFsm
 13611 ;; This function uses a non-reentrant model
 13612 ;;
 13613                           
 13614                           
 13615                           ;psect for function _I2C_DO_SEND_RESTART_READ
 13616  1EE2                     _I2C_DO_SEND_RESTART_READ:
 13617                           
 13618                           ;mcc_generated_files/i2c_master.c: 452:     I2C_MasterEnableRestart();
 13619                           
 13620                           ;incstack = 0
 13621                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 13622  1EE2  319E  26CA         	fcall	_I2C_MasterEnableRestart
 13623                           
 13624                           ;mcc_generated_files/i2c_master.c: 453:     return I2C_SEND_ADR_READ;
 13625  1EE4  3001               	movlw	1
 13626  1EE5  0008               	return
 13627  1EE6                     __end_of_I2C_DO_SEND_RESTART_READ:
 13628                           
 13629                           	psect	text70
 13630  1F31                     __ptext70:	
 13631 ;; *************** function _I2C_DO_RCEN *****************
 13632 ;; Defined at:
 13633 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
 13634 ;; Parameters:    Size  Location     Type
 13635 ;;		None
 13636 ;; Auto vars:     Size  Location     Type
 13637 ;;		None
 13638 ;; Return value:  Size  Location     Type
 13639 ;;                  1    wreg      enum E3090
 13640 ;; Registers used:
 13641 ;;		wreg, status,2, status,0, pclath, cstack
 13642 ;; Tracked objects:
 13643 ;;		On entry : 1F/0
 13644 ;;		On exit  : 1F/4
 13645 ;;		Unchanged: 0/0
 13646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;Total ram usage:        0 bytes
 13652 ;; Hardware stack levels used:    1
 13653 ;; Hardware stack levels required when called:    5
 13654 ;; This function calls:
 13655 ;;		_I2C_MasterStartRx
 13656 ;; This function is called by:
 13657 ;;		_I2C_MasterFsm
 13658 ;; This function uses a non-reentrant model
 13659 ;;
 13660                           
 13661                           
 13662                           ;psect for function _I2C_DO_RCEN
 13663  1F31                     _I2C_DO_RCEN:
 13664                           
 13665                           ;mcc_generated_files/i2c_master.c: 404:     I2C_Status.addressNackCheck = 0;
 13666                           
 13667                           ;incstack = 0
 13668                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 13669  1F31  0021               	movlb	1	; select bank1
 13670  1F32  1043               	bcf	(_I2C_Status^(0+128)+35),0
 13671                           
 13672                           ;mcc_generated_files/i2c_master.c: 405:     I2C_MasterStartRx();
 13673  1F33  319E  26D0         	fcall	_I2C_MasterStartRx
 13674                           
 13675                           ;mcc_generated_files/i2c_master.c: 406:     return I2C_RX;
 13676  1F35  3004               	movlw	4
 13677  1F36  0008               	return
 13678  1F37                     __end_of_I2C_DO_RCEN:
 13679                           
 13680                           	psect	text71
 13681  166B                     __ptext71:	
 13682 ;; *************** function _I2C_DO_RX *****************
 13683 ;; Defined at:
 13684 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
 13685 ;; Parameters:    Size  Location     Type
 13686 ;;		None
 13687 ;; Auto vars:     Size  Location     Type
 13688 ;;		None
 13689 ;; Return value:  Size  Location     Type
 13690 ;;                  1    wreg      enum E3090
 13691 ;; Registers used:
 13692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13693 ;; Tracked objects:
 13694 ;;		On entry : 1F/0
 13695 ;;		On exit  : 1F/4
 13696 ;;		Unchanged: 0/0
 13697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13700 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13701 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13702 ;;Total ram usage:        2 bytes
 13703 ;; Hardware stack levels used:    1
 13704 ;; Hardware stack levels required when called:    7
 13705 ;; This function calls:
 13706 ;;		Absolute function
 13707 ;;		_I2C_CallbackReturnReset
 13708 ;;		_I2C_CallbackReturnStop
 13709 ;;		_I2C_DO_RX_NACK_RESTART
 13710 ;;		_I2C_DO_RX_NACK_STOP
 13711 ;;		_I2C_MasterGetRxData
 13712 ;;		_I2C_MasterSendAck
 13713 ;;		_rd1RegCompleteHandler
 13714 ;;		_rd1RegCompleteHandler@i2c_master_example$F143
 13715 ;;		_rd2RegCompleteHandler
 13716 ;;		_rd2RegCompleteHandler@i2c_master_example$F154
 13717 ;;		_rdBlkRegCompleteHandler
 13718 ;;		_rdBlkRegCompleteHandler@i2c_master_example$F177
 13719 ;;		_wr1RegCompleteHandler
 13720 ;;		_wr1RegCompleteHandler@i2c_master_example$F160
 13721 ;;		_wr2RegCompleteHandler
 13722 ;;		_wr2RegCompleteHandler@i2c_master_example$F166
 13723 ;; This function is called by:
 13724 ;;		_I2C_MasterFsm
 13725 ;; This function uses a non-reentrant model
 13726 ;;
 13727                           
 13728                           
 13729                           ;psect for function _I2C_DO_RX
 13730  166B                     _I2C_DO_RX:
 13731                           
 13732                           ;mcc_generated_files/i2c_master.c: 380:     *I2C_Status.data_ptr++ = I2C_MasterGetRxData
      +                          ();
 13733                           
 13734                           ;incstack = 0
 13735                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13736  166B  319E  26D3  3196   	fcall	_I2C_MasterGetRxData
 13737  166E  0020               	movlb	0	; select bank0
 13738  166F  00AF               	movwf	??_I2C_DO_RX
 13739  1670  0021               	movlb	1	; select bank1
 13740  1671  083D               	movf	(_I2C_Status^(0+128)+29),w
 13741  1672  0086               	movwf	6
 13742  1673  083E               	movf	((_I2C_Status+1)^(0+128)+29),w
 13743  1674  0087               	movwf	7
 13744  1675  0020               	movlb	0	; select bank0
 13745  1676  082F               	movf	??_I2C_DO_RX,w
 13746  1677  0081               	movwf	1
 13747  1678  3001               	movlw	1
 13748  1679  0021               	movlb	1	; select bank1
 13749  167A  07BD               	addwf	(_I2C_Status^(0+128)+29),f
 13750  167B  3000               	movlw	0
 13751  167C  3DBE               	addwfc	((_I2C_Status+1)^(0+128)+29),f
 13752                           
 13753                           ;mcc_generated_files/i2c_master.c: 381:     if(--I2C_Status.data_length)
 13754  167D  3001               	movlw	1
 13755  167E  02BF               	subwf	(_I2C_Status^(0+128)+31),f
 13756  167F  3000               	movlw	0
 13757  1680  3BC0               	subwfb	((_I2C_Status+1)^(0+128)+31),f
 13758  1681  083F               	movf	(_I2C_Status^(0+128)+31),w
 13759  1682  0440               	iorwf	((_I2C_Status+1)^(0+128)+31),w
 13760  1683  1903               	btfsc	3,2
 13761  1684  2E89               	goto	l826
 13762                           
 13763                           ;mcc_generated_files/i2c_master.c: 382:     {;mcc_generated_files/i2c_master.c: 383:    
      +                               I2C_MasterSendAck();
 13764  1685  319E  26DE         	fcall	_I2C_MasterSendAck
 13765                           
 13766                           ;mcc_generated_files/i2c_master.c: 384:         return I2C_RCEN;
 13767  1687  3005               	movlw	5
 13768  1688  0008               	return
 13769  1689                     l826:	
 13770                           ;mcc_generated_files/i2c_master.c: 386:     else
 13771                           
 13772                           
 13773                           ;mcc_generated_files/i2c_master.c: 387:     {;mcc_generated_files/i2c_master.c: 388:    
      +                               I2C_Status.bufferFree = 1;
 13774  1689  15C3               	bsf	(_I2C_Status^(0+128)+35),3
 13775                           
 13776                           ;mcc_generated_files/i2c_master.c: 389:         switch(I2C_Status.callbackTable[I2C_DATA
      +                          _COMPLETE](I2C_Status.callbackPayload[I2C_DATA_COMPLETE]))
 13777  168A  2E91               	goto	l4562
 13778  168B                     l4552:
 13779                           
 13780                           ;mcc_generated_files/i2c_master.c: 393:                 return I2C_DO_RX_NACK_RESTART();
 13781  168B  319E  26FA         	fcall	_I2C_DO_RX_NACK_RESTART
 13782  168D  0008               	return
 13783  168E                     l4556:
 13784                           
 13785                           ;mcc_generated_files/i2c_master.c: 397:                 return I2C_DO_RX_NACK_STOP();
 13786  168E  319E  26F6         	fcall	_I2C_DO_RX_NACK_STOP
 13787  1690  0008               	return
 13788  1691                     l4562:
 13789  1691  082D               	movf	((_I2C_Status+1)^(0+128)+12),w
 13790  1692  0020               	movlb	0	; select bank0
 13791  1693  00AE               	movwf	I2C_CallbackReturnReset@funPtr+1
 13792  1694  0021               	movlb	1	; select bank1
 13793  1695  082C               	movf	(_I2C_Status^(0+128)+12),w
 13794  1696  0020               	movlb	0	; select bank0
 13795  1697  00AD               	movwf	I2C_CallbackReturnReset@funPtr
 13796  1698  0021               	movlb	1	; select bank1
 13797  1699  0821               	movf	(_I2C_Status+1)^(0+128),w
 13798  169A  008A               	movwf	10
 13799  169B  0820               	movf	_I2C_Status^(0+128),w
 13800  169C  000A               	callw
 13801  169D  3196               	pagesel	$
 13802  169E  0020               	movlb	0	; select bank0
 13803  169F  00AF               	movwf	??_I2C_DO_RX
 13804  16A0  01B0               	clrf	??_I2C_DO_RX+1
 13805                           
 13806                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13807                           ; Switch size 1, requested type "simple"
 13808                           ; Number of cases is 1, Range of values is 0 to 0
 13809                           ; switch strategies available:
 13810                           ; Name         Instructions Cycles
 13811                           ; simple_byte            4     3 (average)
 13812                           ; direct_byte            8     6 (fixed)
 13813                           ; jumptable            260     6 (fixed)
 13814                           ;	Chosen strategy is simple_byte
 13815  16A1  0830               	movf	??_I2C_DO_RX+1,w
 13816  16A2  3A00               	xorlw	0	; case 0
 13817  16A3  1903               	skipnz
 13818  16A4  2EA6               	goto	l6174
 13819  16A5  2E8E               	goto	l4556
 13820  16A6                     l6174:
 13821                           
 13822                           ; Switch size 1, requested type "simple"
 13823                           ; Number of cases is 4, Range of values is 1 to 4
 13824                           ; switch strategies available:
 13825                           ; Name         Instructions Cycles
 13826                           ; simple_byte           13     7 (average)
 13827                           ; direct_byte           17     9 (fixed)
 13828                           ; jumptable            263     9 (fixed)
 13829                           ;	Chosen strategy is simple_byte
 13830  16A6  082F               	movf	??_I2C_DO_RX,w
 13831  16A7  3A01               	xorlw	1	; case 1
 13832  16A8  1903               	skipnz
 13833  16A9  2E8E               	goto	l4556
 13834  16AA  3A03               	xorlw	3	; case 2
 13835  16AB  1903               	skipnz
 13836  16AC  2E8B               	goto	l4552
 13837  16AD  3A01               	xorlw	1	; case 3
 13838  16AE  1903               	skipnz
 13839  16AF  2E8B               	goto	l4552
 13840  16B0  3A07               	xorlw	7	; case 4
 13841  16B1  1903               	skipnz
 13842  16B2  2E8E               	goto	l4556
 13843  16B3  2E8E               	goto	l4556
 13844  16B4  0008               	return
 13845  16B5                     __end_of_I2C_DO_RX:
 13846                           
 13847                           	psect	text72
 13848  0826                     __ptext72:	
 13849 ;; *************** function _I2C_DO_TX *****************
 13850 ;; Defined at:
 13851 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
 13852 ;; Parameters:    Size  Location     Type
 13853 ;;		None
 13854 ;; Auto vars:     Size  Location     Type
 13855 ;;		None
 13856 ;; Return value:  Size  Location     Type
 13857 ;;                  1    wreg      enum E3090
 13858 ;; Registers used:
 13859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13860 ;; Tracked objects:
 13861 ;;		On entry : 1F/0
 13862 ;;		On exit  : 1A/0
 13863 ;;		Unchanged: 0/0
 13864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13867 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13868 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;Total ram usage:        2 bytes
 13870 ;; Hardware stack levels used:    1
 13871 ;; Hardware stack levels required when called:    7
 13872 ;; This function calls:
 13873 ;;		Absolute function
 13874 ;;		_I2C_CallbackReturnReset
 13875 ;;		_I2C_CallbackReturnStop
 13876 ;;		_I2C_DO_SEND_RESTART_READ
 13877 ;;		_I2C_DO_SEND_RESTART_WRITE
 13878 ;;		_I2C_DO_SEND_STOP
 13879 ;;		_I2C_MasterIsNack
 13880 ;;		_I2C_MasterSendTxData
 13881 ;;		_rd1RegCompleteHandler
 13882 ;;		_rd1RegCompleteHandler@i2c_master_example$F143
 13883 ;;		_rd2RegCompleteHandler
 13884 ;;		_rd2RegCompleteHandler@i2c_master_example$F154
 13885 ;;		_rdBlkRegCompleteHandler
 13886 ;;		_rdBlkRegCompleteHandler@i2c_master_example$F177
 13887 ;;		_wr1RegCompleteHandler
 13888 ;;		_wr1RegCompleteHandler@i2c_master_example$F160
 13889 ;;		_wr2RegCompleteHandler
 13890 ;;		_wr2RegCompleteHandler@i2c_master_example$F166
 13891 ;; This function is called by:
 13892 ;;		_I2C_MasterFsm
 13893 ;; This function uses a non-reentrant model
 13894 ;;
 13895                           
 13896                           
 13897                           ;psect for function _I2C_DO_TX
 13898  0826                     _I2C_DO_TX:
 13899                           
 13900                           ;mcc_generated_files/i2c_master.c: 356:     if(I2C_MasterIsNack())
 13901                           
 13902                           ;incstack = 0
 13903                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13904  0826  319F  272B  3188   	fcall	_I2C_MasterIsNack
 13905  0829  3A00               	xorlw	0
 13906  082A  1D03               	btfss	3,2
 13907  082B  2836               	goto	l4522
 13908  082C  285E               	goto	l810
 13909  082D                     l4508:
 13910                           
 13911                           ;mcc_generated_files/i2c_master.c: 361:                 return I2C_DO_SEND_RESTART_READ(
      +                          );
 13912  082D  319E  26E2         	fcall	_I2C_DO_SEND_RESTART_READ
 13913  082F  0008               	return
 13914  0830                     l4512:
 13915                           
 13916                           ;mcc_generated_files/i2c_master.c: 363:                   return I2C_DO_SEND_RESTART_WRI
      +                          TE();
 13917  0830  319E  26E6         	fcall	_I2C_DO_SEND_RESTART_WRITE
 13918  0832  0008               	return
 13919  0833                     l4516:
 13920                           
 13921                           ;mcc_generated_files/i2c_master.c: 367:                 return I2C_DO_SEND_STOP();
 13922  0833  319E  26EE         	fcall	_I2C_DO_SEND_STOP
 13923  0835  0008               	return
 13924  0836                     l4522:
 13925  0836  0021               	movlb	1	; select bank1
 13926  0837  0833               	movf	((_I2C_Status+1)^(0+128)+18),w
 13927  0838  0020               	movlb	0	; select bank0
 13928  0839  00AE               	movwf	I2C_CallbackReturnReset@funPtr+1
 13929  083A  0021               	movlb	1	; select bank1
 13930  083B  0832               	movf	(_I2C_Status^(0+128)+18),w
 13931  083C  0020               	movlb	0	; select bank0
 13932  083D  00AD               	movwf	I2C_CallbackReturnReset@funPtr
 13933  083E  30A0               	movlw	low _I2C_Status
 13934  083F  0086               	movwf	6
 13935  0840  3000               	movlw	high _I2C_Status
 13936  0841  0087               	movwf	7
 13937  0842  3146               	addfsr 1,6
 13938  0843  3F41               	moviw [1]fsr1
 13939  0844  008A               	movwf	10
 13940  0845  3F40               	moviw [0]fsr1
 13941  0846  000A               	callw
 13942  0847  3188               	pagesel	$
 13943  0848  0020               	movlb	0	; select bank0
 13944  0849  00AF               	movwf	??_I2C_DO_TX
 13945  084A  01B0               	clrf	??_I2C_DO_TX+1
 13946                           
 13947                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13948                           ; Switch size 1, requested type "simple"
 13949                           ; Number of cases is 1, Range of values is 0 to 0
 13950                           ; switch strategies available:
 13951                           ; Name         Instructions Cycles
 13952                           ; simple_byte            4     3 (average)
 13953                           ; direct_byte            8     6 (fixed)
 13954                           ; jumptable            260     6 (fixed)
 13955                           ;	Chosen strategy is simple_byte
 13956  084B  0830               	movf	??_I2C_DO_TX+1,w
 13957  084C  3A00               	xorlw	0	; case 0
 13958  084D  1903               	skipnz
 13959  084E  2850               	goto	l6176
 13960  084F  2833               	goto	l4516
 13961  0850                     l6176:
 13962                           
 13963                           ; Switch size 1, requested type "simple"
 13964                           ; Number of cases is 4, Range of values is 1 to 4
 13965                           ; switch strategies available:
 13966                           ; Name         Instructions Cycles
 13967                           ; simple_byte           13     7 (average)
 13968                           ; direct_byte           17     9 (fixed)
 13969                           ; jumptable            263     9 (fixed)
 13970                           ;	Chosen strategy is simple_byte
 13971  0850  082F               	movf	??_I2C_DO_TX,w
 13972  0851  3A01               	xorlw	1	; case 1
 13973  0852  1903               	skipnz
 13974  0853  2833               	goto	l4516
 13975  0854  3A03               	xorlw	3	; case 2
 13976  0855  1903               	skipnz
 13977  0856  282D               	goto	l4508
 13978  0857  3A01               	xorlw	1	; case 3
 13979  0858  1903               	skipnz
 13980  0859  2830               	goto	l4512
 13981  085A  3A07               	xorlw	7	; case 4
 13982  085B  1903               	skipnz
 13983  085C  2833               	goto	l4516
 13984  085D  2833               	goto	l4516
 13985  085E                     l810:	
 13986                           ;mcc_generated_files/i2c_master.c: 370:     else
 13987                           
 13988                           
 13989                           ;mcc_generated_files/i2c_master.c: 371:     {;mcc_generated_files/i2c_master.c: 372:    
      +                               I2C_Status.addressNackCheck = 0;
 13990  085E  0021               	movlb	1	; select bank1
 13991  085F  1043               	bcf	(_I2C_Status^(0+128)+35),0
 13992                           
 13993                           ;mcc_generated_files/i2c_master.c: 373:         I2C_MasterSendTxData(*I2C_Status.data_pt
      +                          r++);
 13994  0860  083E               	movf	((_I2C_Status+1)^(0+128)+29),w
 13995  0861  0020               	movlb	0	; select bank0
 13996  0862  00B0               	movwf	??_I2C_DO_TX+1
 13997  0863  0021               	movlb	1	; select bank1
 13998  0864  083D               	movf	(_I2C_Status^(0+128)+29),w
 13999  0865  0020               	movlb	0	; select bank0
 14000  0866  00AF               	movwf	??_I2C_DO_TX
 14001  0867  0021               	movlb	1	; select bank1
 14002  0868  0ABD               	incf	(_I2C_Status^(0+128)+29),f
 14003  0869  1903               	skipnz
 14004  086A  0ABE               	incf	((_I2C_Status+1)^(0+128)+29),f
 14005  086B  0020               	movlb	0	; select bank0
 14006  086C  082F               	movf	??_I2C_DO_TX,w
 14007  086D  0086               	movwf	6
 14008  086E  0830               	movf	??_I2C_DO_TX+1,w
 14009  086F  0087               	movwf	7
 14010  0870  0801               	movf	1,w
 14011  0871  319F  2725  3188   	fcall	_I2C_MasterSendTxData
 14012                           
 14013                           ;mcc_generated_files/i2c_master.c: 374:         return (--I2C_Status.data_length)?I2C_TX
      +                          :I2C_TX_EMPTY;
 14014  0874  3001               	movlw	1
 14015  0875  0021               	movlb	1	; select bank1
 14016  0876  02BF               	subwf	(_I2C_Status^(0+128)+31),f
 14017  0877  3000               	movlw	0
 14018  0878  3BC0               	subwfb	((_I2C_Status+1)^(0+128)+31),f
 14019  0879  083F               	movf	(_I2C_Status^(0+128)+31),w
 14020  087A  0440               	iorwf	((_I2C_Status+1)^(0+128)+31),w
 14021  087B  1D03               	btfss	3,2
 14022  087C  287F               	goto	l4530
 14023  087D  3006               	movlw	6
 14024  087E  0008               	return
 14025  087F                     l4530:
 14026  087F  3003               	movlw	3
 14027  0880  0008               	return
 14028  0881                     __end_of_I2C_DO_TX:
 14029                           
 14030                           	psect	text73
 14031  1F37                     __ptext73:	
 14032 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
 14033 ;; Defined at:
 14034 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
 14035 ;; Parameters:    Size  Location     Type
 14036 ;;		None
 14037 ;; Auto vars:     Size  Location     Type
 14038 ;;		None
 14039 ;; Return value:  Size  Location     Type
 14040 ;;                  1    wreg      enum E3090
 14041 ;; Registers used:
 14042 ;;		wreg, status,2, status,0, pclath, cstack
 14043 ;; Tracked objects:
 14044 ;;		On entry : 1F/0
 14045 ;;		On exit  : 1F/4
 14046 ;;		Unchanged: 0/0
 14047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14052 ;;Total ram usage:        0 bytes
 14053 ;; Hardware stack levels used:    1
 14054 ;; Hardware stack levels required when called:    5
 14055 ;; This function calls:
 14056 ;;		_I2C_MasterSendTxData
 14057 ;; This function is called by:
 14058 ;;		_I2C_MasterFsm
 14059 ;; This function uses a non-reentrant model
 14060 ;;
 14061                           
 14062                           
 14063                           ;psect for function _I2C_DO_SEND_ADR_WRITE
 14064  1F37                     _I2C_DO_SEND_ADR_WRITE:
 14065                           
 14066                           ;mcc_generated_files/i2c_master.c: 349:     I2C_Status.addressNackCheck = 1;
 14067                           
 14068                           ;incstack = 0
 14069                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 14070  1F37  0021               	movlb	1	; select bank1
 14071  1F38  1443               	bsf	(_I2C_Status^(0+128)+35),0
 14072                           
 14073                           ;mcc_generated_files/i2c_master.c: 350:     I2C_MasterSendTxData((uint8_t) (I2C_Status.a
      +                          ddress << 1));
 14074  1F39  353C               	lslf	(_I2C_Status^(0+128)+28),w
 14075  1F3A  319F  2725         	fcall	_I2C_MasterSendTxData
 14076                           
 14077                           ;mcc_generated_files/i2c_master.c: 351:     return I2C_TX;
 14078  1F3C  3003               	movlw	3
 14079  1F3D  0008               	return
 14080  1F3E                     __end_of_I2C_DO_SEND_ADR_WRITE:
 14081                           
 14082                           	psect	text74
 14083  1F3E                     __ptext74:	
 14084 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
 14085 ;; Defined at:
 14086 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
 14087 ;; Parameters:    Size  Location     Type
 14088 ;;		None
 14089 ;; Auto vars:     Size  Location     Type
 14090 ;;		None
 14091 ;; Return value:  Size  Location     Type
 14092 ;;                  1    wreg      enum E3090
 14093 ;; Registers used:
 14094 ;;		wreg, status,2, status,0, pclath, cstack
 14095 ;; Tracked objects:
 14096 ;;		On entry : 1F/0
 14097 ;;		On exit  : 1F/4
 14098 ;;		Unchanged: 0/0
 14099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14104 ;;Total ram usage:        0 bytes
 14105 ;; Hardware stack levels used:    1
 14106 ;; Hardware stack levels required when called:    5
 14107 ;; This function calls:
 14108 ;;		_I2C_MasterSendTxData
 14109 ;; This function is called by:
 14110 ;;		_I2C_MasterFsm
 14111 ;; This function uses a non-reentrant model
 14112 ;;
 14113                           
 14114                           
 14115                           ;psect for function _I2C_DO_SEND_ADR_READ
 14116  1F3E                     _I2C_DO_SEND_ADR_READ:
 14117                           
 14118                           ;mcc_generated_files/i2c_master.c: 342:     I2C_Status.addressNackCheck = 1;
 14119                           
 14120                           ;incstack = 0
 14121                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 14122  1F3E  0021               	movlb	1	; select bank1
 14123  1F3F  1443               	bsf	(_I2C_Status^(0+128)+35),0
 14124                           
 14125                           ;mcc_generated_files/i2c_master.c: 343:     I2C_MasterSendTxData((uint8_t) (I2C_Status.a
      +                          ddress << 1 | 1));
 14126  1F40  1403               	setc
 14127  1F41  0D3C               	rlf	(_I2C_Status^(0+128)+28),w
 14128  1F42  319F  2725         	fcall	_I2C_MasterSendTxData
 14129                           
 14130                           ;mcc_generated_files/i2c_master.c: 344:     return I2C_RCEN;
 14131  1F44  3005               	movlw	5
 14132  1F45  0008               	return
 14133  1F46                     __end_of_I2C_DO_SEND_ADR_READ:
 14134                           
 14135                           	psect	text75
 14136  1F0A                     __ptext75:	
 14137 ;; *************** function _I2C_DO_IDLE *****************
 14138 ;; Defined at:
 14139 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
 14140 ;; Parameters:    Size  Location     Type
 14141 ;;		None
 14142 ;; Auto vars:     Size  Location     Type
 14143 ;;		None
 14144 ;; Return value:  Size  Location     Type
 14145 ;;                  1    wreg      enum E3090
 14146 ;; Registers used:
 14147 ;;		wreg, status,2
 14148 ;; Tracked objects:
 14149 ;;		On entry : 1F/0
 14150 ;;		On exit  : 1F/1
 14151 ;;		Unchanged: 0/0
 14152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14157 ;;Total ram usage:        0 bytes
 14158 ;; Hardware stack levels used:    1
 14159 ;; Hardware stack levels required when called:    4
 14160 ;; This function calls:
 14161 ;;		Nothing
 14162 ;; This function is called by:
 14163 ;;		_I2C_MasterFsm
 14164 ;; This function uses a non-reentrant model
 14165 ;;
 14166                           
 14167                           
 14168                           ;psect for function _I2C_DO_IDLE
 14169  1F0A                     _I2C_DO_IDLE:
 14170                           
 14171                           ;mcc_generated_files/i2c_master.c: 335:     I2C_Status.busy = 0;
 14172                           
 14173                           ;incstack = 0
 14174                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
 14175  1F0A  0021               	movlb	1	; select bank1
 14176  1F0B  10C3               	bcf	(_I2C_Status^(0+128)+35),1
 14177                           
 14178                           ;mcc_generated_files/i2c_master.c: 336:     I2C_Status.error = I2C_NOERR;
 14179  1F0C  01C2               	clrf	(_I2C_Status^(0+128)+34)
 14180                           
 14181                           ;mcc_generated_files/i2c_master.c: 337:     return I2C_RESET;
 14182  1F0D  300E               	movlw	14
 14183  1F0E  0008               	return
 14184  1F0F                     __end_of_I2C_DO_IDLE:
 14185                           
 14186                           	psect	text76
 14187  1467                     __ptext76:	
 14188 ;; *************** function _I2C_DO_TX_EMPTY *****************
 14189 ;; Defined at:
 14190 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
 14191 ;; Parameters:    Size  Location     Type
 14192 ;;		None
 14193 ;; Auto vars:     Size  Location     Type
 14194 ;;		None
 14195 ;; Return value:  Size  Location     Type
 14196 ;;                  1    wreg      enum E3090
 14197 ;; Registers used:
 14198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14199 ;; Tracked objects:
 14200 ;;		On entry : 1F/0
 14201 ;;		On exit  : 1B/0
 14202 ;;		Unchanged: 0/0
 14203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14206 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;Total ram usage:        2 bytes
 14209 ;; Hardware stack levels used:    1
 14210 ;; Hardware stack levels required when called:    7
 14211 ;; This function calls:
 14212 ;;		Absolute function
 14213 ;;		_I2C_CallbackReturnReset
 14214 ;;		_I2C_CallbackReturnStop
 14215 ;;		_I2C_DO_SEND_RESTART
 14216 ;;		_I2C_DO_SEND_STOP
 14217 ;;		_I2C_MasterSetIrq
 14218 ;;		_rd1RegCompleteHandler
 14219 ;;		_rd1RegCompleteHandler@i2c_master_example$F143
 14220 ;;		_rd2RegCompleteHandler
 14221 ;;		_rd2RegCompleteHandler@i2c_master_example$F154
 14222 ;;		_rdBlkRegCompleteHandler
 14223 ;;		_rdBlkRegCompleteHandler@i2c_master_example$F177
 14224 ;;		_wr1RegCompleteHandler
 14225 ;;		_wr1RegCompleteHandler@i2c_master_example$F160
 14226 ;;		_wr2RegCompleteHandler
 14227 ;;		_wr2RegCompleteHandler@i2c_master_example$F166
 14228 ;; This function is called by:
 14229 ;;		_I2C_MasterFsm
 14230 ;; This function uses a non-reentrant model
 14231 ;;
 14232                           
 14233                           
 14234                           ;psect for function _I2C_DO_TX_EMPTY
 14235  1467                     _I2C_DO_TX_EMPTY:
 14236                           
 14237                           ;mcc_generated_files/i2c_master.c: 411:     I2C_Status.bufferFree = 1;
 14238                           
 14239                           ;incstack = 0
 14240                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14241  1467  0021               	movlb	1	; select bank1
 14242  1468  15C3               	bsf	(_I2C_Status^(0+128)+35),3
 14243                           
 14244                           ;mcc_generated_files/i2c_master.c: 412:     switch(I2C_Status.callbackTable[I2C_DATA_COM
      +                          PLETE](I2C_Status.callbackPayload[I2C_DATA_COMPLETE]))
 14245  1469  2C74               	goto	l4594
 14246  146A                     l4578:
 14247                           
 14248                           ;mcc_generated_files/i2c_master.c: 416:             return I2C_DO_SEND_RESTART();
 14249  146A  319E  26EA         	fcall	_I2C_DO_SEND_RESTART
 14250  146C  0008               	return
 14251  146D                     l4582:
 14252                           
 14253                           ;mcc_generated_files/i2c_master.c: 418:             I2C_MasterSetIrq();
 14254  146D  3180  2002         	fcall	_I2C_MasterSetIrq
 14255                           
 14256                           ;mcc_generated_files/i2c_master.c: 419:             return I2C_TX;
 14257  146F  3003               	movlw	3
 14258  1470  0008               	return
 14259  1471                     l4588:
 14260                           
 14261                           ;mcc_generated_files/i2c_master.c: 422:             return I2C_DO_SEND_STOP();
 14262  1471  319E  26EE         	fcall	_I2C_DO_SEND_STOP
 14263  1473  0008               	return
 14264  1474                     l4594:
 14265  1474  082D               	movf	((_I2C_Status+1)^(0+128)+12),w
 14266  1475  0020               	movlb	0	; select bank0
 14267  1476  00AE               	movwf	I2C_CallbackReturnReset@funPtr+1
 14268  1477  0021               	movlb	1	; select bank1
 14269  1478  082C               	movf	(_I2C_Status^(0+128)+12),w
 14270  1479  0020               	movlb	0	; select bank0
 14271  147A  00AD               	movwf	I2C_CallbackReturnReset@funPtr
 14272  147B  0021               	movlb	1	; select bank1
 14273  147C  0821               	movf	(_I2C_Status+1)^(0+128),w
 14274  147D  008A               	movwf	10
 14275  147E  0820               	movf	_I2C_Status^(0+128),w
 14276  147F  000A               	callw
 14277  1480  3194               	pagesel	$
 14278  1481  0020               	movlb	0	; select bank0
 14279  1482  00AF               	movwf	??_I2C_DO_TX_EMPTY
 14280  1483  01B0               	clrf	??_I2C_DO_TX_EMPTY+1
 14281                           
 14282                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14283                           ; Switch size 1, requested type "simple"
 14284                           ; Number of cases is 1, Range of values is 0 to 0
 14285                           ; switch strategies available:
 14286                           ; Name         Instructions Cycles
 14287                           ; simple_byte            4     3 (average)
 14288                           ; direct_byte            8     6 (fixed)
 14289                           ; jumptable            260     6 (fixed)
 14290                           ;	Chosen strategy is simple_byte
 14291  1484  0830               	movf	??_I2C_DO_TX_EMPTY+1,w
 14292  1485  3A00               	xorlw	0	; case 0
 14293  1486  1903               	skipnz
 14294  1487  2C89               	goto	l6178
 14295  1488  2C71               	goto	l4588
 14296  1489                     l6178:
 14297                           
 14298                           ; Switch size 1, requested type "simple"
 14299                           ; Number of cases is 4, Range of values is 1 to 4
 14300                           ; switch strategies available:
 14301                           ; Name         Instructions Cycles
 14302                           ; simple_byte           13     7 (average)
 14303                           ; direct_byte           17     9 (fixed)
 14304                           ; jumptable            263     9 (fixed)
 14305                           ;	Chosen strategy is simple_byte
 14306  1489  082F               	movf	??_I2C_DO_TX_EMPTY,w
 14307  148A  3A01               	xorlw	1	; case 1
 14308  148B  1903               	skipnz
 14309  148C  2C71               	goto	l4588
 14310  148D  3A03               	xorlw	3	; case 2
 14311  148E  1903               	skipnz
 14312  148F  2C6A               	goto	l4578
 14313  1490  3A01               	xorlw	1	; case 3
 14314  1491  1903               	skipnz
 14315  1492  2C6A               	goto	l4578
 14316  1493  3A07               	xorlw	7	; case 4
 14317  1494  1903               	skipnz
 14318  1495  2C6D               	goto	l4582
 14319  1496  2C71               	goto	l4588
 14320  1497  0008               	return
 14321  1498                     __end_of_I2C_DO_TX_EMPTY:
 14322                           
 14323                           	psect	text77
 14324  0002                     __ptext77:	
 14325 ;; *************** function _I2C_MasterSetIrq *****************
 14326 ;; Defined at:
 14327 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
 14328 ;; Parameters:    Size  Location     Type
 14329 ;;		None
 14330 ;; Auto vars:     Size  Location     Type
 14331 ;;		None
 14332 ;; Return value:  Size  Location     Type
 14333 ;;                  1    wreg      void 
 14334 ;; Registers used:
 14335 ;;		None
 14336 ;; Tracked objects:
 14337 ;;		On entry : 1F/0
 14338 ;;		On exit  : 1F/0
 14339 ;;		Unchanged: 0/0
 14340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14345 ;;Total ram usage:        0 bytes
 14346 ;; Hardware stack levels used:    1
 14347 ;; Hardware stack levels required when called:    4
 14348 ;; This function calls:
 14349 ;;		Nothing
 14350 ;; This function is called by:
 14351 ;;		_I2C_DO_TX_EMPTY
 14352 ;; This function uses a non-reentrant model
 14353 ;;
 14354                           
 14355                           
 14356                           ;psect for function _I2C_MasterSetIrq
 14357  0002                     _I2C_MasterSetIrq:
 14358                           
 14359                           ;mcc_generated_files/i2c_master.c: 647:     PIR1bits.SSPIF = 1;
 14360                           
 14361                           ;incstack = 0
 14362                           ; Regs used in _I2C_MasterSetIrq: []
 14363  0002  1591               	bsf	17,3	;volatile
 14364  0003  0008               	return
 14365  0004                     __end_of_I2C_MasterSetIrq:
 14366                           
 14367                           	psect	text78
 14368  1F2B                     __ptext78:	
 14369 ;; *************** function _I2C_MasterIsNack *****************
 14370 ;; Defined at:
 14371 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
 14372 ;; Parameters:    Size  Location     Type
 14373 ;;		None
 14374 ;; Auto vars:     Size  Location     Type
 14375 ;;		None
 14376 ;; Return value:  Size  Location     Type
 14377 ;;                  1    wreg      _Bool 
 14378 ;; Registers used:
 14379 ;;		wreg, status,2, status,0
 14380 ;; Tracked objects:
 14381 ;;		On entry : 1E/1
 14382 ;;		On exit  : 1F/4
 14383 ;;		Unchanged: 0/0
 14384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14389 ;;Total ram usage:        0 bytes
 14390 ;; Hardware stack levels used:    1
 14391 ;; Hardware stack levels required when called:    4
 14392 ;; This function calls:
 14393 ;;		Nothing
 14394 ;; This function is called by:
 14395 ;;		_I2C_MasterFsm
 14396 ;;		_I2C_DO_TX
 14397 ;; This function uses a non-reentrant model
 14398 ;;
 14399                           
 14400                           
 14401                           ;psect for function _I2C_MasterIsNack
 14402  1F2B                     _I2C_MasterIsNack:
 14403                           
 14404                           ;mcc_generated_files/i2c_master.c: 600:     return SSPCON2bits.ACKSTAT;
 14405                           
 14406                           ;incstack = 0
 14407                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
 14408  1F2B  0024               	movlb	4	; select bank4
 14409  1F2C  0E16               	swapf	22,w	;volatile
 14410  1F2D  0C89               	rrf	9,f
 14411  1F2E  0C89               	rrf	9,f
 14412  1F2F  3901               	andlw	1
 14413  1F30  0008               	return
 14414  1F31                     __end_of_I2C_MasterIsNack:
 14415                           
 14416                           	psect	text79
 14417  1F25                     __ptext79:	
 14418 ;; *************** function _I2C_MasterSendTxData *****************
 14419 ;; Defined at:
 14420 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
 14421 ;; Parameters:    Size  Location     Type
 14422 ;;  data            1    wreg     unsigned char 
 14423 ;; Auto vars:     Size  Location     Type
 14424 ;;  data            1    0[BANK0 ] unsigned char 
 14425 ;; Return value:  Size  Location     Type
 14426 ;;                  1    wreg      void 
 14427 ;; Registers used:
 14428 ;;		wreg
 14429 ;; Tracked objects:
 14430 ;;		On entry : 1E/0
 14431 ;;		On exit  : 1F/4
 14432 ;;		Unchanged: 0/0
 14433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;Total ram usage:        1 bytes
 14439 ;; Hardware stack levels used:    1
 14440 ;; Hardware stack levels required when called:    4
 14441 ;; This function calls:
 14442 ;;		Nothing
 14443 ;; This function is called by:
 14444 ;;		_I2C_DO_SEND_ADR_READ
 14445 ;;		_I2C_DO_SEND_ADR_WRITE
 14446 ;;		_I2C_DO_TX
 14447 ;; This function uses a non-reentrant model
 14448 ;;
 14449                           
 14450                           
 14451                           ;psect for function _I2C_MasterSendTxData
 14452  1F25                     _I2C_MasterSendTxData:
 14453                           
 14454                           ;incstack = 0
 14455                           ; Regs used in _I2C_MasterSendTxData: [wreg]
 14456                           ;I2C_MasterSendTxData@data stored from wreg
 14457  1F25  0020               	movlb	0	; select bank0
 14458  1F26  00A0               	movwf	I2C_MasterSendTxData@data
 14459                           
 14460                           ;mcc_generated_files/i2c_master.c: 568: static __attribute__((inline)) void I2C_MasterSe
      +                          ndTxData(uint8_t data);mcc_generated_files/i2c_master.c: 569: {;mcc_generated_files/i2c_
      +                          master.c: 570:     SSPBUF = data;
 14461  1F27  0820               	movf	I2C_MasterSendTxData@data,w
 14462  1F28  0024               	movlb	4	; select bank4
 14463  1F29  0091               	movwf	17	;volatile
 14464  1F2A  0008               	return
 14465  1F2B                     __end_of_I2C_MasterSendTxData:
 14466                           
 14467                           	psect	text80
 14468  1EDE                     __ptext80:	
 14469 ;; *************** function _I2C_MasterSendAck *****************
 14470 ;; Defined at:
 14471 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
 14472 ;; Parameters:    Size  Location     Type
 14473 ;;		None
 14474 ;; Auto vars:     Size  Location     Type
 14475 ;;		None
 14476 ;; Return value:  Size  Location     Type
 14477 ;;                  1    wreg      void 
 14478 ;; Registers used:
 14479 ;;		None
 14480 ;; Tracked objects:
 14481 ;;		On entry : 1E/0
 14482 ;;		On exit  : 1F/4
 14483 ;;		Unchanged: 0/0
 14484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;Total ram usage:        0 bytes
 14490 ;; Hardware stack levels used:    1
 14491 ;; Hardware stack levels required when called:    4
 14492 ;; This function calls:
 14493 ;;		Nothing
 14494 ;; This function is called by:
 14495 ;;		_I2C_DO_RX
 14496 ;;		_I2C_DO_RX_ACK
 14497 ;; This function uses a non-reentrant model
 14498 ;;
 14499                           
 14500                           
 14501                           ;psect for function _I2C_MasterSendAck
 14502  1EDE                     _I2C_MasterSendAck:
 14503                           
 14504                           ;mcc_generated_files/i2c_master.c: 605:     SSPCON2bits.ACKDT = 0;
 14505                           
 14506                           ;incstack = 0
 14507                           ; Regs used in _I2C_MasterSendAck: []
 14508  1EDE  0024               	movlb	4	; select bank4
 14509  1EDF  1296               	bcf	22,5	;volatile
 14510                           
 14511                           ;mcc_generated_files/i2c_master.c: 606:     SSPCON2bits.ACKEN = 1;
 14512  1EE0  1616               	bsf	22,4	;volatile
 14513  1EE1  0008               	return
 14514  1EE2                     __end_of_I2C_MasterSendAck:
 14515                           
 14516                           	psect	text81
 14517  1ED3                     __ptext81:	
 14518 ;; *************** function _I2C_MasterGetRxData *****************
 14519 ;; Defined at:
 14520 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
 14521 ;; Parameters:    Size  Location     Type
 14522 ;;		None
 14523 ;; Auto vars:     Size  Location     Type
 14524 ;;		None
 14525 ;; Return value:  Size  Location     Type
 14526 ;;                  1    wreg      unsigned char 
 14527 ;; Registers used:
 14528 ;;		wreg
 14529 ;; Tracked objects:
 14530 ;;		On entry : 1F/0
 14531 ;;		On exit  : 1F/4
 14532 ;;		Unchanged: 0/0
 14533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14538 ;;Total ram usage:        0 bytes
 14539 ;; Hardware stack levels used:    1
 14540 ;; Hardware stack levels required when called:    4
 14541 ;; This function calls:
 14542 ;;		Nothing
 14543 ;; This function is called by:
 14544 ;;		_I2C_DO_RX
 14545 ;; This function uses a non-reentrant model
 14546 ;;
 14547                           
 14548                           
 14549                           ;psect for function _I2C_MasterGetRxData
 14550  1ED3                     _I2C_MasterGetRxData:
 14551                           
 14552                           ;mcc_generated_files/i2c_master.c: 565:     return SSPBUF;
 14553                           
 14554                           ;incstack = 0
 14555                           ; Regs used in _I2C_MasterGetRxData: [wreg]
 14556  1ED3  0024               	movlb	4	; select bank4
 14557  1ED4  0811               	movf	17,w	;volatile
 14558  1ED5  0008               	return
 14559  1ED6                     __end_of_I2C_MasterGetRxData:
 14560                           
 14561                           	psect	text82
 14562  1EDA                     __ptext82:	
 14563 ;; *************** function _I2C_MasterSendNack *****************
 14564 ;; Defined at:
 14565 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
 14566 ;; Parameters:    Size  Location     Type
 14567 ;;		None
 14568 ;; Auto vars:     Size  Location     Type
 14569 ;;		None
 14570 ;; Return value:  Size  Location     Type
 14571 ;;                  1    wreg      void 
 14572 ;; Registers used:
 14573 ;;		None
 14574 ;; Tracked objects:
 14575 ;;		On entry : 1F/0
 14576 ;;		On exit  : 1F/4
 14577 ;;		Unchanged: 0/0
 14578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;Total ram usage:        0 bytes
 14584 ;; Hardware stack levels used:    1
 14585 ;; Hardware stack levels required when called:    4
 14586 ;; This function calls:
 14587 ;;		Nothing
 14588 ;; This function is called by:
 14589 ;;		_I2C_DO_RX_NACK_STOP
 14590 ;;		_I2C_DO_RX_NACK_RESTART
 14591 ;; This function uses a non-reentrant model
 14592 ;;
 14593                           
 14594                           
 14595                           ;psect for function _I2C_MasterSendNack
 14596  1EDA                     _I2C_MasterSendNack:
 14597                           
 14598                           ;mcc_generated_files/i2c_master.c: 611:     SSPCON2bits.ACKDT = 1;
 14599                           
 14600                           ;incstack = 0
 14601                           ; Regs used in _I2C_MasterSendNack: []
 14602  1EDA  0024               	movlb	4	; select bank4
 14603  1EDB  1696               	bsf	22,5	;volatile
 14604                           
 14605                           ;mcc_generated_files/i2c_master.c: 612:     SSPCON2bits.ACKEN = 1;
 14606  1EDC  1616               	bsf	22,4	;volatile
 14607  1EDD  0008               	return
 14608  1EDE                     __end_of_I2C_MasterSendNack:
 14609                           
 14610                           	psect	text83
 14611  1ED0                     __ptext83:	
 14612 ;; *************** function _I2C_MasterStartRx *****************
 14613 ;; Defined at:
 14614 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
 14615 ;; Parameters:    Size  Location     Type
 14616 ;;		None
 14617 ;; Auto vars:     Size  Location     Type
 14618 ;;		None
 14619 ;; Return value:  Size  Location     Type
 14620 ;;                  1    wreg      void 
 14621 ;; Registers used:
 14622 ;;		None
 14623 ;; Tracked objects:
 14624 ;;		On entry : 1F/1
 14625 ;;		On exit  : 1F/4
 14626 ;;		Unchanged: 0/0
 14627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14632 ;;Total ram usage:        0 bytes
 14633 ;; Hardware stack levels used:    1
 14634 ;; Hardware stack levels required when called:    4
 14635 ;; This function calls:
 14636 ;;		Nothing
 14637 ;; This function is called by:
 14638 ;;		_I2C_DO_RCEN
 14639 ;; This function uses a non-reentrant model
 14640 ;;
 14641                           
 14642                           
 14643                           ;psect for function _I2C_MasterStartRx
 14644  1ED0                     _I2C_MasterStartRx:
 14645                           
 14646                           ;mcc_generated_files/i2c_master.c: 585:     SSPCON2bits.RCEN = 1;
 14647                           
 14648                           ;incstack = 0
 14649                           ; Regs used in _I2C_MasterStartRx: []
 14650  1ED0  0024               	movlb	4	; select bank4
 14651  1ED1  1596               	bsf	22,3	;volatile
 14652  1ED2  0008               	return
 14653  1ED3                     __end_of_I2C_MasterStartRx:
 14654                           
 14655                           	psect	text84
 14656  1EB9                     __ptext84:	
 14657 ;; *************** function _I2C_CallbackReturnReset *****************
 14658 ;; Defined at:
 14659 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
 14660 ;; Parameters:    Size  Location     Type
 14661 ;;  funPtr          2   13[BANK0 ] PTR void 
 14662 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 14663 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 14664 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 14665 ;; Auto vars:     Size  Location     Type
 14666 ;;		None
 14667 ;; Return value:  Size  Location     Type
 14668 ;;                  1    wreg      enum E360
 14669 ;; Registers used:
 14670 ;;		wreg
 14671 ;; Tracked objects:
 14672 ;;		On entry : 1E/1
 14673 ;;		On exit  : 1E/0
 14674 ;;		Unchanged: 1E/0
 14675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14676 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14680 ;;Total ram usage:        2 bytes
 14681 ;; Hardware stack levels used:    1
 14682 ;; Hardware stack levels required when called:    4
 14683 ;; This function calls:
 14684 ;;		Nothing
 14685 ;; This function is called by:
 14686 ;;		_I2C_Open
 14687 ;;		_I2C_DO_TX
 14688 ;;		_I2C_DO_RX
 14689 ;;		_I2C_DO_TX_EMPTY
 14690 ;;		_I2C_DO_ADDRESS_NACK
 14691 ;; This function uses a non-reentrant model
 14692 ;;
 14693                           
 14694                           
 14695                           ;psect for function _I2C_CallbackReturnReset
 14696  1EB9                     _I2C_CallbackReturnReset:
 14697                           
 14698                           ;mcc_generated_files/i2c_master.c: 525: i2c_operations_t I2C_CallbackReturnReset(void *f
      +                          unPtr);mcc_generated_files/i2c_master.c: 526: {;mcc_generated_files/i2c_master.c: 527:  
      +                             return I2C_RESET_LINK;
 14699                           
 14700                           ;incstack = 0
 14701                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
 14702  1EB9  3005               	movlw	5
 14703  1EBA  0008               	return
 14704  1EBB                     __end_of_I2C_CallbackReturnReset:
 14705                           
 14706                           	psect	text85
 14707  1EB7                     __ptext85:	
 14708 ;; *************** function _I2C_CallbackReturnStop *****************
 14709 ;; Defined at:
 14710 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
 14711 ;; Parameters:    Size  Location     Type
 14712 ;;  funPtr          2   13[BANK0 ] PTR void 
 14713 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 14714 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 14715 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 14716 ;; Auto vars:     Size  Location     Type
 14717 ;;		None
 14718 ;; Return value:  Size  Location     Type
 14719 ;;                  1    wreg      enum E360
 14720 ;; Registers used:
 14721 ;;		wreg
 14722 ;; Tracked objects:
 14723 ;;		On entry : 1E/1
 14724 ;;		On exit  : 1E/0
 14725 ;;		Unchanged: 1E/0
 14726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14727 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14730 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14731 ;;Total ram usage:        2 bytes
 14732 ;; Hardware stack levels used:    1
 14733 ;; Hardware stack levels required when called:    4
 14734 ;; This function calls:
 14735 ;;		Nothing
 14736 ;; This function is called by:
 14737 ;;		_I2C_Open
 14738 ;;		_I2C_SetCallback
 14739 ;;		_I2C_DO_TX
 14740 ;;		_I2C_DO_RX
 14741 ;;		_I2C_DO_TX_EMPTY
 14742 ;;		_I2C_DO_ADDRESS_NACK
 14743 ;; This function uses a non-reentrant model
 14744 ;;
 14745                           
 14746                           
 14747                           ;psect for function _I2C_CallbackReturnStop
 14748  1EB7                     _I2C_CallbackReturnStop:
 14749                           
 14750                           ;mcc_generated_files/i2c_master.c: 520: i2c_operations_t I2C_CallbackReturnStop(void *fu
      +                          nPtr);mcc_generated_files/i2c_master.c: 521: {;mcc_generated_files/i2c_master.c: 522:   
      +                            return I2C_STOP;
 14751                           
 14752                           ;incstack = 0
 14753                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
 14754  1EB7  3001               	movlw	1
 14755  1EB8  0008               	return
 14756  1EB9                     __end_of_I2C_CallbackReturnStop:
 14757                           
 14758                           	psect	text86
 14759  122E                     __ptext86:	
 14760 ;; *************** function _rdBlkRegCompleteHandler@i2c_master_example$F177 *****************
 14761 ;; Defined at:
 14762 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
 14763 ;; Parameters:    Size  Location     Type
 14764 ;;  ptr             2   13[BANK0 ] PTR void 
 14765 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 14766 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 14767 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 14768 ;; Auto vars:     Size  Location     Type
 14769 ;;		None
 14770 ;; Return value:  Size  Location     Type
 14771 ;;                  1    wreg      enum E360
 14772 ;; Registers used:
 14773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14774 ;; Tracked objects:
 14775 ;;		On entry : 1E/1
 14776 ;;		On exit  : 1F/0
 14777 ;;		Unchanged: 0/0
 14778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14779 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14782 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;Total ram usage:        2 bytes
 14784 ;; Hardware stack levels used:    1
 14785 ;; Hardware stack levels required when called:    6
 14786 ;; This function calls:
 14787 ;;		_I2C_SetBuffer
 14788 ;;		_I2C_SetDataCompleteCallback
 14789 ;; This function is called by:
 14790 ;;		_I2C_DO_TX
 14791 ;;		_I2C_DO_RX
 14792 ;;		_I2C_DO_TX_EMPTY
 14793 ;;		_I2C_DO_ADDRESS_NACK
 14794 ;; This function uses a non-reentrant model
 14795 ;;
 14796                           
 14797                           
 14798                           ;psect for function _rdBlkRegCompleteHandler@i2c_master_example$F177
 14799  122E                     _rdBlkRegCompleteHandler@i2c_master_example$F177:
 14800                           
 14801                           ;mcc_generated_files/examples/i2c_master_example.c: 170: static i2c_operations_t rdBlkRe
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 171: {;mc
      +                          c_generated_files/examples/i2c_master_example.c: 172:     I2C_SetBuffer(((i2c_buffer_t *
      +                          )ptr)->data,((i2c_buffer_t*)ptr)->len);
 14802                           
 14803                           ;incstack = 0
 14804                           ; Regs used in _rdBlkRegCompleteHandler@i2c_master_example$F177: [wreg+fsr1l+fsr1h+statu
      +                          s,2+status,0+pclath+cstack]
 14805  122E  0020               	movlb	0	; select bank0
 14806  122F  082D               	movf	rdBlkRegCompleteHandler@i2c_master_example$F177@ptr,w
 14807  1230  0086               	movwf	6
 14808  1231  082E               	movf	rdBlkRegCompleteHandler@i2c_master_example$F177@ptr+1,w
 14809  1232  0087               	movwf	7
 14810  1233  3142               	addfsr 1,2
 14811  1234  3F40               	moviw [0]fsr1
 14812  1235  00A0               	movwf	I2C_SetBuffer@buffer
 14813  1236  3F41               	moviw [1]fsr1
 14814  1237  00A1               	movwf	I2C_SetBuffer@buffer+1
 14815  1238  082D               	movf	rdBlkRegCompleteHandler@i2c_master_example$F177@ptr,w
 14816  1239  0086               	movwf	6
 14817  123A  082E               	movf	rdBlkRegCompleteHandler@i2c_master_example$F177@ptr+1,w
 14818  123B  0087               	movwf	7
 14819  123C  3F40               	moviw [0]fsr1
 14820  123D  00A2               	movwf	I2C_SetBuffer@bufferSize
 14821  123E  3F41               	moviw [1]fsr1
 14822  123F  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 14823  1240  3190  205E  3192   	fcall	_I2C_SetBuffer
 14824                           
 14825                           ;mcc_generated_files/examples/i2c_master_example.c: 173:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 14826  1243  3000               	movlw	0
 14827  1244  0020               	movlb	0	; select bank0
 14828  1245  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 14829  1246  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 14830  1247  3000               	movlw	0
 14831  1248  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 14832  1249  3000               	movlw	0
 14833  124A  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 14834  124B  319F  27A5         	fcall	_I2C_SetDataCompleteCallback
 14835                           
 14836                           ;mcc_generated_files/examples/i2c_master_example.c: 174:     return I2C_RESTART_READ;
 14837  124D  3002               	movlw	2
 14838  124E  0008               	return
 14839  124F                     __end_of_rdBlkRegCompleteHandler@i2c_master_example$F177:
 14840                           
 14841                           	psect	text87
 14842  111B                     __ptext87:	
 14843 ;; *************** function _wr1RegCompleteHandler@i2c_master_example$F160 *****************
 14844 ;; Defined at:
 14845 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
 14846 ;; Parameters:    Size  Location     Type
 14847 ;;  ptr             2   13[BANK0 ] PTR void 
 14848 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 14849 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 14850 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 14851 ;; Auto vars:     Size  Location     Type
 14852 ;;		None
 14853 ;; Return value:  Size  Location     Type
 14854 ;;                  1    wreg      enum E360
 14855 ;; Registers used:
 14856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14857 ;; Tracked objects:
 14858 ;;		On entry : 1E/1
 14859 ;;		On exit  : 1F/0
 14860 ;;		Unchanged: 0/0
 14861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14862 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14865 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14866 ;;Total ram usage:        2 bytes
 14867 ;; Hardware stack levels used:    1
 14868 ;; Hardware stack levels required when called:    6
 14869 ;; This function calls:
 14870 ;;		_I2C_SetBuffer
 14871 ;;		_I2C_SetDataCompleteCallback
 14872 ;; This function is called by:
 14873 ;;		_I2C_DO_TX
 14874 ;;		_I2C_DO_RX
 14875 ;;		_I2C_DO_TX_EMPTY
 14876 ;;		_I2C_DO_ADDRESS_NACK
 14877 ;; This function uses a non-reentrant model
 14878 ;;
 14879                           
 14880                           
 14881                           ;psect for function _wr1RegCompleteHandler@i2c_master_example$F160
 14882  111B                     _wr1RegCompleteHandler@i2c_master_example$F160:
 14883                           
 14884                           ;mcc_generated_files/examples/i2c_master_example.c: 156: static i2c_operations_t wr1RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 157: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 158:     I2C_SetBuffer(ptr,1);
 14885                           
 14886                           ;incstack = 0
 14887                           ; Regs used in _wr1RegCompleteHandler@i2c_master_example$F160: [wreg+fsr1l+fsr1h+status,
      +                          2+status,0+pclath+cstack]
 14888  111B  0020               	movlb	0	; select bank0
 14889  111C  082E               	movf	wr1RegCompleteHandler@i2c_master_example$F160@ptr+1,w
 14890  111D  00A1               	movwf	I2C_SetBuffer@buffer+1
 14891  111E  082D               	movf	wr1RegCompleteHandler@i2c_master_example$F160@ptr,w
 14892  111F  00A0               	movwf	I2C_SetBuffer@buffer
 14893  1120  3001               	movlw	1
 14894  1121  00A2               	movwf	I2C_SetBuffer@bufferSize
 14895  1122  3000               	movlw	0
 14896  1123  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 14897  1124  3190  205E  3191   	fcall	_I2C_SetBuffer
 14898                           
 14899                           ;mcc_generated_files/examples/i2c_master_example.c: 159:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 14900  1127  3000               	movlw	0
 14901  1128  0020               	movlb	0	; select bank0
 14902  1129  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 14903  112A  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 14904  112B  3000               	movlw	0
 14905  112C  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 14906  112D  3000               	movlw	0
 14907  112E  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 14908  112F  319F  27A5         	fcall	_I2C_SetDataCompleteCallback
 14909                           
 14910                           ;mcc_generated_files/examples/i2c_master_example.c: 160:     return I2C_CONTINUE;
 14911  1131  3004               	movlw	4
 14912  1132  0008               	return
 14913  1133                     __end_of_wr1RegCompleteHandler@i2c_master_example$F160:
 14914                           
 14915                           	psect	text88
 14916  1103                     __ptext88:	
 14917 ;; *************** function _rd2RegCompleteHandler@i2c_master_example$F154 *****************
 14918 ;; Defined at:
 14919 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
 14920 ;; Parameters:    Size  Location     Type
 14921 ;;  ptr             2   13[BANK0 ] PTR void 
 14922 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 14923 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 14924 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 14925 ;; Auto vars:     Size  Location     Type
 14926 ;;		None
 14927 ;; Return value:  Size  Location     Type
 14928 ;;                  1    wreg      enum E360
 14929 ;; Registers used:
 14930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14931 ;; Tracked objects:
 14932 ;;		On entry : 1E/1
 14933 ;;		On exit  : 1F/0
 14934 ;;		Unchanged: 0/0
 14935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14936 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14939 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14940 ;;Total ram usage:        2 bytes
 14941 ;; Hardware stack levels used:    1
 14942 ;; Hardware stack levels required when called:    6
 14943 ;; This function calls:
 14944 ;;		_I2C_SetBuffer
 14945 ;;		_I2C_SetDataCompleteCallback
 14946 ;; This function is called by:
 14947 ;;		_I2C_DO_TX
 14948 ;;		_I2C_DO_RX
 14949 ;;		_I2C_DO_TX_EMPTY
 14950 ;;		_I2C_DO_ADDRESS_NACK
 14951 ;; This function uses a non-reentrant model
 14952 ;;
 14953                           
 14954                           
 14955                           ;psect for function _rd2RegCompleteHandler@i2c_master_example$F154
 14956  1103                     _rd2RegCompleteHandler@i2c_master_example$F154:
 14957                           
 14958                           ;mcc_generated_files/examples/i2c_master_example.c: 149: static i2c_operations_t rd2RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 150: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 151:     I2C_SetBuffer(ptr,2);
 14959                           
 14960                           ;incstack = 0
 14961                           ; Regs used in _rd2RegCompleteHandler@i2c_master_example$F154: [wreg+fsr1l+fsr1h+status,
      +                          2+status,0+pclath+cstack]
 14962  1103  0020               	movlb	0	; select bank0
 14963  1104  082E               	movf	rd2RegCompleteHandler@i2c_master_example$F154@ptr+1,w
 14964  1105  00A1               	movwf	I2C_SetBuffer@buffer+1
 14965  1106  082D               	movf	rd2RegCompleteHandler@i2c_master_example$F154@ptr,w
 14966  1107  00A0               	movwf	I2C_SetBuffer@buffer
 14967  1108  3002               	movlw	2
 14968  1109  00A2               	movwf	I2C_SetBuffer@bufferSize
 14969  110A  3000               	movlw	0
 14970  110B  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 14971  110C  3190  205E  3191   	fcall	_I2C_SetBuffer
 14972                           
 14973                           ;mcc_generated_files/examples/i2c_master_example.c: 152:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 14974  110F  3000               	movlw	0
 14975  1110  0020               	movlb	0	; select bank0
 14976  1111  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 14977  1112  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 14978  1113  3000               	movlw	0
 14979  1114  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 14980  1115  3000               	movlw	0
 14981  1116  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 14982  1117  319F  27A5         	fcall	_I2C_SetDataCompleteCallback
 14983                           
 14984                           ;mcc_generated_files/examples/i2c_master_example.c: 153:     return I2C_RESTART_READ;
 14985  1119  3002               	movlw	2
 14986  111A  0008               	return
 14987  111B                     __end_of_rd2RegCompleteHandler@i2c_master_example$F154:
 14988                           
 14989                           	psect	text89
 14990  10EB                     __ptext89:	
 14991 ;; *************** function _rd1RegCompleteHandler@i2c_master_example$F143 *****************
 14992 ;; Defined at:
 14993 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
 14994 ;; Parameters:    Size  Location     Type
 14995 ;;  ptr             2   13[BANK0 ] PTR void 
 14996 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 14997 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 14998 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 14999 ;; Auto vars:     Size  Location     Type
 15000 ;;		None
 15001 ;; Return value:  Size  Location     Type
 15002 ;;                  1    wreg      enum E360
 15003 ;; Registers used:
 15004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15005 ;; Tracked objects:
 15006 ;;		On entry : 1E/1
 15007 ;;		On exit  : 1F/0
 15008 ;;		Unchanged: 0/0
 15009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15010 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;Total ram usage:        2 bytes
 15015 ;; Hardware stack levels used:    1
 15016 ;; Hardware stack levels required when called:    6
 15017 ;; This function calls:
 15018 ;;		_I2C_SetBuffer
 15019 ;;		_I2C_SetDataCompleteCallback
 15020 ;; This function is called by:
 15021 ;;		_I2C_DO_TX
 15022 ;;		_I2C_DO_RX
 15023 ;;		_I2C_DO_TX_EMPTY
 15024 ;;		_I2C_DO_ADDRESS_NACK
 15025 ;; This function uses a non-reentrant model
 15026 ;;
 15027                           
 15028                           
 15029                           ;psect for function _rd1RegCompleteHandler@i2c_master_example$F143
 15030  10EB                     _rd1RegCompleteHandler@i2c_master_example$F143:
 15031                           
 15032                           ;mcc_generated_files/examples/i2c_master_example.c: 142: static i2c_operations_t rd1RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 143: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 144:     I2C_SetBuffer(ptr,1);
 15033                           
 15034                           ;incstack = 0
 15035                           ; Regs used in _rd1RegCompleteHandler@i2c_master_example$F143: [wreg+fsr1l+fsr1h+status,
      +                          2+status,0+pclath+cstack]
 15036  10EB  0020               	movlb	0	; select bank0
 15037  10EC  082E               	movf	rd1RegCompleteHandler@i2c_master_example$F143@ptr+1,w
 15038  10ED  00A1               	movwf	I2C_SetBuffer@buffer+1
 15039  10EE  082D               	movf	rd1RegCompleteHandler@i2c_master_example$F143@ptr,w
 15040  10EF  00A0               	movwf	I2C_SetBuffer@buffer
 15041  10F0  3001               	movlw	1
 15042  10F1  00A2               	movwf	I2C_SetBuffer@bufferSize
 15043  10F2  3000               	movlw	0
 15044  10F3  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 15045  10F4  3190  205E  3190   	fcall	_I2C_SetBuffer
 15046                           
 15047                           ;mcc_generated_files/examples/i2c_master_example.c: 145:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 15048  10F7  3000               	movlw	0
 15049  10F8  0020               	movlb	0	; select bank0
 15050  10F9  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 15051  10FA  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 15052  10FB  3000               	movlw	0
 15053  10FC  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 15054  10FD  3000               	movlw	0
 15055  10FE  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 15056  10FF  319F  27A5         	fcall	_I2C_SetDataCompleteCallback
 15057                           
 15058                           ;mcc_generated_files/examples/i2c_master_example.c: 146:     return I2C_RESTART_READ;
 15059  1101  3002               	movlw	2
 15060  1102  0008               	return
 15061  1103                     __end_of_rd1RegCompleteHandler@i2c_master_example$F143:
 15062                           
 15063                           	psect	text90
 15064  120D                     __ptext90:	
 15065 ;; *************** function _rdBlkRegCompleteHandler *****************
 15066 ;; Defined at:
 15067 ;;		line 185 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 15068 ;; Parameters:    Size  Location     Type
 15069 ;;  p               2   13[BANK0 ] PTR void 
 15070 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 15071 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 15072 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;		None
 15075 ;; Return value:  Size  Location     Type
 15076 ;;                  1    wreg      enum E360
 15077 ;; Registers used:
 15078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15079 ;; Tracked objects:
 15080 ;;		On entry : 1E/1
 15081 ;;		On exit  : 1F/0
 15082 ;;		Unchanged: 0/0
 15083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15084 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;Total ram usage:        2 bytes
 15089 ;; Hardware stack levels used:    1
 15090 ;; Hardware stack levels required when called:    6
 15091 ;; This function calls:
 15092 ;;		_I2C_SetBuffer
 15093 ;;		_I2C_SetDataCompleteCallback
 15094 ;; This function is called by:
 15095 ;;		_i2c_readDataBlock
 15096 ;;		_I2C_DO_TX
 15097 ;;		_I2C_DO_RX
 15098 ;;		_I2C_DO_TX_EMPTY
 15099 ;;		_I2C_DO_ADDRESS_NACK
 15100 ;; This function uses a non-reentrant model
 15101 ;;
 15102                           
 15103                           
 15104                           ;psect for function _rdBlkRegCompleteHandler
 15105  120D                     _rdBlkRegCompleteHandler:
 15106                           
 15107                           ;mcc_generated_files/drivers/i2c_simple_master.c: 185: static i2c_operations_t rdBlkRegC
      +                          ompleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 186: {;mcc_gene
      +                          rated_files/drivers/i2c_simple_master.c: 187:     I2C_SetBuffer(((buf_t *)p)->data,((buf
      +                          _t*)p)->len);
 15108                           
 15109                           ;incstack = 0
 15110                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15111  120D  0020               	movlb	0	; select bank0
 15112  120E  082D               	movf	rdBlkRegCompleteHandler@p,w
 15113  120F  0086               	movwf	6
 15114  1210  082E               	movf	rdBlkRegCompleteHandler@p+1,w
 15115  1211  0087               	movwf	7
 15116  1212  3142               	addfsr 1,2
 15117  1213  3F40               	moviw [0]fsr1
 15118  1214  00A0               	movwf	I2C_SetBuffer@buffer
 15119  1215  3F41               	moviw [1]fsr1
 15120  1216  00A1               	movwf	I2C_SetBuffer@buffer+1
 15121  1217  082D               	movf	rdBlkRegCompleteHandler@p,w
 15122  1218  0086               	movwf	6
 15123  1219  082E               	movf	rdBlkRegCompleteHandler@p+1,w
 15124  121A  0087               	movwf	7
 15125  121B  3F40               	moviw [0]fsr1
 15126  121C  00A2               	movwf	I2C_SetBuffer@bufferSize
 15127  121D  3F41               	moviw [1]fsr1
 15128  121E  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 15129  121F  3190  205E  3192   	fcall	_I2C_SetBuffer
 15130                           
 15131                           ;mcc_generated_files/drivers/i2c_simple_master.c: 188:     I2C_SetDataCompleteCallback((
      +                          (void*)0),((void*)0));
 15132  1222  3000               	movlw	0
 15133  1223  0020               	movlb	0	; select bank0
 15134  1224  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 15135  1225  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 15136  1226  3000               	movlw	0
 15137  1227  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 15138  1228  3000               	movlw	0
 15139  1229  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 15140  122A  319F  27A5         	fcall	_I2C_SetDataCompleteCallback
 15141                           
 15142                           ;mcc_generated_files/drivers/i2c_simple_master.c: 189:     return I2C_RESTART_READ;
 15143  122C  3002               	movlw	2
 15144  122D  0008               	return
 15145  122E                     __end_of_rdBlkRegCompleteHandler:
 15146                           
 15147                           	psect	text91
 15148  10D3                     __ptext91:	
 15149 ;; *************** function _wr2RegCompleteHandler *****************
 15150 ;; Defined at:
 15151 ;;		line 151 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 15152 ;; Parameters:    Size  Location     Type
 15153 ;;  p               2   13[BANK0 ] PTR void 
 15154 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 15155 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 15156 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 15157 ;; Auto vars:     Size  Location     Type
 15158 ;;		None
 15159 ;; Return value:  Size  Location     Type
 15160 ;;                  1    wreg      enum E360
 15161 ;; Registers used:
 15162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15163 ;; Tracked objects:
 15164 ;;		On entry : 1E/1
 15165 ;;		On exit  : 1F/0
 15166 ;;		Unchanged: 0/0
 15167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15168 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15171 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15172 ;;Total ram usage:        2 bytes
 15173 ;; Hardware stack levels used:    1
 15174 ;; Hardware stack levels required when called:    6
 15175 ;; This function calls:
 15176 ;;		_I2C_SetBuffer
 15177 ;;		_I2C_SetDataCompleteCallback
 15178 ;; This function is called by:
 15179 ;;		_I2C_DO_TX
 15180 ;;		_I2C_DO_RX
 15181 ;;		_I2C_DO_TX_EMPTY
 15182 ;;		_I2C_DO_ADDRESS_NACK
 15183 ;; This function uses a non-reentrant model
 15184 ;;
 15185                           
 15186                           
 15187                           ;psect for function _wr2RegCompleteHandler
 15188  10D3                     _wr2RegCompleteHandler:
 15189                           
 15190                           ;mcc_generated_files/drivers/i2c_simple_master.c: 151: static i2c_operations_t wr2RegCom
      +                          pleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 152: {;mcc_genera
      +                          ted_files/drivers/i2c_simple_master.c: 153:     I2C_SetBuffer(p,2);
 15191                           
 15192                           ;incstack = 0
 15193                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15194  10D3  0020               	movlb	0	; select bank0
 15195  10D4  082E               	movf	wr2RegCompleteHandler@p+1,w
 15196  10D5  00A1               	movwf	I2C_SetBuffer@buffer+1
 15197  10D6  082D               	movf	wr2RegCompleteHandler@p,w
 15198  10D7  00A0               	movwf	I2C_SetBuffer@buffer
 15199  10D8  3002               	movlw	2
 15200  10D9  00A2               	movwf	I2C_SetBuffer@bufferSize
 15201  10DA  3000               	movlw	0
 15202  10DB  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 15203  10DC  3190  205E  3190   	fcall	_I2C_SetBuffer
 15204                           
 15205                           ;mcc_generated_files/drivers/i2c_simple_master.c: 154:     I2C_SetDataCompleteCallback((
      +                          (void*)0),((void*)0));
 15206  10DF  3000               	movlw	0
 15207  10E0  0020               	movlb	0	; select bank0
 15208  10E1  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 15209  10E2  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 15210  10E3  3000               	movlw	0
 15211  10E4  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 15212  10E5  3000               	movlw	0
 15213  10E6  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 15214  10E7  319F  27A5         	fcall	_I2C_SetDataCompleteCallback
 15215                           
 15216                           ;mcc_generated_files/drivers/i2c_simple_master.c: 155:     return I2C_CONTINUE;
 15217  10E9  3004               	movlw	4
 15218  10EA  0008               	return
 15219  10EB                     __end_of_wr2RegCompleteHandler:
 15220                           
 15221                           	psect	text92
 15222  10BB                     __ptext92:	
 15223 ;; *************** function _rd2RegCompleteHandler *****************
 15224 ;; Defined at:
 15225 ;;		line 119 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 15226 ;; Parameters:    Size  Location     Type
 15227 ;;  p               2   13[BANK0 ] PTR void 
 15228 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 15229 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 15230 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 15231 ;; Auto vars:     Size  Location     Type
 15232 ;;		None
 15233 ;; Return value:  Size  Location     Type
 15234 ;;                  1    wreg      enum E360
 15235 ;; Registers used:
 15236 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15237 ;; Tracked objects:
 15238 ;;		On entry : 1E/1
 15239 ;;		On exit  : 1F/0
 15240 ;;		Unchanged: 0/0
 15241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15242 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15245 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15246 ;;Total ram usage:        2 bytes
 15247 ;; Hardware stack levels used:    1
 15248 ;; Hardware stack levels required when called:    6
 15249 ;; This function calls:
 15250 ;;		_I2C_SetBuffer
 15251 ;;		_I2C_SetDataCompleteCallback
 15252 ;; This function is called by:
 15253 ;;		_I2C_DO_TX
 15254 ;;		_I2C_DO_RX
 15255 ;;		_I2C_DO_TX_EMPTY
 15256 ;;		_I2C_DO_ADDRESS_NACK
 15257 ;; This function uses a non-reentrant model
 15258 ;;
 15259                           
 15260                           
 15261                           ;psect for function _rd2RegCompleteHandler
 15262  10BB                     _rd2RegCompleteHandler:
 15263                           
 15264                           ;mcc_generated_files/drivers/i2c_simple_master.c: 119: static i2c_operations_t rd2RegCom
      +                          pleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 120: {;mcc_genera
      +                          ted_files/drivers/i2c_simple_master.c: 121:     I2C_SetBuffer(p,2);
 15265                           
 15266                           ;incstack = 0
 15267                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15268  10BB  0020               	movlb	0	; select bank0
 15269  10BC  082E               	movf	rd2RegCompleteHandler@p+1,w
 15270  10BD  00A1               	movwf	I2C_SetBuffer@buffer+1
 15271  10BE  082D               	movf	rd2RegCompleteHandler@p,w
 15272  10BF  00A0               	movwf	I2C_SetBuffer@buffer
 15273  10C0  3002               	movlw	2
 15274  10C1  00A2               	movwf	I2C_SetBuffer@bufferSize
 15275  10C2  3000               	movlw	0
 15276  10C3  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 15277  10C4  3190  205E  3190   	fcall	_I2C_SetBuffer
 15278                           
 15279                           ;mcc_generated_files/drivers/i2c_simple_master.c: 122:     I2C_SetDataCompleteCallback((
      +                          (void*)0),((void*)0));
 15280  10C7  3000               	movlw	0
 15281  10C8  0020               	movlb	0	; select bank0
 15282  10C9  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 15283  10CA  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 15284  10CB  3000               	movlw	0
 15285  10CC  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 15286  10CD  3000               	movlw	0
 15287  10CE  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 15288  10CF  319F  27A5         	fcall	_I2C_SetDataCompleteCallback
 15289                           
 15290                           ;mcc_generated_files/drivers/i2c_simple_master.c: 123:     return I2C_RESTART_READ;
 15291  10D1  3002               	movlw	2
 15292  10D2  0008               	return
 15293  10D3                     __end_of_rd2RegCompleteHandler:
 15294                           
 15295                           	psect	text93
 15296  10A3                     __ptext93:	
 15297 ;; *************** function _rd1RegCompleteHandler *****************
 15298 ;; Defined at:
 15299 ;;		line 81 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 15300 ;; Parameters:    Size  Location     Type
 15301 ;;  p               2   13[BANK0 ] PTR void 
 15302 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 15303 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 15304 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 15305 ;; Auto vars:     Size  Location     Type
 15306 ;;		None
 15307 ;; Return value:  Size  Location     Type
 15308 ;;                  1    wreg      enum E360
 15309 ;; Registers used:
 15310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15311 ;; Tracked objects:
 15312 ;;		On entry : 1E/1
 15313 ;;		On exit  : 1F/0
 15314 ;;		Unchanged: 0/0
 15315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15316 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15319 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15320 ;;Total ram usage:        2 bytes
 15321 ;; Hardware stack levels used:    1
 15322 ;; Hardware stack levels required when called:    6
 15323 ;; This function calls:
 15324 ;;		_I2C_SetBuffer
 15325 ;;		_I2C_SetDataCompleteCallback
 15326 ;; This function is called by:
 15327 ;;		_i2c_read1ByteRegister
 15328 ;;		_I2C_DO_TX
 15329 ;;		_I2C_DO_RX
 15330 ;;		_I2C_DO_TX_EMPTY
 15331 ;;		_I2C_DO_ADDRESS_NACK
 15332 ;; This function uses a non-reentrant model
 15333 ;;
 15334                           
 15335                           
 15336                           ;psect for function _rd1RegCompleteHandler
 15337  10A3                     _rd1RegCompleteHandler:
 15338                           
 15339                           ;mcc_generated_files/drivers/i2c_simple_master.c: 81: static i2c_operations_t rd1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 82: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 83:     I2C_SetBuffer(p,1);
 15340                           
 15341                           ;incstack = 0
 15342                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15343  10A3  0020               	movlb	0	; select bank0
 15344  10A4  082E               	movf	rd1RegCompleteHandler@p+1,w
 15345  10A5  00A1               	movwf	I2C_SetBuffer@buffer+1
 15346  10A6  082D               	movf	rd1RegCompleteHandler@p,w
 15347  10A7  00A0               	movwf	I2C_SetBuffer@buffer
 15348  10A8  3001               	movlw	1
 15349  10A9  00A2               	movwf	I2C_SetBuffer@bufferSize
 15350  10AA  3000               	movlw	0
 15351  10AB  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 15352  10AC  3190  205E  3190   	fcall	_I2C_SetBuffer
 15353                           
 15354                           ;mcc_generated_files/drivers/i2c_simple_master.c: 84:     I2C_SetDataCompleteCallback(((
      +                          void*)0),((void*)0));
 15355  10AF  3000               	movlw	0
 15356  10B0  0020               	movlb	0	; select bank0
 15357  10B1  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 15358  10B2  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 15359  10B3  3000               	movlw	0
 15360  10B4  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 15361  10B5  3000               	movlw	0
 15362  10B6  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 15363  10B7  319F  27A5         	fcall	_I2C_SetDataCompleteCallback
 15364                           
 15365                           ;mcc_generated_files/drivers/i2c_simple_master.c: 85:     return I2C_RESTART_READ;
 15366  10B9  3002               	movlw	2
 15367  10BA  0008               	return
 15368  10BB                     __end_of_rd1RegCompleteHandler:
 15369                           
 15370                           	psect	text94
 15371  108B                     __ptext94:	
 15372 ;; *************** function _wr1RegCompleteHandler *****************
 15373 ;; Defined at:
 15374 ;;		line 34 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 15375 ;; Parameters:    Size  Location     Type
 15376 ;;  p               2   13[BANK0 ] PTR void 
 15377 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 15378 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 15379 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 15380 ;; Auto vars:     Size  Location     Type
 15381 ;;		None
 15382 ;; Return value:  Size  Location     Type
 15383 ;;                  1    wreg      enum E360
 15384 ;; Registers used:
 15385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15386 ;; Tracked objects:
 15387 ;;		On entry : 1E/1
 15388 ;;		On exit  : 1F/0
 15389 ;;		Unchanged: 0/0
 15390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15391 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15395 ;;Total ram usage:        2 bytes
 15396 ;; Hardware stack levels used:    1
 15397 ;; Hardware stack levels required when called:    6
 15398 ;; This function calls:
 15399 ;;		_I2C_SetBuffer
 15400 ;;		_I2C_SetDataCompleteCallback
 15401 ;; This function is called by:
 15402 ;;		_i2c_write1ByteRegister
 15403 ;;		_I2C_DO_TX
 15404 ;;		_I2C_DO_RX
 15405 ;;		_I2C_DO_TX_EMPTY
 15406 ;;		_I2C_DO_ADDRESS_NACK
 15407 ;; This function uses a non-reentrant model
 15408 ;;
 15409                           
 15410                           
 15411                           ;psect for function _wr1RegCompleteHandler
 15412  108B                     _wr1RegCompleteHandler:
 15413                           
 15414                           ;mcc_generated_files/drivers/i2c_simple_master.c: 34: static i2c_operations_t wr1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 35: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 36:     I2C_SetBuffer(p,1);
 15415                           
 15416                           ;incstack = 0
 15417                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15418  108B  0020               	movlb	0	; select bank0
 15419  108C  082E               	movf	wr1RegCompleteHandler@p+1,w
 15420  108D  00A1               	movwf	I2C_SetBuffer@buffer+1
 15421  108E  082D               	movf	wr1RegCompleteHandler@p,w
 15422  108F  00A0               	movwf	I2C_SetBuffer@buffer
 15423  1090  3001               	movlw	1
 15424  1091  00A2               	movwf	I2C_SetBuffer@bufferSize
 15425  1092  3000               	movlw	0
 15426  1093  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 15427  1094  3190  205E  3190   	fcall	_I2C_SetBuffer
 15428                           
 15429                           ;mcc_generated_files/drivers/i2c_simple_master.c: 37:     I2C_SetDataCompleteCallback(((
      +                          void*)0),((void*)0));
 15430  1097  3000               	movlw	0
 15431  1098  0020               	movlb	0	; select bank0
 15432  1099  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 15433  109A  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 15434  109B  3000               	movlw	0
 15435  109C  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 15436  109D  3000               	movlw	0
 15437  109E  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 15438  109F  319F  27A5         	fcall	_I2C_SetDataCompleteCallback
 15439                           
 15440                           ;mcc_generated_files/drivers/i2c_simple_master.c: 38:     return I2C_CONTINUE;
 15441  10A1  3004               	movlw	4
 15442  10A2  0008               	return
 15443  10A3                     __end_of_wr1RegCompleteHandler:
 15444                           
 15445                           	psect	text95
 15446  1073                     __ptext95:	
 15447 ;; *************** function _wr2RegCompleteHandler@i2c_master_example$F166 *****************
 15448 ;; Defined at:
 15449 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
 15450 ;; Parameters:    Size  Location     Type
 15451 ;;  ptr             2   13[BANK0 ] PTR void 
 15452 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 15453 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 15454 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 15455 ;; Auto vars:     Size  Location     Type
 15456 ;;		None
 15457 ;; Return value:  Size  Location     Type
 15458 ;;                  1    wreg      enum E360
 15459 ;; Registers used:
 15460 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15461 ;; Tracked objects:
 15462 ;;		On entry : 1E/1
 15463 ;;		On exit  : 1F/0
 15464 ;;		Unchanged: 0/0
 15465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15466 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15469 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15470 ;;Total ram usage:        2 bytes
 15471 ;; Hardware stack levels used:    1
 15472 ;; Hardware stack levels required when called:    6
 15473 ;; This function calls:
 15474 ;;		_I2C_SetBuffer
 15475 ;;		_I2C_SetDataCompleteCallback
 15476 ;; This function is called by:
 15477 ;;		_I2C_DO_TX
 15478 ;;		_I2C_DO_RX
 15479 ;;		_I2C_DO_TX_EMPTY
 15480 ;;		_I2C_DO_ADDRESS_NACK
 15481 ;; This function uses a non-reentrant model
 15482 ;;
 15483                           
 15484                           
 15485                           ;psect for function _wr2RegCompleteHandler@i2c_master_example$F166
 15486  1073                     _wr2RegCompleteHandler@i2c_master_example$F166:
 15487                           
 15488                           ;mcc_generated_files/examples/i2c_master_example.c: 163: static i2c_operations_t wr2RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 164: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 165:     I2C_SetBuffer(ptr,2);
 15489                           
 15490                           ;incstack = 0
 15491                           ; Regs used in _wr2RegCompleteHandler@i2c_master_example$F166: [wreg+fsr1l+fsr1h+status,
      +                          2+status,0+pclath+cstack]
 15492  1073  0020               	movlb	0	; select bank0
 15493  1074  082E               	movf	wr2RegCompleteHandler@i2c_master_example$F166@ptr+1,w
 15494  1075  00A1               	movwf	I2C_SetBuffer@buffer+1
 15495  1076  082D               	movf	wr2RegCompleteHandler@i2c_master_example$F166@ptr,w
 15496  1077  00A0               	movwf	I2C_SetBuffer@buffer
 15497  1078  3002               	movlw	2
 15498  1079  00A2               	movwf	I2C_SetBuffer@bufferSize
 15499  107A  3000               	movlw	0
 15500  107B  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 15501  107C  3190  205E  3190   	fcall	_I2C_SetBuffer
 15502                           
 15503                           ;mcc_generated_files/examples/i2c_master_example.c: 166:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 15504  107F  3000               	movlw	0
 15505  1080  0020               	movlb	0	; select bank0
 15506  1081  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 15507  1082  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 15508  1083  3000               	movlw	0
 15509  1084  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 15510  1085  3000               	movlw	0
 15511  1086  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 15512  1087  319F  27A5         	fcall	_I2C_SetDataCompleteCallback
 15513                           
 15514                           ;mcc_generated_files/examples/i2c_master_example.c: 167:     return I2C_CONTINUE;
 15515  1089  3004               	movlw	4
 15516  108A  0008               	return
 15517  108B                     __end_of_wr2RegCompleteHandler@i2c_master_example$F166:
 15518                           
 15519                           	psect	text96
 15520  1FA5                     __ptext96:	
 15521 ;; *************** function _I2C_SetDataCompleteCallback *****************
 15522 ;; Defined at:
 15523 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
 15524 ;; Parameters:    Size  Location     Type
 15525 ;;  cb              2    9[BANK0 ] PTR FTN(PTR void ,)enum 
 15526 ;;		 -> Absolute function(1), rdBlkRegCompleteHandler@i2c_master_example$F177(1), wr2RegCompleteHandler@i2c_master_examp
      +le$F166(1), wr1RegCompleteHandler@i2c_master_example$F160(1), 
 15527 ;;		 -> rd2RegCompleteHandler@i2c_master_example$F154(1), rd1RegCompleteHandler@i2c_master_example$F143(1), rdBlkRegComp
      +leteHandler(1), wr2RegCompleteHandler(1), 
 15528 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), wr1RegCompleteHandler(1), 
 15529 ;;  ptr             2   11[BANK0 ] PTR void 
 15530 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 15531 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 15532 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 15533 ;; Auto vars:     Size  Location     Type
 15534 ;;		None
 15535 ;; Return value:  Size  Location     Type
 15536 ;;                  1    wreg      void 
 15537 ;; Registers used:
 15538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15539 ;; Tracked objects:
 15540 ;;		On entry : 1F/0
 15541 ;;		On exit  : 1F/0
 15542 ;;		Unchanged: 0/0
 15543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15544 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15547 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15548 ;;Total ram usage:        4 bytes
 15549 ;; Hardware stack levels used:    1
 15550 ;; Hardware stack levels required when called:    5
 15551 ;; This function calls:
 15552 ;;		_I2C_SetCallback
 15553 ;; This function is called by:
 15554 ;;		_wr1RegCompleteHandler
 15555 ;;		_i2c_write1ByteRegister
 15556 ;;		_rd1RegCompleteHandler
 15557 ;;		_i2c_read1ByteRegister
 15558 ;;		_rd2RegCompleteHandler
 15559 ;;		_wr2RegCompleteHandler
 15560 ;;		_rdBlkRegCompleteHandler
 15561 ;;		_i2c_readDataBlock
 15562 ;;		_rd1RegCompleteHandler@i2c_master_example$F143
 15563 ;;		_rd2RegCompleteHandler@i2c_master_example$F154
 15564 ;;		_wr1RegCompleteHandler@i2c_master_example$F160
 15565 ;;		_wr2RegCompleteHandler@i2c_master_example$F166
 15566 ;;		_rdBlkRegCompleteHandler@i2c_master_example$F177
 15567 ;; This function uses a non-reentrant model
 15568 ;;
 15569                           
 15570                           
 15571                           ;psect for function _I2C_SetDataCompleteCallback
 15572  1FA5                     _I2C_SetDataCompleteCallback:
 15573                           
 15574                           ;mcc_generated_files/i2c_master.c: 273: void I2C_SetDataCompleteCallback(i2c_callback_t 
      +                          cb, void *ptr);mcc_generated_files/i2c_master.c: 274: {;mcc_generated_files/i2c_master.c
      +                          : 275:     I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
 15575                           
 15576                           ;incstack = 0
 15577                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15578  1FA5  082A               	movf	I2C_SetDataCompleteCallback@cb+1,w
 15579  1FA6  00A1               	movwf	I2C_SetCallback@cb+1
 15580  1FA7  0829               	movf	I2C_SetDataCompleteCallback@cb,w
 15581  1FA8  00A0               	movwf	I2C_SetCallback@cb
 15582  1FA9  082C               	movf	I2C_SetDataCompleteCallback@ptr+1,w
 15583  1FAA  00A3               	movwf	I2C_SetCallback@ptr+1
 15584  1FAB  082B               	movf	I2C_SetDataCompleteCallback@ptr,w
 15585  1FAC  00A2               	movwf	I2C_SetCallback@ptr
 15586  1FAD  3000               	movlw	0
 15587  1FAE  3197  2756         	fcall	_I2C_SetCallback
 15588  1FB0  0008               	return
 15589  1FB1                     __end_of_I2C_SetDataCompleteCallback:
 15590                           
 15591                           	psect	text97
 15592  1756                     __ptext97:	
 15593 ;; *************** function _I2C_SetCallback *****************
 15594 ;; Defined at:
 15595 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
 15596 ;; Parameters:    Size  Location     Type
 15597 ;;  idx             1    wreg     enum E3108
 15598 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
 15599 ;;		 -> Absolute function(1), rdBlkRegCompleteHandler@i2c_master_example$F177(1), wr2RegCompleteHandler@i2c_master_examp
      +le$F166(1), wr1RegCompleteHandler@i2c_master_example$F160(1), 
 15600 ;;		 -> rd2RegCompleteHandler@i2c_master_example$F154(1), rd1RegCompleteHandler@i2c_master_example$F143(1), rdBlkRegComp
      +leteHandler(1), wr2RegCompleteHandler(1), 
 15601 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), wr1RegCompleteHandler(1), 
 15602 ;;  ptr             2    2[BANK0 ] PTR void 
 15603 ;;		 -> I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 15604 ;;		 -> I2C_Read1ByteRegister@returnValue(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegis
      +ter@result(2), 
 15605 ;;		 -> i2c_read1ByteRegister@d2(1), i2c_write1ByteRegister@data(1), NULL(0), 
 15606 ;; Auto vars:     Size  Location     Type
 15607 ;;  idx             1    8[BANK0 ] enum E3108
 15608 ;; Return value:  Size  Location     Type
 15609 ;;                  1    wreg      void 
 15610 ;; Registers used:
 15611 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15612 ;; Tracked objects:
 15613 ;;		On entry : 1F/0
 15614 ;;		On exit  : 1F/0
 15615 ;;		Unchanged: 0/0
 15616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15617 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15618 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15619 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15620 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15621 ;;Total ram usage:        9 bytes
 15622 ;; Hardware stack levels used:    1
 15623 ;; Hardware stack levels required when called:    4
 15624 ;; This function calls:
 15625 ;;		Nothing
 15626 ;; This function is called by:
 15627 ;;		_I2C_SetDataCompleteCallback
 15628 ;;		_I2C_SetAddressNackCallback
 15629 ;; This function uses a non-reentrant model
 15630 ;;
 15631                           
 15632                           
 15633                           ;psect for function _I2C_SetCallback
 15634  1756                     _I2C_SetCallback:
 15635                           
 15636                           ;incstack = 0
 15637                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 15638                           ;I2C_SetCallback@idx stored from wreg
 15639  1756  00A8               	movwf	I2C_SetCallback@idx
 15640                           
 15641                           ;mcc_generated_files/i2c_master.c: 298: static void I2C_SetCallback(i2c_callbackIndex_t 
      +                          idx, i2c_callback_t cb, void *ptr);mcc_generated_files/i2c_master.c: 299: {;mcc_generate
      +                          d_files/i2c_master.c: 300:     if(cb)
 15642  1757  0820               	movf	I2C_SetCallback@cb,w
 15643  1758  0421               	iorwf	I2C_SetCallback@cb+1,w
 15644  1759  1903               	btfsc	3,2
 15645  175A  2F82               	goto	l4326
 15646                           
 15647                           ;mcc_generated_files/i2c_master.c: 301:     {;mcc_generated_files/i2c_master.c: 302:    
      +                               I2C_Status.callbackTable[idx] = cb;
 15648  175B  0828               	movf	I2C_SetCallback@idx,w
 15649  175C  00A4               	movwf	??_I2C_SetCallback
 15650  175D  01A5               	clrf	??_I2C_SetCallback+1
 15651  175E  35A4               	lslf	??_I2C_SetCallback,f
 15652  175F  0DA5               	rlf	??_I2C_SetCallback+1,f
 15653  1760  30A0               	movlw	low _I2C_Status
 15654  1761  00A6               	movwf	??_I2C_SetCallback+2
 15655  1762  3000               	movlw	high _I2C_Status
 15656  1763  00A7               	movwf	??_I2C_SetCallback+3
 15657  1764  0824               	movf	??_I2C_SetCallback,w
 15658  1765  0726               	addwf	??_I2C_SetCallback+2,w
 15659  1766  0086               	movwf	6
 15660  1767  0825               	movf	??_I2C_SetCallback+1,w
 15661  1768  3D27               	addwfc	??_I2C_SetCallback+3,w
 15662  1769  0087               	movwf	7
 15663  176A  0820               	movf	I2C_SetCallback@cb,w
 15664  176B  3FC0               	movwi [0]fsr1
 15665  176C  0821               	movf	I2C_SetCallback@cb+1,w
 15666  176D  3FC1               	movwi [1]fsr1
 15667                           
 15668                           ;mcc_generated_files/i2c_master.c: 303:         I2C_Status.callbackPayload[idx] = ptr;
 15669  176E  0828               	movf	I2C_SetCallback@idx,w
 15670  176F  00A4               	movwf	??_I2C_SetCallback
 15671  1770  01A5               	clrf	??_I2C_SetCallback+1
 15672  1771  35A4               	lslf	??_I2C_SetCallback,f
 15673  1772  0DA5               	rlf	??_I2C_SetCallback+1,f
 15674  1773  30AC               	movlw	low (_I2C_Status+12)
 15675  1774  00A6               	movwf	??_I2C_SetCallback+2
 15676  1775  3000               	movlw	high (_I2C_Status+12)
 15677  1776  00A7               	movwf	??_I2C_SetCallback+3
 15678  1777  0824               	movf	??_I2C_SetCallback,w
 15679  1778  0726               	addwf	??_I2C_SetCallback+2,w
 15680  1779  0086               	movwf	6
 15681  177A  0825               	movf	??_I2C_SetCallback+1,w
 15682  177B  3D27               	addwfc	??_I2C_SetCallback+3,w
 15683  177C  0087               	movwf	7
 15684  177D  0822               	movf	I2C_SetCallback@ptr,w
 15685  177E  3FC0               	movwi [0]fsr1
 15686  177F  0823               	movf	I2C_SetCallback@ptr+1,w
 15687  1780  3FC1               	movwi [1]fsr1
 15688                           
 15689                           ;mcc_generated_files/i2c_master.c: 304:     }
 15690  1781  0008               	return
 15691  1782                     l4326:
 15692                           
 15693                           ;mcc_generated_files/i2c_master.c: 306:     {;mcc_generated_files/i2c_master.c: 307:    
      +                               I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 15694  1782  0828               	movf	I2C_SetCallback@idx,w
 15695  1783  00A4               	movwf	??_I2C_SetCallback
 15696  1784  01A5               	clrf	??_I2C_SetCallback+1
 15697  1785  35A4               	lslf	??_I2C_SetCallback,f
 15698  1786  0DA5               	rlf	??_I2C_SetCallback+1,f
 15699  1787  30A0               	movlw	low _I2C_Status
 15700  1788  00A6               	movwf	??_I2C_SetCallback+2
 15701  1789  3000               	movlw	high _I2C_Status
 15702  178A  00A7               	movwf	??_I2C_SetCallback+3
 15703  178B  0824               	movf	??_I2C_SetCallback,w
 15704  178C  0726               	addwf	??_I2C_SetCallback+2,w
 15705  178D  0086               	movwf	6
 15706  178E  0825               	movf	??_I2C_SetCallback+1,w
 15707  178F  3D27               	addwfc	??_I2C_SetCallback+3,w
 15708  1790  0087               	movwf	7
 15709  1791  30B7               	movlw	low _I2C_CallbackReturnStop
 15710  1792  3FC0               	movwi [0]fsr1
 15711  1793  301E               	movlw	high _I2C_CallbackReturnStop
 15712  1794  3FC1               	movwi [1]fsr1
 15713                           
 15714                           ;mcc_generated_files/i2c_master.c: 308:         I2C_Status.callbackPayload[idx] = ((void
      +                          *)0);
 15715  1795  0828               	movf	I2C_SetCallback@idx,w
 15716  1796  00A4               	movwf	??_I2C_SetCallback
 15717  1797  01A5               	clrf	??_I2C_SetCallback+1
 15718  1798  35A4               	lslf	??_I2C_SetCallback,f
 15719  1799  0DA5               	rlf	??_I2C_SetCallback+1,f
 15720  179A  30AC               	movlw	low (_I2C_Status+12)
 15721  179B  00A6               	movwf	??_I2C_SetCallback+2
 15722  179C  3000               	movlw	high (_I2C_Status+12)
 15723  179D  00A7               	movwf	??_I2C_SetCallback+3
 15724  179E  0824               	movf	??_I2C_SetCallback,w
 15725  179F  0726               	addwf	??_I2C_SetCallback+2,w
 15726  17A0  0086               	movwf	6
 15727  17A1  0825               	movf	??_I2C_SetCallback+1,w
 15728  17A2  3D27               	addwfc	??_I2C_SetCallback+3,w
 15729  17A3  0087               	movwf	7
 15730  17A4  3000               	movlw	0
 15731  17A5  3FC0               	movwi [0]fsr1
 15732  17A6  3FC1               	movwi [1]fsr1
 15733  17A7  0008               	return
 15734  17A8                     __end_of_I2C_SetCallback:
 15735                           
 15736                           	psect	text98
 15737  105E                     __ptext98:	
 15738 ;; *************** function _I2C_SetBuffer *****************
 15739 ;; Defined at:
 15740 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
 15741 ;; Parameters:    Size  Location     Type
 15742 ;;  buffer          2    0[BANK0 ] PTR void 
 15743 ;;		 -> fifo_data(128), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@reg(1), 
 15744 ;;		 -> I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegi
      +ster@reg(1), 
 15745 ;;		 -> I2C_Read2ByteRegister@returnValue(2), I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), i2c_re
      +adDataBlock@reg(1), 
 15746 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@reg
      +(1), 
 15747 ;;		 -> i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegister@d2(1), i2c_write1ByteRegist
      +er@reg(1), 
 15748 ;;		 -> i2c_write1ByteRegister@data(1), NULL(0), 
 15749 ;;  bufferSize      2    2[BANK0 ] unsigned int 
 15750 ;; Auto vars:     Size  Location     Type
 15751 ;;		None
 15752 ;; Return value:  Size  Location     Type
 15753 ;;                  1    wreg      void 
 15754 ;; Registers used:
 15755 ;;		wreg
 15756 ;; Tracked objects:
 15757 ;;		On entry : 1F/0
 15758 ;;		On exit  : 1F/1
 15759 ;;		Unchanged: 0/0
 15760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15761 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15764 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15765 ;;Total ram usage:        4 bytes
 15766 ;; Hardware stack levels used:    1
 15767 ;; Hardware stack levels required when called:    4
 15768 ;; This function calls:
 15769 ;;		Nothing
 15770 ;; This function is called by:
 15771 ;;		_wr1RegCompleteHandler
 15772 ;;		_i2c_write1ByteRegister
 15773 ;;		_rd1RegCompleteHandler
 15774 ;;		_i2c_read1ByteRegister
 15775 ;;		_rd2RegCompleteHandler
 15776 ;;		_wr2RegCompleteHandler
 15777 ;;		_rdBlkRegCompleteHandler
 15778 ;;		_i2c_readDataBlock
 15779 ;;		_rd1RegCompleteHandler@i2c_master_example$F143
 15780 ;;		_rd2RegCompleteHandler@i2c_master_example$F154
 15781 ;;		_wr1RegCompleteHandler@i2c_master_example$F160
 15782 ;;		_wr2RegCompleteHandler@i2c_master_example$F166
 15783 ;;		_rdBlkRegCompleteHandler@i2c_master_example$F177
 15784 ;; This function uses a non-reentrant model
 15785 ;;
 15786                           
 15787                           
 15788                           ;psect for function _I2C_SetBuffer
 15789  105E                     _I2C_SetBuffer:
 15790                           
 15791                           ;mcc_generated_files/i2c_master.c: 263: void I2C_SetBuffer(void *buffer, size_t bufferSi
      +                          ze);mcc_generated_files/i2c_master.c: 264: {;mcc_generated_files/i2c_master.c: 265:     
      +                          if(I2C_Status.bufferFree)
 15792                           
 15793                           ;incstack = 0
 15794                           ; Regs used in _I2C_SetBuffer: [wreg]
 15795  105E  0021               	movlb	1	; select bank1
 15796  105F  1DC3               	btfss	(_I2C_Status^(0+128)+35),3
 15797  1060  0008               	return
 15798                           
 15799                           ;mcc_generated_files/i2c_master.c: 266:     {;mcc_generated_files/i2c_master.c: 267:    
      +                               I2C_Status.data_ptr = buffer;
 15800  1061  0020               	movlb	0	; select bank0
 15801  1062  0821               	movf	I2C_SetBuffer@buffer+1,w
 15802  1063  0021               	movlb	1	; select bank1
 15803  1064  00BE               	movwf	((_I2C_Status+1)^(0+128)+29)
 15804  1065  0020               	movlb	0	; select bank0
 15805  1066  0820               	movf	I2C_SetBuffer@buffer,w
 15806  1067  0021               	movlb	1	; select bank1
 15807  1068  00BD               	movwf	(_I2C_Status^(0+128)+29)
 15808                           
 15809                           ;mcc_generated_files/i2c_master.c: 268:         I2C_Status.data_length = bufferSize;
 15810  1069  0020               	movlb	0	; select bank0
 15811  106A  0823               	movf	I2C_SetBuffer@bufferSize+1,w
 15812  106B  0021               	movlb	1	; select bank1
 15813  106C  00C0               	movwf	((_I2C_Status+1)^(0+128)+31)
 15814  106D  0020               	movlb	0	; select bank0
 15815  106E  0822               	movf	I2C_SetBuffer@bufferSize,w
 15816  106F  0021               	movlb	1	; select bank1
 15817  1070  00BF               	movwf	(_I2C_Status^(0+128)+31)
 15818                           
 15819                           ;mcc_generated_files/i2c_master.c: 269:         I2C_Status.bufferFree = 0;
 15820  1071  11C3               	bcf	(_I2C_Status^(0+128)+35),3
 15821  1072  0008               	return
 15822  1073                     __end_of_I2C_SetBuffer:
 15823                           
 15824                           	psect	text99
 15825  1ECD                     __ptext99:	
 15826 ;; *************** function _I2C_MasterStop *****************
 15827 ;; Defined at:
 15828 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
 15829 ;; Parameters:    Size  Location     Type
 15830 ;;		None
 15831 ;; Auto vars:     Size  Location     Type
 15832 ;;		None
 15833 ;; Return value:  Size  Location     Type
 15834 ;;                  1    wreg      void 
 15835 ;; Registers used:
 15836 ;;		None
 15837 ;; Tracked objects:
 15838 ;;		On entry : 1F/0
 15839 ;;		On exit  : 1F/4
 15840 ;;		Unchanged: 0/0
 15841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15846 ;;Total ram usage:        0 bytes
 15847 ;; Hardware stack levels used:    1
 15848 ;; Hardware stack levels required when called:    4
 15849 ;; This function calls:
 15850 ;;		Nothing
 15851 ;; This function is called by:
 15852 ;;		_I2C_DO_SEND_STOP
 15853 ;; This function uses a non-reentrant model
 15854 ;;
 15855                           
 15856                           
 15857                           ;psect for function _I2C_MasterStop
 15858  1ECD                     _I2C_MasterStop:
 15859                           
 15860                           ;mcc_generated_files/i2c_master.c: 595:     SSPCON2bits.PEN = 1;
 15861                           
 15862                           ;incstack = 0
 15863                           ; Regs used in _I2C_MasterStop: []
 15864  1ECD  0024               	movlb	4	; select bank4
 15865  1ECE  1516               	bsf	22,2	;volatile
 15866  1ECF  0008               	return
 15867  1ED0                     __end_of_I2C_MasterStop:
 15868                           
 15869                           	psect	text100
 15870  1ECA                     __ptext100:	
 15871 ;; *************** function _I2C_MasterEnableRestart *****************
 15872 ;; Defined at:
 15873 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
 15874 ;; Parameters:    Size  Location     Type
 15875 ;;		None
 15876 ;; Auto vars:     Size  Location     Type
 15877 ;;		None
 15878 ;; Return value:  Size  Location     Type
 15879 ;;                  1    wreg      void 
 15880 ;; Registers used:
 15881 ;;		None
 15882 ;; Tracked objects:
 15883 ;;		On entry : 1F/0
 15884 ;;		On exit  : 1F/4
 15885 ;;		Unchanged: 0/0
 15886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15891 ;;Total ram usage:        0 bytes
 15892 ;; Hardware stack levels used:    1
 15893 ;; Hardware stack levels required when called:    4
 15894 ;; This function calls:
 15895 ;;		Nothing
 15896 ;; This function is called by:
 15897 ;;		_I2C_DO_SEND_RESTART_READ
 15898 ;;		_I2C_DO_SEND_RESTART_WRITE
 15899 ;;		_I2C_DO_SEND_RESTART
 15900 ;; This function uses a non-reentrant model
 15901 ;;
 15902                           
 15903                           
 15904                           ;psect for function _I2C_MasterEnableRestart
 15905  1ECA                     _I2C_MasterEnableRestart:
 15906                           
 15907                           ;mcc_generated_files/i2c_master.c: 575:     SSPCON2bits.RSEN = 1;
 15908                           
 15909                           ;incstack = 0
 15910                           ; Regs used in _I2C_MasterEnableRestart: []
 15911  1ECA  0024               	movlb	4	; select bank4
 15912  1ECB  1496               	bsf	22,1	;volatile
 15913  1ECC  0008               	return
 15914  1ECD                     __end_of_I2C_MasterEnableRestart:
 15915                           
 15916                           	psect	text101
 15917  1EC7                     __ptext101:	
 15918 ;; *************** function _I2C_MasterStart *****************
 15919 ;; Defined at:
 15920 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
 15921 ;; Parameters:    Size  Location     Type
 15922 ;;		None
 15923 ;; Auto vars:     Size  Location     Type
 15924 ;;		None
 15925 ;; Return value:  Size  Location     Type
 15926 ;;                  1    wreg      void 
 15927 ;; Registers used:
 15928 ;;		None
 15929 ;; Tracked objects:
 15930 ;;		On entry : 1F/0
 15931 ;;		On exit  : 1F/4
 15932 ;;		Unchanged: 0/0
 15933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15938 ;;Total ram usage:        0 bytes
 15939 ;; Hardware stack levels used:    1
 15940 ;; Hardware stack levels required when called:    4
 15941 ;; This function calls:
 15942 ;;		Nothing
 15943 ;; This function is called by:
 15944 ;;		_I2C_MasterOperation
 15945 ;; This function uses a non-reentrant model
 15946 ;;
 15947                           
 15948                           
 15949                           ;psect for function _I2C_MasterStart
 15950  1EC7                     _I2C_MasterStart:
 15951                           
 15952                           ;mcc_generated_files/i2c_master.c: 590:     SSPCON2bits.SEN = 1;
 15953                           
 15954                           ;incstack = 0
 15955                           ; Regs used in _I2C_MasterStart: []
 15956  1EC7  0024               	movlb	4	; select bank4
 15957  1EC8  1416               	bsf	22,0	;volatile
 15958  1EC9  0008               	return
 15959  1ECA                     __end_of_I2C_MasterStart:
 15960                           
 15961                           	psect	text102
 15962  11D0                     __ptext102:	
 15963 ;; *************** function _I2C_Close *****************
 15964 ;; Defined at:
 15965 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
 15966 ;; Parameters:    Size  Location     Type
 15967 ;;		None
 15968 ;; Auto vars:     Size  Location     Type
 15969 ;;  returnValue     1    1[BANK0 ] enum E355
 15970 ;; Return value:  Size  Location     Type
 15971 ;;                  1    wreg      enum E355
 15972 ;; Registers used:
 15973 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15974 ;; Tracked objects:
 15975 ;;		On entry : 1F/0
 15976 ;;		On exit  : 1F/0
 15977 ;;		Unchanged: 0/0
 15978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15980 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15981 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15982 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15983 ;;Total ram usage:        2 bytes
 15984 ;; Hardware stack levels used:    1
 15985 ;; Hardware stack levels required when called:    5
 15986 ;; This function calls:
 15987 ;;		_I2C_MasterClearIrq
 15988 ;;		_I2C_MasterClose
 15989 ;;		_I2C_MasterDisableIrq
 15990 ;; This function is called by:
 15991 ;;		_i2c_write1ByteRegister
 15992 ;;		_i2c_read1ByteRegister
 15993 ;;		_i2c_readDataBlock
 15994 ;; This function uses a non-reentrant model
 15995 ;;
 15996                           
 15997                           
 15998                           ;psect for function _I2C_Close
 15999  11D0                     _I2C_Close:
 16000                           
 16001                           ;mcc_generated_files/i2c_master.c: 211:     i2c_error_t returnValue = I2C_BUSY;
 16002                           
 16003                           ;incstack = 0
 16004                           ; Regs used in _I2C_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16005  11D0  01A1               	clrf	I2C_Close@returnValue
 16006  11D1  0AA1               	incf	I2C_Close@returnValue,f
 16007                           
 16008                           ;mcc_generated_files/i2c_master.c: 212:     if(!I2C_Status.busy)
 16009  11D2  0021               	movlb	1	; select bank1
 16010  11D3  18C3               	btfsc	(_I2C_Status^(0+128)+35),1
 16011  11D4  29EA               	goto	l4758
 16012                           
 16013                           ;mcc_generated_files/i2c_master.c: 213:     {;mcc_generated_files/i2c_master.c: 214:    
      +                               I2C_Status.inUse = 0;
 16014  11D5  1143               	bcf	(_I2C_Status^(0+128)+35),2
 16015                           
 16016                           ;mcc_generated_files/i2c_master.c: 215:         I2C_Status.address = 0xff;
 16017  11D6  30BC               	movlw	low (_I2C_Status+28)
 16018  11D7  0086               	movwf	6
 16019  11D8  3000               	movlw	high (_I2C_Status+28)
 16020  11D9  0087               	movwf	7
 16021  11DA  30FF               	movlw	255
 16022  11DB  0081               	movwf	1
 16023                           
 16024                           ;mcc_generated_files/i2c_master.c: 216:         I2C_MasterClearIrq();
 16025  11DC  319E  26BE  3191   	fcall	_I2C_MasterClearIrq
 16026                           
 16027                           ;mcc_generated_files/i2c_master.c: 217:         I2C_MasterDisableIrq();
 16028  11DF  319E  26C4  3191   	fcall	_I2C_MasterDisableIrq
 16029                           
 16030                           ;mcc_generated_files/i2c_master.c: 218:         I2C_MasterClose();
 16031  11E2  319E  26C1         	fcall	_I2C_MasterClose
 16032                           
 16033                           ;mcc_generated_files/i2c_master.c: 219:         returnValue = I2C_Status.error;
 16034  11E4  0021               	movlb	1	; select bank1
 16035  11E5  0842               	movf	(_I2C_Status^(0+128)+34),w
 16036  11E6  0020               	movlb	0	; select bank0
 16037  11E7  00A0               	movwf	??_I2C_Close
 16038  11E8  0820               	movf	??_I2C_Close,w
 16039  11E9  00A1               	movwf	I2C_Close@returnValue
 16040  11EA                     l4758:
 16041                           
 16042                           ;mcc_generated_files/i2c_master.c: 221:     return returnValue;
 16043  11EA  0020               	movlb	0	; select bank0
 16044  11EB  0821               	movf	I2C_Close@returnValue,w
 16045  11EC  0008               	return
 16046  11ED                     __end_of_I2C_Close:
 16047                           
 16048                           	psect	text103
 16049  1EC4                     __ptext103:	
 16050 ;; *************** function _I2C_MasterDisableIrq *****************
 16051 ;; Defined at:
 16052 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
 16053 ;; Parameters:    Size  Location     Type
 16054 ;;		None
 16055 ;; Auto vars:     Size  Location     Type
 16056 ;;		None
 16057 ;; Return value:  Size  Location     Type
 16058 ;;                  1    wreg      void 
 16059 ;; Registers used:
 16060 ;;		None
 16061 ;; Tracked objects:
 16062 ;;		On entry : 1F/0
 16063 ;;		On exit  : 1F/1
 16064 ;;		Unchanged: 0/0
 16065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16070 ;;Total ram usage:        0 bytes
 16071 ;; Hardware stack levels used:    1
 16072 ;; Hardware stack levels required when called:    4
 16073 ;; This function calls:
 16074 ;;		Nothing
 16075 ;; This function is called by:
 16076 ;;		_I2C_Close
 16077 ;; This function uses a non-reentrant model
 16078 ;;
 16079                           
 16080                           
 16081                           ;psect for function _I2C_MasterDisableIrq
 16082  1EC4                     _I2C_MasterDisableIrq:
 16083                           
 16084                           ;mcc_generated_files/i2c_master.c: 637:     PIE1bits.SSPIE = 0;
 16085                           
 16086                           ;incstack = 0
 16087                           ; Regs used in _I2C_MasterDisableIrq: []
 16088  1EC4  0021               	movlb	1	; select bank1
 16089  1EC5  1191               	bcf	17,3	;volatile
 16090  1EC6  0008               	return
 16091  1EC7                     __end_of_I2C_MasterDisableIrq:
 16092                           
 16093                           	psect	text104
 16094  1EC1                     __ptext104:	
 16095 ;; *************** function _I2C_MasterClose *****************
 16096 ;; Defined at:
 16097 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
 16098 ;; Parameters:    Size  Location     Type
 16099 ;;		None
 16100 ;; Auto vars:     Size  Location     Type
 16101 ;;		None
 16102 ;; Return value:  Size  Location     Type
 16103 ;;                  1    wreg      void 
 16104 ;; Registers used:
 16105 ;;		None
 16106 ;; Tracked objects:
 16107 ;;		On entry : 1F/1
 16108 ;;		On exit  : 1F/4
 16109 ;;		Unchanged: 0/0
 16110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16115 ;;Total ram usage:        0 bytes
 16116 ;; Hardware stack levels used:    1
 16117 ;; Hardware stack levels required when called:    4
 16118 ;; This function calls:
 16119 ;;		Nothing
 16120 ;; This function is called by:
 16121 ;;		_I2C_Close
 16122 ;; This function uses a non-reentrant model
 16123 ;;
 16124                           
 16125                           
 16126                           ;psect for function _I2C_MasterClose
 16127  1EC1                     _I2C_MasterClose:
 16128                           
 16129                           ;mcc_generated_files/i2c_master.c: 560:     SSPCON1bits.SSPEN = 0;
 16130                           
 16131                           ;incstack = 0
 16132                           ; Regs used in _I2C_MasterClose: []
 16133  1EC1  0024               	movlb	4	; select bank4
 16134  1EC2  1295               	bcf	21,5	;volatile
 16135  1EC3  0008               	return
 16136  1EC4                     __end_of_I2C_MasterClose:
 16137                           
 16138                           	psect	text105
 16139  1EBE                     __ptext105:	
 16140 ;; *************** function _I2C_MasterClearIrq *****************
 16141 ;; Defined at:
 16142 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
 16143 ;; Parameters:    Size  Location     Type
 16144 ;;		None
 16145 ;; Auto vars:     Size  Location     Type
 16146 ;;		None
 16147 ;; Return value:  Size  Location     Type
 16148 ;;                  1    wreg      void 
 16149 ;; Registers used:
 16150 ;;		None
 16151 ;; Tracked objects:
 16152 ;;		On entry : 1E/1
 16153 ;;		On exit  : 1F/0
 16154 ;;		Unchanged: 0/0
 16155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16160 ;;Total ram usage:        0 bytes
 16161 ;; Hardware stack levels used:    1
 16162 ;; Hardware stack levels required when called:    4
 16163 ;; This function calls:
 16164 ;;		Nothing
 16165 ;; This function is called by:
 16166 ;;		_I2C_Open
 16167 ;;		_I2C_Close
 16168 ;;		_I2C_MasterFsm
 16169 ;; This function uses a non-reentrant model
 16170 ;;
 16171                           
 16172                           
 16173                           ;psect for function _I2C_MasterClearIrq
 16174  1EBE                     _I2C_MasterClearIrq:
 16175                           
 16176                           ;mcc_generated_files/i2c_master.c: 642:     PIR1bits.SSPIF = 0;
 16177                           
 16178                           ;incstack = 0
 16179                           ; Regs used in _I2C_MasterClearIrq: []
 16180  1EBE  0020               	movlb	0	; select bank0
 16181  1EBF  1191               	bcf	17,3	;volatile
 16182  1EC0  0008               	return
 16183  1EC1                     __end_of_I2C_MasterClearIrq:
 16184                           
 16185                           	psect	intentry
 16186  0004                     __pintentry:	
 16187 ;; *************** function _INTERRUPT_InterruptManager *****************
 16188 ;; Defined at:
 16189 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 16190 ;; Parameters:    Size  Location     Type
 16191 ;;		None
 16192 ;; Auto vars:     Size  Location     Type
 16193 ;;		None
 16194 ;; Return value:  Size  Location     Type
 16195 ;;                  1    wreg      void 
 16196 ;; Registers used:
 16197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16198 ;; Tracked objects:
 16199 ;;		On entry : 0/0
 16200 ;;		On exit  : 0/0
 16201 ;;		Unchanged: 0/0
 16202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;Total ram usage:        0 bytes
 16208 ;; Hardware stack levels used:    1
 16209 ;; Hardware stack levels required when called:    3
 16210 ;; This function calls:
 16211 ;;		Absolute function
 16212 ;;		_CCP4_CaptureISR
 16213 ;;		_EUSART_Receive_ISR
 16214 ;;		_EUSART_Transmit_ISR
 16215 ;;		_PIN_MANAGER_IOC
 16216 ;; This function is called by:
 16217 ;;		Interrupt level 1
 16218 ;; This function uses a non-reentrant model
 16219 ;;
 16220                           
 16221  0004                     _INTERRUPT_InterruptManager:
 16222                           
 16223                           ;incstack = 0
 16224  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 16225                           
 16226                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16227  0005  3180               	pagesel	$
 16228                           
 16229                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
 16230  0006  198B               	btfsc	11,3	;volatile
 16231  0007  1C0B               	btfss	11,0	;volatile
 16232  0008  280D               	goto	i1l1145
 16233                           
 16234                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 16235  0009  319F  271F  3180   	fcall	_PIN_MANAGER_IOC
 16236                           
 16237                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 16238  000C  2831               	goto	i1l1155
 16239  000D                     i1l1145:	
 16240                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 16241                           
 16242  000D  1F0B               	btfss	11,6	;volatile
 16243  000E  2831               	goto	i1l1155
 16244                           
 16245                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 16246  000F  0021               	movlb	1	; select bank1
 16247  0010  1E11               	btfss	17,4	;volatile
 16248  0011  281C               	goto	i1l1148
 16249  0012  0020               	movlb	0	; select bank0
 16250  0013  1E11               	btfss	17,4	;volatile
 16251  0014  281C               	goto	i1l1148
 16252                           
 16253                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_TxDefaultInterruptHandler();
 16254  0015  0021               	movlb	1	; select bank1
 16255  0016  0869               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 16256  0017  008A               	movwf	10
 16257  0018  0868               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 16258  0019  000A               	callw
 16259  001A  3180               	pagesel	$
 16260                           
 16261                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 16262  001B  2831               	goto	i1l1155
 16263  001C                     i1l1148:	
 16264                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 16265                           
 16266  001C  0021               	movlb	1	; select bank1
 16267  001D  1E91               	btfss	17,5	;volatile
 16268  001E  2829               	goto	i1l1150
 16269  001F  0020               	movlb	0	; select bank0
 16270  0020  1E91               	btfss	17,5	;volatile
 16271  0021  2829               	goto	i1l1150
 16272                           
 16273                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
 16274  0022  0021               	movlb	1	; select bank1
 16275  0023  0867               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 16276  0024  008A               	movwf	10
 16277  0025  0866               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 16278  0026  000A               	callw
 16279  0027  3180               	pagesel	$
 16280                           
 16281                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 16282  0028  2831               	goto	i1l1155
 16283  0029                     i1l1150:	
 16284                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE3bits.CCP4IE == 1 && PI
      +                          R3bits.CCP4IF == 1)
 16285                           
 16286  0029  0021               	movlb	1	; select bank1
 16287  002A  1E93               	btfss	19,5	;volatile
 16288  002B  2831               	goto	i1l1155
 16289  002C  0020               	movlb	0	; select bank0
 16290  002D  1E93               	btfss	19,5	;volatile
 16291  002E  2831               	goto	i1l1155
 16292                           
 16293                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             CCP4_CaptureISR();
 16294  002F  3190  2049         	fcall	_CCP4_CaptureISR
 16295  0031                     i1l1155:	
 16296                           ;mcc_generated_files/interrupt_manager.c: 77:     }
 16297                           
 16298                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 16299                           
 16300  0031  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 16301  0032  0009               	retfie
 16302  0033                     __end_of_INTERRUPT_InterruptManager:
 16303                           
 16304                           	psect	text107
 16305  1F1F                     __ptext107:	
 16306 ;; *************** function _PIN_MANAGER_IOC *****************
 16307 ;; Defined at:
 16308 ;;		line 114 in file "mcc_generated_files/pin_manager.c"
 16309 ;; Parameters:    Size  Location     Type
 16310 ;;		None
 16311 ;; Auto vars:     Size  Location     Type
 16312 ;;		None
 16313 ;; Return value:  Size  Location     Type
 16314 ;;                  1    wreg      void 
 16315 ;; Registers used:
 16316 ;;		wreg, status,2, status,0, pclath, cstack
 16317 ;; Tracked objects:
 16318 ;;		On entry : 0/0
 16319 ;;		On exit  : 1F/7
 16320 ;;		Unchanged: 0/0
 16321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;Total ram usage:        0 bytes
 16327 ;; Hardware stack levels used:    1
 16328 ;; Hardware stack levels required when called:    2
 16329 ;; This function calls:
 16330 ;;		_IOCBF1_ISR
 16331 ;; This function is called by:
 16332 ;;		_INTERRUPT_InterruptManager
 16333 ;; This function uses a non-reentrant model
 16334 ;;
 16335                           
 16336                           
 16337                           ;psect for function _PIN_MANAGER_IOC
 16338  1F1F                     _PIN_MANAGER_IOC:
 16339                           
 16340                           ;mcc_generated_files/pin_manager.c: 117:     if(IOCBFbits.IOCBF1 == 1)
 16341                           
 16342                           ;incstack = 0
 16343                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 16344  1F1F  0027               	movlb	7	; select bank7
 16345  1F20  1C96               	btfss	22,1	;volatile
 16346  1F21  0008               	return
 16347                           
 16348                           ;mcc_generated_files/pin_manager.c: 118:     {;mcc_generated_files/pin_manager.c: 119:  
      +                                 IOCBF1_ISR();
 16349  1F22  319F  27C9         	fcall	_IOCBF1_ISR
 16350  1F24  0008               	return
 16351  1F25                     __end_of_PIN_MANAGER_IOC:
 16352                           
 16353                           	psect	text108
 16354  1FC9                     __ptext108:	
 16355 ;; *************** function _IOCBF1_ISR *****************
 16356 ;; Defined at:
 16357 ;;		line 126 in file "mcc_generated_files/pin_manager.c"
 16358 ;; Parameters:    Size  Location     Type
 16359 ;;		None
 16360 ;; Auto vars:     Size  Location     Type
 16361 ;;		None
 16362 ;; Return value:  Size  Location     Type
 16363 ;;                  1    wreg      void 
 16364 ;; Registers used:
 16365 ;;		wreg, status,2, status,0, pclath, cstack
 16366 ;; Tracked objects:
 16367 ;;		On entry : 1F/7
 16368 ;;		On exit  : 1F/7
 16369 ;;		Unchanged: 0/0
 16370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16375 ;;Total ram usage:        0 bytes
 16376 ;; Hardware stack levels used:    1
 16377 ;; Hardware stack levels required when called:    1
 16378 ;; This function calls:
 16379 ;;		Absolute function
 16380 ;;		_IOCBF1_DefaultInterruptHandler
 16381 ;;		_IOC_RB1_N_Handler
 16382 ;; This function is called by:
 16383 ;;		_PIN_MANAGER_IOC
 16384 ;; This function uses a non-reentrant model
 16385 ;;
 16386                           
 16387                           
 16388                           ;psect for function _IOCBF1_ISR
 16389  1FC9                     _IOCBF1_ISR:
 16390                           
 16391                           ;mcc_generated_files/pin_manager.c: 131:     if(IOCBF1_InterruptHandler)
 16392                           
 16393                           ;incstack = 0
 16394                           ; Regs used in _IOCBF1_ISR: [wreg+status,2+status,0+pclath+cstack]
 16395  1FC9  0021               	movlb	1	; select bank1
 16396  1FCA  086E               	movf	_IOCBF1_InterruptHandler^(0+128),w
 16397  1FCB  046F               	iorwf	(_IOCBF1_InterruptHandler+1)^(0+128),w
 16398  1FCC  1903               	btfsc	3,2
 16399  1FCD  2FD3               	goto	i1l4974
 16400                           
 16401                           ;mcc_generated_files/pin_manager.c: 132:     {;mcc_generated_files/pin_manager.c: 133:  
      +                                 IOCBF1_InterruptHandler();
 16402  1FCE  086F               	movf	(_IOCBF1_InterruptHandler+1)^(0+128),w
 16403  1FCF  008A               	movwf	10
 16404  1FD0  086E               	movf	_IOCBF1_InterruptHandler^(0+128),w
 16405  1FD1  000A               	callw
 16406  1FD2  319F               	pagesel	$
 16407  1FD3                     i1l4974:
 16408                           
 16409                           ;mcc_generated_files/pin_manager.c: 135:     IOCBFbits.IOCBF1 = 0;
 16410  1FD3  0027               	movlb	7	; select bank7
 16411  1FD4  1096               	bcf	22,1	;volatile
 16412  1FD5  0008               	return
 16413  1FD6                     __end_of_IOCBF1_ISR:
 16414                           
 16415                           	psect	text109
 16416  1EB6                     __ptext109:	
 16417 ;; *************** function _IOCBF1_DefaultInterruptHandler *****************
 16418 ;; Defined at:
 16419 ;;		line 148 in file "mcc_generated_files/pin_manager.c"
 16420 ;; Parameters:    Size  Location     Type
 16421 ;;		None
 16422 ;; Auto vars:     Size  Location     Type
 16423 ;;		None
 16424 ;; Return value:  Size  Location     Type
 16425 ;;                  1    wreg      void 
 16426 ;; Registers used:
 16427 ;;		None
 16428 ;; Tracked objects:
 16429 ;;		On entry : 1F/1
 16430 ;;		On exit  : 1F/1
 16431 ;;		Unchanged: 1F/0
 16432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16437 ;;Total ram usage:        0 bytes
 16438 ;; Hardware stack levels used:    1
 16439 ;; This function calls:
 16440 ;;		Nothing
 16441 ;; This function is called by:
 16442 ;;		_PIN_MANAGER_Initialize
 16443 ;;		_IOCBF1_ISR
 16444 ;; This function uses a non-reentrant model
 16445 ;;
 16446                           
 16447                           
 16448                           ;psect for function _IOCBF1_DefaultInterruptHandler
 16449  1EB6                     _IOCBF1_DefaultInterruptHandler:
 16450                           
 16451                           ;incstack = 0
 16452                           ; Regs used in _IOCBF1_DefaultInterruptHandler: []
 16453  1EB6  0008               	return
 16454  1EB7                     __end_of_IOCBF1_DefaultInterruptHandler:
 16455                           
 16456                           	psect	text110
 16457  1F19                     __ptext110:	
 16458 ;; *************** function _IOC_RB1_N_Handler *****************
 16459 ;; Defined at:
 16460 ;;		line 289 in file "main.c"
 16461 ;; Parameters:    Size  Location     Type
 16462 ;;		None
 16463 ;; Auto vars:     Size  Location     Type
 16464 ;;		None
 16465 ;; Return value:  Size  Location     Type
 16466 ;;                  1    wreg      void 
 16467 ;; Registers used:
 16468 ;;		wreg
 16469 ;; Tracked objects:
 16470 ;;		On entry : 1F/1
 16471 ;;		On exit  : 1F/0
 16472 ;;		Unchanged: 0/0
 16473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16476 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16477 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16478 ;;Total ram usage:        1 bytes
 16479 ;; Hardware stack levels used:    1
 16480 ;; This function calls:
 16481 ;;		Nothing
 16482 ;; This function is called by:
 16483 ;;		_main
 16484 ;;		_IOCBF1_ISR
 16485 ;; This function uses a non-reentrant model
 16486 ;;
 16487                           
 16488                           
 16489                           ;psect for function _IOC_RB1_N_Handler
 16490  1F19                     _IOC_RB1_N_Handler:
 16491                           
 16492                           ;main.c: 290:     flag_gesture = 1;
 16493                           
 16494                           ;incstack = 0
 16495                           ; Regs used in _IOC_RB1_N_Handler: [wreg]
 16496  1F19  3001               	movlw	1
 16497  1F1A  00F0               	movwf	??_IOC_RB1_N_Handler
 16498  1F1B  0870               	movf	??_IOC_RB1_N_Handler,w
 16499  1F1C  0020               	movlb	0	; select bank0
 16500  1F1D  00E8               	movwf	_flag_gesture	;volatile
 16501  1F1E  0008               	return
 16502  1F1F                     __end_of_IOC_RB1_N_Handler:
 16503                           
 16504                           	psect	text111
 16505  11B3                     __ptext111:	
 16506 ;; *************** function _EUSART_Transmit_ISR *****************
 16507 ;; Defined at:
 16508 ;;		line 197 in file "mcc_generated_files/eusart.c"
 16509 ;; Parameters:    Size  Location     Type
 16510 ;;		None
 16511 ;; Auto vars:     Size  Location     Type
 16512 ;;		None
 16513 ;; Return value:  Size  Location     Type
 16514 ;;                  1    wreg      void 
 16515 ;; Registers used:
 16516 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16517 ;; Tracked objects:
 16518 ;;		On entry : 1F/1
 16519 ;;		On exit  : 1E/0
 16520 ;;		Unchanged: 0/0
 16521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16524 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16525 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16526 ;;Total ram usage:        1 bytes
 16527 ;; Hardware stack levels used:    1
 16528 ;; This function calls:
 16529 ;;		Nothing
 16530 ;; This function is called by:
 16531 ;;		_EUSART_Initialize
 16532 ;;		_INTERRUPT_InterruptManager
 16533 ;; This function uses a non-reentrant model
 16534 ;;
 16535                           
 16536                           
 16537                           ;psect for function _EUSART_Transmit_ISR
 16538  11B3                     _EUSART_Transmit_ISR:
 16539                           
 16540                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 16541                           
 16542                           ;incstack = 0
 16543                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16544  11B3  3008               	movlw	8
 16545  11B4  0020               	movlb	0	; select bank0
 16546  11B5  026D               	subwf	_eusartTxBufferRemaining,w
 16547  11B6  1803               	skipnc
 16548  11B7  29CD               	goto	i1l586
 16549                           
 16550                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 16551  11B8  086E               	movf	_eusartTxTail,w
 16552  11B9  3ECC               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 16553  11BA  0086               	movwf	6
 16554  11BB  0187               	clrf	7
 16555  11BC  0801               	movf	1,w
 16556  11BD  0023               	movlb	3	; select bank3
 16557  11BE  009A               	movwf	26	;volatile
 16558  11BF  3001               	movlw	1
 16559  11C0  00F0               	movwf	??_EUSART_Transmit_ISR
 16560  11C1  0870               	movf	??_EUSART_Transmit_ISR,w
 16561  11C2  0020               	movlb	0	; select bank0
 16562  11C3  07EE               	addwf	_eusartTxTail,f	;volatile
 16563                           
 16564                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 16565  11C4  3008               	movlw	8
 16566  11C5  026E               	subwf	_eusartTxTail,w
 16567  11C6  1803               	btfsc	3,0
 16568                           
 16569                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
 16570  11C7  01EE               	clrf	_eusartTxTail	;volatile
 16571                           
 16572                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
 16573  11C8  3001               	movlw	1
 16574  11C9  00F0               	movwf	??_EUSART_Transmit_ISR
 16575  11CA  0870               	movf	??_EUSART_Transmit_ISR,w
 16576  11CB  07ED               	addwf	_eusartTxBufferRemaining,f	;volatile
 16577                           
 16578                           ;mcc_generated_files/eusart.c: 209:     }
 16579  11CC  0008               	return
 16580  11CD                     i1l586:	
 16581                           ;mcc_generated_files/eusart.c: 210:     else
 16582                           
 16583                           
 16584                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
 16585  11CD  0021               	movlb	1	; select bank1
 16586  11CE  1211               	bcf	17,4	;volatile
 16587  11CF  0008               	return
 16588  11D0                     __end_of_EUSART_Transmit_ISR:
 16589                           
 16590                           	psect	text112
 16591  14FA                     __ptext112:	
 16592 ;; *************** function _EUSART_Receive_ISR *****************
 16593 ;; Defined at:
 16594 ;;		line 216 in file "mcc_generated_files/eusart.c"
 16595 ;; Parameters:    Size  Location     Type
 16596 ;;		None
 16597 ;; Auto vars:     Size  Location     Type
 16598 ;;		None
 16599 ;; Return value:  Size  Location     Type
 16600 ;;                  1    wreg      void 
 16601 ;; Registers used:
 16602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16603 ;; Tracked objects:
 16604 ;;		On entry : 1F/1
 16605 ;;		On exit  : 0/0
 16606 ;;		Unchanged: 0/0
 16607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16612 ;;Total ram usage:        0 bytes
 16613 ;; Hardware stack levels used:    1
 16614 ;; Hardware stack levels required when called:    2
 16615 ;; This function calls:
 16616 ;;		Absolute function
 16617 ;;		_EUSART_DefaultErrorHandler
 16618 ;;		_EUSART_DefaultFramingErrorHandler
 16619 ;;		_EUSART_DefaultOverrunErrorHandler
 16620 ;;		_EUSART_RxDataHandler
 16621 ;; This function is called by:
 16622 ;;		_EUSART_Initialize
 16623 ;;		_INTERRUPT_InterruptManager
 16624 ;; This function uses a non-reentrant model
 16625 ;;
 16626                           
 16627                           
 16628                           ;psect for function _EUSART_Receive_ISR
 16629  14FA                     _EUSART_Receive_ISR:
 16630                           
 16631                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 16632                           
 16633                           ;incstack = 0
 16634                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16635  14FA  0020               	movlb	0	; select bank0
 16636  14FB  086C               	movf	_eusartRxHead,w	;volatile
 16637  14FC  3EC4               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 16638  14FD  0086               	movwf	6
 16639  14FE  0187               	clrf	7
 16640  14FF  0181               	clrf	1
 16641                           
 16642                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
 16643  1500  0023               	movlb	3	; select bank3
 16644  1501  1D1D               	btfss	29,2	;volatile
 16645  1502  2D0F               	goto	i1l5608
 16646                           
 16647                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 16648  1503  0020               	movlb	0	; select bank0
 16649  1504  086C               	movf	_eusartRxHead,w	;volatile
 16650  1505  3EC4               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 16651  1506  0086               	movwf	6
 16652  1507  0187               	clrf	7
 16653  1508  1481               	bsf	1,1
 16654                           
 16655                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
 16656  1509  0021               	movlb	1	; select bank1
 16657  150A  0865               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 16658  150B  008A               	movwf	10
 16659  150C  0864               	movf	_EUSART_FramingErrorHandler^(0+128),w
 16660  150D  000A               	callw
 16661  150E  3194               	pagesel	$
 16662  150F                     i1l5608:
 16663                           
 16664                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
 16665  150F  0023               	movlb	3	; select bank3
 16666  1510  1C9D               	btfss	29,1	;volatile
 16667  1511  2D1E               	goto	i1l5614
 16668                           
 16669                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 16670  1512  0020               	movlb	0	; select bank0
 16671  1513  086C               	movf	_eusartRxHead,w	;volatile
 16672  1514  3EC4               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 16673  1515  0086               	movwf	6
 16674  1516  0187               	clrf	7
 16675  1517  1501               	bsf	1,2
 16676                           
 16677                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
 16678  1518  0021               	movlb	1	; select bank1
 16679  1519  0863               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 16680  151A  008A               	movwf	10
 16681  151B  0862               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 16682  151C  000A               	callw
 16683  151D  3194               	pagesel	$
 16684  151E                     i1l5614:
 16685                           
 16686                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
 16687  151E  0020               	movlb	0	; select bank0
 16688  151F  086C               	movf	_eusartRxHead,w	;volatile
 16689  1520  3EC4               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 16690  1521  0086               	movwf	6
 16691  1522  0187               	clrf	7
 16692  1523  0801               	movf	1,w
 16693  1524  1903               	btfsc	3,2
 16694  1525  2D2D               	goto	i1l5618
 16695                           
 16696                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
 16697  1526  0021               	movlb	1	; select bank1
 16698  1527  0861               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 16699  1528  008A               	movwf	10
 16700  1529  0860               	movf	_EUSART_ErrorHandler^(0+128),w
 16701  152A  000A               	callw
 16702  152B  3194               	pagesel	$
 16703                           
 16704                           ;mcc_generated_files/eusart.c: 233:     } else {
 16705  152C  0008               	return
 16706  152D                     i1l5618:
 16707                           
 16708                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
 16709  152D  3191  2163         	fcall	_EUSART_RxDataHandler
 16710  152F  0008               	return
 16711  1530                     __end_of_EUSART_Receive_ISR:
 16712                           
 16713                           	psect	text113
 16714  1ED6                     __ptext113:	
 16715 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 16716 ;; Defined at:
 16717 ;;		line 252 in file "mcc_generated_files/eusart.c"
 16718 ;; Parameters:    Size  Location     Type
 16719 ;;		None
 16720 ;; Auto vars:     Size  Location     Type
 16721 ;;		None
 16722 ;; Return value:  Size  Location     Type
 16723 ;;                  1    wreg      void 
 16724 ;; Registers used:
 16725 ;;		None
 16726 ;; Tracked objects:
 16727 ;;		On entry : 1F/1
 16728 ;;		On exit  : 1F/3
 16729 ;;		Unchanged: 0/0
 16730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16735 ;;Total ram usage:        0 bytes
 16736 ;; Hardware stack levels used:    1
 16737 ;; This function calls:
 16738 ;;		Nothing
 16739 ;; This function is called by:
 16740 ;;		_EUSART_Initialize
 16741 ;;		_EUSART_Receive_ISR
 16742 ;; This function uses a non-reentrant model
 16743 ;;
 16744                           
 16745                           
 16746                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 16747  1ED6                     _EUSART_DefaultOverrunErrorHandler:
 16748                           
 16749                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
 16750                           
 16751                           ;incstack = 0
 16752                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 16753  1ED6  0023               	movlb	3	; select bank3
 16754  1ED7  121D               	bcf	29,4	;volatile
 16755                           
 16756                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
 16757  1ED8  161D               	bsf	29,4	;volatile
 16758  1ED9  0008               	return
 16759  1EDA                     __end_of_EUSART_DefaultOverrunErrorHandler:
 16760                           
 16761                           	psect	text114
 16762  1EB5                     __ptext114:	
 16763 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 16764 ;; Defined at:
 16765 ;;		line 250 in file "mcc_generated_files/eusart.c"
 16766 ;; Parameters:    Size  Location     Type
 16767 ;;		None
 16768 ;; Auto vars:     Size  Location     Type
 16769 ;;		None
 16770 ;; Return value:  Size  Location     Type
 16771 ;;                  1    wreg      void 
 16772 ;; Registers used:
 16773 ;;		None
 16774 ;; Tracked objects:
 16775 ;;		On entry : 1F/1
 16776 ;;		On exit  : 1F/1
 16777 ;;		Unchanged: 1F/0
 16778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16783 ;;Total ram usage:        0 bytes
 16784 ;; Hardware stack levels used:    1
 16785 ;; This function calls:
 16786 ;;		Nothing
 16787 ;; This function is called by:
 16788 ;;		_EUSART_Initialize
 16789 ;;		_EUSART_Receive_ISR
 16790 ;; This function uses a non-reentrant model
 16791 ;;
 16792                           
 16793                           
 16794                           ;psect for function _EUSART_DefaultFramingErrorHandler
 16795  1EB5                     _EUSART_DefaultFramingErrorHandler:
 16796                           
 16797                           ;incstack = 0
 16798                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 16799  1EB5  0008               	return
 16800  1EB6                     __end_of_EUSART_DefaultFramingErrorHandler:
 16801                           
 16802                           	psect	text115
 16803  1EBB                     __ptext115:	
 16804 ;; *************** function _EUSART_DefaultErrorHandler *****************
 16805 ;; Defined at:
 16806 ;;		line 260 in file "mcc_generated_files/eusart.c"
 16807 ;; Parameters:    Size  Location     Type
 16808 ;;		None
 16809 ;; Auto vars:     Size  Location     Type
 16810 ;;		None
 16811 ;; Return value:  Size  Location     Type
 16812 ;;                  1    wreg      void 
 16813 ;; Registers used:
 16814 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16815 ;; Tracked objects:
 16816 ;;		On entry : 1F/1
 16817 ;;		On exit  : 1F/1
 16818 ;;		Unchanged: 0/0
 16819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16824 ;;Total ram usage:        0 bytes
 16825 ;; Hardware stack levels used:    1
 16826 ;; Hardware stack levels required when called:    1
 16827 ;; This function calls:
 16828 ;;		_EUSART_RxDataHandler
 16829 ;; This function is called by:
 16830 ;;		_EUSART_Initialize
 16831 ;;		_EUSART_Receive_ISR
 16832 ;; This function uses a non-reentrant model
 16833 ;;
 16834                           
 16835                           
 16836                           ;psect for function _EUSART_DefaultErrorHandler
 16837  1EBB                     _EUSART_DefaultErrorHandler:
 16838                           
 16839                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
 16840                           
 16841                           ;incstack = 0
 16842                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16843  1EBB  3191  2163         	fcall	_EUSART_RxDataHandler
 16844  1EBD  0008               	return
 16845  1EBE                     __end_of_EUSART_DefaultErrorHandler:
 16846                           
 16847                           	psect	text116
 16848  1163                     __ptext116:	
 16849 ;; *************** function _EUSART_RxDataHandler *****************
 16850 ;; Defined at:
 16851 ;;		line 240 in file "mcc_generated_files/eusart.c"
 16852 ;; Parameters:    Size  Location     Type
 16853 ;;		None
 16854 ;; Auto vars:     Size  Location     Type
 16855 ;;		None
 16856 ;; Return value:  Size  Location     Type
 16857 ;;                  1    wreg      void 
 16858 ;; Registers used:
 16859 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16860 ;; Tracked objects:
 16861 ;;		On entry : 1E/0
 16862 ;;		On exit  : 1F/1
 16863 ;;		Unchanged: 0/0
 16864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16869 ;;Total ram usage:        1 bytes
 16870 ;; Hardware stack levels used:    1
 16871 ;; This function calls:
 16872 ;;		Nothing
 16873 ;; This function is called by:
 16874 ;;		_EUSART_Receive_ISR
 16875 ;;		_EUSART_DefaultErrorHandler
 16876 ;; This function uses a non-reentrant model
 16877 ;;
 16878                           
 16879                           
 16880                           ;psect for function _EUSART_RxDataHandler
 16881  1163                     _EUSART_RxDataHandler:
 16882                           
 16883                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
 16884                           
 16885                           ;incstack = 0
 16886                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 16887  1163  0023               	movlb	3	; select bank3
 16888  1164  0819               	movf	25,w	;volatile
 16889  1165  00F0               	movwf	??_EUSART_RxDataHandler
 16890  1166  0020               	movlb	0	; select bank0
 16891  1167  086C               	movf	_eusartRxHead,w
 16892  1168  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 16893  1169  0086               	movwf	6
 16894  116A  3001               	movlw	1	; select bank2/3
 16895  116B  0087               	movwf	7
 16896  116C  0870               	movf	??_EUSART_RxDataHandler,w
 16897  116D  0081               	movwf	1
 16898  116E  3001               	movlw	1
 16899  116F  00F0               	movwf	??_EUSART_RxDataHandler
 16900  1170  0870               	movf	??_EUSART_RxDataHandler,w
 16901  1171  07EC               	addwf	_eusartRxHead,f	;volatile
 16902                           
 16903                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16904  1172  3008               	movlw	8
 16905  1173  026C               	subwf	_eusartRxHead,w
 16906  1174  1803               	btfsc	3,0
 16907                           
 16908                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
 16909  1175  01EC               	clrf	_eusartRxHead	;volatile
 16910                           
 16911                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
 16912  1176  3001               	movlw	1
 16913  1177  00F0               	movwf	??_EUSART_RxDataHandler
 16914  1178  0870               	movf	??_EUSART_RxDataHandler,w
 16915  1179  0021               	movlb	1	; select bank1
 16916  117A  07ED               	addwf	_eusartRxCount^(0+128),f	;volatile
 16917  117B  0008               	return
 16918  117C                     __end_of_EUSART_RxDataHandler:
 16919                           
 16920                           	psect	text117
 16921  1049                     __ptext117:	
 16922 ;; *************** function _CCP4_CaptureISR *****************
 16923 ;; Defined at:
 16924 ;;		line 89 in file "mcc_generated_files/ccp4.c"
 16925 ;; Parameters:    Size  Location     Type
 16926 ;;		None
 16927 ;; Auto vars:     Size  Location     Type
 16928 ;;  module          2    9[COMMON] struct CCPR4Reg_tag
 16929 ;; Return value:  Size  Location     Type
 16930 ;;                  1    wreg      void 
 16931 ;; Registers used:
 16932 ;;		wreg, status,2, status,0, pclath, cstack
 16933 ;; Tracked objects:
 16934 ;;		On entry : 1F/0
 16935 ;;		On exit  : 0/0
 16936 ;;		Unchanged: 0/0
 16937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16939 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16942 ;;Total ram usage:        3 bytes
 16943 ;; Hardware stack levels used:    1
 16944 ;; Hardware stack levels required when called:    2
 16945 ;; This function calls:
 16946 ;;		Absolute function
 16947 ;;		_CCP4_CallBack@main$F2147
 16948 ;;		_CCP4_DefaultCallBack
 16949 ;; This function is called by:
 16950 ;;		_INTERRUPT_InterruptManager
 16951 ;; This function uses a non-reentrant model
 16952 ;;
 16953                           
 16954                           
 16955                           ;psect for function _CCP4_CaptureISR
 16956  1049                     _CCP4_CaptureISR:
 16957                           
 16958                           ;mcc_generated_files/ccp4.c: 91:     CCP4_PERIOD_REG_T module;;mcc_generated_files/ccp4.
      +                          c: 94:     PIR3bits.CCP4IF = 0;
 16959                           
 16960                           ;incstack = 0
 16961                           ; Regs used in _CCP4_CaptureISR: [wreg+status,2+status,0+pclath+cstack]
 16962  1049  1293               	bcf	19,5	;volatile
 16963                           
 16964                           ;mcc_generated_files/ccp4.c: 97:     module.ccpr4l = CCPR4L;
 16965  104A  0026               	movlb	6	; select bank6
 16966  104B  0818               	movf	24,w	;volatile
 16967  104C  00F8               	movwf	??_CCP4_CaptureISR
 16968  104D  0878               	movf	??_CCP4_CaptureISR,w
 16969  104E  00F9               	movwf	CCP4_CaptureISR@module
 16970                           
 16971                           ;mcc_generated_files/ccp4.c: 98:     module.ccpr4h = CCPR4H;
 16972  104F  0819               	movf	25,w	;volatile
 16973  1050  00F8               	movwf	??_CCP4_CaptureISR
 16974  1051  0878               	movf	??_CCP4_CaptureISR,w
 16975  1052  00FA               	movwf	CCP4_CaptureISR@module+1
 16976                           
 16977                           ;mcc_generated_files/ccp4.c: 101:     CCP4_CallBack(module.ccpr4_16Bit);
 16978  1053  087A               	movf	CCP4_CaptureISR@module+1,w
 16979  1054  00F3               	movwf	CCP4_CallBack@main$F2147@capturedValue+1
 16980  1055  0879               	movf	CCP4_CaptureISR@module,w
 16981  1056  00F2               	movwf	CCP4_CallBack@main$F2147@capturedValue
 16982  1057  0021               	movlb	1	; select bank1
 16983  1058  085D               	movf	(_CCP4_CallBack+1)^(0+128),w
 16984  1059  008A               	movwf	10
 16985  105A  085C               	movf	_CCP4_CallBack^(0+128),w
 16986  105B  000A               	callw
 16987  105C  3190               	pagesel	$
 16988  105D  0008               	return
 16989  105E                     __end_of_CCP4_CaptureISR:
 16990                           
 16991                           	psect	text118
 16992  0881                     __ptext118:	
 16993 ;; *************** function _CCP4_CallBack@main$F2147 *****************
 16994 ;; Defined at:
 16995 ;;		line 222 in file "main.c"
 16996 ;; Parameters:    Size  Location     Type
 16997 ;;  capturedValu    2    2[COMMON] unsigned short 
 16998 ;; Auto vars:     Size  Location     Type
 16999 ;;		None
 17000 ;; Return value:  Size  Location     Type
 17001 ;;                  1    wreg      void 
 17002 ;; Registers used:
 17003 ;;		wreg, status,2, status,0, pclath, cstack
 17004 ;; Tracked objects:
 17005 ;;		On entry : 1F/1
 17006 ;;		On exit  : 1E/0
 17007 ;;		Unchanged: 0/0
 17008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17009 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17011 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17012 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17013 ;;Total ram usage:        6 bytes
 17014 ;; Hardware stack levels used:    1
 17015 ;; Hardware stack levels required when called:    1
 17016 ;; This function calls:
 17017 ;;		_TMR1_WriteTimer
 17018 ;; This function is called by:
 17019 ;;		_main
 17020 ;;		_CCP4_CaptureISR
 17021 ;; This function uses a non-reentrant model
 17022 ;;
 17023                           
 17024                           
 17025                           ;psect for function _CCP4_CallBack@main$F2147
 17026  0881                     _CCP4_CallBack@main$F2147:
 17027                           
 17028                           ;main.c: 222: static void CCP4_CallBack(uint16_t capturedValue);main.c: 223: {;main.c: 2
      +                          24:     static uint8_t bit_count;;main.c: 226:     TMR1_WriteTimer(0x0000);
 17029                           
 17030                           ;incstack = 0
 17031                           ; Regs used in _CCP4_CallBack@main$F2147: [wreg+status,2+status,0+pclath+cstack]
 17032  0881  3000               	movlw	0
 17033  0882  00F0               	movwf	TMR1_WriteTimer@timerVal
 17034  0883  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 17035  0884  3190  2019  3188   	fcall	_TMR1_WriteTimer
 17036                           
 17037                           ;main.c: 229:     if((capturedValue > 13350) && (capturedValue < 13650)){
 17038  0887  3034               	movlw	52
 17039  0888  0273               	subwf	CCP4_CallBack@main$F2147@capturedValue+1,w
 17040  0889  3027               	movlw	39
 17041  088A  1903               	skipnz
 17042  088B  0272               	subwf	CCP4_CallBack@main$F2147@capturedValue,w
 17043  088C  1C03               	skipc
 17044  088D  28A1               	goto	i1l5084
 17045  088E  3035               	movlw	53
 17046  088F  0273               	subwf	CCP4_CallBack@main$F2147@capturedValue+1,w
 17047  0890  3052               	movlw	82
 17048  0891  1903               	skipnz
 17049  0892  0272               	subwf	CCP4_CallBack@main$F2147@capturedValue,w
 17050  0893  1803               	skipnc
 17051  0894  28A1               	goto	i1l5084
 17052                           
 17053                           ;main.c: 230:         bit_count = 0;
 17054  0895  01FB               	clrf	CCP4_CallBack@main$F2147@bit_count
 17055                           
 17056                           ;main.c: 231:         ir_address = ir_address_complement = ir_command = ir_command_compl
      +                          ement = 0;
 17057  0896  01FC               	clrf	_ir_command_complement	;volatile
 17058  0897  01EA               	clrf	_ir_command	;volatile
 17059  0898  0021               	movlb	1	; select bank1
 17060  0899  01EA               	clrf	_ir_address_complement^(0+128)	;volatile
 17061  089A  0020               	movlb	0	; select bank0
 17062  089B  01EB               	clrf	_ir_address	;volatile
 17063                           
 17064                           ;main.c: 232:         ir_flag = IR_BUSY;
 17065  089C  3001               	movlw	1
 17066  089D  00F4               	movwf	??_CCP4_CallBack@main$F2151
 17067  089E  0874               	movf	??_CCP4_CallBack@main$F2151,w
 17068  089F  00E9               	movwf	_ir_flag	;volatile
 17069                           
 17070                           ;main.c: 233:     } else if((capturedValue > 11200) && (capturedValue < 11400)){
 17071  08A0  0008               	return
 17072  08A1                     i1l5084:
 17073  08A1  302B               	movlw	43
 17074  08A2  0273               	subwf	CCP4_CallBack@main$F2147@capturedValue+1,w
 17075  08A3  30C1               	movlw	193
 17076  08A4  1903               	skipnz
 17077  08A5  0272               	subwf	CCP4_CallBack@main$F2147@capturedValue,w
 17078  08A6  1C03               	skipc
 17079  08A7  28B4               	goto	i1l5090
 17080  08A8  302C               	movlw	44
 17081  08A9  0273               	subwf	CCP4_CallBack@main$F2147@capturedValue+1,w
 17082  08AA  3088               	movlw	136
 17083  08AB  1903               	skipnz
 17084  08AC  0272               	subwf	CCP4_CallBack@main$F2147@capturedValue,w
 17085  08AD  1803               	skipnc
 17086  08AE  28B4               	goto	i1l5090
 17087                           
 17088                           ;main.c: 234:         ir_flag = IR_REPEAT;
 17089  08AF  3003               	movlw	3
 17090  08B0  00F4               	movwf	??_CCP4_CallBack@main$F2151
 17091  08B1  0874               	movf	??_CCP4_CallBack@main$F2151,w
 17092  08B2  00E9               	movwf	_ir_flag	;volatile
 17093                           
 17094                           ;main.c: 235:     } else if((capturedValue > 2100) && (capturedValue < 2400)){
 17095  08B3  0008               	return
 17096  08B4                     i1l5090:
 17097  08B4  3008               	movlw	8
 17098  08B5  0273               	subwf	CCP4_CallBack@main$F2147@capturedValue+1,w
 17099  08B6  3035               	movlw	53
 17100  08B7  1903               	skipnz
 17101  08B8  0272               	subwf	CCP4_CallBack@main$F2147@capturedValue,w
 17102  08B9  1C03               	skipc
 17103  08BA  290B               	goto	i1l5126
 17104  08BB  3009               	movlw	9
 17105  08BC  0273               	subwf	CCP4_CallBack@main$F2147@capturedValue+1,w
 17106  08BD  3060               	movlw	96
 17107  08BE  1903               	skipnz
 17108  08BF  0272               	subwf	CCP4_CallBack@main$F2147@capturedValue,w
 17109  08C0  1803               	skipnc
 17110  08C1  290B               	goto	i1l5126
 17111                           
 17112                           ;main.c: 236:         if(bit_count < 8){
 17113  08C2  3008               	movlw	8
 17114  08C3  027B               	subwf	CCP4_CallBack@main$F2147@bit_count,w
 17115  08C4  1803               	skipnc
 17116  08C5  28CD               	goto	i1l5100
 17117                           
 17118                           ;main.c: 238:             ir_address <<= 1;
 17119  08C6  1003               	clrc
 17120  08C7  0DEB               	rlf	_ir_address,f	;volatile
 17121                           
 17122                           ;main.c: 239:             ir_address++;
 17123  08C8  3001               	movlw	1
 17124  08C9  00F4               	movwf	??_CCP4_CallBack@main$F2151
 17125  08CA  0874               	movf	??_CCP4_CallBack@main$F2151,w
 17126  08CB  07EB               	addwf	_ir_address,f	;volatile
 17127                           
 17128                           ;main.c: 240:         } else if(bit_count < 16){
 17129  08CC  28EE               	goto	i1l5118
 17130  08CD                     i1l5100:
 17131  08CD  3010               	movlw	16
 17132  08CE  027B               	subwf	CCP4_CallBack@main$F2147@bit_count,w
 17133  08CF  1803               	skipnc
 17134  08D0  28D9               	goto	i1l5106
 17135                           
 17136                           ;main.c: 242:             ir_address_complement <<= 1;
 17137  08D1  1003               	clrc
 17138  08D2  0021               	movlb	1	; select bank1
 17139  08D3  0DEA               	rlf	_ir_address_complement^(0+128),f	;volatile
 17140                           
 17141                           ;main.c: 243:             ir_address_complement++;
 17142  08D4  3001               	movlw	1
 17143  08D5  00F4               	movwf	??_CCP4_CallBack@main$F2151
 17144  08D6  0874               	movf	??_CCP4_CallBack@main$F2151,w
 17145  08D7  07EA               	addwf	_ir_address_complement^(0+128),f	;volatile
 17146                           
 17147                           ;main.c: 244:         } else if(bit_count < 24){
 17148  08D8  28EE               	goto	i1l5118
 17149  08D9                     i1l5106:
 17150  08D9  3018               	movlw	24
 17151  08DA  027B               	subwf	CCP4_CallBack@main$F2147@bit_count,w
 17152  08DB  1803               	skipnc
 17153  08DC  28E4               	goto	i1l5112
 17154                           
 17155                           ;main.c: 246:             ir_command <<= 1;
 17156  08DD  1003               	clrc
 17157  08DE  0DEA               	rlf	_ir_command,f	;volatile
 17158                           
 17159                           ;main.c: 247:             ir_command++;
 17160  08DF  3001               	movlw	1
 17161  08E0  00F4               	movwf	??_CCP4_CallBack@main$F2151
 17162  08E1  0874               	movf	??_CCP4_CallBack@main$F2151,w
 17163  08E2  07EA               	addwf	_ir_command,f	;volatile
 17164                           
 17165                           ;main.c: 248:         } else if(bit_count < 32){
 17166  08E3  28EE               	goto	i1l5118
 17167  08E4                     i1l5112:
 17168  08E4  3020               	movlw	32
 17169  08E5  027B               	subwf	CCP4_CallBack@main$F2147@bit_count,w
 17170  08E6  1803               	skipnc
 17171  08E7  28EE               	goto	i1l5118
 17172                           
 17173                           ;main.c: 250:             ir_command_complement <<= 1;
 17174  08E8  1003               	clrc
 17175  08E9  0DFC               	rlf	_ir_command_complement,f	;volatile
 17176                           
 17177                           ;main.c: 251:             ir_command_complement++;
 17178  08EA  3001               	movlw	1
 17179  08EB  00F4               	movwf	??_CCP4_CallBack@main$F2151
 17180  08EC  0874               	movf	??_CCP4_CallBack@main$F2151,w
 17181  08ED  07FC               	addwf	_ir_command_complement,f	;volatile
 17182  08EE                     i1l5118:
 17183                           
 17184                           ;main.c: 254:         bit_count++;
 17185  08EE  3001               	movlw	1
 17186  08EF  00F4               	movwf	??_CCP4_CallBack@main$F2151
 17187  08F0  0874               	movf	??_CCP4_CallBack@main$F2151,w
 17188  08F1  07FB               	addwf	CCP4_CallBack@main$F2147@bit_count,f
 17189                           
 17190                           ;main.c: 256:         if(bit_count == 32){
 17191  08F2  3020               	movlw	32
 17192  08F3  067B               	xorwf	CCP4_CallBack@main$F2147@bit_count,w
 17193  08F4  1D03               	btfss	3,2
 17194  08F5  0008               	return
 17195                           
 17196                           ;main.c: 258:             if(ir_command == (~ir_command_complement)){
 17197  08F6  097C               	comf	_ir_command_complement,w	;volatile
 17198  08F7  00F4               	movwf	??_CCP4_CallBack@main$F2151
 17199  08F8  01F5               	clrf	??_CCP4_CallBack@main$F2151+1
 17200  08F9  09F5               	comf	??_CCP4_CallBack@main$F2151+1,f
 17201  08FA  0020               	movlb	0	; select bank0
 17202  08FB  086A               	movf	_ir_command,w	;volatile
 17203  08FC  00F6               	movwf	??_CCP4_CallBack@main$F2151+2
 17204  08FD  01F7               	clrf	??_CCP4_CallBack@main$F2151+3
 17205  08FE  0875               	movf	??_CCP4_CallBack@main$F2151+1,w
 17206  08FF  0677               	xorwf	??_CCP4_CallBack@main$F2151+3,w
 17207  0900  1D03               	skipz
 17208  0901  2904               	goto	u247_25
 17209  0902  0874               	movf	??_CCP4_CallBack@main$F2151,w
 17210  0903  0676               	xorwf	??_CCP4_CallBack@main$F2151+2,w
 17211  0904                     u247_25:
 17212  0904  1D03               	skipz
 17213  0905  0008               	return
 17214                           
 17215                           ;main.c: 259:                 ir_flag = IR_DONE;
 17216  0906  3002               	movlw	2
 17217  0907  00F4               	movwf	??_CCP4_CallBack@main$F2151
 17218  0908  0874               	movf	??_CCP4_CallBack@main$F2151,w
 17219  0909  00E9               	movwf	_ir_flag	;volatile
 17220  090A  0008               	return
 17221  090B                     i1l5126:
 17222  090B  3003               	movlw	3
 17223  090C  0273               	subwf	CCP4_CallBack@main$F2147@capturedValue+1,w
 17224  090D  30CB               	movlw	203
 17225  090E  1903               	skipnz
 17226  090F  0272               	subwf	CCP4_CallBack@main$F2147@capturedValue,w
 17227  0910  1C03               	skipc
 17228  0911  0008               	return
 17229  0912  3004               	movlw	4
 17230  0913  0273               	subwf	CCP4_CallBack@main$F2147@capturedValue+1,w
 17231  0914  30F6               	movlw	246
 17232  0915  1903               	skipnz
 17233  0916  0272               	subwf	CCP4_CallBack@main$F2147@capturedValue,w
 17234  0917  1803               	skipnc
 17235  0918  0008               	return
 17236                           
 17237                           ;main.c: 264:         if(bit_count < 8){
 17238  0919  3008               	movlw	8
 17239  091A  027B               	subwf	CCP4_CallBack@main$F2147@bit_count,w
 17240  091B  1803               	skipnc
 17241  091C  2920               	goto	i1l5134
 17242                           
 17243                           ;main.c: 266:             ir_address <<= 1;
 17244  091D  1003               	clrc
 17245  091E  0DEB               	rlf	_ir_address,f	;volatile
 17246                           
 17247                           ;main.c: 267:         } else if(bit_count < 16){
 17248  091F  28EE               	goto	i1l5118
 17249  0920                     i1l5134:
 17250  0920  3010               	movlw	16
 17251  0921  027B               	subwf	CCP4_CallBack@main$F2147@bit_count,w
 17252  0922  1803               	skipnc
 17253  0923  2928               	goto	i1l5138
 17254                           
 17255                           ;main.c: 269:             ir_address_complement <<= 1;
 17256  0924  1003               	clrc
 17257  0925  0021               	movlb	1	; select bank1
 17258  0926  0DEA               	rlf	_ir_address_complement^(0+128),f	;volatile
 17259                           
 17260                           ;main.c: 270:         } else if(bit_count < 24){
 17261  0927  28EE               	goto	i1l5118
 17262  0928                     i1l5138:
 17263  0928  3018               	movlw	24
 17264  0929  027B               	subwf	CCP4_CallBack@main$F2147@bit_count,w
 17265  092A  1803               	skipnc
 17266  092B  292F               	goto	i1l5142
 17267                           
 17268                           ;main.c: 272:             ir_command <<= 1;
 17269  092C  1003               	clrc
 17270  092D  0DEA               	rlf	_ir_command,f	;volatile
 17271                           
 17272                           ;main.c: 273:         } else if(bit_count < 32){
 17273  092E  28EE               	goto	i1l5118
 17274  092F                     i1l5142:
 17275  092F  3020               	movlw	32
 17276  0930  027B               	subwf	CCP4_CallBack@main$F2147@bit_count,w
 17277  0931  1803               	skipnc
 17278  0932  28EE               	goto	i1l5118
 17279                           
 17280                           ;main.c: 275:             ir_command_complement <<= 1;
 17281  0933  1003               	clrc
 17282  0934  0DFC               	rlf	_ir_command_complement,f	;volatile
 17283  0935  28EE               	goto	i1l5118
 17284  0936                     __end_of_CCP4_CallBack@main$F2147:	
 17285                           ;main.c: 282:             if(ir_command == (~ir_command_complement)){
 17286                           
 17287                           ;main.c: 280:         if(bit_count == 32){
 17288                           
 17289                           ;main.c: 278:         bit_count++;
 17290                           
 17291                           
 17292                           	psect	text119
 17293  1EB4                     __ptext119:	
 17294 ;; *************** function _CCP4_DefaultCallBack *****************
 17295 ;; Defined at:
 17296 ;;		line 60 in file "mcc_generated_files/ccp4.c"
 17297 ;; Parameters:    Size  Location     Type
 17298 ;;  capturedValu    2    2[COMMON] unsigned short 
 17299 ;; Auto vars:     Size  Location     Type
 17300 ;;		None
 17301 ;; Return value:  Size  Location     Type
 17302 ;;                  1    wreg      void 
 17303 ;; Registers used:
 17304 ;;		None
 17305 ;; Tracked objects:
 17306 ;;		On entry : 1F/1
 17307 ;;		On exit  : 1F/1
 17308 ;;		Unchanged: 1F/0
 17309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17310 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;Total ram usage:        2 bytes
 17315 ;; Hardware stack levels used:    1
 17316 ;; This function calls:
 17317 ;;		Nothing
 17318 ;; This function is called by:
 17319 ;;		_CCP4_Initialize
 17320 ;;		_CCP4_CaptureISR
 17321 ;; This function uses a non-reentrant model
 17322 ;;
 17323                           
 17324                           
 17325                           ;psect for function _CCP4_DefaultCallBack
 17326  1EB4                     _CCP4_DefaultCallBack:
 17327                           
 17328                           ;incstack = 0
 17329                           ; Regs used in _CCP4_DefaultCallBack: []
 17330  1EB4  0008               	return
 17331  1EB5                     __end_of_CCP4_DefaultCallBack:
 17332                           
 17333                           	psect	text120
 17334  1019                     __ptext120:	
 17335 ;; *************** function _TMR1_WriteTimer *****************
 17336 ;; Defined at:
 17337 ;;		line 113 in file "mcc_generated_files/tmr1.c"
 17338 ;; Parameters:    Size  Location     Type
 17339 ;;  timerVal        2    0[COMMON] unsigned short 
 17340 ;; Auto vars:     Size  Location     Type
 17341 ;;		None
 17342 ;; Return value:  Size  Location     Type
 17343 ;;                  1    wreg      void 
 17344 ;; Registers used:
 17345 ;;		wreg
 17346 ;; Tracked objects:
 17347 ;;		On entry : 1F/1
 17348 ;;		On exit  : 1F/0
 17349 ;;		Unchanged: 0/0
 17350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17351 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17354 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17355 ;;Total ram usage:        2 bytes
 17356 ;; Hardware stack levels used:    1
 17357 ;; This function calls:
 17358 ;;		Nothing
 17359 ;; This function is called by:
 17360 ;;		_CCP4_CallBack@main$F2147
 17361 ;; This function uses a non-reentrant model
 17362 ;;
 17363                           
 17364                           
 17365                           ;psect for function _TMR1_WriteTimer
 17366  1019                     _TMR1_WriteTimer:
 17367                           
 17368                           ;mcc_generated_files/tmr1.c: 113: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 114: {;mcc_generated_files/tmr1.c: 115:     if (T1CONbits.nT1SYNC == 1)
 17369                           
 17370                           ;incstack = 0
 17371                           ; Regs used in _TMR1_WriteTimer: [wreg]
 17372  1019  0020               	movlb	0	; select bank0
 17373  101A  1D18               	btfss	24,2	;volatile
 17374  101B  2823               	goto	i1l4836
 17375                           
 17376                           ;mcc_generated_files/tmr1.c: 116:     {;mcc_generated_files/tmr1.c: 118:         T1CONbi
      +                          ts.TMR1ON = 0;
 17377  101C  1018               	bcf	24,0	;volatile
 17378                           
 17379                           ;mcc_generated_files/tmr1.c: 121:         TMR1H = (timerVal >> 8);
 17380  101D  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 17381  101E  0097               	movwf	23	;volatile
 17382                           
 17383                           ;mcc_generated_files/tmr1.c: 122:         TMR1L = timerVal;
 17384  101F  0870               	movf	TMR1_WriteTimer@timerVal,w
 17385  1020  0096               	movwf	22	;volatile
 17386                           
 17387                           ;mcc_generated_files/tmr1.c: 125:         T1CONbits.TMR1ON =1;
 17388  1021  1418               	bsf	24,0	;volatile
 17389                           
 17390                           ;mcc_generated_files/tmr1.c: 126:     }
 17391  1022  0008               	return
 17392  1023                     i1l4836:
 17393                           
 17394                           ;mcc_generated_files/tmr1.c: 128:     {;mcc_generated_files/tmr1.c: 130:         TMR1H =
      +                           (timerVal >> 8);
 17395  1023  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 17396  1024  0097               	movwf	23	;volatile
 17397                           
 17398                           ;mcc_generated_files/tmr1.c: 131:         TMR1L = timerVal;
 17399  1025  0870               	movf	TMR1_WriteTimer@timerVal,w
 17400  1026  0096               	movwf	22	;volatile
 17401  1027  0008               	return
 17402  1028                     __end_of_TMR1_WriteTimer:
 17403  007E                     btemp	set	126	;btemp
 17404  007E                     int$flags	set	126
 17405  007E                     wtemp0	set	126
 17406  22EC                     
 17407                           	psect	config
 17408                           
 17409                           ;Config register CONFIG1 @ 0x8007
 17410                           ;	Oscillator Selection
 17411                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 17412                           ;	Watchdog Timer Enable
 17413                           ;	WDTE = OFF, WDT disabled
 17414                           ;	Power-up Timer Enable
 17415                           ;	PWRTE = OFF, PWRT disabled
 17416                           ;	MCLR Pin Function Select
 17417                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 17418                           ;	Flash Program Memory Code Protection
 17419                           ;	CP = OFF, Program memory code protection is disabled
 17420                           ;	Data Memory Code Protection
 17421                           ;	CPD = OFF, Data memory code protection is disabled
 17422                           ;	Brown-out Reset Enable
 17423                           ;	BOREN = ON, Brown-out Reset enabled
 17424                           ;	Clock Out Enable
 17425                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 17426                           ;	Internal/External Switchover
 17427                           ;	IESO = ON, Internal/External Switchover mode is enabled
 17428                           ;	Fail-Safe Clock Monitor Enable
 17429                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 17430  8007                     	org	32775
 17431  8007  3FE4               	dw	16356
 17432                           
 17433                           ;Config register CONFIG2 @ 0x8008
 17434                           ;	Flash Memory Self-Write Protection
 17435                           ;	WRT = OFF, Write protection off
 17436                           ;	Voltage Regulator Capacitor Enable
 17437                           ;	VCAPEN = OFF, All VCAP pin functionality is disabled
 17438                           ;	PLL Enable
 17439                           ;	PLLEN = ON, 4x PLL enabled
 17440                           ;	Stack Overflow/Underflow Reset Enable
 17441                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 17442                           ;	Brown-out Reset Voltage Selection
 17443                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 17444                           ;	Low-Voltage Programming Enable
 17445                           ;	LVP = ON, Low-voltage programming enabled
 17446  8008                     	org	32776
 17447  8008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         105
    Persistent  34
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     64      80
    BANK1            80      0      80
    BANK2            80      0       8
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            28      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    I2C_DO_TX$3597$0	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    I2C_DO_TX$3602	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    I2C_DO_TX$3597	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), rdBlkRegCompleteHandler@i2c_master_example$F177(), 
		 -> wr2RegCompleteHandler@i2c_master_example$F166(), wr1RegCompleteHandler@i2c_master_example$F160(), rd2RegCompleteHandler@i2c_master_example$F154(), rd1RegCompleteHandler@i2c_master_example$F143(), 
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), 

    I2C_MasterFsm$3596	const PTR FTN()enum E3090 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    cb$0	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    S1309$0$0	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    CCP4_SetCallBack@customCallBack	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> CCP4_CallBack@main$F2147(), CCP4_DefaultCallBack(), 

    CCP4_CallBack	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> CCP4_CallBack@main$F2147(), CCP4_DefaultCallBack(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> Absolute function(), rdBlkRegCompleteHandler@i2c_master_example$F177(), wr2RegCompleteHandler@i2c_master_example$F166(), wr1RegCompleteHandler@i2c_master_example$F160(), 
		 -> rd2RegCompleteHandler@i2c_master_example$F154(), rd1RegCompleteHandler@i2c_master_example$F143(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), wr1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> Absolute function(), rdBlkRegCompleteHandler@i2c_master_example$F177(), wr2RegCompleteHandler@i2c_master_example$F166(), wr1RegCompleteHandler@i2c_master_example$F160(), 
		 -> rd2RegCompleteHandler@i2c_master_example$F154(), rd1RegCompleteHandler@i2c_master_example$F143(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), wr1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@reg(COMMON[1]), 
		 -> I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@reg(BANK0[1]), 
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), 
		 -> i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(BANK0[1]), i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@reg(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    S1309$data_ptr	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@reg(COMMON[1]), 
		 -> I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@reg(BANK0[1]), 
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), 
		 -> i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(BANK0[1]), i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@reg(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    I2C_Status.data_ptr	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@reg(COMMON[1]), 
		 -> I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@reg(BANK0[1]), 
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@reg(COMMON[1]), 
		 -> i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(BANK0[1]), i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@reg(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    S1309$callbackPayload	PTR void [6] size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    I2C_Status.callbackPayload	PTR void [6] size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    S1309$callbackTable	PTR FTN(PTR void ,)enum E360[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), rdBlkRegCompleteHandler@i2c_master_example$F177(), 
		 -> wr2RegCompleteHandler@i2c_master_example$F166(), wr1RegCompleteHandler@i2c_master_example$F160(), rd2RegCompleteHandler@i2c_master_example$F154(), rd1RegCompleteHandler@i2c_master_example$F143(), 
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E360[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), rdBlkRegCompleteHandler@i2c_master_example$F177(), 
		 -> wr2RegCompleteHandler@i2c_master_example$F166(), wr1RegCompleteHandler@i2c_master_example$F160(), rd2RegCompleteHandler@i2c_master_example$F154(), rd1RegCompleteHandler@i2c_master_example$F143(), 
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), 

    i2c_fsmStateTable	const PTR FTN()enum E3090[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    IOCBF1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOC_RB1_N_Handler(), IOCBF1_DefaultInterruptHandler(), 

    IOCBF1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOC_RB1_N_Handler(), Absolute function(), IOCBF1_DefaultInterruptHandler(), 

    rdBlkRegCompleteHandler@i2c_master_example$F177@ptr.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    rdBlkRegCompleteHandler@i2c_master_example$F177@ptr	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@i2c_master_example$F166@ptr	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    wr1RegCompleteHandler@i2c_master_example$F160@ptr	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@i2c_master_example$F154@ptr	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@i2c_master_example$F143@ptr	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    bufferBlock.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    i2c_readDataBlock@data	PTR void  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    d.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    S74$data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    rdBlkRegCompleteHandler@p.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    rdBlkRegCompleteHandler@p	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    wr2RegCompleteHandler@p	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    rd2RegCompleteHandler@p	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    rd1RegCompleteHandler@p	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 

    wr1RegCompleteHandler@p	PTR void  size(2) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), 
		 -> i2c_read1ByteRegister@d2(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_CCP4_CaptureISR
    _IOCBF1_ISR->_IOC_RB1_N_Handler
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler
    _CCP4_CaptureISR->_CCP4_CallBack@main$F2147
    _CCP4_CallBack@main$F2147->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _main->_readGesture
    _readGesture->_processGestureData
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _decodeGesture->_abs
    _enableGestureSensor->_setMode
    _setLEDBoost->_i2c_read1ByteRegister
    _setGestureMode->_i2c_read1ByteRegister
    _SYSTEM_Initialize->_EUSART_Initialize
    _PIN_MANAGER_Initialize->_IOCBF1_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _CCP4_Initialize->_CCP4_SetCallBack
    _APDS9960Init->_setMode
    _setProximityGain->_i2c_read1ByteRegister
    _setProxIntLowThresh->_i2c_write1ByteRegister
    _setProxIntHighThresh->_i2c_write1ByteRegister
    _setMode->_i2c_read1ByteRegister
    _setLightIntLowThreshold->_i2c_write1ByteRegister
    _setLightIntHighThreshold->_i2c_write1ByteRegister
    _setLEDDrive->_i2c_read1ByteRegister
    _setGestureWaitTime->_i2c_read1ByteRegister
    _setGestureLEDDrive->_i2c_read1ByteRegister
    _setGestureIntEnable->_i2c_read1ByteRegister
    _setGestureGain->_i2c_read1ByteRegister
    _setGestureExitThresh->_i2c_write1ByteRegister
    _setGestureEnterThresh->_i2c_write1ByteRegister
    _setAmbientLightGain->_i2c_read1ByteRegister
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm
    _I2C_MasterFsm->_I2C_DO_ADDRESS_NACK
    _I2C_MasterFsm->_I2C_DO_RX
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_MasterFsm->_I2C_DO_TX_EMPTY
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler@i2c_master_example$F143
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler@i2c_master_example$F154
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler@i2c_master_example$F177
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler@i2c_master_example$F160
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler@i2c_master_example$F166
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd1RegCompleteHandler@i2c_master_example$F143
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler@i2c_master_example$F154
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler@i2c_master_example$F177
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler@i2c_master_example$F160
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler@i2c_master_example$F166
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd1RegCompleteHandler@i2c_master_example$F143
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler@i2c_master_example$F154
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler@i2c_master_example$F177
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler@i2c_master_example$F160
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler@i2c_master_example$F166
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler@i2c_master_example$F143
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler@i2c_master_example$F154
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler@i2c_master_example$F177
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler@i2c_master_example$F160
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler@i2c_master_example$F166
    _wr2RegCompleteHandler@i2c_master_example$F166->_I2C_SetDataCompleteCallback
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler@i2c_master_example$F160->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler@i2c_master_example$F177->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler@i2c_master_example$F154->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler@i2c_master_example$F143->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0 11206359
                                             58 BANK0      6     6      0
                       _APDS9960Init
                   _CCP4_SetCallBack
         _IOCBF1_SetInterruptHandler
                      _LCD_Digit1Num
                      _LCD_Digit2Num
                      _LCD_Digit3Num
                      _LCD_Digit4Num
                  _SYSTEM_Initialize
                _enableGestureSensor
                        _readGesture
                        _reverseBits
                   _setProximityGain
 ---------------------------------------------------------------------------------
 (1) _reverseBits                                          4     4      0     157
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _readGesture                                         18    16      2  605060
                                             40 BANK0     18    16      2
                      _decodeGesture
              _i2c_read1ByteRegister
                  _i2c_readDataBlock
                 _processGestureData
             _resetGestureParameters
 ---------------------------------------------------------------------------------
 (2) _processGestureData                                  25    25      0    4810
                                             15 BANK0     25    25      0
                            ___awdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1600
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     908
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _i2c_readDataBlock                                   10     5      5  297993
                                             22 BANK0     10     5      5
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _decodeGesture                                        3     3      0     978
                                              4 BANK0      3     3      0
                                _abs
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     978
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  3     3      0 2724885
                                             34 BANK0      3     3      0
             _i2c_write1ByteRegister
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0  605002
                                             29 BANK0      4     4      0
              _i2c_read1ByteRegister
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       4     4      0  604979
                                             29 BANK0      4     4      0
              _i2c_read1ByteRegister
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     838
                    _CCP4_Initialize
                     _DAC_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
                     _I2C_Initialize
                     _LCD_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     174
         _IOCBF1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF1_SetInterruptHandler                           2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              2 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP4_Initialize                                      0     0      0     174
                   _CCP4_SetCallBack
 ---------------------------------------------------------------------------------
 (3) _CCP4_SetCallBack                                     2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Digit4Num                                        3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Digit3Num                                        3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Digit2Num                                        3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Digit1Num                                        3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _APDS9960Init                                         3     3      0 7269866
                                             34 BANK0      3     3      0
              _i2c_read1ByteRegister
             _i2c_write1ByteRegister
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
 ---------------------------------------------------------------------------------
 (1) _setProximityGain                                     4     4      0  605002
                                             29 BANK0      4     4      0
              _i2c_read1ByteRegister
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  3     3      0  303946
                                             25 BANK0      3     3      0
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 3     3      0  303946
                                             25 BANK0      3     3      0
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1  605956
                                             29 BANK0      5     4      1
              _i2c_read1ByteRegister
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              6     4      2  304091
                                             25 BANK0      6     4      2
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             6     4      2  304091
                                             25 BANK0      6     4      2
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0  605002
                                             29 BANK0      4     4      0
              _i2c_read1ByteRegister
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   4     4      0  604979
                                             29 BANK0      4     4      0
              _i2c_read1ByteRegister
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0  605002
                                             29 BANK0      4     4      0
              _i2c_read1ByteRegister
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  4     4      0  605002
                                             29 BANK0      4     4      0
              _i2c_read1ByteRegister
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0  605002
                                             29 BANK0      4     4      0
              _i2c_read1ByteRegister
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 3     3      0  303946
                                             25 BANK0      3     3      0
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                3     3      0  303946
                                             25 BANK0      3     3      0
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  4     4      0  604979
                                             29 BANK0      4     4      0
              _i2c_read1ByteRegister
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (2) _i2c_write1ByteRegister                               3     1      2  303924
                                             22 BANK0      3     1      2
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _i2c_read1ByteRegister                                7     6      1  301007
                                             22 BANK0      7     6      1
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (3) _I2C_SetAddressNackCallback                           3     0      3    2470
                                              9 BANK0      3     0      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (3) _I2C_Open                                             2     2      0      46
                                              0 BANK0      2     2      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterWrite                                      0     0      0  287936
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterOperation                                  2     2      0  287936
                                             20 BANK0      2     2      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (5) _I2C_Poller                                           0     0      0  287890
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterWaitForEvent                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterFsm                                        3     3      0  287890
                                             17 BANK0      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_TX_EMPTY                                      2     2      0   71956
                                             15 BANK0      2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
_rd1RegCompleteHandler@i2c_master_ex *
              _rd2RegCompleteHandler *
_rd2RegCompleteHandler@i2c_master_ex *
            _rdBlkRegCompleteHandler *
_rdBlkRegCompleteHandler@i2c_master_ *
              _wr1RegCompleteHandler *
_wr1RegCompleteHandler@i2c_master_ex *
              _wr2RegCompleteHandler *
_wr2RegCompleteHandler@i2c_master_ex *
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterSetIrq                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_TX                                            2     2      0   71978
                                             15 BANK0      2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
_rd1RegCompleteHandler@i2c_master_ex *
              _rd2RegCompleteHandler *
_rd2RegCompleteHandler@i2c_master_ex *
            _rdBlkRegCompleteHandler *
_rdBlkRegCompleteHandler@i2c_master_ *
              _wr1RegCompleteHandler *
_wr1RegCompleteHandler@i2c_master_ex *
              _wr2RegCompleteHandler *
_wr2RegCompleteHandler@i2c_master_ex *
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterIsNack                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_SEND_RESTART_WRITE                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_SEND_RESTART_READ                             0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_ADR_WRITE                                0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_SEND_ADR_READ                                 0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterSendTxData                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_RX_ACK                                        0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_RX                                            2     2      0   71956
                                             15 BANK0      2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
_rd1RegCompleteHandler@i2c_master_ex *
              _rd2RegCompleteHandler *
_rd2RegCompleteHandler@i2c_master_ex *
            _rdBlkRegCompleteHandler *
_rdBlkRegCompleteHandler@i2c_master_ *
              _wr1RegCompleteHandler *
_wr1RegCompleteHandler@i2c_master_ex *
              _wr2RegCompleteHandler *
_wr2RegCompleteHandler@i2c_master_ex *
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterSendAck                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterGetRxData                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_RX_NACK_STOP                                  0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_RX_NACK_RESTART                               0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterSendNack                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_RESET                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_RCEN                                          0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterStartRx                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_DO_ADDRESS_NACK                                  2     2      0   71956
                                             15 BANK0      2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
_rd1RegCompleteHandler@i2c_master_ex *
              _rd2RegCompleteHandler *
_rd2RegCompleteHandler@i2c_master_ex *
            _rdBlkRegCompleteHandler *
_rdBlkRegCompleteHandler@i2c_master_ *
              _wr1RegCompleteHandler *
_wr1RegCompleteHandler@i2c_master_ex *
              _wr2RegCompleteHandler *
_wr2RegCompleteHandler@i2c_master_ex *
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler@i2c_master_example$F166        2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr2RegCompleteHandler                                2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler@i2c_master_example$F160        2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _wr1RegCompleteHandler                                2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler@i2c_master_example$F177      2     0      2    7188
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rdBlkRegCompleteHandler                              2     0      2    7188
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler@i2c_master_example$F154        2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd2RegCompleteHandler                                2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler@i2c_master_example$F143        2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (8) _rd1RegCompleteHandler                                2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (3) _I2C_SetDataCompleteCallback                          4     0      4    3738
                                              9 BANK0      4     0      4
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (4) _I2C_SetCallback                                      9     5      4     836
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _I2C_SetBuffer                                        4     0      4    3406
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_SEND_STOP                                     0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterStop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_SEND_RESTART                                  0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterEnableRestart                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_CallbackReturnStop                               2     0      2       0
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (8) _I2C_CallbackReturnReset                              2     0      2     252
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Close                                            2     2      0      24
                                              0 BANK0      2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          0     0      0     505
                   Absolute function *
                    _CCP4_CaptureISR
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
 ---------------------------------------------------------------------------------
 (13) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCBF1_ISR
 ---------------------------------------------------------------------------------
 (14) _IOCBF1_ISR                                          0     0      0       0
                   Absolute function *
     _IOCBF1_DefaultInterruptHandler *
                  _IOC_RB1_N_Handler *
 ---------------------------------------------------------------------------------
 (15) _IOC_RB1_N_Handler                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (15) _IOCBF1_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (14) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (14) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) _CCP4_CaptureISR                                     3     3      0     505
                                              8 COMMON     3     3      0
                   Absolute function *
           _CCP4_CallBack@main$F2147 *
               _CCP4_DefaultCallBack *
 ---------------------------------------------------------------------------------
 (14) _CCP4_DefaultCallBack                                2     0      2       0
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (14) _CCP4_CallBack@main$F2147                            6     4      2     458
                                              2 COMMON     6     4      2
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (15) _TMR1_WriteTimer                                     2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APDS9960Init
     _i2c_read1ByteRegister
       _I2C_Close
         _I2C_MasterClearIrq
         _I2C_MasterClose
         _I2C_MasterDisableIrq
       _I2C_MasterWrite
         _I2C_MasterOperation
           _I2C_MasterStart
           _I2C_Poller
             _I2C_MasterFsm
               _I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_IDLE *
               _I2C_DO_RCEN *
                 _I2C_MasterStartRx
               _I2C_DO_RESET *
               _I2C_DO_RX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_MasterGetRxData *
                 _I2C_MasterSendAck *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_RX_ACK *
                 _I2C_MasterSendAck
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_DO_SEND_ADR_READ *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_ADR_WRITE *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_READ *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_WRITE *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_DO_TX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterIsNack *
                 _I2C_MasterSendTxData *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_TX_EMPTY *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterSetIrq *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_MasterClearIrq *
               _I2C_MasterIsNack *
             _I2C_MasterWaitForEvent
       _I2C_Open
         _I2C_MasterClearIrq
         _I2C_MasterOpen
       _I2C_SetAddressNackCallback
         _I2C_SetCallback
       _I2C_SetBuffer
       _I2C_SetDataCompleteCallback
         _I2C_SetCallback
     _i2c_write1ByteRegister
       _I2C_Close
         _I2C_MasterClearIrq
         _I2C_MasterClose
         _I2C_MasterDisableIrq
       _I2C_MasterWrite
         _I2C_MasterOperation
           _I2C_MasterStart
           _I2C_Poller
             _I2C_MasterFsm
               _I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_IDLE *
               _I2C_DO_RCEN *
                 _I2C_MasterStartRx
               _I2C_DO_RESET *
               _I2C_DO_RX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_MasterGetRxData *
                 _I2C_MasterSendAck *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_RX_ACK *
                 _I2C_MasterSendAck
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_DO_SEND_ADR_READ *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_ADR_WRITE *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_READ *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_WRITE *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_DO_TX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterIsNack *
                 _I2C_MasterSendTxData *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_TX_EMPTY *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterSetIrq *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_MasterClearIrq *
               _I2C_MasterIsNack *
             _I2C_MasterWaitForEvent
       _I2C_Open
         _I2C_MasterClearIrq
         _I2C_MasterOpen
       _I2C_SetAddressNackCallback
         _I2C_SetCallback
       _I2C_SetBuffer
       _I2C_SetDataCompleteCallback
         _I2C_SetCallback
     _setAmbientLightGain
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setGestureEnterThresh
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setGestureExitThresh
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setGestureGain
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setGestureIntEnable
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setGestureLEDDrive
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setGestureWaitTime
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setLEDDrive
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setLightIntHighThreshold
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setLightIntLowThreshold
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setMode
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setProxIntHighThresh
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setProxIntLowThresh
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setProximityGain
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
   _CCP4_SetCallBack
   _IOCBF1_SetInterruptHandler
   _LCD_Digit1Num
   _LCD_Digit2Num
   _LCD_Digit3Num
   _LCD_Digit4Num
   _SYSTEM_Initialize
     _CCP4_Initialize
       _CCP4_SetCallBack
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _FVR_Initialize
     _I2C_Initialize
     _LCD_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF1_SetInterruptHandler
     _TMR0_Initialize
     _TMR1_Initialize
     _WDT_Initialize
   _enableGestureSensor
     _i2c_write1ByteRegister
       _I2C_Close
         _I2C_MasterClearIrq
         _I2C_MasterClose
         _I2C_MasterDisableIrq
       _I2C_MasterWrite
         _I2C_MasterOperation
           _I2C_MasterStart
           _I2C_Poller
             _I2C_MasterFsm
               _I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_IDLE *
               _I2C_DO_RCEN *
                 _I2C_MasterStartRx
               _I2C_DO_RESET *
               _I2C_DO_RX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_MasterGetRxData *
                 _I2C_MasterSendAck *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_RX_ACK *
                 _I2C_MasterSendAck
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_DO_SEND_ADR_READ *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_ADR_WRITE *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_READ *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_WRITE *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_DO_TX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterIsNack *
                 _I2C_MasterSendTxData *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_TX_EMPTY *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterSetIrq *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_MasterClearIrq *
               _I2C_MasterIsNack *
             _I2C_MasterWaitForEvent
       _I2C_Open
         _I2C_MasterClearIrq
         _I2C_MasterOpen
       _I2C_SetAddressNackCallback
         _I2C_SetCallback
       _I2C_SetBuffer
       _I2C_SetDataCompleteCallback
         _I2C_SetCallback
     _resetGestureParameters
     _setGestureIntEnable
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setGestureMode
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setLEDBoost
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _setMode
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_master_example$F143 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_master_example$F154 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_master_example$F160 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_master_example$F166 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
   _readGesture
     _decodeGesture
       _abs
     _i2c_read1ByteRegister
       _I2C_Close
         _I2C_MasterClearIrq
         _I2C_MasterClose
         _I2C_MasterDisableIrq
       _I2C_MasterWrite
         _I2C_MasterOperation
           _I2C_MasterStart
           _I2C_Poller
             _I2C_MasterFsm
               _I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_IDLE *
               _I2C_DO_RCEN *
                 _I2C_MasterStartRx
               _I2C_DO_RESET *
               _I2C_DO_RX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_MasterGetRxData *
                 _I2C_MasterSendAck *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_RX_ACK *
                 _I2C_MasterSendAck
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_DO_SEND_ADR_READ *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_ADR_WRITE *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_READ *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_WRITE *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_DO_TX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterIsNack *
                 _I2C_MasterSendTxData *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_TX_EMPTY *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterSetIrq *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_MasterClearIrq *
               _I2C_MasterIsNack *
             _I2C_MasterWaitForEvent
       _I2C_Open
         _I2C_MasterClearIrq
         _I2C_MasterOpen
       _I2C_SetAddressNackCallback
         _I2C_SetCallback
       _I2C_SetBuffer
       _I2C_SetDataCompleteCallback
         _I2C_SetCallback
     _i2c_readDataBlock
       _I2C_Close
         _I2C_MasterClearIrq
         _I2C_MasterClose
         _I2C_MasterDisableIrq
       _I2C_MasterWrite
         _I2C_MasterOperation
           _I2C_MasterStart
           _I2C_Poller
             _I2C_MasterFsm
               _I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_IDLE *
               _I2C_DO_RCEN *
                 _I2C_MasterStartRx
               _I2C_DO_RESET *
               _I2C_DO_RX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_MasterGetRxData *
                 _I2C_MasterSendAck *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_RX_ACK *
                 _I2C_MasterSendAck
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_DO_SEND_ADR_READ *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_ADR_WRITE *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_READ *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_WRITE *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_DO_TX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterIsNack *
                 _I2C_MasterSendTxData *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_TX_EMPTY *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterSetIrq *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_MasterClearIrq *
               _I2C_MasterIsNack *
             _I2C_MasterWaitForEvent
       _I2C_Open
         _I2C_MasterClearIrq
         _I2C_MasterOpen
       _I2C_SetAddressNackCallback
         _I2C_SetCallback
       _I2C_SetBuffer
       _I2C_SetDataCompleteCallback
         _I2C_SetCallback
     _processGestureData
       ___awdiv
         ___wmul (ARG)
       ___wmul
       _abs
     _resetGestureParameters
   _reverseBits
   _setProximityGain
     _i2c_read1ByteRegister
       _I2C_Close
         _I2C_MasterClearIrq
         _I2C_MasterClose
         _I2C_MasterDisableIrq
       _I2C_MasterWrite
         _I2C_MasterOperation
           _I2C_MasterStart
           _I2C_Poller
             _I2C_MasterFsm
               _I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_IDLE *
               _I2C_DO_RCEN *
                 _I2C_MasterStartRx
               _I2C_DO_RESET *
               _I2C_DO_RX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_MasterGetRxData *
                 _I2C_MasterSendAck *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_RX_ACK *
                 _I2C_MasterSendAck
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_DO_SEND_ADR_READ *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_ADR_WRITE *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_READ *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_WRITE *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_DO_TX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterIsNack *
                 _I2C_MasterSendTxData *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_TX_EMPTY *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterSetIrq *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_MasterClearIrq *
               _I2C_MasterIsNack *
             _I2C_MasterWaitForEvent
       _I2C_Open
         _I2C_MasterClearIrq
         _I2C_MasterOpen
       _I2C_SetAddressNackCallback
         _I2C_SetCallback
       _I2C_SetBuffer
       _I2C_SetDataCompleteCallback
         _I2C_SetCallback
     _i2c_write1ByteRegister
       _I2C_Close
         _I2C_MasterClearIrq
         _I2C_MasterClose
         _I2C_MasterDisableIrq
       _I2C_MasterWrite
         _I2C_MasterOperation
           _I2C_MasterStart
           _I2C_Poller
             _I2C_MasterFsm
               _I2C_DO_ADDRESS_NACK *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_IDLE *
               _I2C_DO_RCEN *
                 _I2C_MasterStartRx
               _I2C_DO_RESET *
               _I2C_DO_RX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_MasterGetRxData *
                 _I2C_MasterSendAck *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_RX_ACK *
                 _I2C_MasterSendAck
               _I2C_DO_RX_NACK_RESTART *
                 _I2C_MasterSendNack
               _I2C_DO_RX_NACK_STOP *
                 _I2C_MasterSendNack
               _I2C_DO_SEND_ADR_READ *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_ADR_WRITE *
                 _I2C_MasterSendTxData
               _I2C_DO_SEND_RESTART *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_READ *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_RESTART_WRITE *
                 _I2C_MasterEnableRestart
               _I2C_DO_SEND_STOP *
                 _I2C_MasterStop
               _I2C_DO_TX *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterIsNack *
                 _I2C_MasterSendTxData *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_DO_TX_EMPTY *
                 Absolute function(Fake) *
                 _I2C_CallbackReturnReset *
                 _I2C_CallbackReturnStop *
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_MasterSetIrq *
                 _rd1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd1RegCompleteHandler@i2c_master_example$F143 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rd2RegCompleteHandler@i2c_master_example$F154 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _rdBlkRegCompleteHandler@i2c_master_example$F177 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr1RegCompleteHandler@i2c_master_example$F160 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
                 _wr2RegCompleteHandler@i2c_master_example$F166 *
                   _I2C_SetBuffer
                   _I2C_SetDataCompleteCallback
                     _I2C_SetCallback
               _I2C_MasterClearIrq *
               _I2C_MasterIsNack *
             _I2C_MasterWaitForEvent
       _I2C_Open
         _I2C_MasterClearIrq
         _I2C_MasterOpen
       _I2C_SetAddressNackCallback
         _I2C_SetCallback
       _I2C_SetBuffer
       _I2C_SetDataCompleteCallback
         _I2C_SetCallback

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _CCP4_CaptureISR *
     Absolute function(Fake) *
     _CCP4_CallBack@main$F2147 *
       _TMR1_WriteTimer
     _CCP4_DefaultCallBack *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCBF1_ISR
       Absolute function(Fake) *
       _IOCBF1_DefaultInterruptHandler *
       _IOC_RB1_N_Handler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     40      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       8       9       10.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      B6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               1C      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      B6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Fri Oct 09 15:07:50 2020

                                         _CCP4_Initialize 1038  
                           ?_EUSART_SetRxInterruptHandler 0020  
                                  ??_I2C_DO_SEND_ADR_READ 0020  
                             __size_of_I2C_MasterSendNack 0004  
                                      __size_of_I2C_Close 001D  
                                          _LCD_Initialize 1133  
                                   ?_setGestureExitThresh 0070  
                                 ??_I2C_DO_SEND_ADR_WRITE 0021  
                                            ___awdiv@sign 002C  
                                  __end_of_FVR_Initialize 1F0A  
                                     ___wmul@multiplicand 0022  
                                         _timer0ReloadVal 00EB  
                                     __size_of_I2C_Poller 000A  
                                   ??_I2C_DO_SEND_RESTART 0020  
                            __size_of_I2C_MasterOperation 0020  
                                          ?_LCD_Digit1Num 0070  
                                          ?_LCD_Digit2Num 0070  
                                          ?_LCD_Digit3Num 0070  
                           __size_of_I2C_MasterSendTxData 0006  
                                          ?_LCD_Digit4Num 0070  
                                                     l810 085E  
                                                     l826 1689  
                        processGestureData@ud_ratio_first 0032  
                                                     l967 1EFE  
                                         _timer1ReloadVal 00DE  
                                                     _abs 114B  
                                  ??_EUSART_RxDataHandler 0070  
                                   __end_of_decodeGesture 0A2D  
                                  _I2C_MasterWaitForEvent 1EFE  
                          ?_EUSART_SetFramingErrorHandler 0020  
                          CCP4_SetCallBack@customCallBack 0020  
                                                     wreg 0009  
                                             main@bcd_num 005D  
                                        _CCP4_SetCallBack 1F46  
                      __end_of_IOCBF1_SetInterruptHandler 1F7E  
                              _IOCBF1_SetInterruptHandler 1F76  
                            ??_I2C_SetAddressNackCallback 002C  
                                 __end_of_CCP4_CaptureISR 105E  
                                ??_I2C_CallbackReturnStop 002F  
                                            _I2C_DO_RESET 1F0F  
                                                    l1009 1F8C  
                                                    ?_abs 0020  
                                 ??_rd2RegCompleteHandler 002F  
                                                    l1301 0D05  
                                                    l1310 0D29  
                                                    l1222 0A64  
                                                    l1320 0D56  
                                                    l1312 0D32  
                                                    l1304 0D0E  
                                                    l1400 0537  
                                                    l1401 0540  
                                                    l1330 0D83  
                                                    l1322 0D5F  
                                                    l1314 0D3B  
                                                    l1306 0D17  
                                                    l1402 0549  
                                                    l1331 0D8C  
                                                    l1403 0552  
                                                    l1324 0D68  
                                                    l1316 0D44  
                                                    l1308 0D20  
                                                    l1340 0E60  
                                                    l1412 057F  
                                                    l1404 055B  
                                                    l1500 03E2  
                                                    l1341 0E69  
                                                    l1421 059A  
                                                    l1405 0564  
                                                    l2053 1184  
                                                    l1326 0D71  
                                                    l1318 0D4D  
                                                    l1342 0E72  
                                                    l1430 05BE  
                                                    l1406 056D  
                                                    l1510 040F  
                                                    l1502 03EB  
                                                    l1343 0E7B  
                                                    l1415 0588  
                                                    l1328 0D7A  
                                                    l1280 0CA2  
                                                    l1352 0EA8  
                                                    l1344 0E84  
                                                    l1336 0E45  
                                                    l1440 05EB  
                                                    l1432 05C7  
                                                    l1424 05A3  
                                                    l1520 043C  
                                                    l1512 0418  
                                                    l1504 03F4  
                                                    l1281 0CAB  
                                                    l1361 0EC3  
                                                    l1345 0E8D  
                                                    l1409 0576  
                                                    l1521 0445  
                                                    l1282 0CB4  
                                                    l1370 0EE7  
                                                    l1346 0E96  
                                                    l1338 0E4E  
                                                    l1450 0618  
                                                    l1442 05F4  
                                                    l1434 05D0  
                                                    l1426 05AC  
                                                    l1418 0591  
                                                    l1514 0421  
                                                    l1506 03FD  
                                                    l1283 0CBD  
                                                    l1355 0EB1  
                                                    l1339 0E57  
                                                    l1451 0621  
                                                    l1292 0CEA  
                                                    l1284 0CC6  
                                                    l1276 0C87  
                                                    l1380 0F14  
                                                    l1372 0EF0  
                                                    l1364 0ECC  
                                                    l1444 05FD  
                                                    l1436 05D9  
                                                    l1428 05B5  
                                                    l1516 042A  
                                                    l1508 0406  
                                                    l1460 0349  
                                                    l1285 0CCF  
                                                    l1349 0E9F  
                                                    l1286 0CD8  
                                                    l1278 0C90  
                                                    l1390 0F41  
                                                    l1382 0F1D  
                                                    l1374 0EF9  
                                                    l1366 0ED5  
                                                    l1358 0EBA  
                                                    l1446 0606  
                                                    l1438 05E2  
                                                    l1518 0433  
                                                    l1470 0376  
                                                    l1462 0352  
                                                    l1295 0CF3  
                                                    l1279 0C99  
                                                    l1391 0F4A  
                                                    l1384 0F26  
                                                    l1376 0F02  
                                                    l1368 0EDE  
                                                    l1448 060F  
                                                    l1472 037F  
                                                    l1464 035B  
                                                    l1289 0CE1  
                                                    l1457 0340  
                                                    l1298 0CFC  
                                                    l1386 0F2F  
                                                    l1378 0F0B  
                                                    l1482 03A3  
                                                    l1474 0388  
                                                    l1466 0364  
                                                    l1491 03BE  
                                                    l1388 0F38  
                                                    l1396 051C  
                                                    l1476 0391  
                                                    l1468 036D  
                                                    l1485 03AC  
                                                    l1398 0525  
                                                    l1494 03C7  
                                                    l1399 052E  
                                                    l1479 039A  
                                                    l1751 02EE  
                                                    l1496 03D0  
                                                    l1488 03B5  
                                                    l1745 02BA  
                                                    l1498 03D9  
                                                    l1755 0325  
                                                    l1692 0C4B  
                                                    l4326 1782  
                                                    l4512 0830  
                                                    l4530 087F  
                                                    l4522 0836  
                                                    l5170 16DE  
                                                    l5162 16C6  
                                                    l4516 0833  
                                                    l4508 082D  
                                                    l5180 16F8  
                                                    l5172 16EB  
                                                    l5412 0127  
                                                    l4622 14A4  
                                                    l5430 0235  
                                                    l4552 168B  
                                                    l5512 094C  
                                                    l5440 025A  
                                                    l5416 019D  
                                                    l5360 0076  
                                                    l4562 1691  
                                                    l4618 14A1  
                                                    l4802 1669  
                                                    l5178 16F7  
                                                    l6170 0D9D  
                                                    l5530 096D  
                                                    l5522 0961  
                                                    l5506 0941  
                                                    l5434 0247  
                                                    l6162 0AEE  
                                                    l4556 168E  
                                                    l6172 14C0  
                                                    l4628 14A7  
                                                    l4644 135C  
                                                    l6164 0456  
                                                    l5524 0963  
                                                    l5516 0957  
                                                    l4900 1751  
                                                    l5460 02AD  
                                                    l5444 026C  
                                                    l5436 024A  
                                                    l5380 008A  
                                                    l5364 0078  
                                                    l4582 146D  
                                                    l6174 16A6  
                                                    l4654 1F90  
                                                    l4734 1621  
                                                    l6166 0632  
                                                    l5534 0977  
                                                    l5518 0959  
                                                    l5446 026F  
                                                    l5382 008E  
                                                    l6176 0850  
                                                    l6168 0F5B  
                                                    l5536 097D  
                                                    l5528 096B  
                                                    l5464 02B5  
                                                    l5384 010E  
                                                    l6178 1489  
                                                    l4578 146A  
                                                    l4594 1474  
                                                    l4682 11FF  
                                                    l5634 06EB  
                                                    l5546 09A8  
                                                    l4906 156F  
                                                    l5474 02E1  
                                                    l5482 02F0  
                                                    l5810 0B59  
                                                    l4588 1471  
                                                    l4764 1378  
                                                    l5556 09D3  
                                                    l5580 0A2B  
                                                    l4916 1597  
                                                    l5820 0B5C  
                                                    l5900 0A55  
                                                    l4758 11EA  
                                                    l4782 162D  
                                                    l4774 13A0  
                                                    l5638 06ED  
                                                    l5566 0A00  
                                                    l5398 012B  
                                                    l5902 0A57  
                                                    l4688 120A  
                                                    l4792 1655  
                                                    l5728 044E  
                                                    l5752 17D1  
                                                    l5576 0A29  
                                                    l4848 117E  
                                                    l5920 0AB3  
                                                    l5912 0A6F  
                                                    l4874 171A  
                                                    l5842 0C41  
                                                    l5922 0AC4  
                                                    l5914 0A80  
                                                    l5930 0B04  
                                                    l4892 1740  
                                                    l4884 1722  
                                                    l4868 170F  
                                                    l5836 0B92  
                                                    l5924 0AD5  
                                                    l5916 0A91  
                                                    l4886 172E  
                                                    l5838 0C38  
                                                    l5934 0B0C  
                                                    l5918 0AA2  
                                                    l5926 0AE6  
                                                    l4896 1749  
                                                    l5928 0B02  
                                                    l5778 0D95  
                                                    l5786 0F53  
                                                    l5796 062A  
                                                    _LATA 010C  
                                                    _LATB 010D  
                                                    _LATC 010E  
                                                    u3025 0301  
                                                    _LATE 0110  
                                                    u3035 0315  
                                                    u2165 1154  
                                                    u2245 1725  
                                                    u3225 09D0  
                                                    u2265 172F  
                                                    u2185 1185  
                                                    u3065 0331  
                                                    u2355 14DD  
                                                    u2275 1739  
                                                    u2195 118A  
                                                    u2604 16E3  
                                                    u2605 16E2  
                                                    u2285 1741  
                                                    u3255 09FD  
                                                    u2635 141A  
                                                    u3195 09A5  
                                                    u2645 13BA  
                                                    u3285 0A26  
                                                    u2655 13EA  
                                                    u2665 144A  
                                                    u2905 0288  
                                                    u2745 009B  
                                                    u3705 154E  
                                                    u2594 16D7  
                                                    u2595 16D6  
                                                    u2915 029C  
                                                    u3635 0B84  
                                                    u3715 155B  
                                                    u2845 022E  
                                                    u2855 023F  
                                                    u3655 0B9B  
                                                    u2865 0253  
                                                    u2875 0264  
                                                    u3675 1535  
                                                    u2965 02C6  
                                                    u3685 153B  
                                                    u2975 02D4  
                                                    u3695 1548  
                                                    u3855 0B16  
                                                    u3865 0B30  
                                                    u3877 0C52  
                                                    u3887 0C6C  
                                                    _PLLR 04D6  
                                                    _TMR0 0015  
                                                    _WPUB 020D  
                                                    _WPUE 0210  
                                 ??_wr2RegCompleteHandler 002F  
                                                    abs@a 0020  
                                                    _main 0A2D  
                                ?_I2C_CallbackReturnReset 002D  
                                                    fsr0h 0005  
                                                    fsr1h 0007  
                                                    indf0 0000  
                                                    fsr0l 0004  
                                                    indf1 0001  
                                                    fsr1l 0006  
                                        __end_of_I2C_Open 1624  
                                                    btemp 007E  
                                   ??_setGestureIntEnable 003D  
                              __size_of_IOC_RB1_N_Handler 0006  
                                                    start 0033  
   __end_of_rd1RegCompleteHandler@i2c_master_example$F143 1103  
  __size_of_rd1RegCompleteHandler@i2c_master_example$F143 0018  
           _rd1RegCompleteHandler@i2c_master_example$F143 10EB  
   __end_of_wr1RegCompleteHandler@i2c_master_example$F160 1133  
  __size_of_wr1RegCompleteHandler@i2c_master_example$F160 0018  
           _wr1RegCompleteHandler@i2c_master_example$F160 111B  
   __end_of_rd2RegCompleteHandler@i2c_master_example$F154 111B  
  __size_of_rd2RegCompleteHandler@i2c_master_example$F154 0018  
           _rd2RegCompleteHandler@i2c_master_example$F154 1103  
   __end_of_wr2RegCompleteHandler@i2c_master_example$F166 108B  
  __size_of_wr2RegCompleteHandler@i2c_master_example$F166 0018  
           _wr2RegCompleteHandler@i2c_master_example$F166 1073  
 __end_of_rdBlkRegCompleteHandler@i2c_master_example$F177 124F  
__size_of_rdBlkRegCompleteHandler@i2c_master_example$F177 0021  
         _rdBlkRegCompleteHandler@i2c_master_example$F177 122E  
                                  __end_of_LCD_Initialize 114B  
                        __size_of_rdBlkRegCompleteHandler 0021  
                                                   ??_abs 0022  
                                        ?_I2C_MasterClose 0070  
                                            ?_readGesture 0048  
                                 __end_of_TMR0_Initialize 100B  
                                  _i2c_write1ByteRegister 1377  
                                         ?_FVR_Initialize 0070  
                     __size_of_I2C_SetAddressNackCallback 000C  
                          __size_of_OSCILLATOR_Initialize 0009  
                                        ?_I2C_MasterStart 0070  
                                     __size_of_IOCBF1_ISR 000D  
                                           _I2C_DO_RX_ACK 1EF2  
                                        ?_I2C_MasterWrite 0070  
                           __end_of_OSCILLATOR_Initialize 1F90  
                                                   ?_main 0070  
                                         __end_of___awdiv 1756  
                                  ??_CCP4_DefaultCallBack 0074  
                                         ___awdiv@divisor 0026  
                                                   _T1CON 0018  
                                                   _LCDRL 0795  
                                                   _LCDPS 0792  
                                                   i1l586 11CD  
                                            ?_setLEDBoost 0070  
                                         ___awdiv@counter 002B  
                                                   _RCREG 0199  
                                            ?_setLEDDrive 0070  
                            __size_of_I2C_DO_RX_NACK_STOP 0004  
                                          _setGestureGain 13A7  
                                                   _RCSTA 019D  
                                                   _TMR1H 0017  
                                                   _TMR1L 0016  
                                          _setGestureMode 12FC  
                                       ??_I2C_DO_TX_EMPTY 002F  
                                                   _TRISA 008C  
                                                   _TRISB 008D  
                                                   _TRISC 008E  
                                                   _TRISE 0090  
                                                   _TXREG 019A  
                                                   _TXSTA 019E  
                             __end_of_setProxIntLowThresh 1019  
                                       __end_of_I2C_DO_RX 16B5  
                                       __end_of_I2C_DO_TX 0881  
                                 __end_of_PIN_MANAGER_IOC 1F25  
                                          _WDT_Initialize 07FD  
                                       __end_of_I2C_Close 11ED  
                            __end_of_setProxIntHighThresh 2000  
                                  __size_of_I2C_MasterFsm 002D  
                          I2C_MasterOperation@returnValue 0035  
                                   _i2c_read1ByteRegister 1624  
                                   __size_of_APDS9960Init 0126  
                                 _I2C_MasterEnableRestart 1ECA  
                                         __end_of_setMode 1705  
                                 __end_of_TMR1_Initialize 1038  
                                                   pclath 000A  
                                        ?_I2C_SetCallback 0020  
                               i2c_write1ByteRegister@reg 0036  
                            I2C_SetAddressNackCallback@cb 0029  
                            __size_of_setAmbientLightGain 0025  
                                                   status 0003  
                                 __end_of_CCP4_Initialize 1049  
                                                   wtemp0 007E  
                                       ?_I2C_DO_SEND_STOP 0070  
                                  __size_of_I2C_SetBuffer 0015  
                                ?_setLightIntLowThreshold 0039  
                                         _TMR1_WriteTimer 1019  
                              __end_of_setGestureLEDDrive 1407  
                                      ??_I2C_DO_SEND_STOP 0020  
                                   setGestureWaitTime@val 0040  
                                        ??_DAC_Initialize 0020  
                                         ?_LCD_Initialize 0070  
                                           _gesture_data_ 22EC  
                                         __initialization 0035  
                                  ??_setGestureExitThresh 0039  
                              processGestureData@lr_delta 0044  
                                            __end_of_main 0B41  
                       __size_of_I2C_DO_SEND_RESTART_READ 0004  
                                _CCP4_CallBack@main$F2147 0881  
                               ?_I2C_DO_SEND_RESTART_READ 0070  
                              processGestureData@ud_delta 0042  
                                          ?_I2C_DO_RX_ACK 0070  
                             ?_INTERRUPT_InterruptManager 0070  
                                         ??_LCD_Digit1Num 0020  
                                         ??_LCD_Digit2Num 0020  
                                         ??_LCD_Digit3Num 0020  
                                         ??_LCD_Digit4Num 0020  
                                  __end_of_setGestureGain 13D7  
                               __size_of_setProximityGain 0031  
                          ??_EUSART_SetRxInterruptHandler 0022  
                                  __end_of_setGestureMode 1321  
                                                  ??_main 005A  
                                       ?_I2C_MasterIsNack 0070  
                                       ?_I2C_MasterSetIrq 0070  
                                            _APDS9960Init 06D7  
                                      ??_I2C_MasterIsNack 0020  
                       __size_of_setLightIntHighThreshold 0021  
                                  __end_of_WDT_Initialize 0800  
                               ?_setLightIntHighThreshold 0039  
                       setLightIntHighThreshold@threshold 0039  
                                      ??_I2C_MasterSetIrq 0020  
                                        ?_CCP4_CaptureISR 0070  
               __end_of_EUSART_DefaultFramingErrorHandler 1EB6  
              __size_of_EUSART_DefaultFramingErrorHandler 0001  
                     ??_EUSART_DefaultFramingErrorHandler 0070  
                      ?_EUSART_DefaultFramingErrorHandler 0070  
                       _EUSART_DefaultFramingErrorHandler 1EB5  
                              _EUSART_OverrunErrorHandler 00E2  
                         __end_of_I2C_CallbackReturnReset 1EBB  
                                                  _CCPR4H 0319  
                                                  _CCPR4L 0318  
                         __size_of_I2C_CallbackReturnStop 0002  
                                        ___awdiv@dividend 0028  
                                                  _APFCON 011D  
                           I2C_SetDataCompleteCallback@cb 0029  
                                      _processGestureData 0065  
                                                  _ANSELA 018C  
                                                  _ANSELB 018D  
                                                  _BORCON 0116  
                                                  _T1GCON 0019  
                                                  _LCDCON 0791  
                                                  _LCDCST 0794  
                                                  _LCDSE0 0798  
                                                  _LCDSE1 0799  
                                                  _LCDREF 0793  
                            setProxIntLowThresh@threshold 003B  
                                            ??_I2C_Poller 0034  
                                 TMR1_WriteTimer@timerVal 0070  
                                                  i1l1150 0029  
                                                  i1l1145 000D  
                                                  i1l1155 0031  
                                                  i1l1148 001C  
                                                  i1l5100 08CD  
                                                  i1l5112 08E4  
                                                  i1l5106 08D9  
                                                  i1l5142 092F  
                                                  i1l5134 0920  
                                                  i1l5118 08EE  
                                                  i1l5126 090B  
                                                  i1l5138 0928  
                                                  i1l5090 08B4  
                                                  i1l5084 08A1  
                                                  i1l5614 151E  
                                                  i1l5608 150F  
                                                  i1l5618 152D  
                                                  i1l4836 1023  
                                                  i1l4974 1FD3  
                                                  _FVRCON 0117  
                                                  u247_25 0904  
                                                  _OSCCON 0099  
                                                  _SPBRGH 019C  
                                                  _SPBRGL 019B  
                                 ?_resetGestureParameters 0070  
                                                  _WDTCON 0097  
                                                  _SSPADD 0212  
                                                  _SSPBUF 0211  
                                rdBlkRegCompleteHandler@p 002D  
                       CCP4_CallBack@main$F2147@bit_count 007B  
                                     ?_processGestureData 0070  
                                       _gesture_lr_delta_ 0064  
                                     _I2C_MasterGetRxData 1ED3  
                           setProxIntHighThresh@threshold 003B  
                                       _gesture_lr_count_ 0060  
                                       _gesture_ud_delta_ 0066  
                                       _gesture_ud_count_ 0062  
                                                  ___wmul 117C  
                                           _I2C_MasterFsm 134A  
                                               ??___awdiv 002A  
                              __end_of_setGestureWaitTime 12FC  
                                            ?_reverseBits 0070  
                                     _EUSART_Transmit_ISR 11B3  
                                        ?_TMR0_Initialize 0070  
                                       I2C_SetCallback@cb 0020  
                                        ___awdiv@quotient 002D  
                                 __size_of_I2C_MasterOpen 000B  
                                         ?_setGestureGain 0070  
                                 __size_of_I2C_MasterStop 0003  
                                           _CCP4_CallBack 00DC  
                                 __size_of_I2C_Initialize 0009  
                                         ?_setGestureMode 0070  
                                           _I2C_SetBuffer 105E  
                                      __end_of_I2C_Poller 1F9A  
                                 ??_setGestureEnterThresh 0039  
                            __end_of_I2C_MasterDisableIrq 1EC7  
                                    ??_processGestureData 002F  
                                     _I2C_DO_ADDRESS_NACK 1498  
                                    ?_I2C_MasterGetRxData 0070  
                                               ?_I2C_Open 0070  
                      __end_of_I2C_SetAddressNackCallback 1FBD  
                              _I2C_SetAddressNackCallback 1FB1  
                              i2c_write1ByteRegister@data 0037  
                                               ??_setMode 003E  
                                         ?_WDT_Initialize 0070  
                               ??_I2C_MasterEnableRestart 0020  
                                       readGesture@motion 0053  
                                  ?_i2c_read1ByteRegister 0036  
              IOCBF1_SetInterruptHandler@InterruptHandler 0020  
                                        ?_PIN_MANAGER_IOC 0070  
                                 __end_of_TMR1_WriteTimer 1028  
                                            ??_IOCBF1_ISR 0071  
                                    ?_EUSART_Transmit_ISR 0070  
                          __end_of_resetGestureParameters 11B3  
                                        ?_TMR1_Initialize 0070  
                                       _SYSTEM_Initialize 1291  
                                 __end_of__initialization 0061  
                                     _I2C_MasterOperation 11ED  
                                        ?_CCP4_Initialize 0070  
                                      ?_SYSTEM_Initialize 0070  
                                    ?_I2C_DO_ADDRESS_NACK 0070  
                                  setGestureWaitTime@time 003F  
                    __end_of_EUSART_SetTxInterruptHandler 1F76  
                   __size_of_EUSART_SetTxInterruptHandler 0008  
                            _EUSART_SetTxInterruptHandler 1F6E  
                                 _rdBlkRegCompleteHandler 120D  
                                __end_of_CCP4_SetCallBack 1F4E  
                                          __pcstackCOMMON 0070  
                                          ?_I2C_MasterFsm 0070  
                                         ??_I2C_DO_RX_ACK 0020  
                                  _I2C_CallbackReturnStop 1EB7  
                                     ??_SYSTEM_Initialize 0023  
                                    _setProxIntHighThresh 1FF2  
                                          _gesture_state_ 00D6  
                                          ?_I2C_SetBuffer 0020  
                                 ?_I2C_MasterWaitForEvent 0070  
                          __size_of_I2C_DO_SEND_ADR_WRITE 0007  
                      __size_of_I2C_DO_SEND_RESTART_WRITE 0004  
                           __end_of_I2C_DO_SEND_ADR_WRITE 1F3E  
                              ?_I2C_DO_SEND_RESTART_WRITE 0070  
                                      __end_of_IOCBF1_ISR 1FD6  
                                    ?_I2C_MasterOperation 0070  
                                    __size_of_readGesture 0144  
                                   ??_I2C_MasterGetRxData 0020  
                                          _OPTION_REGbits 0095  
                                              ??_I2C_Open 0020  
                                    _eusartRxStatusBuffer 00C4  
                              __end_of_I2C_MasterClearIrq 1EC1  
                                      _gesture_far_count_ 00D8  
                                    __size_of_setLEDBoost 0030  
                                    __size_of_setLEDDrive 0030  
                             ?_IOCBF1_SetInterruptHandler 0020  
                         ??_EUSART_SetOverrunErrorHandler 0022  
                                            _LCDDATA0bits 07A0  
                                            _LCDDATA1bits 07A1  
                                            _LCDDATA3bits 07A3  
                                            _LCDDATA4bits 07A4  
                                            _LCDDATA6bits 07A6  
                                            _LCDDATA7bits 07A7  
                                            _LCDDATA9bits 07A9  
                               __end_of_SYSTEM_Initialize 12B2  
                                   ??_EUSART_Transmit_ISR 0070  
                                       _I2C_MasterSendAck 1EDE  
                                              __pbssBANK0 0060  
                                              __pbssBANK1 00A0  
                                              __pbssBANK2 0120  
                                           ??_I2C_DO_IDLE 0020  
                          __size_of_rd2RegCompleteHandler 0018  
                                           ??_I2C_DO_RCEN 0020  
                           __end_of_rd2RegCompleteHandler 10D3  
                            __end_of_I2C_MasterSendTxData 1F2B  
                                      ?_I2C_MasterSendAck 0070  
                                       _I2C_MasterStartRx 1ED0  
                          __size_of_wr2RegCompleteHandler 0018  
                                   ??_I2C_DO_ADDRESS_NACK 002F  
                           __end_of_wr2RegCompleteHandler 10EB  
                             __size_of_EUSART_Receive_ISR 0036  
                        ??_IOCBF1_DefaultInterruptHandler 0070  
                         ?_IOCBF1_DefaultInterruptHandler 0070  
                                     _I2C_DO_RX_NACK_STOP 1EF6  
                                   _rd1RegCompleteHandler 10A3  
                                      ?_I2C_MasterStartRx 0070  
                                 _IOCBF1_InterruptHandler 00EE  
                              __end_of_I2C_MasterSendNack 1EDE  
                                   _wr1RegCompleteHandler 108B  
                                        ??_FVR_Initialize 0020  
                                              __pmaintext 0A2D  
                                     ??_I2C_MasterSendAck 0020  
                                 ?_i2c_write1ByteRegister 0036  
                           ?_EUSART_SetTxInterruptHandler 0020  
                        _EUSART_TxDefaultInterruptHandler 00E8  
                             __end_of_I2C_DO_SEND_RESTART 1EEE  
                                         _I2C_DO_TX_EMPTY 1467  
                                     I2C_SetBuffer@buffer 0020  
                                 setGestureLEDDrive@drive 0040  
                                                 ?___wmul 0020  
                            __size_of_enableGestureSensor 0058  
                                              __pintentry 0004  
                          __end_of_I2C_MasterWaitForEvent 1F02  
                                   ?_setProxIntHighThresh 0070  
                                     ??_I2C_MasterStartRx 0020  
                   CCP4_CallBack@main$F2147@capturedValue 0072  
                                                 _DACCON0 0118  
                                                 _DACCON1 0119  
                           __size_of_I2C_DO_SEND_ADR_READ 0008  
                                                 _CCP4CON 031A  
                                                 _BAUDCON 019F  
                        __size_of_I2C_CallbackReturnReset 0002  
                                        _setProximityGain 14C9  
                                             setMode@mode 0041  
                            ??_EUSART_DefaultErrorHandler 0071  
                                   ??_I2C_MasterOperation 0034  
                                     _setAmbientLightGain 12B2  
                          I2C_SetDataCompleteCallback@ptr 002B  
                                ??_I2C_DO_RX_NACK_RESTART 0020  
                       __end_of_I2C_DO_SEND_RESTART_WRITE 1EEA  
                                    ?_I2C_DO_RX_NACK_STOP 0070  
                                           _eusartRxCount 00ED  
                                   i2c_readDataBlock@data 0037  
                           __size_of_EUSART_RxDataHandler 0019  
                               __end_of_I2C_MasterSendAck 1EE2  
                                                 _OSCTUNE 0098  
                                ??_EUSART_SetErrorHandler 0022  
                                                 _SSPCON1 0215  
                                                 _SSPCON2 0216  
                             __end_of_setGestureIntEnable 134A  
                           i2c_write1ByteRegister@address 0038  
                     ??_rdBlkRegCompleteHandler@abs$F3121 002F  
                      ?_rdBlkRegCompleteHandler@abs$F3119 002D  
                                                 _SSPSTAT 0214  
                         processGestureData@lr_ratio_last 0038  
                                        ?_TMR1_WriteTimer 0070  
                               __end_of_I2C_MasterStartRx 1ED3  
                                    I2C_Close@returnValue 0021  
                            ?_I2C_SetDataCompleteCallback 0029  
                                               _I2C_DO_RX 166B  
                                               _I2C_DO_TX 0826  
                        __end_of_I2C_DO_SEND_RESTART_READ 1EE6  
                                            readGesture@i 0058  
                                    ?_setAmbientLightGain 0070  
                                        ??_LCD_Initialize 0020  
                              ??_CCP4_CallBack@main$F2151 0074  
                                               _I2C_Close 11D0  
                               ??_rdBlkRegCompleteHandler 002F  
                                              _ir_address 006B  
                                    _I2C_MasterDisableIrq 1EC4  
                                            _flag_gesture 0068  
                          __end_of_i2c_write1ByteRegister 13A7  
                                           setMode@enable 003D  
                                         ??_I2C_MasterFsm 0031  
                     __size_of_EUSART_DefaultErrorHandler 0003  
                                  __size_of_decodeGesture 00F7  
                                     __end_of_I2C_DO_IDLE 1F0F  
                                              _ir_command 006A  
                                     __end_of_I2C_DO_RCEN 1F37  
                                                 ___awdiv 1705  
                                         ??_I2C_SetBuffer 0024  
                                         __size_of___wmul 001B  
                                 I2C_SetBuffer@bufferSize 0022  
                                               _LCDDATA10 07AA  
                                          _I2C_MasterOpen 1F9A  
                                          _I2C_MasterStop 1ECD  
                                          _I2C_Initialize 1F7E  
                               __size_of_I2C_DO_SEND_STOP 0004  
                        __size_of_setLightIntLowThreshold 0021  
                                      _setGestureLEDDrive 13D7  
                                                 __ptext1 1530  
                                                 __ptext2 0B41  
                                                 __ptext3 0065  
                                                 __ptext4 117C  
                                                 __ptext5 1705  
                                                 __ptext6 1566  
                                                 __ptext7 0936  
                                                 __ptext8 114B  
                                                 __ptext9 17A8  
                                      i2c_readDataBlock@d 003C  
                                    __size_of_reverseBits 0036  
                                   ??_I2C_DO_RX_NACK_STOP 0020  
                                               _T1CONbits 0018  
                                                 _ir_flag 0069  
                                   _OSCILLATOR_Initialize 1F87  
                                            __size_of_abs 0018  
                           __size_of_CCP4_DefaultCallBack 0001  
                                      I2C_SetCallback@idx 0028  
                                __size_of_I2C_MasterClose 0003  
                                                 _setMode 16B5  
                                ??_PIN_MANAGER_Initialize 0022  
                           I2C_CallbackReturnReset@funPtr 002D  
                                      I2C_SetCallback@ptr 0022  
                                               _IOCBFbits 0396  
                                               _IOCBNbits 0395  
                                               _IOCBPbits 0394  
                                     ?_setGestureLEDDrive 0070  
                                __size_of_I2C_MasterStart 0003  
                                __size_of_I2C_MasterWrite 0004  
                              __size_of_SYSTEM_Initialize 0021  
                                 i2c_read1ByteRegister@d2 003C  
                                                 clrloop0 1FBE  
                                    end_of_initialization 0061  
                                              ?_I2C_DO_RX 0070  
                                              ?_I2C_DO_TX 0070  
                                   ??_setAmbientLightGain 003D  
                            __size_of_setProxIntLowThresh 000E  
                        ?_rd1RegCompleteHandler@abs$F3102 002D  
                       ??_rd1RegCompleteHandler@abs$F3104 002F  
                        ?_wr1RegCompleteHandler@abs$F3094 002D  
                   __end_of_EUSART_SetOverrunErrorHandler 1F66  
                  __size_of_EUSART_SetOverrunErrorHandler 0008  
                           _EUSART_SetOverrunErrorHandler 1F5E  
                       ??_wr1RegCompleteHandler@abs$F3096 002F  
                               __size_of_I2C_MasterIsNack 0006  
                                              ?_I2C_Close 0070  
                                  ?_rd1RegCompleteHandler 002D  
                                 __end_of_I2C_DO_TX_EMPTY 1498  
                               __size_of_I2C_MasterSetIrq 0002  
                                   ?_I2C_MasterDisableIrq 0070  
                           enableGestureSensor@interrupts 0044  
                                       _EUSART_Initialize 159E  
                                  ?_wr1RegCompleteHandler 002D  
                           setGestureExitThresh@threshold 003B  
                                    ??_setGestureLEDDrive 003D  
                                      readGesture@gstatus 0055  
                                      ?_EUSART_Initialize 0070  
                                __size_of_I2C_SetCallback 0052  
                                               _RCSTAbits 019D  
                                        ??_setGestureGain 003D  
                                  ??_setProxIntHighThresh 0039  
                                        ??_setGestureMode 003D  
                                  __end_of_I2C_MasterOpen 1FA5  
                                  __end_of_I2C_MasterStop 1ED0  
                                  __end_of_I2C_Initialize 1F87  
                           __size_of_setGestureExitThresh 000E  
                                   _ir_address_complement 00EA  
                                     ??_EUSART_Initialize 0022  
                                        ??_WDT_Initialize 0020  
                          ??_EUSART_SetTxInterruptHandler 0022  
                         __end_of_rdBlkRegCompleteHandler 122E  
                                   __end_of_LCD_Digit1Num 0E42  
                                   __end_of_LCD_Digit2Num 1000  
                                   __end_of_LCD_Digit3Num 06D7  
                                   __end_of_LCD_Digit4Num 0519  
                                    _I2C_MasterSendTxData 1F25  
                         __size_of_I2C_DO_RX_NACK_RESTART 0004  
                         setLightIntHighThreshold@val_low 003D  
                                        LCD_Digit1Num@num 0022  
                                 ??_i2c_read1ByteRegister 0037  
                          __size_of_setGestureEnterThresh 000E  
                                        LCD_Digit2Num@num 0022  
                           __end_of_setGestureEnterThresh 1FE4  
                                           _decodeGesture 0936  
                                        LCD_Digit3Num@num 0022  
                             ?_I2C_SetAddressNackCallback 0029  
                                        LCD_Digit4Num@num 0022  
                                      _setGestureWaitTime 12D7  
                              __size_of_I2C_MasterSendAck 0004  
                                       __size_of_I2C_Open 0044  
                         __size_of_EUSART_SetErrorHandler 0008  
                              __size_of_I2C_MasterStartRx 0003  
                         processGestureData@ud_ratio_last 0036  
                                     ?_setGestureWaitTime 0070  
                               __end_of_EUSART_Initialize 15E0  
                                             _I2C_DO_IDLE 1F0A  
                                             _I2C_DO_RCEN 1F31  
                                __size_of_CCP4_CaptureISR 0015  
                       CCP4_DefaultCallBack@capturedValue 0072  
                                   setProximityGain@drive 0040  
                                 ?_I2C_CallbackReturnStop 002D  
                                _I2C_DO_SEND_RESTART_READ 1EE2  
                                       ?_CCP4_SetCallBack 0020  
                            I2C_CallbackReturnStop@funPtr 002D  
                                         ?_I2C_MasterOpen 0070  
                                         ?_I2C_MasterStop 0070  
                                         ?_I2C_Initialize 0070  
                                 _I2C_CallbackReturnReset 1EB9  
                                      ??_CCP4_SetCallBack 0022  
                      __end_of_EUSART_DefaultErrorHandler 1EBE  
                              _EUSART_DefaultErrorHandler 1EBB  
                                          __end_of___wmul 1197  
                    __size_of_I2C_SetDataCompleteCallback 000C  
                                    ??_setGestureWaitTime 003D  
                                   ?_I2C_MasterSendTxData 0070  
                                  ?_OSCILLATOR_Initialize 0070  
                                _setLightIntHighThreshold 124F  
                                         _gesture_motion_ 00D4  
                             ??_I2C_DO_SEND_RESTART_WRITE 0020  
                                 __size_of_DAC_Initialize 0005  
                             __size_of_processGestureData 02D8  
                                          ?_decodeGesture 0070  
                                     start_initialization 0035  
                                      setGestureGain@gain 0040  
                                __size_of_TMR0_Initialize 000B  
                         __size_of_PIN_MANAGER_Initialize 0026  
                                             __end_of_abs 1163  
                                           ?_I2C_DO_RESET 0070  
            EUSART_SetRxInterruptHandler@interruptHandler 0020  
            EUSART_SetTxInterruptHandler@interruptHandler 0020  
                        setLightIntHighThreshold@val_high 003E  
                                     _enableGestureSensor 17A8  
                                             ??_I2C_DO_RX 002F  
                                             ??_I2C_DO_TX 002F  
                                       ??_I2C_MasterClose 0020  
                                  rd1RegCompleteHandler@p 002D  
                                __end_of_setProximityGain 14FA  
                                processGestureData@d_last 003B  
                                  ??_I2C_MasterDisableIrq 0020  
                                             ??_I2C_Close 0020  
                                       ??_I2C_MasterStart 0020  
                                       ??_I2C_MasterWrite 0036  
                          __end_of_I2C_CallbackReturnStop 1EB9  
                                processGestureData@l_last 003C  
                                  _I2C_DO_RX_NACK_RESTART 1EFA  
                                        ?_I2C_DO_TX_EMPTY 0070  
                                processGestureData@r_last 003D  
                                      _I2C_MasterClearIrq 1EBE  
                                __size_of_PIN_MANAGER_IOC 0006  
                                           _LCDDATA10bits 07AA  
                                processGestureData@u_last 003A  
                          ?_EUSART_SetOverrunErrorHandler 0020  
                                __size_of_TMR1_Initialize 0010  
                              _EUSART_FramingErrorHandler 00E4  
                            i2c_read1ByteRegister@address 0038  
                         setLightIntLowThreshold@val_high 003E  
                                                ??___wmul 0024  
                                  _EUSART_SetErrorHandler 1F4E  
                                    ?_enableGestureSensor 0070  
                                  wr1RegCompleteHandler@p 002D  
                                __size_of_CCP4_Initialize 0011  
                                     ?_I2C_MasterClearIrq 0070  
                                           ??_readGesture 004A  
                             __end_of_I2C_MasterGetRxData 1ED6  
                                      setGestureMode@mode 003F  
                                   __end_of_I2C_DO_RX_ACK 1EF6  
                                 _setLightIntLowThreshold 1270  
                               setGestureIntEnable@enable 0040  
                                setAmbientLightGain@drive 003F  
                                        _I2C_DO_SEND_STOP 1EEE  
                                       ??_I2C_SetCallback 0024  
                  __end_of_IOCBF1_DefaultInterruptHandler 1EB7  
                 __size_of_IOCBF1_DefaultInterruptHandler 0001  
                          _IOCBF1_DefaultInterruptHandler 1EB6  
                                     I2C_Open@returnValue 0021  
                                      _I2C_MasterSendNack 1EDA  
                                ?_I2C_MasterEnableRestart 0070  
                                           ??_setLEDBoost 003D  
                                           ??_setLEDDrive 003D  
                                   CCP4_CaptureISR@module 0079  
                                       _i2c_fsmStateTable 1800  
                                             __pbssBIGRAM 22EC  
                             __end_of_EUSART_Transmit_ISR 11D0  
                                   _I2C_DO_SEND_ADR_WRITE 1F37  
                                  setGestureIntEnable@val 003F  
                                             __pbssCOMMON 007B  
                                               ___latbits 0003  
                                           __pcstackBANK0 0020  
                                          ??_I2C_DO_RESET 0020  
                                     ?_I2C_MasterSendNack 0070  
                            __end_of_I2C_DO_SEND_ADR_READ 1F46  
                                    ??_I2C_MasterClearIrq 0020  
                             __end_of_I2C_DO_ADDRESS_NACK 14C9  
                              __end_of_EUSART_Receive_ISR 1530  
                                        _I2C_MasterIsNack 1F2B  
                              __size_of_EUSART_Initialize 0042  
                               _I2C_DO_SEND_RESTART_WRITE 1EE6  
                                   readGesture@fifo_level 0057  
                        _EUSART_RxDefaultInterruptHandler 00E6  
                                        _I2C_MasterSetIrq 0002  
                                               __pnvBANK1 00EE  
                                   _rd2RegCompleteHandler 10BB  
                            __end_of_EUSART_RxDataHandler 117C  
                                  _PIN_MANAGER_Initialize 0800  
                                   _wr2RegCompleteHandler 10D3  
                               ??_I2C_CallbackReturnReset 002F  
                             __end_of_I2C_MasterOperation 120D  
                                    ??_I2C_MasterSendNack 0020  
                                   ??_enableGestureSensor 0042  
                                                ?___awdiv 0026  
                                               __ptext100 1ECA  
                                               __ptext101 1EC7  
                                               __ptext110 1F19  
                                               __ptext102 11D0  
                                               __ptext111 11B3  
                                               __ptext103 1EC4  
                                               __ptext120 1019  
                                               __ptext112 14FA  
                                               __ptext104 1EC1  
                                               __ptext113 1ED6  
                                               __ptext105 1EBE  
                                               __ptext114 1EB5  
                                               __ptext115 1EBB  
                                               __ptext107 1F1F  
                                               __ptext116 1163  
                                               __ptext108 1FC9  
                                               __ptext117 1049  
                                               __ptext109 1EB6  
                                               __ptext118 0881  
                                               __ptext119 1EB4  
                                       ??_CCP4_CaptureISR 0078  
                                               _fifo_data 2370  
                                            _eusartRxHead 006C  
                                            _eusartTxHead 006F  
                                    i2c_readDataBlock@len 0039  
                                            _eusartRxTail 007D  
                                    i2c_readDataBlock@reg 0036  
                                  ??_I2C_MasterSendTxData 0020  
                                            _eusartTxTail 006E  
                                     _setProxIntLowThresh 100B  
                               __end_of_i2c_fsmStateTable 1820  
                            ??_INTERRUPT_InterruptManager 007B  
                                         ??_decodeGesture 0024  
                                 _eusartTxBufferRemaining 006D  
                            __size_of_I2C_DO_SEND_RESTART 0004  
                                           ?_APDS9960Init 0070  
                                     __end_of_readGesture 0C85  
                                       _i2c_readDataBlock 1566  
                                 I2C_MasterOperation@read 0034  
                                                _I2C_Open 15E0  
                                ??_resetGestureParameters 0020  
                                                ?_setMode 003D  
        rd1RegCompleteHandler@i2c_master_example$F143@ptr 002D  
        wr1RegCompleteHandler@i2c_master_example$F160@ptr 002D  
        rd2RegCompleteHandler@i2c_master_example$F154@ptr 002D  
        wr2RegCompleteHandler@i2c_master_example$F166@ptr 002D  
      rdBlkRegCompleteHandler@i2c_master_example$F177@ptr 002D  
                                      ?_i2c_readDataBlock 0036  
                                                _LCDDATA0 07A0  
                                                _LCDDATA1 07A1  
                                                _LCDDATA3 07A3  
                                                _LCDDATA4 07A4  
                                                _LCDDATA6 07A6  
                                                _LCDDATA7 07A7  
                                                _LCDDATA9 07A9  
                                     __end_of_setLEDBoost 1467  
                                     __end_of_setLEDDrive 1437  
                                 ??_rd1RegCompleteHandler 002F  
                                    ?_setProxIntLowThresh 0070  
                                   readGesture@bytes_read 0056  
                                          _eusartRxBuffer 0120  
                                 ??_wr1RegCompleteHandler 002F  
                                       ??_TMR0_Initialize 0020  
                                          _eusartTxBuffer 00CC  
                                     ??_i2c_readDataBlock 003B  
                                          ___wmul@product 0024  
                                  i2c_read1ByteRegister@e 0039  
                  EUSART_SetErrorHandler@interruptHandler 0020  
                                  i2c_read1ByteRegister@x 003A  
                                               clear_ram0 1FBD  
                            __end_of_CCP4_DefaultCallBack 1EB5  
                                                _PIE1bits 0091  
                                                _PIE3bits 0093  
                            __size_of_setGestureIntEnable 0029  
                                       _eusartRxLastError 00EC  
                                     _gesture_near_count_ 00DA  
                                __size_of_TMR1_WriteTimer 000F  
                     __size_of_INTERRUPT_InterruptManager 002F  
                                                _PIR1bits 0011  
                         ??_EUSART_SetFramingErrorHandler 0022  
                                                _PIR3bits 0013  
                                   __end_of_I2C_MasterFsm 1377  
                               ??_setLightIntLowThreshold 003B  
                             __end_of_I2C_DO_RX_NACK_STOP 1EFA  
               __end_of_EUSART_DefaultOverrunErrorHandler 1EDA  
              __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                     ??_EUSART_DefaultOverrunErrorHandler 0070  
                      ?_EUSART_DefaultOverrunErrorHandler 0070  
                       _EUSART_DefaultOverrunErrorHandler 1ED6  
                                          setLEDBoost@val 003F  
                         __end_of_I2C_MasterEnableRestart 1ECD  
                                           ??_reverseBits 0020  
                                       ??_PIN_MANAGER_IOC 0071  
                                          setLEDDrive@val 003F  
                                   __end_of_I2C_SetBuffer 1073  
                       __size_of_CCP4_CallBack@main$F2147 00B5  
                                       ??_TMR1_Initialize 0020  
                        processGestureData@lr_ratio_first 0034  
                               ?_CCP4_CallBack@main$F2149 0072  
                               __end_of_i2c_readDataBlock 159E  
                                       ___wmul@multiplier 0020  
                                          _DAC_Initialize 1F14  
                                  ?_I2C_DO_SEND_ADR_WRITE 0070  
                                          ??_APDS9960Init 0042  
                                I2C_MasterSendTxData@data 0020  
                                 __size_of_FVR_Initialize 0004  
                                       ??_CCP4_Initialize 0022  
                               processGestureData@d_first 003F  
                                               main@temp8 005F  
                             __end_of_setAmbientLightGain 12D7  
                          __size_of_i2c_read1ByteRegister 0047  
                               processGestureData@l_first 0040  
                           __end_of_i2c_read1ByteRegister 166B  
                            __end_of_setGestureExitThresh 1FF2  
                               processGestureData@r_first 0041  
                              ??_I2C_DO_SEND_RESTART_READ 0020  
                                ?_rdBlkRegCompleteHandler 002D  
                               processGestureData@u_first 003E  
                                   ??_setProxIntLowThresh 0039  
                                              _I2C_Poller 1F90  
                                              _I2C_Status 00A0  
                                       setGestureGain@val 003F  
                                            ?_I2C_DO_IDLE 0070  
                                            ?_I2C_DO_RCEN 0070  
                                  ?_rd2RegCompleteHandler 002D  
                                        ??_I2C_MasterOpen 0020  
                                  ?_wr2RegCompleteHandler 002D  
                                        ??_I2C_MasterStop 0020  
                                ??_I2C_MasterWaitForEvent 0020  
                                        ??_I2C_Initialize 0020  
                              ??_setLightIntHighThreshold 003B  
                             __size_of_setGestureLEDDrive 0030  
                                          setMode@reg_val 0040  
                                    __end_of_I2C_DO_RESET 1F14  
                          setLightIntLowThreshold@val_low 003D  
                                       setGestureMode@val 0040  
                                 ??_OSCILLATOR_Initialize 0020  
                                     _EUSART_ErrorHandler 00E0  
                                 __size_of_LCD_Initialize 0018  
                                        __size_of___awdiv 0051  
                                    _I2C_DO_SEND_ADR_READ 1F3E  
                           __size_of_setProxIntHighThresh 000E  
                                             _readGesture 0B41  
                                  __end_of_DAC_Initialize 1F19  
                             ?_EUSART_DefaultErrorHandler 0070  
                                          APDS9960Init@id 0044  
                        setLightIntLowThreshold@threshold 0039  
                                         _I2C_MasterClose 1EC1  
                                             _setLEDBoost 1437  
                                             _setLEDDrive 1407  
                           I2C_SetAddressNackCallback@ptr 002B  
                                     __end_of_reverseBits 1566  
                                         I2C_Open@address 0020  
                                         _I2C_MasterStart 1EC7  
                                         _I2C_MasterWrite 1F02  
                         __size_of_resetGestureParameters 001C  
                               __size_of_CCP4_SetCallBack 0008  
                                    _EUSART_RxDataHandler 1163  
                         __end_of_setLightIntLowThreshold 1291  
                                   setGestureLEDDrive@val 003F  
                                        __size_of_setMode 0050  
                                                __ptext10 1437  
                                                __ptext11 12FC  
                                                __ptext20 1133  
                                                __ptext12 1197  
                                                __ptext21 1F7E  
                                                __ptext13 1291  
                                                __ptext30 1038  
                                                __ptext22 1F06  
                                                __ptext14 07FD  
                                                __ptext31 1F46  
                                                __ptext23 159E  
                                                __ptext15 1028  
                                                __ptext40 16B5  
                                                __ptext32 033D  
                                                __ptext24 1F6E  
                                                __ptext16 1000  
                                                __ptext41 1270  
                                                __ptext33 0519  
                                                __ptext25 1F66  
                                                __ptext17 0800  
                                                __ptext50 12B2  
                                                __ptext42 124F  
                                                __ptext34 0E42  
                                                __ptext26 1F5E  
                                                __ptext18 1F76  
                                                __ptext51 1377  
                                                __ptext43 1407  
                                                __ptext35 0C85  
                                                __ptext27 1F56  
                                                __ptext19 1F87  
                                                __ptext60 134A  
                                                __ptext52 1624  
                                                __ptext44 12D7  
                                                __ptext36 06D7  
                                                __ptext28 1F4E  
                                                __ptext61 1498  
                                                __ptext53 1FB1  
                                                __ptext45 13D7  
                                                __ptext37 14C9  
                                                __ptext29 1F14  
                                                __ptext70 1F31  
                                                __ptext62 1F0F  
                                                __ptext54 15E0  
                                                __ptext46 1321  
                                                __ptext38 100B  
                                                __ptext71 166B  
                                                __ptext63 1EFA  
                                                __ptext55 1F9A  
                                                __ptext47 13A7  
                                                __ptext39 1FF2  
                                                __ptext80 1EDE  
                                                __ptext72 0826  
                                                __ptext64 1EF6  
                                                __ptext56 1F02  
                                                __ptext48 1FE4  
                                                __ptext81 1ED3  
                                                __ptext73 1F37  
                                                __ptext65 1EF2  
                                                __ptext57 11ED  
                                                __ptext49 1FD6  
                                                __ptext90 120D  
                                                __ptext82 1EDA  
                                                __ptext74 1F3E  
                                                __ptext66 1EEE  
                                                __ptext58 1F90  
                                                __ptext91 10D3  
                                                __ptext83 1ED0  
                                                __ptext75 1F0A  
                                                __ptext67 1EEA  
                                                __ptext59 1EFE  
                                                __ptext92 10BB  
                                                __ptext84 1EB9  
                                                __ptext76 1467  
                                                __ptext68 1EE6  
                                                __ptext93 10A3  
                                                __ptext85 1EB7  
                                                __ptext77 0002  
                                                __ptext69 1EE2  
                                                __ptext94 108B  
                                                __ptext86 122E  
                                                __ptext78 1F2B  
                                                __ptext95 1073  
                                                __ptext87 111B  
                                                __ptext79 1F25  
                                                __ptext96 1FA5  
                                                __ptext88 1103  
                                                __ptext97 1756  
                                                __ptext89 10EB  
                                                __ptext98 105E  
                                                __ptext99 1ECD  
                            ??_IOCBF1_SetInterruptHandler 0022  
                                   _setGestureEnterThresh 1FD6  
                                              _LCDCONbits 0791  
                     __end_of_I2C_SetDataCompleteCallback 1FB1  
                             _I2C_SetDataCompleteCallback 1FA5  
                          setGestureEnterThresh@threshold 003B  
                                 ?_I2C_DO_RX_NACK_RESTART 0070  
                                              _IOCBF1_ISR 1FC9  
                                ??_i2c_write1ByteRegister 0038  
                                __end_of_I2C_DO_SEND_STOP 1EF2  
                                           __size_of_main 0114  
                                       ?_setProximityGain 0070  
                                  __size_of_LCD_Digit1Num 01BD  
                                  __size_of_LCD_Digit2Num 01BE  
                                  __size_of_LCD_Digit3Num 01BE  
                                  __size_of_LCD_Digit4Num 01DC  
                                i2c_readDataBlock@address 003B  
                                   _ir_command_complement 007C  
                                 ?_EUSART_SetErrorHandler 0020  
                                         _I2C_SetCallback 1756  
                                      ??_setProximityGain 003D  
                           ??_I2C_SetDataCompleteCallback 002D  
                                       _IOC_RB1_N_Handler 1F19  
           EUSART_SetOverrunErrorHandler@interruptHandler 0020  
                                      ?_IOC_RB1_N_Handler 0070  
                                                int$flags 007E  
                                   ?_I2C_DO_SEND_ADR_READ 0070  
                      __end_of_INTERRUPT_InterruptManager 0033  
                              _INTERRUPT_InterruptManager 0004  
                   __end_of_EUSART_SetFramingErrorHandler 1F5E  
                  __size_of_EUSART_SetFramingErrorHandler 0008  
                           _EUSART_SetFramingErrorHandler 1F56  
                                         ?_DAC_Initialize 0070  
                                       ??_TMR1_WriteTimer 0072  
                                     setProximityGain@val 003F  
                             __size_of_setGestureWaitTime 0025  
                              __end_of_processGestureData 033D  
                                i2c_read1ByteRegister@reg 0036  
                                __end_of_I2C_MasterIsNack 1F31  
                     __size_of_IOCBF1_SetInterruptHandler 0008  
                              __size_of_i2c_readDataBlock 0038  
                                     ??_IOC_RB1_N_Handler 0070  
                                __end_of_I2C_MasterSetIrq 0004  
                                 __size_of_setGestureGain 0030  
                                              _INTCONbits 000B  
                                 __size_of_setGestureMode 0025  
                                    _CCP4_DefaultCallBack 1EB4  
                                   ?_EUSART_RxDataHandler 0070  
                          __end_of_I2C_DO_RX_NACK_RESTART 1EFE  
                                  setAmbientLightGain@val 0040  
                                 __size_of_WDT_Initialize 0003  
                                                intlevel1 0000  
                        ?_wr2RegCompleteHandler@abs$F3113 002D  
                       ??_wr2RegCompleteHandler@abs$F3115 002F  
                        ?_rd2RegCompleteHandler@abs$F3107 002D  
                       ??_rd2RegCompleteHandler@abs$F3109 002F  
                                             ?_I2C_Poller 0070  
                                            reverseBits@b 0023  
                        __size_of_I2C_MasterEnableRestart 0003  
                                  rd2RegCompleteHandler@p 002D  
                                         _CCP4_CaptureISR 1049  
                                 ?_PIN_MANAGER_Initialize 0070  
                          __end_of_EUSART_SetErrorHandler 1F56  
                               __end_of_IOC_RB1_N_Handler 1F1F  
                                     _I2C_DO_SEND_RESTART 1EEA  
                                    __end_of_APDS9960Init 07FD  
                           __size_of_I2C_MasterDisableIrq 0003  
                    __end_of_EUSART_SetRxInterruptHandler 1F6E  
                   __size_of_EUSART_SetRxInterruptHandler 0008  
                            _EUSART_SetRxInterruptHandler 1F66  
                                  _resetGestureParameters 1197  
                         __size_of_I2C_MasterWaitForEvent 0004  
                                      _EUSART_Receive_ISR 14FA  
                                  wr2RegCompleteHandler@p 002D  
           EUSART_SetFramingErrorHandler@interruptHandler 0020  
                                 __end_of_I2C_MasterClose 1EC4  
                                __size_of_I2C_DO_TX_EMPTY 0031  
                                    _setGestureExitThresh 1FE4  
                                             _reverseBits 1530  
                                 __end_of_I2C_MasterStart 1ECA  
                                 __end_of_I2C_MasterWrite 1F06  
                                           __pstringtext1 1800  
                                          _FVR_Initialize 1F06  
                                    ?_I2C_DO_SEND_RESTART 0070  
                                              _OPTION_REG 0095  
                                     ?_EUSART_Receive_ISR 0070  
                                           _LCD_Digit1Num 0C85  
                                           _LCD_Digit2Num 0E42  
                                           _LCD_Digit3Num 0519  
                                           _LCD_Digit4Num 033D  
                                     _setGestureIntEnable 1321  
                                   ?_CCP4_DefaultCallBack 0072  
                                         _TMR0_Initialize 1000  
                            __size_of_I2C_MasterGetRxData 0003  
                                        setLEDBoost@boost 0040  
                                  ?_setGestureEnterThresh 0070  
                                             _SSPCON1bits 0215  
                                             _SSPCON2bits 0216  
                             __size_of_I2C_MasterClearIrq 0003  
                                             ?_IOCBF1_ISR 0070  
                            __size_of_EUSART_Transmit_ISR 001D  
                                 __end_of_I2C_SetCallback 17A8  
                          __end_of_PIN_MANAGER_Initialize 0826  
                          __size_of_rd1RegCompleteHandler 0018  
                         __size_of_i2c_write1ByteRegister 0030  
                           __end_of_rd1RegCompleteHandler 10BB  
                                  __size_of_I2C_DO_RX_ACK 0004  
                                        setLEDDrive@drive 0040  
                                     processGestureData@i 0046  
                                         _PIN_MANAGER_IOC 1F1F  
                          __size_of_wr1RegCompleteHandler 0018  
                                    ??_EUSART_Receive_ISR 0071  
                                   __size_of_I2C_DO_RESET 0005  
                           __end_of_wr1RegCompleteHandler 10A3  
                             __end_of_enableGestureSensor 1800  
                                    ?_setGestureIntEnable 0070  
                        __end_of_CCP4_CallBack@main$F2147 0936  
                            __size_of_I2C_DO_ADDRESS_NACK 0031  
                                    __size_of_I2C_DO_IDLE 0005  
                                    __size_of_I2C_DO_RCEN 0006  
                                         _TMR1_Initialize 1028  
                        __end_of_setLightIntHighThreshold 1270  
                                      __size_of_I2C_DO_RX 004A  
                                      __size_of_I2C_DO_TX 005B  
