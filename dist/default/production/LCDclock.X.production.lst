

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Thu Oct 08 18:44:39 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og9 
     1                           	processor	16F1938
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,delta=2
    68                           	psect	text55,local,class=CODE,merge=1,delta=2
    69                           	psect	text56,local,class=CODE,merge=1,delta=2
    70                           	psect	text57,local,class=CODE,merge=1,delta=2
    71                           	psect	text58,local,class=CODE,merge=1,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,delta=2
    75                           	psect	text62,local,class=CODE,merge=1,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text64,local,class=CODE,merge=1,delta=2
    78                           	psect	text65,local,class=CODE,merge=1,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,delta=2
    80                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text69,local,class=CODE,merge=1,delta=2
    83                           	psect	text70,local,class=CODE,merge=1,delta=2
    84                           	psect	text71,local,class=CODE,merge=1,delta=2
    85                           	psect	text72,local,class=CODE,merge=1,delta=2
    86                           	psect	text73,local,class=CODE,merge=1,delta=2
    87                           	psect	text74,local,class=CODE,merge=1,delta=2
    88                           	psect	text75,local,class=CODE,merge=1,delta=2
    89                           	psect	text76,local,class=CODE,merge=1,delta=2
    90                           	psect	text77,local,class=CODE,merge=1,delta=2
    91                           	psect	text78,local,class=CODE,merge=1,delta=2
    92                           	psect	text79,local,class=CODE,merge=1,delta=2
    93                           	psect	text80,local,class=CODE,merge=1,delta=2
    94                           	psect	text81,local,class=CODE,merge=1,delta=2
    95                           	psect	text82,local,class=CODE,merge=1,delta=2
    96                           	psect	text83,local,class=CODE,merge=1,delta=2
    97                           	psect	text84,local,class=CODE,merge=1,delta=2
    98                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   100                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   102                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text92,local,class=CODE,merge=1,delta=2
   106                           	psect	text93,local,class=CODE,merge=1,delta=2
   107                           	psect	text94,local,class=CODE,merge=1,delta=2
   108                           	psect	text95,local,class=CODE,merge=1,delta=2
   109                           	psect	text96,local,class=CODE,merge=1,delta=2
   110                           	psect	text97,local,class=CODE,merge=1,delta=2
   111                           	psect	text98,local,class=CODE,merge=1,delta=2
   112                           	psect	text99,local,class=CODE,merge=1,delta=2
   113                           	psect	text100,local,class=CODE,merge=1,delta=2
   114                           	psect	text101,local,class=CODE,merge=1,delta=2
   115                           	psect	text102,local,class=CODE,merge=1,delta=2
   116                           	psect	text103,local,class=CODE,merge=1,delta=2
   117                           	psect	text104,local,class=CODE,merge=1,delta=2
   118                           	psect	text105,local,class=CODE,merge=1,delta=2
   119                           	psect	text106,local,class=CODE,merge=1,delta=2
   120                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text110,local,class=CODE,merge=1,delta=2
   124                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	intentry,global,class=CODE,delta=2
   128                           	psect	text115,local,class=CODE,merge=1,delta=2
   129                           	psect	text116,local,class=CODE,merge=1,delta=2
   130                           	psect	text117,local,class=CODE,merge=1,delta=2
   131                           	psect	text118,local,class=CODE,merge=1,delta=2
   132                           	psect	text119,local,class=CODE,merge=1,delta=2
   133                           	psect	text120,local,class=CODE,merge=1,delta=2
   134                           	psect	text121,local,class=CODE,merge=1,delta=2
   135                           	psect	text122,local,class=CODE,merge=1,delta=2
   136                           	psect	text123,local,class=CODE,merge=1,delta=2
   137                           	psect	text124,local,class=CODE,merge=1,delta=2
   138                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   139                           	dabs	1,0x620,48
   140                           	dabs	1,0x5A0,80
   141                           	dabs	1,0x520,80
   142                           	dabs	1,0x4BC,52
   143                           	dabs	1,0x22EC,0,_gesture_data_
   144                           	dabs	1,0x2370,0,_fifo_data
   145                           	dabs	1,0x7E,2
   146  0000                     
   147                           ; Version 2.20
   148                           ; Generated 12/02/2020 GMT
   149                           ; 
   150                           ; Copyright © 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   151                           ; All rights reserved.
   152                           ; 
   153                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   154                           ; 
   155                           ; Redistribution and use in source and binary forms, with or without modification, are
   156                           ; permitted provided that the following conditions are met:
   157                           ; 
   158                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   159                           ;        conditions and the following disclaimer.
   160                           ; 
   161                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   162                           ;        of conditions and the following disclaimer in the documentation and/or other
   163                           ;        materials provided with the distribution.
   164                           ; 
   165                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   166                           ;        software without specific prior written permission.
   167                           ; 
   168                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   169                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   170                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   171                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   172                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   173                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   174                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   175                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   176                           ; 
   177                           ; 
   178                           ; Code-generator required, PIC16F1938 Definitions
   179                           ; 
   180                           ; SFR Addresses
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000D                     	;# 
   195  000E                     	;# 
   196  0010                     	;# 
   197  0011                     	;# 
   198  0012                     	;# 
   199  0013                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0016                     	;# 
   203  0017                     	;# 
   204  0018                     	;# 
   205  0019                     	;# 
   206  001A                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001E                     	;# 
   210  001F                     	;# 
   211  008C                     	;# 
   212  008D                     	;# 
   213  008E                     	;# 
   214  0090                     	;# 
   215  0091                     	;# 
   216  0092                     	;# 
   217  0093                     	;# 
   218  0095                     	;# 
   219  0096                     	;# 
   220  0097                     	;# 
   221  0098                     	;# 
   222  0099                     	;# 
   223  009A                     	;# 
   224  009B                     	;# 
   225  009B                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  010C                     	;# 
   230  010D                     	;# 
   231  010E                     	;# 
   232  0110                     	;# 
   233  0111                     	;# 
   234  0112                     	;# 
   235  0113                     	;# 
   236  0114                     	;# 
   237  0115                     	;# 
   238  0116                     	;# 
   239  0117                     	;# 
   240  0118                     	;# 
   241  0119                     	;# 
   242  011A                     	;# 
   243  011B                     	;# 
   244  011D                     	;# 
   245  018C                     	;# 
   246  018D                     	;# 
   247  0191                     	;# 
   248  0191                     	;# 
   249  0192                     	;# 
   250  0193                     	;# 
   251  0193                     	;# 
   252  0193                     	;# 
   253  0194                     	;# 
   254  0195                     	;# 
   255  0196                     	;# 
   256  0199                     	;# 
   257  019A                     	;# 
   258  019B                     	;# 
   259  019B                     	;# 
   260  019B                     	;# 
   261  019B                     	;# 
   262  019C                     	;# 
   263  019C                     	;# 
   264  019D                     	;# 
   265  019E                     	;# 
   266  019F                     	;# 
   267  020D                     	;# 
   268  0210                     	;# 
   269  0211                     	;# 
   270  0212                     	;# 
   271  0213                     	;# 
   272  0214                     	;# 
   273  0215                     	;# 
   274  0215                     	;# 
   275  0216                     	;# 
   276  0217                     	;# 
   277  0291                     	;# 
   278  0291                     	;# 
   279  0292                     	;# 
   280  0293                     	;# 
   281  0294                     	;# 
   282  0295                     	;# 
   283  0295                     	;# 
   284  0296                     	;# 
   285  0298                     	;# 
   286  0298                     	;# 
   287  0299                     	;# 
   288  029A                     	;# 
   289  029B                     	;# 
   290  029C                     	;# 
   291  029C                     	;# 
   292  029D                     	;# 
   293  029E                     	;# 
   294  029F                     	;# 
   295  0311                     	;# 
   296  0311                     	;# 
   297  0312                     	;# 
   298  0313                     	;# 
   299  0314                     	;# 
   300  0315                     	;# 
   301  0315                     	;# 
   302  0316                     	;# 
   303  0318                     	;# 
   304  0318                     	;# 
   305  0319                     	;# 
   306  031A                     	;# 
   307  031C                     	;# 
   308  031C                     	;# 
   309  031D                     	;# 
   310  031E                     	;# 
   311  0394                     	;# 
   312  0395                     	;# 
   313  0396                     	;# 
   314  0415                     	;# 
   315  0416                     	;# 
   316  0417                     	;# 
   317  041C                     	;# 
   318  041D                     	;# 
   319  041E                     	;# 
   320  0791                     	;# 
   321  0792                     	;# 
   322  0793                     	;# 
   323  0794                     	;# 
   324  0795                     	;# 
   325  0798                     	;# 
   326  0799                     	;# 
   327  07A0                     	;# 
   328  07A1                     	;# 
   329  07A3                     	;# 
   330  07A4                     	;# 
   331  07A6                     	;# 
   332  07A7                     	;# 
   333  07A9                     	;# 
   334  07AA                     	;# 
   335  0FE4                     	;# 
   336  0FE5                     	;# 
   337  0FE6                     	;# 
   338  0FE7                     	;# 
   339  0FE8                     	;# 
   340  0FE9                     	;# 
   341  0FEA                     	;# 
   342  0FEB                     	;# 
   343  0FED                     	;# 
   344  0FEE                     	;# 
   345  0FEF                     	;# 
   346  0000                     	;# 
   347  0001                     	;# 
   348  0002                     	;# 
   349  0003                     	;# 
   350  0004                     	;# 
   351  0005                     	;# 
   352  0006                     	;# 
   353  0007                     	;# 
   354  0008                     	;# 
   355  0009                     	;# 
   356  000A                     	;# 
   357  000B                     	;# 
   358  000C                     	;# 
   359  000D                     	;# 
   360  000E                     	;# 
   361  0010                     	;# 
   362  0011                     	;# 
   363  0012                     	;# 
   364  0013                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0016                     	;# 
   368  0017                     	;# 
   369  0018                     	;# 
   370  0019                     	;# 
   371  001A                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  001E                     	;# 
   375  001F                     	;# 
   376  008C                     	;# 
   377  008D                     	;# 
   378  008E                     	;# 
   379  0090                     	;# 
   380  0091                     	;# 
   381  0092                     	;# 
   382  0093                     	;# 
   383  0095                     	;# 
   384  0096                     	;# 
   385  0097                     	;# 
   386  0098                     	;# 
   387  0099                     	;# 
   388  009A                     	;# 
   389  009B                     	;# 
   390  009B                     	;# 
   391  009C                     	;# 
   392  009D                     	;# 
   393  009E                     	;# 
   394  010C                     	;# 
   395  010D                     	;# 
   396  010E                     	;# 
   397  0110                     	;# 
   398  0111                     	;# 
   399  0112                     	;# 
   400  0113                     	;# 
   401  0114                     	;# 
   402  0115                     	;# 
   403  0116                     	;# 
   404  0117                     	;# 
   405  0118                     	;# 
   406  0119                     	;# 
   407  011A                     	;# 
   408  011B                     	;# 
   409  011D                     	;# 
   410  018C                     	;# 
   411  018D                     	;# 
   412  0191                     	;# 
   413  0191                     	;# 
   414  0192                     	;# 
   415  0193                     	;# 
   416  0193                     	;# 
   417  0193                     	;# 
   418  0194                     	;# 
   419  0195                     	;# 
   420  0196                     	;# 
   421  0199                     	;# 
   422  019A                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019C                     	;# 
   428  019C                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019F                     	;# 
   432  020D                     	;# 
   433  0210                     	;# 
   434  0211                     	;# 
   435  0212                     	;# 
   436  0213                     	;# 
   437  0214                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0216                     	;# 
   441  0217                     	;# 
   442  0291                     	;# 
   443  0291                     	;# 
   444  0292                     	;# 
   445  0293                     	;# 
   446  0294                     	;# 
   447  0295                     	;# 
   448  0295                     	;# 
   449  0296                     	;# 
   450  0298                     	;# 
   451  0298                     	;# 
   452  0299                     	;# 
   453  029A                     	;# 
   454  029B                     	;# 
   455  029C                     	;# 
   456  029C                     	;# 
   457  029D                     	;# 
   458  029E                     	;# 
   459  029F                     	;# 
   460  0311                     	;# 
   461  0311                     	;# 
   462  0312                     	;# 
   463  0313                     	;# 
   464  0314                     	;# 
   465  0315                     	;# 
   466  0315                     	;# 
   467  0316                     	;# 
   468  0318                     	;# 
   469  0318                     	;# 
   470  0319                     	;# 
   471  031A                     	;# 
   472  031C                     	;# 
   473  031C                     	;# 
   474  031D                     	;# 
   475  031E                     	;# 
   476  0394                     	;# 
   477  0395                     	;# 
   478  0396                     	;# 
   479  0415                     	;# 
   480  0416                     	;# 
   481  0417                     	;# 
   482  041C                     	;# 
   483  041D                     	;# 
   484  041E                     	;# 
   485  0791                     	;# 
   486  0792                     	;# 
   487  0793                     	;# 
   488  0794                     	;# 
   489  0795                     	;# 
   490  0798                     	;# 
   491  0799                     	;# 
   492  07A0                     	;# 
   493  07A1                     	;# 
   494  07A3                     	;# 
   495  07A4                     	;# 
   496  07A6                     	;# 
   497  07A7                     	;# 
   498  07A9                     	;# 
   499  07AA                     	;# 
   500  0FE4                     	;# 
   501  0FE5                     	;# 
   502  0FE6                     	;# 
   503  0FE7                     	;# 
   504  0FE8                     	;# 
   505  0FE9                     	;# 
   506  0FEA                     	;# 
   507  0FEB                     	;# 
   508  0FED                     	;# 
   509  0FEE                     	;# 
   510  0FEF                     	;# 
   511  0000                     	;# 
   512  0001                     	;# 
   513  0002                     	;# 
   514  0003                     	;# 
   515  0004                     	;# 
   516  0005                     	;# 
   517  0006                     	;# 
   518  0007                     	;# 
   519  0008                     	;# 
   520  0009                     	;# 
   521  000A                     	;# 
   522  000B                     	;# 
   523  000C                     	;# 
   524  000D                     	;# 
   525  000E                     	;# 
   526  0010                     	;# 
   527  0011                     	;# 
   528  0012                     	;# 
   529  0013                     	;# 
   530  0015                     	;# 
   531  0016                     	;# 
   532  0016                     	;# 
   533  0017                     	;# 
   534  0018                     	;# 
   535  0019                     	;# 
   536  001A                     	;# 
   537  001B                     	;# 
   538  001C                     	;# 
   539  001E                     	;# 
   540  001F                     	;# 
   541  008C                     	;# 
   542  008D                     	;# 
   543  008E                     	;# 
   544  0090                     	;# 
   545  0091                     	;# 
   546  0092                     	;# 
   547  0093                     	;# 
   548  0095                     	;# 
   549  0096                     	;# 
   550  0097                     	;# 
   551  0098                     	;# 
   552  0099                     	;# 
   553  009A                     	;# 
   554  009B                     	;# 
   555  009B                     	;# 
   556  009C                     	;# 
   557  009D                     	;# 
   558  009E                     	;# 
   559  010C                     	;# 
   560  010D                     	;# 
   561  010E                     	;# 
   562  0110                     	;# 
   563  0111                     	;# 
   564  0112                     	;# 
   565  0113                     	;# 
   566  0114                     	;# 
   567  0115                     	;# 
   568  0116                     	;# 
   569  0117                     	;# 
   570  0118                     	;# 
   571  0119                     	;# 
   572  011A                     	;# 
   573  011B                     	;# 
   574  011D                     	;# 
   575  018C                     	;# 
   576  018D                     	;# 
   577  0191                     	;# 
   578  0191                     	;# 
   579  0192                     	;# 
   580  0193                     	;# 
   581  0193                     	;# 
   582  0193                     	;# 
   583  0194                     	;# 
   584  0195                     	;# 
   585  0196                     	;# 
   586  0199                     	;# 
   587  019A                     	;# 
   588  019B                     	;# 
   589  019B                     	;# 
   590  019B                     	;# 
   591  019B                     	;# 
   592  019C                     	;# 
   593  019C                     	;# 
   594  019D                     	;# 
   595  019E                     	;# 
   596  019F                     	;# 
   597  020D                     	;# 
   598  0210                     	;# 
   599  0211                     	;# 
   600  0212                     	;# 
   601  0213                     	;# 
   602  0214                     	;# 
   603  0215                     	;# 
   604  0215                     	;# 
   605  0216                     	;# 
   606  0217                     	;# 
   607  0291                     	;# 
   608  0291                     	;# 
   609  0292                     	;# 
   610  0293                     	;# 
   611  0294                     	;# 
   612  0295                     	;# 
   613  0295                     	;# 
   614  0296                     	;# 
   615  0298                     	;# 
   616  0298                     	;# 
   617  0299                     	;# 
   618  029A                     	;# 
   619  029B                     	;# 
   620  029C                     	;# 
   621  029C                     	;# 
   622  029D                     	;# 
   623  029E                     	;# 
   624  029F                     	;# 
   625  0311                     	;# 
   626  0311                     	;# 
   627  0312                     	;# 
   628  0313                     	;# 
   629  0314                     	;# 
   630  0315                     	;# 
   631  0315                     	;# 
   632  0316                     	;# 
   633  0318                     	;# 
   634  0318                     	;# 
   635  0319                     	;# 
   636  031A                     	;# 
   637  031C                     	;# 
   638  031C                     	;# 
   639  031D                     	;# 
   640  031E                     	;# 
   641  0394                     	;# 
   642  0395                     	;# 
   643  0396                     	;# 
   644  0415                     	;# 
   645  0416                     	;# 
   646  0417                     	;# 
   647  041C                     	;# 
   648  041D                     	;# 
   649  041E                     	;# 
   650  0791                     	;# 
   651  0792                     	;# 
   652  0793                     	;# 
   653  0794                     	;# 
   654  0795                     	;# 
   655  0798                     	;# 
   656  0799                     	;# 
   657  07A0                     	;# 
   658  07A1                     	;# 
   659  07A3                     	;# 
   660  07A4                     	;# 
   661  07A6                     	;# 
   662  07A7                     	;# 
   663  07A9                     	;# 
   664  07AA                     	;# 
   665  0FE4                     	;# 
   666  0FE5                     	;# 
   667  0FE6                     	;# 
   668  0FE7                     	;# 
   669  0FE8                     	;# 
   670  0FE9                     	;# 
   671  0FEA                     	;# 
   672  0FEB                     	;# 
   673  0FED                     	;# 
   674  0FEE                     	;# 
   675  0FEF                     	;# 
   676  0000                     	;# 
   677  0001                     	;# 
   678  0002                     	;# 
   679  0003                     	;# 
   680  0004                     	;# 
   681  0005                     	;# 
   682  0006                     	;# 
   683  0007                     	;# 
   684  0008                     	;# 
   685  0009                     	;# 
   686  000A                     	;# 
   687  000B                     	;# 
   688  000C                     	;# 
   689  000D                     	;# 
   690  000E                     	;# 
   691  0010                     	;# 
   692  0011                     	;# 
   693  0012                     	;# 
   694  0013                     	;# 
   695  0015                     	;# 
   696  0016                     	;# 
   697  0016                     	;# 
   698  0017                     	;# 
   699  0018                     	;# 
   700  0019                     	;# 
   701  001A                     	;# 
   702  001B                     	;# 
   703  001C                     	;# 
   704  001E                     	;# 
   705  001F                     	;# 
   706  008C                     	;# 
   707  008D                     	;# 
   708  008E                     	;# 
   709  0090                     	;# 
   710  0091                     	;# 
   711  0092                     	;# 
   712  0093                     	;# 
   713  0095                     	;# 
   714  0096                     	;# 
   715  0097                     	;# 
   716  0098                     	;# 
   717  0099                     	;# 
   718  009A                     	;# 
   719  009B                     	;# 
   720  009B                     	;# 
   721  009C                     	;# 
   722  009D                     	;# 
   723  009E                     	;# 
   724  010C                     	;# 
   725  010D                     	;# 
   726  010E                     	;# 
   727  0110                     	;# 
   728  0111                     	;# 
   729  0112                     	;# 
   730  0113                     	;# 
   731  0114                     	;# 
   732  0115                     	;# 
   733  0116                     	;# 
   734  0117                     	;# 
   735  0118                     	;# 
   736  0119                     	;# 
   737  011A                     	;# 
   738  011B                     	;# 
   739  011D                     	;# 
   740  018C                     	;# 
   741  018D                     	;# 
   742  0191                     	;# 
   743  0191                     	;# 
   744  0192                     	;# 
   745  0193                     	;# 
   746  0193                     	;# 
   747  0193                     	;# 
   748  0194                     	;# 
   749  0195                     	;# 
   750  0196                     	;# 
   751  0199                     	;# 
   752  019A                     	;# 
   753  019B                     	;# 
   754  019B                     	;# 
   755  019B                     	;# 
   756  019B                     	;# 
   757  019C                     	;# 
   758  019C                     	;# 
   759  019D                     	;# 
   760  019E                     	;# 
   761  019F                     	;# 
   762  020D                     	;# 
   763  0210                     	;# 
   764  0211                     	;# 
   765  0212                     	;# 
   766  0213                     	;# 
   767  0214                     	;# 
   768  0215                     	;# 
   769  0215                     	;# 
   770  0216                     	;# 
   771  0217                     	;# 
   772  0291                     	;# 
   773  0291                     	;# 
   774  0292                     	;# 
   775  0293                     	;# 
   776  0294                     	;# 
   777  0295                     	;# 
   778  0295                     	;# 
   779  0296                     	;# 
   780  0298                     	;# 
   781  0298                     	;# 
   782  0299                     	;# 
   783  029A                     	;# 
   784  029B                     	;# 
   785  029C                     	;# 
   786  029C                     	;# 
   787  029D                     	;# 
   788  029E                     	;# 
   789  029F                     	;# 
   790  0311                     	;# 
   791  0311                     	;# 
   792  0312                     	;# 
   793  0313                     	;# 
   794  0314                     	;# 
   795  0315                     	;# 
   796  0315                     	;# 
   797  0316                     	;# 
   798  0318                     	;# 
   799  0318                     	;# 
   800  0319                     	;# 
   801  031A                     	;# 
   802  031C                     	;# 
   803  031C                     	;# 
   804  031D                     	;# 
   805  031E                     	;# 
   806  0394                     	;# 
   807  0395                     	;# 
   808  0396                     	;# 
   809  0415                     	;# 
   810  0416                     	;# 
   811  0417                     	;# 
   812  041C                     	;# 
   813  041D                     	;# 
   814  041E                     	;# 
   815  0791                     	;# 
   816  0792                     	;# 
   817  0793                     	;# 
   818  0794                     	;# 
   819  0795                     	;# 
   820  0798                     	;# 
   821  0799                     	;# 
   822  07A0                     	;# 
   823  07A1                     	;# 
   824  07A3                     	;# 
   825  07A4                     	;# 
   826  07A6                     	;# 
   827  07A7                     	;# 
   828  07A9                     	;# 
   829  07AA                     	;# 
   830  0FE4                     	;# 
   831  0FE5                     	;# 
   832  0FE6                     	;# 
   833  0FE7                     	;# 
   834  0FE8                     	;# 
   835  0FE9                     	;# 
   836  0FEA                     	;# 
   837  0FEB                     	;# 
   838  0FED                     	;# 
   839  0FEE                     	;# 
   840  0FEF                     	;# 
   841  0000                     	;# 
   842  0001                     	;# 
   843  0002                     	;# 
   844  0003                     	;# 
   845  0004                     	;# 
   846  0005                     	;# 
   847  0006                     	;# 
   848  0007                     	;# 
   849  0008                     	;# 
   850  0009                     	;# 
   851  000A                     	;# 
   852  000B                     	;# 
   853  000C                     	;# 
   854  000D                     	;# 
   855  000E                     	;# 
   856  0010                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0013                     	;# 
   860  0015                     	;# 
   861  0016                     	;# 
   862  0016                     	;# 
   863  0017                     	;# 
   864  0018                     	;# 
   865  0019                     	;# 
   866  001A                     	;# 
   867  001B                     	;# 
   868  001C                     	;# 
   869  001E                     	;# 
   870  001F                     	;# 
   871  008C                     	;# 
   872  008D                     	;# 
   873  008E                     	;# 
   874  0090                     	;# 
   875  0091                     	;# 
   876  0092                     	;# 
   877  0093                     	;# 
   878  0095                     	;# 
   879  0096                     	;# 
   880  0097                     	;# 
   881  0098                     	;# 
   882  0099                     	;# 
   883  009A                     	;# 
   884  009B                     	;# 
   885  009B                     	;# 
   886  009C                     	;# 
   887  009D                     	;# 
   888  009E                     	;# 
   889  010C                     	;# 
   890  010D                     	;# 
   891  010E                     	;# 
   892  0110                     	;# 
   893  0111                     	;# 
   894  0112                     	;# 
   895  0113                     	;# 
   896  0114                     	;# 
   897  0115                     	;# 
   898  0116                     	;# 
   899  0117                     	;# 
   900  0118                     	;# 
   901  0119                     	;# 
   902  011A                     	;# 
   903  011B                     	;# 
   904  011D                     	;# 
   905  018C                     	;# 
   906  018D                     	;# 
   907  0191                     	;# 
   908  0191                     	;# 
   909  0192                     	;# 
   910  0193                     	;# 
   911  0193                     	;# 
   912  0193                     	;# 
   913  0194                     	;# 
   914  0195                     	;# 
   915  0196                     	;# 
   916  0199                     	;# 
   917  019A                     	;# 
   918  019B                     	;# 
   919  019B                     	;# 
   920  019B                     	;# 
   921  019B                     	;# 
   922  019C                     	;# 
   923  019C                     	;# 
   924  019D                     	;# 
   925  019E                     	;# 
   926  019F                     	;# 
   927  020D                     	;# 
   928  0210                     	;# 
   929  0211                     	;# 
   930  0212                     	;# 
   931  0213                     	;# 
   932  0214                     	;# 
   933  0215                     	;# 
   934  0215                     	;# 
   935  0216                     	;# 
   936  0217                     	;# 
   937  0291                     	;# 
   938  0291                     	;# 
   939  0292                     	;# 
   940  0293                     	;# 
   941  0294                     	;# 
   942  0295                     	;# 
   943  0295                     	;# 
   944  0296                     	;# 
   945  0298                     	;# 
   946  0298                     	;# 
   947  0299                     	;# 
   948  029A                     	;# 
   949  029B                     	;# 
   950  029C                     	;# 
   951  029C                     	;# 
   952  029D                     	;# 
   953  029E                     	;# 
   954  029F                     	;# 
   955  0311                     	;# 
   956  0311                     	;# 
   957  0312                     	;# 
   958  0313                     	;# 
   959  0314                     	;# 
   960  0315                     	;# 
   961  0315                     	;# 
   962  0316                     	;# 
   963  0318                     	;# 
   964  0318                     	;# 
   965  0319                     	;# 
   966  031A                     	;# 
   967  031C                     	;# 
   968  031C                     	;# 
   969  031D                     	;# 
   970  031E                     	;# 
   971  0394                     	;# 
   972  0395                     	;# 
   973  0396                     	;# 
   974  0415                     	;# 
   975  0416                     	;# 
   976  0417                     	;# 
   977  041C                     	;# 
   978  041D                     	;# 
   979  041E                     	;# 
   980  0791                     	;# 
   981  0792                     	;# 
   982  0793                     	;# 
   983  0794                     	;# 
   984  0795                     	;# 
   985  0798                     	;# 
   986  0799                     	;# 
   987  07A0                     	;# 
   988  07A1                     	;# 
   989  07A3                     	;# 
   990  07A4                     	;# 
   991  07A6                     	;# 
   992  07A7                     	;# 
   993  07A9                     	;# 
   994  07AA                     	;# 
   995  0FE4                     	;# 
   996  0FE5                     	;# 
   997  0FE6                     	;# 
   998  0FE7                     	;# 
   999  0FE8                     	;# 
  1000  0FE9                     	;# 
  1001  0FEA                     	;# 
  1002  0FEB                     	;# 
  1003  0FED                     	;# 
  1004  0FEE                     	;# 
  1005  0FEF                     	;# 
  1006  0000                     	;# 
  1007  0001                     	;# 
  1008  0002                     	;# 
  1009  0003                     	;# 
  1010  0004                     	;# 
  1011  0005                     	;# 
  1012  0006                     	;# 
  1013  0007                     	;# 
  1014  0008                     	;# 
  1015  0009                     	;# 
  1016  000A                     	;# 
  1017  000B                     	;# 
  1018  000C                     	;# 
  1019  000D                     	;# 
  1020  000E                     	;# 
  1021  0010                     	;# 
  1022  0011                     	;# 
  1023  0012                     	;# 
  1024  0013                     	;# 
  1025  0015                     	;# 
  1026  0016                     	;# 
  1027  0016                     	;# 
  1028  0017                     	;# 
  1029  0018                     	;# 
  1030  0019                     	;# 
  1031  001A                     	;# 
  1032  001B                     	;# 
  1033  001C                     	;# 
  1034  001E                     	;# 
  1035  001F                     	;# 
  1036  008C                     	;# 
  1037  008D                     	;# 
  1038  008E                     	;# 
  1039  0090                     	;# 
  1040  0091                     	;# 
  1041  0092                     	;# 
  1042  0093                     	;# 
  1043  0095                     	;# 
  1044  0096                     	;# 
  1045  0097                     	;# 
  1046  0098                     	;# 
  1047  0099                     	;# 
  1048  009A                     	;# 
  1049  009B                     	;# 
  1050  009B                     	;# 
  1051  009C                     	;# 
  1052  009D                     	;# 
  1053  009E                     	;# 
  1054  010C                     	;# 
  1055  010D                     	;# 
  1056  010E                     	;# 
  1057  0110                     	;# 
  1058  0111                     	;# 
  1059  0112                     	;# 
  1060  0113                     	;# 
  1061  0114                     	;# 
  1062  0115                     	;# 
  1063  0116                     	;# 
  1064  0117                     	;# 
  1065  0118                     	;# 
  1066  0119                     	;# 
  1067  011A                     	;# 
  1068  011B                     	;# 
  1069  011D                     	;# 
  1070  018C                     	;# 
  1071  018D                     	;# 
  1072  0191                     	;# 
  1073  0191                     	;# 
  1074  0192                     	;# 
  1075  0193                     	;# 
  1076  0193                     	;# 
  1077  0193                     	;# 
  1078  0194                     	;# 
  1079  0195                     	;# 
  1080  0196                     	;# 
  1081  0199                     	;# 
  1082  019A                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019C                     	;# 
  1088  019C                     	;# 
  1089  019D                     	;# 
  1090  019E                     	;# 
  1091  019F                     	;# 
  1092  020D                     	;# 
  1093  0210                     	;# 
  1094  0211                     	;# 
  1095  0212                     	;# 
  1096  0213                     	;# 
  1097  0214                     	;# 
  1098  0215                     	;# 
  1099  0215                     	;# 
  1100  0216                     	;# 
  1101  0217                     	;# 
  1102  0291                     	;# 
  1103  0291                     	;# 
  1104  0292                     	;# 
  1105  0293                     	;# 
  1106  0294                     	;# 
  1107  0295                     	;# 
  1108  0295                     	;# 
  1109  0296                     	;# 
  1110  0298                     	;# 
  1111  0298                     	;# 
  1112  0299                     	;# 
  1113  029A                     	;# 
  1114  029B                     	;# 
  1115  029C                     	;# 
  1116  029C                     	;# 
  1117  029D                     	;# 
  1118  029E                     	;# 
  1119  029F                     	;# 
  1120  0311                     	;# 
  1121  0311                     	;# 
  1122  0312                     	;# 
  1123  0313                     	;# 
  1124  0314                     	;# 
  1125  0315                     	;# 
  1126  0315                     	;# 
  1127  0316                     	;# 
  1128  0318                     	;# 
  1129  0318                     	;# 
  1130  0319                     	;# 
  1131  031A                     	;# 
  1132  031C                     	;# 
  1133  031C                     	;# 
  1134  031D                     	;# 
  1135  031E                     	;# 
  1136  0394                     	;# 
  1137  0395                     	;# 
  1138  0396                     	;# 
  1139  0415                     	;# 
  1140  0416                     	;# 
  1141  0417                     	;# 
  1142  041C                     	;# 
  1143  041D                     	;# 
  1144  041E                     	;# 
  1145  0791                     	;# 
  1146  0792                     	;# 
  1147  0793                     	;# 
  1148  0794                     	;# 
  1149  0795                     	;# 
  1150  0798                     	;# 
  1151  0799                     	;# 
  1152  07A0                     	;# 
  1153  07A1                     	;# 
  1154  07A3                     	;# 
  1155  07A4                     	;# 
  1156  07A6                     	;# 
  1157  07A7                     	;# 
  1158  07A9                     	;# 
  1159  07AA                     	;# 
  1160  0FE4                     	;# 
  1161  0FE5                     	;# 
  1162  0FE6                     	;# 
  1163  0FE7                     	;# 
  1164  0FE8                     	;# 
  1165  0FE9                     	;# 
  1166  0FEA                     	;# 
  1167  0FEB                     	;# 
  1168  0FED                     	;# 
  1169  0FEE                     	;# 
  1170  0FEF                     	;# 
  1171  0000                     	;# 
  1172  0001                     	;# 
  1173  0002                     	;# 
  1174  0003                     	;# 
  1175  0004                     	;# 
  1176  0005                     	;# 
  1177  0006                     	;# 
  1178  0007                     	;# 
  1179  0008                     	;# 
  1180  0009                     	;# 
  1181  000A                     	;# 
  1182  000B                     	;# 
  1183  000C                     	;# 
  1184  000D                     	;# 
  1185  000E                     	;# 
  1186  0010                     	;# 
  1187  0011                     	;# 
  1188  0012                     	;# 
  1189  0013                     	;# 
  1190  0015                     	;# 
  1191  0016                     	;# 
  1192  0016                     	;# 
  1193  0017                     	;# 
  1194  0018                     	;# 
  1195  0019                     	;# 
  1196  001A                     	;# 
  1197  001B                     	;# 
  1198  001C                     	;# 
  1199  001E                     	;# 
  1200  001F                     	;# 
  1201  008C                     	;# 
  1202  008D                     	;# 
  1203  008E                     	;# 
  1204  0090                     	;# 
  1205  0091                     	;# 
  1206  0092                     	;# 
  1207  0093                     	;# 
  1208  0095                     	;# 
  1209  0096                     	;# 
  1210  0097                     	;# 
  1211  0098                     	;# 
  1212  0099                     	;# 
  1213  009A                     	;# 
  1214  009B                     	;# 
  1215  009B                     	;# 
  1216  009C                     	;# 
  1217  009D                     	;# 
  1218  009E                     	;# 
  1219  010C                     	;# 
  1220  010D                     	;# 
  1221  010E                     	;# 
  1222  0110                     	;# 
  1223  0111                     	;# 
  1224  0112                     	;# 
  1225  0113                     	;# 
  1226  0114                     	;# 
  1227  0115                     	;# 
  1228  0116                     	;# 
  1229  0117                     	;# 
  1230  0118                     	;# 
  1231  0119                     	;# 
  1232  011A                     	;# 
  1233  011B                     	;# 
  1234  011D                     	;# 
  1235  018C                     	;# 
  1236  018D                     	;# 
  1237  0191                     	;# 
  1238  0191                     	;# 
  1239  0192                     	;# 
  1240  0193                     	;# 
  1241  0193                     	;# 
  1242  0193                     	;# 
  1243  0194                     	;# 
  1244  0195                     	;# 
  1245  0196                     	;# 
  1246  0199                     	;# 
  1247  019A                     	;# 
  1248  019B                     	;# 
  1249  019B                     	;# 
  1250  019B                     	;# 
  1251  019B                     	;# 
  1252  019C                     	;# 
  1253  019C                     	;# 
  1254  019D                     	;# 
  1255  019E                     	;# 
  1256  019F                     	;# 
  1257  020D                     	;# 
  1258  0210                     	;# 
  1259  0211                     	;# 
  1260  0212                     	;# 
  1261  0213                     	;# 
  1262  0214                     	;# 
  1263  0215                     	;# 
  1264  0215                     	;# 
  1265  0216                     	;# 
  1266  0217                     	;# 
  1267  0291                     	;# 
  1268  0291                     	;# 
  1269  0292                     	;# 
  1270  0293                     	;# 
  1271  0294                     	;# 
  1272  0295                     	;# 
  1273  0295                     	;# 
  1274  0296                     	;# 
  1275  0298                     	;# 
  1276  0298                     	;# 
  1277  0299                     	;# 
  1278  029A                     	;# 
  1279  029B                     	;# 
  1280  029C                     	;# 
  1281  029C                     	;# 
  1282  029D                     	;# 
  1283  029E                     	;# 
  1284  029F                     	;# 
  1285  0311                     	;# 
  1286  0311                     	;# 
  1287  0312                     	;# 
  1288  0313                     	;# 
  1289  0314                     	;# 
  1290  0315                     	;# 
  1291  0315                     	;# 
  1292  0316                     	;# 
  1293  0318                     	;# 
  1294  0318                     	;# 
  1295  0319                     	;# 
  1296  031A                     	;# 
  1297  031C                     	;# 
  1298  031C                     	;# 
  1299  031D                     	;# 
  1300  031E                     	;# 
  1301  0394                     	;# 
  1302  0395                     	;# 
  1303  0396                     	;# 
  1304  0415                     	;# 
  1305  0416                     	;# 
  1306  0417                     	;# 
  1307  041C                     	;# 
  1308  041D                     	;# 
  1309  041E                     	;# 
  1310  0791                     	;# 
  1311  0792                     	;# 
  1312  0793                     	;# 
  1313  0794                     	;# 
  1314  0795                     	;# 
  1315  0798                     	;# 
  1316  0799                     	;# 
  1317  07A0                     	;# 
  1318  07A1                     	;# 
  1319  07A3                     	;# 
  1320  07A4                     	;# 
  1321  07A6                     	;# 
  1322  07A7                     	;# 
  1323  07A9                     	;# 
  1324  07AA                     	;# 
  1325  0FE4                     	;# 
  1326  0FE5                     	;# 
  1327  0FE6                     	;# 
  1328  0FE7                     	;# 
  1329  0FE8                     	;# 
  1330  0FE9                     	;# 
  1331  0FEA                     	;# 
  1332  0FEB                     	;# 
  1333  0FED                     	;# 
  1334  0FEE                     	;# 
  1335  0FEF                     	;# 
  1336  0000                     	;# 
  1337  0001                     	;# 
  1338  0002                     	;# 
  1339  0003                     	;# 
  1340  0004                     	;# 
  1341  0005                     	;# 
  1342  0006                     	;# 
  1343  0007                     	;# 
  1344  0008                     	;# 
  1345  0009                     	;# 
  1346  000A                     	;# 
  1347  000B                     	;# 
  1348  000C                     	;# 
  1349  000D                     	;# 
  1350  000E                     	;# 
  1351  0010                     	;# 
  1352  0011                     	;# 
  1353  0012                     	;# 
  1354  0013                     	;# 
  1355  0015                     	;# 
  1356  0016                     	;# 
  1357  0016                     	;# 
  1358  0017                     	;# 
  1359  0018                     	;# 
  1360  0019                     	;# 
  1361  001A                     	;# 
  1362  001B                     	;# 
  1363  001C                     	;# 
  1364  001E                     	;# 
  1365  001F                     	;# 
  1366  008C                     	;# 
  1367  008D                     	;# 
  1368  008E                     	;# 
  1369  0090                     	;# 
  1370  0091                     	;# 
  1371  0092                     	;# 
  1372  0093                     	;# 
  1373  0095                     	;# 
  1374  0096                     	;# 
  1375  0097                     	;# 
  1376  0098                     	;# 
  1377  0099                     	;# 
  1378  009A                     	;# 
  1379  009B                     	;# 
  1380  009B                     	;# 
  1381  009C                     	;# 
  1382  009D                     	;# 
  1383  009E                     	;# 
  1384  010C                     	;# 
  1385  010D                     	;# 
  1386  010E                     	;# 
  1387  0110                     	;# 
  1388  0111                     	;# 
  1389  0112                     	;# 
  1390  0113                     	;# 
  1391  0114                     	;# 
  1392  0115                     	;# 
  1393  0116                     	;# 
  1394  0117                     	;# 
  1395  0118                     	;# 
  1396  0119                     	;# 
  1397  011A                     	;# 
  1398  011B                     	;# 
  1399  011D                     	;# 
  1400  018C                     	;# 
  1401  018D                     	;# 
  1402  0191                     	;# 
  1403  0191                     	;# 
  1404  0192                     	;# 
  1405  0193                     	;# 
  1406  0193                     	;# 
  1407  0193                     	;# 
  1408  0194                     	;# 
  1409  0195                     	;# 
  1410  0196                     	;# 
  1411  0199                     	;# 
  1412  019A                     	;# 
  1413  019B                     	;# 
  1414  019B                     	;# 
  1415  019B                     	;# 
  1416  019B                     	;# 
  1417  019C                     	;# 
  1418  019C                     	;# 
  1419  019D                     	;# 
  1420  019E                     	;# 
  1421  019F                     	;# 
  1422  020D                     	;# 
  1423  0210                     	;# 
  1424  0211                     	;# 
  1425  0212                     	;# 
  1426  0213                     	;# 
  1427  0214                     	;# 
  1428  0215                     	;# 
  1429  0215                     	;# 
  1430  0216                     	;# 
  1431  0217                     	;# 
  1432  0291                     	;# 
  1433  0291                     	;# 
  1434  0292                     	;# 
  1435  0293                     	;# 
  1436  0294                     	;# 
  1437  0295                     	;# 
  1438  0295                     	;# 
  1439  0296                     	;# 
  1440  0298                     	;# 
  1441  0298                     	;# 
  1442  0299                     	;# 
  1443  029A                     	;# 
  1444  029B                     	;# 
  1445  029C                     	;# 
  1446  029C                     	;# 
  1447  029D                     	;# 
  1448  029E                     	;# 
  1449  029F                     	;# 
  1450  0311                     	;# 
  1451  0311                     	;# 
  1452  0312                     	;# 
  1453  0313                     	;# 
  1454  0314                     	;# 
  1455  0315                     	;# 
  1456  0315                     	;# 
  1457  0316                     	;# 
  1458  0318                     	;# 
  1459  0318                     	;# 
  1460  0319                     	;# 
  1461  031A                     	;# 
  1462  031C                     	;# 
  1463  031C                     	;# 
  1464  031D                     	;# 
  1465  031E                     	;# 
  1466  0394                     	;# 
  1467  0395                     	;# 
  1468  0396                     	;# 
  1469  0415                     	;# 
  1470  0416                     	;# 
  1471  0417                     	;# 
  1472  041C                     	;# 
  1473  041D                     	;# 
  1474  041E                     	;# 
  1475  0791                     	;# 
  1476  0792                     	;# 
  1477  0793                     	;# 
  1478  0794                     	;# 
  1479  0795                     	;# 
  1480  0798                     	;# 
  1481  0799                     	;# 
  1482  07A0                     	;# 
  1483  07A1                     	;# 
  1484  07A3                     	;# 
  1485  07A4                     	;# 
  1486  07A6                     	;# 
  1487  07A7                     	;# 
  1488  07A9                     	;# 
  1489  07AA                     	;# 
  1490  0FE4                     	;# 
  1491  0FE5                     	;# 
  1492  0FE6                     	;# 
  1493  0FE7                     	;# 
  1494  0FE8                     	;# 
  1495  0FE9                     	;# 
  1496  0FEA                     	;# 
  1497  0FEB                     	;# 
  1498  0FED                     	;# 
  1499  0FEE                     	;# 
  1500  0FEF                     	;# 
  1501  0000                     	;# 
  1502  0001                     	;# 
  1503  0002                     	;# 
  1504  0003                     	;# 
  1505  0004                     	;# 
  1506  0005                     	;# 
  1507  0006                     	;# 
  1508  0007                     	;# 
  1509  0008                     	;# 
  1510  0009                     	;# 
  1511  000A                     	;# 
  1512  000B                     	;# 
  1513  000C                     	;# 
  1514  000D                     	;# 
  1515  000E                     	;# 
  1516  0010                     	;# 
  1517  0011                     	;# 
  1518  0012                     	;# 
  1519  0013                     	;# 
  1520  0015                     	;# 
  1521  0016                     	;# 
  1522  0016                     	;# 
  1523  0017                     	;# 
  1524  0018                     	;# 
  1525  0019                     	;# 
  1526  001A                     	;# 
  1527  001B                     	;# 
  1528  001C                     	;# 
  1529  001E                     	;# 
  1530  001F                     	;# 
  1531  008C                     	;# 
  1532  008D                     	;# 
  1533  008E                     	;# 
  1534  0090                     	;# 
  1535  0091                     	;# 
  1536  0092                     	;# 
  1537  0093                     	;# 
  1538  0095                     	;# 
  1539  0096                     	;# 
  1540  0097                     	;# 
  1541  0098                     	;# 
  1542  0099                     	;# 
  1543  009A                     	;# 
  1544  009B                     	;# 
  1545  009B                     	;# 
  1546  009C                     	;# 
  1547  009D                     	;# 
  1548  009E                     	;# 
  1549  010C                     	;# 
  1550  010D                     	;# 
  1551  010E                     	;# 
  1552  0110                     	;# 
  1553  0111                     	;# 
  1554  0112                     	;# 
  1555  0113                     	;# 
  1556  0114                     	;# 
  1557  0115                     	;# 
  1558  0116                     	;# 
  1559  0117                     	;# 
  1560  0118                     	;# 
  1561  0119                     	;# 
  1562  011A                     	;# 
  1563  011B                     	;# 
  1564  011D                     	;# 
  1565  018C                     	;# 
  1566  018D                     	;# 
  1567  0191                     	;# 
  1568  0191                     	;# 
  1569  0192                     	;# 
  1570  0193                     	;# 
  1571  0193                     	;# 
  1572  0193                     	;# 
  1573  0194                     	;# 
  1574  0195                     	;# 
  1575  0196                     	;# 
  1576  0199                     	;# 
  1577  019A                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019C                     	;# 
  1583  019C                     	;# 
  1584  019D                     	;# 
  1585  019E                     	;# 
  1586  019F                     	;# 
  1587  020D                     	;# 
  1588  0210                     	;# 
  1589  0211                     	;# 
  1590  0212                     	;# 
  1591  0213                     	;# 
  1592  0214                     	;# 
  1593  0215                     	;# 
  1594  0215                     	;# 
  1595  0216                     	;# 
  1596  0217                     	;# 
  1597  0291                     	;# 
  1598  0291                     	;# 
  1599  0292                     	;# 
  1600  0293                     	;# 
  1601  0294                     	;# 
  1602  0295                     	;# 
  1603  0295                     	;# 
  1604  0296                     	;# 
  1605  0298                     	;# 
  1606  0298                     	;# 
  1607  0299                     	;# 
  1608  029A                     	;# 
  1609  029B                     	;# 
  1610  029C                     	;# 
  1611  029C                     	;# 
  1612  029D                     	;# 
  1613  029E                     	;# 
  1614  029F                     	;# 
  1615  0311                     	;# 
  1616  0311                     	;# 
  1617  0312                     	;# 
  1618  0313                     	;# 
  1619  0314                     	;# 
  1620  0315                     	;# 
  1621  0315                     	;# 
  1622  0316                     	;# 
  1623  0318                     	;# 
  1624  0318                     	;# 
  1625  0319                     	;# 
  1626  031A                     	;# 
  1627  031C                     	;# 
  1628  031C                     	;# 
  1629  031D                     	;# 
  1630  031E                     	;# 
  1631  0394                     	;# 
  1632  0395                     	;# 
  1633  0396                     	;# 
  1634  0415                     	;# 
  1635  0416                     	;# 
  1636  0417                     	;# 
  1637  041C                     	;# 
  1638  041D                     	;# 
  1639  041E                     	;# 
  1640  0791                     	;# 
  1641  0792                     	;# 
  1642  0793                     	;# 
  1643  0794                     	;# 
  1644  0795                     	;# 
  1645  0798                     	;# 
  1646  0799                     	;# 
  1647  07A0                     	;# 
  1648  07A1                     	;# 
  1649  07A3                     	;# 
  1650  07A4                     	;# 
  1651  07A6                     	;# 
  1652  07A7                     	;# 
  1653  07A9                     	;# 
  1654  07AA                     	;# 
  1655  0FE4                     	;# 
  1656  0FE5                     	;# 
  1657  0FE6                     	;# 
  1658  0FE7                     	;# 
  1659  0FE8                     	;# 
  1660  0FE9                     	;# 
  1661  0FEA                     	;# 
  1662  0FEB                     	;# 
  1663  0FED                     	;# 
  1664  0FEE                     	;# 
  1665  0FEF                     	;# 
  1666  0000                     	;# 
  1667  0001                     	;# 
  1668  0002                     	;# 
  1669  0003                     	;# 
  1670  0004                     	;# 
  1671  0005                     	;# 
  1672  0006                     	;# 
  1673  0007                     	;# 
  1674  0008                     	;# 
  1675  0009                     	;# 
  1676  000A                     	;# 
  1677  000B                     	;# 
  1678  000C                     	;# 
  1679  000D                     	;# 
  1680  000E                     	;# 
  1681  0010                     	;# 
  1682  0011                     	;# 
  1683  0012                     	;# 
  1684  0013                     	;# 
  1685  0015                     	;# 
  1686  0016                     	;# 
  1687  0016                     	;# 
  1688  0017                     	;# 
  1689  0018                     	;# 
  1690  0019                     	;# 
  1691  001A                     	;# 
  1692  001B                     	;# 
  1693  001C                     	;# 
  1694  001E                     	;# 
  1695  001F                     	;# 
  1696  008C                     	;# 
  1697  008D                     	;# 
  1698  008E                     	;# 
  1699  0090                     	;# 
  1700  0091                     	;# 
  1701  0092                     	;# 
  1702  0093                     	;# 
  1703  0095                     	;# 
  1704  0096                     	;# 
  1705  0097                     	;# 
  1706  0098                     	;# 
  1707  0099                     	;# 
  1708  009A                     	;# 
  1709  009B                     	;# 
  1710  009B                     	;# 
  1711  009C                     	;# 
  1712  009D                     	;# 
  1713  009E                     	;# 
  1714  010C                     	;# 
  1715  010D                     	;# 
  1716  010E                     	;# 
  1717  0110                     	;# 
  1718  0111                     	;# 
  1719  0112                     	;# 
  1720  0113                     	;# 
  1721  0114                     	;# 
  1722  0115                     	;# 
  1723  0116                     	;# 
  1724  0117                     	;# 
  1725  0118                     	;# 
  1726  0119                     	;# 
  1727  011A                     	;# 
  1728  011B                     	;# 
  1729  011D                     	;# 
  1730  018C                     	;# 
  1731  018D                     	;# 
  1732  0191                     	;# 
  1733  0191                     	;# 
  1734  0192                     	;# 
  1735  0193                     	;# 
  1736  0193                     	;# 
  1737  0193                     	;# 
  1738  0194                     	;# 
  1739  0195                     	;# 
  1740  0196                     	;# 
  1741  0199                     	;# 
  1742  019A                     	;# 
  1743  019B                     	;# 
  1744  019B                     	;# 
  1745  019B                     	;# 
  1746  019B                     	;# 
  1747  019C                     	;# 
  1748  019C                     	;# 
  1749  019D                     	;# 
  1750  019E                     	;# 
  1751  019F                     	;# 
  1752  020D                     	;# 
  1753  0210                     	;# 
  1754  0211                     	;# 
  1755  0212                     	;# 
  1756  0213                     	;# 
  1757  0214                     	;# 
  1758  0215                     	;# 
  1759  0215                     	;# 
  1760  0216                     	;# 
  1761  0217                     	;# 
  1762  0291                     	;# 
  1763  0291                     	;# 
  1764  0292                     	;# 
  1765  0293                     	;# 
  1766  0294                     	;# 
  1767  0295                     	;# 
  1768  0295                     	;# 
  1769  0296                     	;# 
  1770  0298                     	;# 
  1771  0298                     	;# 
  1772  0299                     	;# 
  1773  029A                     	;# 
  1774  029B                     	;# 
  1775  029C                     	;# 
  1776  029C                     	;# 
  1777  029D                     	;# 
  1778  029E                     	;# 
  1779  029F                     	;# 
  1780  0311                     	;# 
  1781  0311                     	;# 
  1782  0312                     	;# 
  1783  0313                     	;# 
  1784  0314                     	;# 
  1785  0315                     	;# 
  1786  0315                     	;# 
  1787  0316                     	;# 
  1788  0318                     	;# 
  1789  0318                     	;# 
  1790  0319                     	;# 
  1791  031A                     	;# 
  1792  031C                     	;# 
  1793  031C                     	;# 
  1794  031D                     	;# 
  1795  031E                     	;# 
  1796  0394                     	;# 
  1797  0395                     	;# 
  1798  0396                     	;# 
  1799  0415                     	;# 
  1800  0416                     	;# 
  1801  0417                     	;# 
  1802  041C                     	;# 
  1803  041D                     	;# 
  1804  041E                     	;# 
  1805  0791                     	;# 
  1806  0792                     	;# 
  1807  0793                     	;# 
  1808  0794                     	;# 
  1809  0795                     	;# 
  1810  0798                     	;# 
  1811  0799                     	;# 
  1812  07A0                     	;# 
  1813  07A1                     	;# 
  1814  07A3                     	;# 
  1815  07A4                     	;# 
  1816  07A6                     	;# 
  1817  07A7                     	;# 
  1818  07A9                     	;# 
  1819  07AA                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE9                     	;# 
  1826  0FEA                     	;# 
  1827  0FEB                     	;# 
  1828  0FED                     	;# 
  1829  0FEE                     	;# 
  1830  0FEF                     	;# 
  1831  0000                     	;# 
  1832  0001                     	;# 
  1833  0002                     	;# 
  1834  0003                     	;# 
  1835  0004                     	;# 
  1836  0005                     	;# 
  1837  0006                     	;# 
  1838  0007                     	;# 
  1839  0008                     	;# 
  1840  0009                     	;# 
  1841  000A                     	;# 
  1842  000B                     	;# 
  1843  000C                     	;# 
  1844  000D                     	;# 
  1845  000E                     	;# 
  1846  0010                     	;# 
  1847  0011                     	;# 
  1848  0012                     	;# 
  1849  0013                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  001E                     	;# 
  1860  001F                     	;# 
  1861  008C                     	;# 
  1862  008D                     	;# 
  1863  008E                     	;# 
  1864  0090                     	;# 
  1865  0091                     	;# 
  1866  0092                     	;# 
  1867  0093                     	;# 
  1868  0095                     	;# 
  1869  0096                     	;# 
  1870  0097                     	;# 
  1871  0098                     	;# 
  1872  0099                     	;# 
  1873  009A                     	;# 
  1874  009B                     	;# 
  1875  009B                     	;# 
  1876  009C                     	;# 
  1877  009D                     	;# 
  1878  009E                     	;# 
  1879  010C                     	;# 
  1880  010D                     	;# 
  1881  010E                     	;# 
  1882  0110                     	;# 
  1883  0111                     	;# 
  1884  0112                     	;# 
  1885  0113                     	;# 
  1886  0114                     	;# 
  1887  0115                     	;# 
  1888  0116                     	;# 
  1889  0117                     	;# 
  1890  0118                     	;# 
  1891  0119                     	;# 
  1892  011A                     	;# 
  1893  011B                     	;# 
  1894  011D                     	;# 
  1895  018C                     	;# 
  1896  018D                     	;# 
  1897  0191                     	;# 
  1898  0191                     	;# 
  1899  0192                     	;# 
  1900  0193                     	;# 
  1901  0193                     	;# 
  1902  0193                     	;# 
  1903  0194                     	;# 
  1904  0195                     	;# 
  1905  0196                     	;# 
  1906  0199                     	;# 
  1907  019A                     	;# 
  1908  019B                     	;# 
  1909  019B                     	;# 
  1910  019B                     	;# 
  1911  019B                     	;# 
  1912  019C                     	;# 
  1913  019C                     	;# 
  1914  019D                     	;# 
  1915  019E                     	;# 
  1916  019F                     	;# 
  1917  020D                     	;# 
  1918  0210                     	;# 
  1919  0211                     	;# 
  1920  0212                     	;# 
  1921  0213                     	;# 
  1922  0214                     	;# 
  1923  0215                     	;# 
  1924  0215                     	;# 
  1925  0216                     	;# 
  1926  0217                     	;# 
  1927  0291                     	;# 
  1928  0291                     	;# 
  1929  0292                     	;# 
  1930  0293                     	;# 
  1931  0294                     	;# 
  1932  0295                     	;# 
  1933  0295                     	;# 
  1934  0296                     	;# 
  1935  0298                     	;# 
  1936  0298                     	;# 
  1937  0299                     	;# 
  1938  029A                     	;# 
  1939  029B                     	;# 
  1940  029C                     	;# 
  1941  029C                     	;# 
  1942  029D                     	;# 
  1943  029E                     	;# 
  1944  029F                     	;# 
  1945  0311                     	;# 
  1946  0311                     	;# 
  1947  0312                     	;# 
  1948  0313                     	;# 
  1949  0314                     	;# 
  1950  0315                     	;# 
  1951  0315                     	;# 
  1952  0316                     	;# 
  1953  0318                     	;# 
  1954  0318                     	;# 
  1955  0319                     	;# 
  1956  031A                     	;# 
  1957  031C                     	;# 
  1958  031C                     	;# 
  1959  031D                     	;# 
  1960  031E                     	;# 
  1961  0394                     	;# 
  1962  0395                     	;# 
  1963  0396                     	;# 
  1964  0415                     	;# 
  1965  0416                     	;# 
  1966  0417                     	;# 
  1967  041C                     	;# 
  1968  041D                     	;# 
  1969  041E                     	;# 
  1970  0791                     	;# 
  1971  0792                     	;# 
  1972  0793                     	;# 
  1973  0794                     	;# 
  1974  0795                     	;# 
  1975  0798                     	;# 
  1976  0799                     	;# 
  1977  07A0                     	;# 
  1978  07A1                     	;# 
  1979  07A3                     	;# 
  1980  07A4                     	;# 
  1981  07A6                     	;# 
  1982  07A7                     	;# 
  1983  07A9                     	;# 
  1984  07AA                     	;# 
  1985  0FE4                     	;# 
  1986  0FE5                     	;# 
  1987  0FE6                     	;# 
  1988  0FE7                     	;# 
  1989  0FE8                     	;# 
  1990  0FE9                     	;# 
  1991  0FEA                     	;# 
  1992  0FEB                     	;# 
  1993  0FED                     	;# 
  1994  0FEE                     	;# 
  1995  0FEF                     	;# 
  1996  0000                     	;# 
  1997  0001                     	;# 
  1998  0002                     	;# 
  1999  0003                     	;# 
  2000  0004                     	;# 
  2001  0005                     	;# 
  2002  0006                     	;# 
  2003  0007                     	;# 
  2004  0008                     	;# 
  2005  0009                     	;# 
  2006  000A                     	;# 
  2007  000B                     	;# 
  2008  000C                     	;# 
  2009  000D                     	;# 
  2010  000E                     	;# 
  2011  0010                     	;# 
  2012  0011                     	;# 
  2013  0012                     	;# 
  2014  0013                     	;# 
  2015  0015                     	;# 
  2016  0016                     	;# 
  2017  0016                     	;# 
  2018  0017                     	;# 
  2019  0018                     	;# 
  2020  0019                     	;# 
  2021  001A                     	;# 
  2022  001B                     	;# 
  2023  001C                     	;# 
  2024  001E                     	;# 
  2025  001F                     	;# 
  2026  008C                     	;# 
  2027  008D                     	;# 
  2028  008E                     	;# 
  2029  0090                     	;# 
  2030  0091                     	;# 
  2031  0092                     	;# 
  2032  0093                     	;# 
  2033  0095                     	;# 
  2034  0096                     	;# 
  2035  0097                     	;# 
  2036  0098                     	;# 
  2037  0099                     	;# 
  2038  009A                     	;# 
  2039  009B                     	;# 
  2040  009B                     	;# 
  2041  009C                     	;# 
  2042  009D                     	;# 
  2043  009E                     	;# 
  2044  010C                     	;# 
  2045  010D                     	;# 
  2046  010E                     	;# 
  2047  0110                     	;# 
  2048  0111                     	;# 
  2049  0112                     	;# 
  2050  0113                     	;# 
  2051  0114                     	;# 
  2052  0115                     	;# 
  2053  0116                     	;# 
  2054  0117                     	;# 
  2055  0118                     	;# 
  2056  0119                     	;# 
  2057  011A                     	;# 
  2058  011B                     	;# 
  2059  011D                     	;# 
  2060  018C                     	;# 
  2061  018D                     	;# 
  2062  0191                     	;# 
  2063  0191                     	;# 
  2064  0192                     	;# 
  2065  0193                     	;# 
  2066  0193                     	;# 
  2067  0193                     	;# 
  2068  0194                     	;# 
  2069  0195                     	;# 
  2070  0196                     	;# 
  2071  0199                     	;# 
  2072  019A                     	;# 
  2073  019B                     	;# 
  2074  019B                     	;# 
  2075  019B                     	;# 
  2076  019B                     	;# 
  2077  019C                     	;# 
  2078  019C                     	;# 
  2079  019D                     	;# 
  2080  019E                     	;# 
  2081  019F                     	;# 
  2082  020D                     	;# 
  2083  0210                     	;# 
  2084  0211                     	;# 
  2085  0212                     	;# 
  2086  0213                     	;# 
  2087  0214                     	;# 
  2088  0215                     	;# 
  2089  0215                     	;# 
  2090  0216                     	;# 
  2091  0217                     	;# 
  2092  0291                     	;# 
  2093  0291                     	;# 
  2094  0292                     	;# 
  2095  0293                     	;# 
  2096  0294                     	;# 
  2097  0295                     	;# 
  2098  0295                     	;# 
  2099  0296                     	;# 
  2100  0298                     	;# 
  2101  0298                     	;# 
  2102  0299                     	;# 
  2103  029A                     	;# 
  2104  029B                     	;# 
  2105  029C                     	;# 
  2106  029C                     	;# 
  2107  029D                     	;# 
  2108  029E                     	;# 
  2109  029F                     	;# 
  2110  0311                     	;# 
  2111  0311                     	;# 
  2112  0312                     	;# 
  2113  0313                     	;# 
  2114  0314                     	;# 
  2115  0315                     	;# 
  2116  0315                     	;# 
  2117  0316                     	;# 
  2118  0318                     	;# 
  2119  0318                     	;# 
  2120  0319                     	;# 
  2121  031A                     	;# 
  2122  031C                     	;# 
  2123  031C                     	;# 
  2124  031D                     	;# 
  2125  031E                     	;# 
  2126  0394                     	;# 
  2127  0395                     	;# 
  2128  0396                     	;# 
  2129  0415                     	;# 
  2130  0416                     	;# 
  2131  0417                     	;# 
  2132  041C                     	;# 
  2133  041D                     	;# 
  2134  041E                     	;# 
  2135  0791                     	;# 
  2136  0792                     	;# 
  2137  0793                     	;# 
  2138  0794                     	;# 
  2139  0795                     	;# 
  2140  0798                     	;# 
  2141  0799                     	;# 
  2142  07A0                     	;# 
  2143  07A1                     	;# 
  2144  07A3                     	;# 
  2145  07A4                     	;# 
  2146  07A6                     	;# 
  2147  07A7                     	;# 
  2148  07A9                     	;# 
  2149  07AA                     	;# 
  2150  0FE4                     	;# 
  2151  0FE5                     	;# 
  2152  0FE6                     	;# 
  2153  0FE7                     	;# 
  2154  0FE8                     	;# 
  2155  0FE9                     	;# 
  2156  0FEA                     	;# 
  2157  0FEB                     	;# 
  2158  0FED                     	;# 
  2159  0FEE                     	;# 
  2160  0FEF                     	;# 
  2161  0000                     	;# 
  2162  0001                     	;# 
  2163  0002                     	;# 
  2164  0003                     	;# 
  2165  0004                     	;# 
  2166  0005                     	;# 
  2167  0006                     	;# 
  2168  0007                     	;# 
  2169  0008                     	;# 
  2170  0009                     	;# 
  2171  000A                     	;# 
  2172  000B                     	;# 
  2173  000C                     	;# 
  2174  000D                     	;# 
  2175  000E                     	;# 
  2176  0010                     	;# 
  2177  0011                     	;# 
  2178  0012                     	;# 
  2179  0013                     	;# 
  2180  0015                     	;# 
  2181  0016                     	;# 
  2182  0016                     	;# 
  2183  0017                     	;# 
  2184  0018                     	;# 
  2185  0019                     	;# 
  2186  001A                     	;# 
  2187  001B                     	;# 
  2188  001C                     	;# 
  2189  001E                     	;# 
  2190  001F                     	;# 
  2191  008C                     	;# 
  2192  008D                     	;# 
  2193  008E                     	;# 
  2194  0090                     	;# 
  2195  0091                     	;# 
  2196  0092                     	;# 
  2197  0093                     	;# 
  2198  0095                     	;# 
  2199  0096                     	;# 
  2200  0097                     	;# 
  2201  0098                     	;# 
  2202  0099                     	;# 
  2203  009A                     	;# 
  2204  009B                     	;# 
  2205  009B                     	;# 
  2206  009C                     	;# 
  2207  009D                     	;# 
  2208  009E                     	;# 
  2209  010C                     	;# 
  2210  010D                     	;# 
  2211  010E                     	;# 
  2212  0110                     	;# 
  2213  0111                     	;# 
  2214  0112                     	;# 
  2215  0113                     	;# 
  2216  0114                     	;# 
  2217  0115                     	;# 
  2218  0116                     	;# 
  2219  0117                     	;# 
  2220  0118                     	;# 
  2221  0119                     	;# 
  2222  011A                     	;# 
  2223  011B                     	;# 
  2224  011D                     	;# 
  2225  018C                     	;# 
  2226  018D                     	;# 
  2227  0191                     	;# 
  2228  0191                     	;# 
  2229  0192                     	;# 
  2230  0193                     	;# 
  2231  0193                     	;# 
  2232  0193                     	;# 
  2233  0194                     	;# 
  2234  0195                     	;# 
  2235  0196                     	;# 
  2236  0199                     	;# 
  2237  019A                     	;# 
  2238  019B                     	;# 
  2239  019B                     	;# 
  2240  019B                     	;# 
  2241  019B                     	;# 
  2242  019C                     	;# 
  2243  019C                     	;# 
  2244  019D                     	;# 
  2245  019E                     	;# 
  2246  019F                     	;# 
  2247  020D                     	;# 
  2248  0210                     	;# 
  2249  0211                     	;# 
  2250  0212                     	;# 
  2251  0213                     	;# 
  2252  0214                     	;# 
  2253  0215                     	;# 
  2254  0215                     	;# 
  2255  0216                     	;# 
  2256  0217                     	;# 
  2257  0291                     	;# 
  2258  0291                     	;# 
  2259  0292                     	;# 
  2260  0293                     	;# 
  2261  0294                     	;# 
  2262  0295                     	;# 
  2263  0295                     	;# 
  2264  0296                     	;# 
  2265  0298                     	;# 
  2266  0298                     	;# 
  2267  0299                     	;# 
  2268  029A                     	;# 
  2269  029B                     	;# 
  2270  029C                     	;# 
  2271  029C                     	;# 
  2272  029D                     	;# 
  2273  029E                     	;# 
  2274  029F                     	;# 
  2275  0311                     	;# 
  2276  0311                     	;# 
  2277  0312                     	;# 
  2278  0313                     	;# 
  2279  0314                     	;# 
  2280  0315                     	;# 
  2281  0315                     	;# 
  2282  0316                     	;# 
  2283  0318                     	;# 
  2284  0318                     	;# 
  2285  0319                     	;# 
  2286  031A                     	;# 
  2287  031C                     	;# 
  2288  031C                     	;# 
  2289  031D                     	;# 
  2290  031E                     	;# 
  2291  0394                     	;# 
  2292  0395                     	;# 
  2293  0396                     	;# 
  2294  0415                     	;# 
  2295  0416                     	;# 
  2296  0417                     	;# 
  2297  041C                     	;# 
  2298  041D                     	;# 
  2299  041E                     	;# 
  2300  0791                     	;# 
  2301  0792                     	;# 
  2302  0793                     	;# 
  2303  0794                     	;# 
  2304  0795                     	;# 
  2305  0798                     	;# 
  2306  0799                     	;# 
  2307  07A0                     	;# 
  2308  07A1                     	;# 
  2309  07A3                     	;# 
  2310  07A4                     	;# 
  2311  07A6                     	;# 
  2312  07A7                     	;# 
  2313  07A9                     	;# 
  2314  07AA                     	;# 
  2315  0FE4                     	;# 
  2316  0FE5                     	;# 
  2317  0FE6                     	;# 
  2318  0FE7                     	;# 
  2319  0FE8                     	;# 
  2320  0FE9                     	;# 
  2321  0FEA                     	;# 
  2322  0FEB                     	;# 
  2323  0FED                     	;# 
  2324  0FEE                     	;# 
  2325  0FEF                     	;# 
  2326  0000                     	;# 
  2327  0001                     	;# 
  2328  0002                     	;# 
  2329  0003                     	;# 
  2330  0004                     	;# 
  2331  0005                     	;# 
  2332  0006                     	;# 
  2333  0007                     	;# 
  2334  0008                     	;# 
  2335  0009                     	;# 
  2336  000A                     	;# 
  2337  000B                     	;# 
  2338  000C                     	;# 
  2339  000D                     	;# 
  2340  000E                     	;# 
  2341  0010                     	;# 
  2342  0011                     	;# 
  2343  0012                     	;# 
  2344  0013                     	;# 
  2345  0015                     	;# 
  2346  0016                     	;# 
  2347  0016                     	;# 
  2348  0017                     	;# 
  2349  0018                     	;# 
  2350  0019                     	;# 
  2351  001A                     	;# 
  2352  001B                     	;# 
  2353  001C                     	;# 
  2354  001E                     	;# 
  2355  001F                     	;# 
  2356  008C                     	;# 
  2357  008D                     	;# 
  2358  008E                     	;# 
  2359  0090                     	;# 
  2360  0091                     	;# 
  2361  0092                     	;# 
  2362  0093                     	;# 
  2363  0095                     	;# 
  2364  0096                     	;# 
  2365  0097                     	;# 
  2366  0098                     	;# 
  2367  0099                     	;# 
  2368  009A                     	;# 
  2369  009B                     	;# 
  2370  009B                     	;# 
  2371  009C                     	;# 
  2372  009D                     	;# 
  2373  009E                     	;# 
  2374  010C                     	;# 
  2375  010D                     	;# 
  2376  010E                     	;# 
  2377  0110                     	;# 
  2378  0111                     	;# 
  2379  0112                     	;# 
  2380  0113                     	;# 
  2381  0114                     	;# 
  2382  0115                     	;# 
  2383  0116                     	;# 
  2384  0117                     	;# 
  2385  0118                     	;# 
  2386  0119                     	;# 
  2387  011A                     	;# 
  2388  011B                     	;# 
  2389  011D                     	;# 
  2390  018C                     	;# 
  2391  018D                     	;# 
  2392  0191                     	;# 
  2393  0191                     	;# 
  2394  0192                     	;# 
  2395  0193                     	;# 
  2396  0193                     	;# 
  2397  0193                     	;# 
  2398  0194                     	;# 
  2399  0195                     	;# 
  2400  0196                     	;# 
  2401  0199                     	;# 
  2402  019A                     	;# 
  2403  019B                     	;# 
  2404  019B                     	;# 
  2405  019B                     	;# 
  2406  019B                     	;# 
  2407  019C                     	;# 
  2408  019C                     	;# 
  2409  019D                     	;# 
  2410  019E                     	;# 
  2411  019F                     	;# 
  2412  020D                     	;# 
  2413  0210                     	;# 
  2414  0211                     	;# 
  2415  0212                     	;# 
  2416  0213                     	;# 
  2417  0214                     	;# 
  2418  0215                     	;# 
  2419  0215                     	;# 
  2420  0216                     	;# 
  2421  0217                     	;# 
  2422  0291                     	;# 
  2423  0291                     	;# 
  2424  0292                     	;# 
  2425  0293                     	;# 
  2426  0294                     	;# 
  2427  0295                     	;# 
  2428  0295                     	;# 
  2429  0296                     	;# 
  2430  0298                     	;# 
  2431  0298                     	;# 
  2432  0299                     	;# 
  2433  029A                     	;# 
  2434  029B                     	;# 
  2435  029C                     	;# 
  2436  029C                     	;# 
  2437  029D                     	;# 
  2438  029E                     	;# 
  2439  029F                     	;# 
  2440  0311                     	;# 
  2441  0311                     	;# 
  2442  0312                     	;# 
  2443  0313                     	;# 
  2444  0314                     	;# 
  2445  0315                     	;# 
  2446  0315                     	;# 
  2447  0316                     	;# 
  2448  0318                     	;# 
  2449  0318                     	;# 
  2450  0319                     	;# 
  2451  031A                     	;# 
  2452  031C                     	;# 
  2453  031C                     	;# 
  2454  031D                     	;# 
  2455  031E                     	;# 
  2456  0394                     	;# 
  2457  0395                     	;# 
  2458  0396                     	;# 
  2459  0415                     	;# 
  2460  0416                     	;# 
  2461  0417                     	;# 
  2462  041C                     	;# 
  2463  041D                     	;# 
  2464  041E                     	;# 
  2465  0791                     	;# 
  2466  0792                     	;# 
  2467  0793                     	;# 
  2468  0794                     	;# 
  2469  0795                     	;# 
  2470  0798                     	;# 
  2471  0799                     	;# 
  2472  07A0                     	;# 
  2473  07A1                     	;# 
  2474  07A3                     	;# 
  2475  07A4                     	;# 
  2476  07A6                     	;# 
  2477  07A7                     	;# 
  2478  07A9                     	;# 
  2479  07AA                     	;# 
  2480  0FE4                     	;# 
  2481  0FE5                     	;# 
  2482  0FE6                     	;# 
  2483  0FE7                     	;# 
  2484  0FE8                     	;# 
  2485  0FE9                     	;# 
  2486  0FEA                     	;# 
  2487  0FEB                     	;# 
  2488  0FED                     	;# 
  2489  0FEE                     	;# 
  2490  0FEF                     	;# 
  2491  0000                     	;# 
  2492  0001                     	;# 
  2493  0002                     	;# 
  2494  0003                     	;# 
  2495  0004                     	;# 
  2496  0005                     	;# 
  2497  0006                     	;# 
  2498  0007                     	;# 
  2499  0008                     	;# 
  2500  0009                     	;# 
  2501  000A                     	;# 
  2502  000B                     	;# 
  2503  000C                     	;# 
  2504  000D                     	;# 
  2505  000E                     	;# 
  2506  0010                     	;# 
  2507  0011                     	;# 
  2508  0012                     	;# 
  2509  0013                     	;# 
  2510  0015                     	;# 
  2511  0016                     	;# 
  2512  0016                     	;# 
  2513  0017                     	;# 
  2514  0018                     	;# 
  2515  0019                     	;# 
  2516  001A                     	;# 
  2517  001B                     	;# 
  2518  001C                     	;# 
  2519  001E                     	;# 
  2520  001F                     	;# 
  2521  008C                     	;# 
  2522  008D                     	;# 
  2523  008E                     	;# 
  2524  0090                     	;# 
  2525  0091                     	;# 
  2526  0092                     	;# 
  2527  0093                     	;# 
  2528  0095                     	;# 
  2529  0096                     	;# 
  2530  0097                     	;# 
  2531  0098                     	;# 
  2532  0099                     	;# 
  2533  009A                     	;# 
  2534  009B                     	;# 
  2535  009B                     	;# 
  2536  009C                     	;# 
  2537  009D                     	;# 
  2538  009E                     	;# 
  2539  010C                     	;# 
  2540  010D                     	;# 
  2541  010E                     	;# 
  2542  0110                     	;# 
  2543  0111                     	;# 
  2544  0112                     	;# 
  2545  0113                     	;# 
  2546  0114                     	;# 
  2547  0115                     	;# 
  2548  0116                     	;# 
  2549  0117                     	;# 
  2550  0118                     	;# 
  2551  0119                     	;# 
  2552  011A                     	;# 
  2553  011B                     	;# 
  2554  011D                     	;# 
  2555  018C                     	;# 
  2556  018D                     	;# 
  2557  0191                     	;# 
  2558  0191                     	;# 
  2559  0192                     	;# 
  2560  0193                     	;# 
  2561  0193                     	;# 
  2562  0193                     	;# 
  2563  0194                     	;# 
  2564  0195                     	;# 
  2565  0196                     	;# 
  2566  0199                     	;# 
  2567  019A                     	;# 
  2568  019B                     	;# 
  2569  019B                     	;# 
  2570  019B                     	;# 
  2571  019B                     	;# 
  2572  019C                     	;# 
  2573  019C                     	;# 
  2574  019D                     	;# 
  2575  019E                     	;# 
  2576  019F                     	;# 
  2577  020D                     	;# 
  2578  0210                     	;# 
  2579  0211                     	;# 
  2580  0212                     	;# 
  2581  0213                     	;# 
  2582  0214                     	;# 
  2583  0215                     	;# 
  2584  0215                     	;# 
  2585  0216                     	;# 
  2586  0217                     	;# 
  2587  0291                     	;# 
  2588  0291                     	;# 
  2589  0292                     	;# 
  2590  0293                     	;# 
  2591  0294                     	;# 
  2592  0295                     	;# 
  2593  0295                     	;# 
  2594  0296                     	;# 
  2595  0298                     	;# 
  2596  0298                     	;# 
  2597  0299                     	;# 
  2598  029A                     	;# 
  2599  029B                     	;# 
  2600  029C                     	;# 
  2601  029C                     	;# 
  2602  029D                     	;# 
  2603  029E                     	;# 
  2604  029F                     	;# 
  2605  0311                     	;# 
  2606  0311                     	;# 
  2607  0312                     	;# 
  2608  0313                     	;# 
  2609  0314                     	;# 
  2610  0315                     	;# 
  2611  0315                     	;# 
  2612  0316                     	;# 
  2613  0318                     	;# 
  2614  0318                     	;# 
  2615  0319                     	;# 
  2616  031A                     	;# 
  2617  031C                     	;# 
  2618  031C                     	;# 
  2619  031D                     	;# 
  2620  031E                     	;# 
  2621  0394                     	;# 
  2622  0395                     	;# 
  2623  0396                     	;# 
  2624  0415                     	;# 
  2625  0416                     	;# 
  2626  0417                     	;# 
  2627  041C                     	;# 
  2628  041D                     	;# 
  2629  041E                     	;# 
  2630  0791                     	;# 
  2631  0792                     	;# 
  2632  0793                     	;# 
  2633  0794                     	;# 
  2634  0795                     	;# 
  2635  0798                     	;# 
  2636  0799                     	;# 
  2637  07A0                     	;# 
  2638  07A1                     	;# 
  2639  07A3                     	;# 
  2640  07A4                     	;# 
  2641  07A6                     	;# 
  2642  07A7                     	;# 
  2643  07A9                     	;# 
  2644  07AA                     	;# 
  2645  0FE4                     	;# 
  2646  0FE5                     	;# 
  2647  0FE6                     	;# 
  2648  0FE7                     	;# 
  2649  0FE8                     	;# 
  2650  0FE9                     	;# 
  2651  0FEA                     	;# 
  2652  0FEB                     	;# 
  2653  0FED                     	;# 
  2654  0FEE                     	;# 
  2655  0FEF                     	;_gesture_data_
  2656                           
  2657                           	psect	stringtext1
  2658  1800                     __pstringtext1:
  2659  1800                     _i2c_fsmStateTable:
  2660  1800  34B3               	retlw	low _I2C_DO_IDLE
  2661  1801  3411               	retlw	high _I2C_DO_IDLE
  2662  1802  34DB               	retlw	low _I2C_DO_SEND_ADR_READ
  2663  1803  3411               	retlw	high _I2C_DO_SEND_ADR_READ
  2664  1804  34D4               	retlw	low _I2C_DO_SEND_ADR_WRITE
  2665  1805  3411               	retlw	high _I2C_DO_SEND_ADR_WRITE
  2666  1806  344A               	retlw	low _I2C_DO_TX
  2667  1807  340B               	retlw	high _I2C_DO_TX
  2668  1808  3412               	retlw	low _I2C_DO_RX
  2669  1809  340A               	retlw	high _I2C_DO_RX
  2670  180A  34CE               	retlw	low _I2C_DO_RCEN
  2671  180B  3411               	retlw	high _I2C_DO_RCEN
  2672  180C  349E               	retlw	low _I2C_DO_TX_EMPTY
  2673  180D  3417               	retlw	high _I2C_DO_TX_EMPTY
  2674  180E  348B               	retlw	low _I2C_DO_SEND_RESTART_READ
  2675  180F  3411               	retlw	high _I2C_DO_SEND_RESTART_READ
  2676  1810  348F               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  2677  1811  3411               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  2678  1812  3493               	retlw	low _I2C_DO_SEND_RESTART
  2679  1813  3411               	retlw	high _I2C_DO_SEND_RESTART
  2680  1814  3497               	retlw	low _I2C_DO_SEND_STOP
  2681  1815  3411               	retlw	high _I2C_DO_SEND_STOP
  2682  1816  349B               	retlw	low _I2C_DO_RX_ACK
  2683  1817  3411               	retlw	high _I2C_DO_RX_ACK
  2684  1818  349F               	retlw	low _I2C_DO_RX_NACK_STOP
  2685  1819  3411               	retlw	high _I2C_DO_RX_NACK_STOP
  2686  181A  34A3               	retlw	low _I2C_DO_RX_NACK_RESTART
  2687  181B  3411               	retlw	high _I2C_DO_RX_NACK_RESTART
  2688  181C  34B8               	retlw	low _I2C_DO_RESET
  2689  181D  3411               	retlw	high _I2C_DO_RESET
  2690  181E  34CF               	retlw	low _I2C_DO_ADDRESS_NACK
  2691  181F  3417               	retlw	high _I2C_DO_ADDRESS_NACK
  2692  1820                     __end_of_i2c_fsmStateTable:
  2693  0013                     _PIR3bits	set	19
  2694  0018                     _T1CONbits	set	24
  2695  0018                     _T1CON	set	24
  2696  0016                     _TMR1L	set	22
  2697  0017                     _TMR1H	set	23
  2698  0019                     _T1GCON	set	25
  2699  0015                     _TMR0	set	21
  2700  0011                     _PIR1bits	set	17
  2701  000B                     _INTCONbits	set	11
  2702  0093                     _PIE3bits	set	147
  2703  0095                     _OPTION_REG	set	149
  2704  0097                     _WDTCON	set	151
  2705  0098                     _OSCTUNE	set	152
  2706  0099                     _OSCCON	set	153
  2707  0091                     _PIE1bits	set	145
  2708  0095                     _OPTION_REGbits	set	149
  2709  008E                     _TRISC	set	142
  2710  008D                     _TRISB	set	141
  2711  008C                     _TRISA	set	140
  2712  0090                     _TRISE	set	144
  2713  04D6                     _PLLR	set	1238
  2714  0119                     _DACCON1	set	281
  2715  0118                     _DACCON0	set	280
  2716  0116                     _BORCON	set	278
  2717  0117                     _FVRCON	set	279
  2718  011D                     _APFCON	set	285
  2719  010E                     _LATC	set	270
  2720  010D                     _LATB	set	269
  2721  010C                     _LATA	set	268
  2722  0110                     _LATE	set	272
  2723  0199                     _RCREG	set	409
  2724  019D                     _RCSTAbits	set	413
  2725  019A                     _TXREG	set	410
  2726  019C                     _SPBRGH	set	412
  2727  019B                     _SPBRGL	set	411
  2728  019E                     _TXSTA	set	414
  2729  019D                     _RCSTA	set	413
  2730  019F                     _BAUDCON	set	415
  2731  018C                     _ANSELA	set	396
  2732  018D                     _ANSELB	set	397
  2733  0216                     _SSPCON2bits	set	534
  2734  0211                     _SSPBUF	set	529
  2735  0215                     _SSPCON1bits	set	533
  2736  0212                     _SSPADD	set	530
  2737  0216                     _SSPCON2	set	534
  2738  0215                     _SSPCON1	set	533
  2739  0214                     _SSPSTAT	set	532
  2740  020D                     _WPUB	set	525
  2741  0210                     _WPUE	set	528
  2742  0319                     _CCPR4H	set	793
  2743  0318                     _CCPR4L	set	792
  2744  031A                     _CCP4CON	set	794
  2745  07A7                     _LCDDATA7bits	set	1959
  2746  07A1                     _LCDDATA1bits	set	1953
  2747  07A4                     _LCDDATA4bits	set	1956
  2748  07AA                     _LCDDATA10bits	set	1962
  2749  07A6                     _LCDDATA6bits	set	1958
  2750  07A0                     _LCDDATA0bits	set	1952
  2751  07A3                     _LCDDATA3bits	set	1955
  2752  07A9                     _LCDDATA9bits	set	1961
  2753  0791                     _LCDCON	set	1937
  2754  0799                     _LCDSE1	set	1945
  2755  0798                     _LCDSE0	set	1944
  2756  07AA                     _LCDDATA10	set	1962
  2757  07A9                     _LCDDATA9	set	1961
  2758  07A7                     _LCDDATA7	set	1959
  2759  07A6                     _LCDDATA6	set	1958
  2760  07A4                     _LCDDATA4	set	1956
  2761  07A3                     _LCDDATA3	set	1955
  2762  07A1                     _LCDDATA1	set	1953
  2763  07A0                     _LCDDATA0	set	1952
  2764  0794                     _LCDCST	set	1940
  2765  0795                     _LCDRL	set	1941
  2766  0793                     _LCDREF	set	1939
  2767  0792                     _LCDPS	set	1938
  2768  0791                     _LCDCONbits	set	1937
  2769                           
  2770                           	psect	cinit
  2771  002E                     start_initialization:	
  2772                           ; #config settings
  2773                           
  2774  002E                     __initialization:	;BIGRAM
  2775                           
  2776                           ; Clear objects allocated to BIGRAM
  2777  002E  30EC               	movlw	low (0+8940)
  2778  002F  0084               	movwf	4
  2779  0030  3022               	movlw	high (0+8940)
  2780  0031  0085               	movwf	5
  2781  0032  3004               	movlw	4
  2782  0033  00FE               	movwf	btemp
  2783  0034  3001               	movlw	1
  2784  0035  00FF               	movwf	btemp+1
  2785  0036  3192  2278  3180   	fcall	clear_ram0
  2786                           
  2787                           ; Clear objects allocated to COMMON
  2788  0039  01FB               	clrf	__pbssCOMMON& (0+127)
  2789  003A  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
  2790  003B  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
  2791                           
  2792                           ; Clear objects allocated to BANK0
  2793  003C  3061               	movlw	low __pbssBANK0
  2794  003D  0084               	movwf	4
  2795  003E  3000               	movlw	high __pbssBANK0
  2796  003F  0085               	movwf	5
  2797  0040  300F               	movlw	15
  2798  0041  00FE               	movwf	btemp
  2799  0042  3000               	movlw	0
  2800  0043  00FF               	movwf	btemp+1
  2801  0044  3192  2278  3180   	fcall	clear_ram0
  2802                           
  2803                           ; Clear objects allocated to BANK1
  2804  0047  30A0               	movlw	low __pbssBANK1
  2805  0048  0084               	movwf	4
  2806  0049  3000               	movlw	high __pbssBANK1
  2807  004A  0085               	movwf	5
  2808  004B  304E               	movlw	78
  2809  004C  00FE               	movwf	btemp
  2810  004D  3000               	movlw	0
  2811  004E  00FF               	movwf	btemp+1
  2812  004F  3192  2278         	fcall	clear_ram0
  2813                           
  2814                           ; Clear objects allocated to BANK2
  2815  0051  0022               	movlb	2	; select bank2
  2816  0052  01A0               	clrf	__pbssBANK2& (0+127)
  2817  0053  01A1               	clrf	(__pbssBANK2+1)& (0+127)
  2818  0054  01A2               	clrf	(__pbssBANK2+2)& (0+127)
  2819  0055  01A3               	clrf	(__pbssBANK2+3)& (0+127)
  2820  0056  01A4               	clrf	(__pbssBANK2+4)& (0+127)
  2821  0057  01A5               	clrf	(__pbssBANK2+5)& (0+127)
  2822  0058  01A6               	clrf	(__pbssBANK2+6)& (0+127)
  2823  0059  01A7               	clrf	(__pbssBANK2+7)& (0+127)
  2824  005A                     end_of_initialization:	
  2825                           ;End of C runtime variable initialization code
  2826                           
  2827  005A                     __end_of__initialization:
  2828  005A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2829  005B  0020               	movlb	0
  2830  005C  318E  2E27         	ljmp	_main	;jump to C main() function
  2831                           
  2832                           	psect	bssCOMMON
  2833  007B                     __pbssCOMMON:
  2834  007B                     CCP4_CallBack@main$F1923@bit_count:
  2835  007B                     	ds	1
  2836  007C                     _ir_command_complement:
  2837  007C                     	ds	1
  2838  007D                     _eusartRxTail:
  2839  007D                     	ds	1
  2840                           
  2841                           	psect	bssBANK0
  2842  0061                     __pbssBANK0:
  2843  0061                     _gesture_lr_count_:
  2844  0061                     	ds	2
  2845  0063                     _gesture_ud_count_:
  2846  0063                     	ds	2
  2847  0065                     _gesture_lr_delta_:
  2848  0065                     	ds	2
  2849  0067                     _gesture_ud_delta_:
  2850  0067                     	ds	2
  2851  0069                     _ir_flag:
  2852  0069                     	ds	1
  2853  006A                     _ir_command:
  2854  006A                     	ds	1
  2855  006B                     _ir_address:
  2856  006B                     	ds	1
  2857  006C                     _eusartRxHead:
  2858  006C                     	ds	1
  2859  006D                     _eusartTxBufferRemaining:
  2860  006D                     	ds	1
  2861  006E                     _eusartTxTail:
  2862  006E                     	ds	1
  2863  006F                     _eusartTxHead:
  2864  006F                     	ds	1
  2865                           
  2866                           	psect	bssBANK1
  2867  00A0                     __pbssBANK1:
  2868  00A0                     _I2C_Status:
  2869  00A0                     	ds	36
  2870  00C4                     _eusartRxStatusBuffer:
  2871  00C4                     	ds	8
  2872  00CC                     _eusartTxBuffer:
  2873  00CC                     	ds	8
  2874  00D4                     _gesture_motion_:
  2875  00D4                     	ds	2
  2876  00D6                     _gesture_state_:
  2877  00D6                     	ds	2
  2878  00D8                     _gesture_far_count_:
  2879  00D8                     	ds	2
  2880  00DA                     _gesture_near_count_:
  2881  00DA                     	ds	2
  2882  00DC                     _CCP4_CallBack:
  2883  00DC                     	ds	2
  2884  00DE                     _timer1ReloadVal:
  2885  00DE                     	ds	2
  2886  00E0                     _EUSART_ErrorHandler:
  2887  00E0                     	ds	2
  2888  00E2                     _EUSART_OverrunErrorHandler:
  2889  00E2                     	ds	2
  2890  00E4                     _EUSART_FramingErrorHandler:
  2891  00E4                     	ds	2
  2892  00E6                     _EUSART_RxDefaultInterruptHandler:
  2893  00E6                     	ds	2
  2894  00E8                     _EUSART_TxDefaultInterruptHandler:
  2895  00E8                     	ds	2
  2896  00EA                     _ir_address_complement:
  2897  00EA                     	ds	1
  2898  00EB                     _timer0ReloadVal:
  2899  00EB                     	ds	1
  2900  00EC                     _eusartRxLastError:
  2901  00EC                     	ds	1
  2902  00ED                     _eusartRxCount:
  2903  00ED                     	ds	1
  2904                           
  2905                           	psect	bssBANK2
  2906  0120                     __pbssBANK2:
  2907  0120                     _eusartRxBuffer:
  2908  0120                     	ds	8
  2909                           
  2910                           	psect	clrtext
  2911  1278                     clear_ram0:	
  2912                           ;	Called with FSR0 containing the base address, and
  2913                           ;	btemp/btemp+1 has the size to clear
  2914                           
  2915  1278  0064               	clrwdt	;clear the watchdog before getting into this loop
  2916  1279                     clrloop0:
  2917  1279  0180               	clrf	0	;clear RAM location pointed to by FSR
  2918  127A  3101               	addfsr 0,1
  2919  127B  3001               	movlw	1
  2920  127C  02FE               	subwf	126,f
  2921  127D  3000               	movlw	0
  2922  127E  3BFF               	subwfb	127,f
  2923  127F  087F               	movf	127,w
  2924  1280  047E               	iorwf	126,w
  2925  1281  1903               	btfsc	3,2
  2926  1282  3400               	retlw	0	;all done for this memory range, return
  2927  1283  2A79               	goto	clrloop0	;have we reached the end yet?
  2928                           
  2929                           	psect	cstackCOMMON
  2930  0070                     __pcstackCOMMON:
  2931  0070                     ?_I2C_Open:
  2932  0070                     ?_I2C_MasterWrite:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_I2C_Close:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_EUSART_Receive_ISR:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_EUSART_Transmit_ISR:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ??_EUSART_Transmit_ISR:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     ?_EUSART_DefaultErrorHandler:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     ?_EUSART_RxDataHandler:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     ??_EUSART_RxDataHandler:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     ?_I2C_DO_IDLE:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0070                     ?_I2C_DO_SEND_ADR_READ:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977  0070                     ?_I2C_DO_TX:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0070                     ?_I2C_DO_RX:	
  2981                           ; 1 bytes @ 0x0
  2982                           
  2983  0070                     ?_I2C_DO_RCEN:	
  2984                           ; 1 bytes @ 0x0
  2985                           
  2986  0070                     ?_I2C_DO_TX_EMPTY:	
  2987                           ; 1 bytes @ 0x0
  2988                           
  2989  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  2990                           ; 1 bytes @ 0x0
  2991                           
  2992  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  2993                           ; 1 bytes @ 0x0
  2994                           
  2995  0070                     ?_I2C_DO_SEND_RESTART:	
  2996                           ; 1 bytes @ 0x0
  2997                           
  2998  0070                     ?_I2C_DO_SEND_STOP:	
  2999                           ; 1 bytes @ 0x0
  3000                           
  3001  0070                     ?_I2C_DO_RX_ACK:	
  3002                           ; 1 bytes @ 0x0
  3003                           
  3004  0070                     ?_I2C_DO_RX_NACK_STOP:	
  3005                           ; 1 bytes @ 0x0
  3006                           
  3007  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  3008                           ; 1 bytes @ 0x0
  3009                           
  3010  0070                     ?_I2C_DO_RESET:	
  3011                           ; 1 bytes @ 0x0
  3012                           
  3013  0070                     ?_I2C_DO_ADDRESS_NACK:	
  3014                           ; 1 bytes @ 0x0
  3015                           
  3016  0070                     ?_I2C_MasterClearIrq:	
  3017                           ; 1 bytes @ 0x0
  3018                           
  3019  0070                     ?_I2C_MasterOpen:	
  3020                           ; 1 bytes @ 0x0
  3021                           
  3022  0070                     ?_I2C_MasterDisableIrq:	
  3023                           ; 1 bytes @ 0x0
  3024                           
  3025  0070                     ?_I2C_MasterClose:	
  3026                           ; 1 bytes @ 0x0
  3027                           
  3028  0070                     ?_I2C_MasterStart:	
  3029                           ; 1 bytes @ 0x0
  3030                           
  3031  0070                     ?_I2C_Poller:	
  3032                           ; 1 bytes @ 0x0
  3033                           
  3034  0070                     ?_I2C_MasterWaitForEvent:	
  3035                           ; 1 bytes @ 0x0
  3036                           
  3037  0070                     ?_I2C_MasterFsm:	
  3038                           ; 1 bytes @ 0x0
  3039                           
  3040  0070                     ?_I2C_MasterIsNack:	
  3041                           ; 1 bytes @ 0x0
  3042                           
  3043  0070                     ?_I2C_MasterSendTxData:	
  3044                           ; 1 bytes @ 0x0
  3045                           
  3046  0070                     ?_I2C_MasterGetRxData:	
  3047                           ; 1 bytes @ 0x0
  3048                           
  3049  0070                     ?_I2C_MasterSendAck:	
  3050                           ; 1 bytes @ 0x0
  3051                           
  3052  0070                     ?_I2C_MasterStartRx:	
  3053                           ; 1 bytes @ 0x0
  3054                           
  3055  0070                     ?_I2C_MasterSetIrq:	
  3056                           ; 1 bytes @ 0x0
  3057                           
  3058  0070                     ?_I2C_MasterEnableRestart:	
  3059                           ; 1 bytes @ 0x0
  3060                           
  3061  0070                     ?_I2C_MasterStop:	
  3062                           ; 1 bytes @ 0x0
  3063                           
  3064  0070                     ?_I2C_MasterSendNack:	
  3065                           ; 1 bytes @ 0x0
  3066                           
  3067  0070                     ?_OSCILLATOR_Initialize:	
  3068                           ; 1 bytes @ 0x0
  3069                           
  3070  0070                     ?_WDT_Initialize:	
  3071                           ; 1 bytes @ 0x0
  3072                           
  3073  0070                     ?_DAC_Initialize:	
  3074                           ; 1 bytes @ 0x0
  3075                           
  3076  0070                     ?_CCP4_Initialize:	
  3077                           ; 1 bytes @ 0x0
  3078                           
  3079  0070                     ?_TMR1_Initialize:	
  3080                           ; 1 bytes @ 0x0
  3081                           
  3082  0070                     ?_TMR0_Initialize:	
  3083                           ; 1 bytes @ 0x0
  3084                           
  3085  0070                     ?_APDS9960Init:	
  3086                           ; 1 bytes @ 0x0
  3087                           
  3088  0070                     ?_LCD_Digit4Num:	
  3089                           ; 1 bytes @ 0x0
  3090                           
  3091  0070                     ?_enableProximitySensor:	
  3092                           ; 1 bytes @ 0x0
  3093                           
  3094  0070                     ?_readProximity:	
  3095                           ; 1 bytes @ 0x0
  3096                           
  3097  0070                     ?_isGestureAvailable:	
  3098                           ; 1 bytes @ 0x0
  3099                           
  3100  0070                     ?_LCD_Digit1Num:	
  3101                           ; 1 bytes @ 0x0
  3102                           
  3103  0070                     ?_LCD_Digit2Num:	
  3104                           ; 1 bytes @ 0x0
  3105                           
  3106  0070                     ?_LCD_Digit3Num:	
  3107                           ; 1 bytes @ 0x0
  3108                           
  3109  0070                     ?_reverseBits:	
  3110                           ; 1 bytes @ 0x0
  3111                           
  3112  0070                     ?_wireReadDataByte:	
  3113                           ; 1 bytes @ 0x0
  3114                           
  3115  0070                     ?_setLEDDrive:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0070                     ?_setProximityGain:	
  3119                           ; 1 bytes @ 0x0
  3120                           
  3121  0070                     ?_setAmbientLightGain:	
  3122                           ; 1 bytes @ 0x0
  3123                           
  3124  0070                     ?_setProxIntLowThresh:	
  3125                           ; 1 bytes @ 0x0
  3126                           
  3127  0070                     ?_setProxIntHighThresh:	
  3128                           ; 1 bytes @ 0x0
  3129                           
  3130  0070                     ?_setGestureEnterThresh:	
  3131                           ; 1 bytes @ 0x0
  3132                           
  3133  0070                     ?_setGestureExitThresh:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136  0070                     ?_setGestureGain:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139  0070                     ?_setGestureLEDDrive:	
  3140                           ; 1 bytes @ 0x0
  3141                           
  3142  0070                     ?_setGestureWaitTime:	
  3143                           ; 1 bytes @ 0x0
  3144                           
  3145  0070                     ?_setGestureIntEnable:	
  3146                           ; 1 bytes @ 0x0
  3147                           
  3148  0070                     ?_enablePower:	
  3149                           ; 1 bytes @ 0x0
  3150                           
  3151  0070                     ?_setProximityIntEnable:	
  3152                           ; 1 bytes @ 0x0
  3153                           
  3154  0070                     ?_resetGestureParameters:	
  3155                           ; 1 bytes @ 0x0
  3156                           
  3157  0070                     ?_processGestureData:	
  3158                           ; 1 bytes @ 0x0
  3159                           
  3160  0070                     ?_decodeGesture:	
  3161                           ; 1 bytes @ 0x0
  3162                           
  3163  0070                     ?_LCD_Initialize:	
  3164                           ; 1 bytes @ 0x0
  3165                           
  3166  0070                     ?_PIN_MANAGER_Initialize:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169  0070                     ?_EUSART_Initialize:	
  3170                           ; 1 bytes @ 0x0
  3171                           
  3172  0070                     ?_FVR_Initialize:	
  3173                           ; 1 bytes @ 0x0
  3174                           
  3175  0070                     ?_I2C_Initialize:	
  3176                           ; 1 bytes @ 0x0
  3177                           
  3178  0070                     ?_I2C_MasterOperation:	
  3179                           ; 1 bytes @ 0x0
  3180                           
  3181  0070                     ?_SYSTEM_Initialize:	
  3182                           ; 1 bytes @ 0x0
  3183                           
  3184  0070                     ?_TMR1_WriteTimer:	
  3185                           ; 1 bytes @ 0x0
  3186                           
  3187  0070                     ?_CCP4_CaptureISR:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0070                     ?_INTERRUPT_InterruptManager:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0070                     ?_main:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0070                     ?_getMode:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0070                     TMR1_WriteTimer@timerVal:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202                           
  3203                           ; 2 bytes @ 0x0
  3204  0070                     	ds	1
  3205  0071                     ??_EUSART_Receive_ISR:
  3206  0071                     ??_EUSART_DefaultErrorHandler:	
  3207                           ; 1 bytes @ 0x1
  3208                           
  3209                           
  3210                           ; 1 bytes @ 0x1
  3211  0071                     	ds	1
  3212  0072                     ?_CCP4_CallBack@main$F1925:
  3213  0072                     ??_TMR1_WriteTimer:	
  3214                           ; 1 bytes @ 0x2
  3215                           
  3216  0072                     ?_CCP4_DefaultCallBack:	
  3217                           ; 1 bytes @ 0x2
  3218                           
  3219  0072                     CCP4_DefaultCallBack@capturedValue:	
  3220                           ; 1 bytes @ 0x2
  3221                           
  3222  0072                     CCP4_CallBack@main$F1923@capturedValue:	
  3223                           ; 2 bytes @ 0x2
  3224                           
  3225                           
  3226                           ; 2 bytes @ 0x2
  3227  0072                     	ds	2
  3228  0074                     ??_CCP4_CallBack@main$F1927:
  3229  0074                     ??_CCP4_DefaultCallBack:	
  3230                           ; 1 bytes @ 0x4
  3231                           
  3232                           
  3233                           ; 1 bytes @ 0x4
  3234  0074                     	ds	4
  3235  0078                     ??_CCP4_CaptureISR:
  3236                           
  3237                           ; 1 bytes @ 0x8
  3238  0078                     	ds	1
  3239  0079                     CCP4_CaptureISR@module:
  3240                           
  3241                           ; 2 bytes @ 0x9
  3242  0079                     	ds	2
  3243  007B                     ??_INTERRUPT_InterruptManager:
  3244                           
  3245                           	psect	cstackBANK0
  3246  0020                     __pcstackBANK0:	
  3247                           ; 1 bytes @ 0xB
  3248                           
  3249  0020                     ??_I2C_Open:
  3250  0020                     ?_I2C_SetBuffer:	
  3251                           ; 1 bytes @ 0x0
  3252                           
  3253  0020                     ??_I2C_Close:	
  3254                           ; 1 bytes @ 0x0
  3255                           
  3256  0020                     ?_EUSART_SetRxInterruptHandler:	
  3257                           ; 1 bytes @ 0x0
  3258                           
  3259  0020                     ?_EUSART_SetTxInterruptHandler:	
  3260                           ; 1 bytes @ 0x0
  3261                           
  3262  0020                     ?_EUSART_SetFramingErrorHandler:	
  3263                           ; 1 bytes @ 0x0
  3264                           
  3265  0020                     ?_EUSART_SetOverrunErrorHandler:	
  3266                           ; 1 bytes @ 0x0
  3267                           
  3268  0020                     ?_EUSART_SetErrorHandler:	
  3269                           ; 1 bytes @ 0x0
  3270                           
  3271  0020                     ??_I2C_DO_IDLE:	
  3272                           ; 1 bytes @ 0x0
  3273                           
  3274  0020                     ??_I2C_DO_SEND_ADR_READ:	
  3275                           ; 1 bytes @ 0x0
  3276                           
  3277  0020                     ??_I2C_DO_RCEN:	
  3278                           ; 1 bytes @ 0x0
  3279                           
  3280  0020                     ??_I2C_DO_SEND_RESTART_READ:	
  3281                           ; 1 bytes @ 0x0
  3282                           
  3283  0020                     ??_I2C_DO_SEND_RESTART_WRITE:	
  3284                           ; 1 bytes @ 0x0
  3285                           
  3286  0020                     ??_I2C_DO_SEND_RESTART:	
  3287                           ; 1 bytes @ 0x0
  3288                           
  3289  0020                     ??_I2C_DO_SEND_STOP:	
  3290                           ; 1 bytes @ 0x0
  3291                           
  3292  0020                     ??_I2C_DO_RX_ACK:	
  3293                           ; 1 bytes @ 0x0
  3294                           
  3295  0020                     ??_I2C_DO_RX_NACK_STOP:	
  3296                           ; 1 bytes @ 0x0
  3297                           
  3298  0020                     ??_I2C_DO_RX_NACK_RESTART:	
  3299                           ; 1 bytes @ 0x0
  3300                           
  3301  0020                     ??_I2C_DO_RESET:	
  3302                           ; 1 bytes @ 0x0
  3303                           
  3304  0020                     ??_I2C_MasterClearIrq:	
  3305                           ; 1 bytes @ 0x0
  3306                           
  3307  0020                     ??_I2C_MasterOpen:	
  3308                           ; 1 bytes @ 0x0
  3309                           
  3310  0020                     ??_I2C_MasterDisableIrq:	
  3311                           ; 1 bytes @ 0x0
  3312                           
  3313  0020                     ??_I2C_MasterClose:	
  3314                           ; 1 bytes @ 0x0
  3315                           
  3316  0020                     ??_I2C_MasterStart:	
  3317                           ; 1 bytes @ 0x0
  3318                           
  3319  0020                     ?_I2C_SetCallback:	
  3320                           ; 1 bytes @ 0x0
  3321                           
  3322  0020                     ??_I2C_MasterWaitForEvent:	
  3323                           ; 1 bytes @ 0x0
  3324                           
  3325  0020                     ??_I2C_MasterIsNack:	
  3326                           ; 1 bytes @ 0x0
  3327                           
  3328  0020                     ??_I2C_MasterSendTxData:	
  3329                           ; 1 bytes @ 0x0
  3330                           
  3331  0020                     ??_I2C_MasterGetRxData:	
  3332                           ; 1 bytes @ 0x0
  3333                           
  3334  0020                     ??_I2C_MasterSendAck:	
  3335                           ; 1 bytes @ 0x0
  3336                           
  3337  0020                     ??_I2C_MasterStartRx:	
  3338                           ; 1 bytes @ 0x0
  3339                           
  3340  0020                     ??_I2C_MasterSetIrq:	
  3341                           ; 1 bytes @ 0x0
  3342                           
  3343  0020                     ??_I2C_MasterEnableRestart:	
  3344                           ; 1 bytes @ 0x0
  3345                           
  3346  0020                     ??_I2C_MasterStop:	
  3347                           ; 1 bytes @ 0x0
  3348                           
  3349  0020                     ??_I2C_MasterSendNack:	
  3350                           ; 1 bytes @ 0x0
  3351                           
  3352  0020                     ??_OSCILLATOR_Initialize:	
  3353                           ; 1 bytes @ 0x0
  3354                           
  3355  0020                     ??_WDT_Initialize:	
  3356                           ; 1 bytes @ 0x0
  3357                           
  3358  0020                     ??_DAC_Initialize:	
  3359                           ; 1 bytes @ 0x0
  3360                           
  3361  0020                     ??_TMR1_Initialize:	
  3362                           ; 1 bytes @ 0x0
  3363                           
  3364  0020                     ??_TMR0_Initialize:	
  3365                           ; 1 bytes @ 0x0
  3366                           
  3367  0020                     ?_CCP4_SetCallBack:	
  3368                           ; 1 bytes @ 0x0
  3369                           
  3370  0020                     ??_LCD_Digit4Num:	
  3371                           ; 1 bytes @ 0x0
  3372                           
  3373  0020                     ??_LCD_Digit1Num:	
  3374                           ; 1 bytes @ 0x0
  3375                           
  3376  0020                     ??_LCD_Digit2Num:	
  3377                           ; 1 bytes @ 0x0
  3378                           
  3379  0020                     ??_LCD_Digit3Num:	
  3380                           ; 1 bytes @ 0x0
  3381                           
  3382  0020                     ??_reverseBits:	
  3383                           ; 1 bytes @ 0x0
  3384                           
  3385  0020                     ??_resetGestureParameters:	
  3386                           ; 1 bytes @ 0x0
  3387                           
  3388  0020                     ??_LCD_Initialize:	
  3389                           ; 1 bytes @ 0x0
  3390                           
  3391  0020                     ??_PIN_MANAGER_Initialize:	
  3392                           ; 1 bytes @ 0x0
  3393                           
  3394  0020                     ??_FVR_Initialize:	
  3395                           ; 1 bytes @ 0x0
  3396                           
  3397  0020                     ??_I2C_Initialize:	
  3398                           ; 1 bytes @ 0x0
  3399                           
  3400  0020                     ?_abs:	
  3401                           ; 1 bytes @ 0x0
  3402                           
  3403  0020                     ?___wmul:	
  3404                           ; 2 bytes @ 0x0
  3405                           
  3406  0020                     ?___lwdiv:	
  3407                           ; 2 bytes @ 0x0
  3408                           
  3409  0020                     ?___lwmod:	
  3410                           ; 2 bytes @ 0x0
  3411                           
  3412  0020                     I2C_Open@address:	
  3413                           ; 2 bytes @ 0x0
  3414                           
  3415  0020                     I2C_MasterSendTxData@data:	
  3416                           ; 1 bytes @ 0x0
  3417                           
  3418  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3419                           ; 1 bytes @ 0x0
  3420                           
  3421  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3422                           ; 2 bytes @ 0x0
  3423                           
  3424  0020                     EUSART_SetErrorHandler@interruptHandler:	
  3425                           ; 2 bytes @ 0x0
  3426                           
  3427  0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3428                           ; 2 bytes @ 0x0
  3429                           
  3430  0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3431                           ; 2 bytes @ 0x0
  3432                           
  3433  0020                     I2C_SetBuffer@buffer:	
  3434                           ; 2 bytes @ 0x0
  3435                           
  3436  0020                     I2C_SetCallback@cb:	
  3437                           ; 2 bytes @ 0x0
  3438                           
  3439  0020                     CCP4_SetCallBack@customCallBack:	
  3440                           ; 2 bytes @ 0x0
  3441                           
  3442  0020                     ___wmul@multiplier:	
  3443                           ; 2 bytes @ 0x0
  3444                           
  3445  0020                     ___lwdiv@divisor:	
  3446                           ; 2 bytes @ 0x0
  3447                           
  3448  0020                     ___lwmod@divisor:	
  3449                           ; 2 bytes @ 0x0
  3450                           
  3451  0020                     abs@a:	
  3452                           ; 2 bytes @ 0x0
  3453                           
  3454                           
  3455                           ; 2 bytes @ 0x0
  3456  0020                     	ds	1
  3457  0021                     ??_I2C_DO_SEND_ADR_WRITE:
  3458  0021                     I2C_Open@returnValue:	
  3459                           ; 1 bytes @ 0x1
  3460                           
  3461  0021                     I2C_Close@returnValue:	
  3462                           ; 1 bytes @ 0x1
  3463                           
  3464                           
  3465                           ; 1 bytes @ 0x1
  3466  0021                     	ds	1
  3467  0022                     ??_EUSART_SetRxInterruptHandler:
  3468  0022                     ??_EUSART_SetTxInterruptHandler:	
  3469                           ; 1 bytes @ 0x2
  3470                           
  3471  0022                     ??_EUSART_SetFramingErrorHandler:	
  3472                           ; 1 bytes @ 0x2
  3473                           
  3474  0022                     ??_EUSART_SetOverrunErrorHandler:	
  3475                           ; 1 bytes @ 0x2
  3476                           
  3477  0022                     ??_EUSART_SetErrorHandler:	
  3478                           ; 1 bytes @ 0x2
  3479                           
  3480  0022                     ??_CCP4_Initialize:	
  3481                           ; 1 bytes @ 0x2
  3482                           
  3483  0022                     ??_CCP4_SetCallBack:	
  3484                           ; 1 bytes @ 0x2
  3485                           
  3486  0022                     ??_abs:	
  3487                           ; 1 bytes @ 0x2
  3488                           
  3489  0022                     ??_EUSART_Initialize:	
  3490                           ; 1 bytes @ 0x2
  3491                           
  3492  0022                     LCD_Digit1Num@num:	
  3493                           ; 1 bytes @ 0x2
  3494                           
  3495  0022                     LCD_Digit2Num@num:	
  3496                           ; 1 bytes @ 0x2
  3497                           
  3498  0022                     LCD_Digit3Num@num:	
  3499                           ; 1 bytes @ 0x2
  3500                           
  3501  0022                     LCD_Digit4Num@num:	
  3502                           ; 1 bytes @ 0x2
  3503                           
  3504  0022                     I2C_SetBuffer@bufferSize:	
  3505                           ; 1 bytes @ 0x2
  3506                           
  3507  0022                     I2C_SetCallback@ptr:	
  3508                           ; 2 bytes @ 0x2
  3509                           
  3510  0022                     ___wmul@multiplicand:	
  3511                           ; 2 bytes @ 0x2
  3512                           
  3513  0022                     ___lwdiv@dividend:	
  3514                           ; 2 bytes @ 0x2
  3515                           
  3516  0022                     ___lwmod@dividend:	
  3517                           ; 2 bytes @ 0x2
  3518                           
  3519                           
  3520                           ; 2 bytes @ 0x2
  3521  0022                     	ds	1
  3522  0023                     ??_SYSTEM_Initialize:
  3523  0023                     reverseBits@b:	
  3524                           ; 1 bytes @ 0x3
  3525                           
  3526                           
  3527                           ; 1 bytes @ 0x3
  3528  0023                     	ds	1
  3529  0024                     ??_I2C_SetBuffer:
  3530  0024                     ??_I2C_SetCallback:	
  3531                           ; 1 bytes @ 0x4
  3532                           
  3533  0024                     ??_decodeGesture:	
  3534                           ; 1 bytes @ 0x4
  3535                           
  3536  0024                     ??___wmul:	
  3537                           ; 1 bytes @ 0x4
  3538                           
  3539  0024                     ??___lwdiv:	
  3540                           ; 1 bytes @ 0x4
  3541                           
  3542  0024                     ??___lwmod:	
  3543                           ; 1 bytes @ 0x4
  3544                           
  3545  0024                     ___wmul@product:	
  3546                           ; 1 bytes @ 0x4
  3547                           
  3548                           
  3549                           ; 2 bytes @ 0x4
  3550  0024                     	ds	1
  3551  0025                     ___lwmod@counter:
  3552  0025                     ___lwdiv@quotient:	
  3553                           ; 1 bytes @ 0x5
  3554                           
  3555                           
  3556                           ; 2 bytes @ 0x5
  3557  0025                     	ds	1
  3558  0026                     ?___awdiv:
  3559  0026                     ___awdiv@divisor:	
  3560                           ; 2 bytes @ 0x6
  3561                           
  3562                           
  3563                           ; 2 bytes @ 0x6
  3564  0026                     	ds	1
  3565  0027                     ___lwdiv@counter:
  3566                           
  3567                           ; 1 bytes @ 0x7
  3568  0027                     	ds	1
  3569  0028                     ?_intToBCD:
  3570  0028                     I2C_SetCallback@idx:	
  3571                           ; 2 bytes @ 0x8
  3572                           
  3573  0028                     intToBCD@binaryInput:	
  3574                           ; 1 bytes @ 0x8
  3575                           
  3576  0028                     ___awdiv@dividend:	
  3577                           ; 2 bytes @ 0x8
  3578                           
  3579                           
  3580                           ; 2 bytes @ 0x8
  3581  0028                     	ds	1
  3582  0029                     ?_I2C_SetDataCompleteCallback:
  3583  0029                     ?_I2C_SetAddressNackCallback:	
  3584                           ; 1 bytes @ 0x9
  3585                           
  3586  0029                     I2C_SetDataCompleteCallback@cb:	
  3587                           ; 1 bytes @ 0x9
  3588                           
  3589  0029                     I2C_SetAddressNackCallback@cb:	
  3590                           ; 2 bytes @ 0x9
  3591                           
  3592                           
  3593                           ; 2 bytes @ 0x9
  3594  0029                     	ds	1
  3595  002A                     ??_intToBCD:
  3596  002A                     ??___awdiv:	
  3597                           ; 1 bytes @ 0xA
  3598                           
  3599                           
  3600                           ; 1 bytes @ 0xA
  3601  002A                     	ds	1
  3602  002B                     I2C_SetAddressNackCallback@ptr:
  3603  002B                     ___awdiv@counter:	
  3604                           ; 1 bytes @ 0xB
  3605                           
  3606  002B                     I2C_SetDataCompleteCallback@ptr:	
  3607                           ; 1 bytes @ 0xB
  3608                           
  3609                           
  3610                           ; 2 bytes @ 0xB
  3611  002B                     	ds	1
  3612  002C                     ??_I2C_SetAddressNackCallback:
  3613  002C                     ___awdiv@sign:	
  3614                           ; 1 bytes @ 0xC
  3615                           
  3616                           
  3617                           ; 1 bytes @ 0xC
  3618  002C                     	ds	1
  3619  002D                     ??_I2C_SetDataCompleteCallback:
  3620  002D                     ?_rd1RegCompleteHandler:	
  3621                           ; 1 bytes @ 0xD
  3622                           
  3623  002D                     ?_rd2RegCompleteHandler:	
  3624                           ; 1 bytes @ 0xD
  3625                           
  3626  002D                     ?_wr1RegCompleteHandler:	
  3627                           ; 1 bytes @ 0xD
  3628                           
  3629  002D                     ?_wr2RegCompleteHandler:	
  3630                           ; 1 bytes @ 0xD
  3631                           
  3632  002D                     ?_rdBlkRegCompleteHandler:	
  3633                           ; 1 bytes @ 0xD
  3634                           
  3635  002D                     ?_I2C_CallbackReturnStop:	
  3636                           ; 1 bytes @ 0xD
  3637                           
  3638  002D                     ?_I2C_CallbackReturnReset:	
  3639                           ; 1 bytes @ 0xD
  3640                           
  3641  002D                     ?_wr1RegCompleteHandler@i2c_simple_master$F2173:	
  3642                           ; 1 bytes @ 0xD
  3643                           
  3644  002D                     ?_rd1RegCompleteHandler@i2c_simple_master$F2183:	
  3645                           ; 1 bytes @ 0xD
  3646                           
  3647  002D                     ?_rd2RegCompleteHandler@i2c_simple_master$F2191:	
  3648                           ; 1 bytes @ 0xD
  3649                           
  3650  002D                     ?_wr2RegCompleteHandler@i2c_simple_master$F2197:	
  3651                           ; 1 bytes @ 0xD
  3652                           
  3653  002D                     ?_rdBlkRegCompleteHandler@i2c_simple_master$F2203:	
  3654                           ; 1 bytes @ 0xD
  3655                           
  3656  002D                     rd1RegCompleteHandler@ptr:	
  3657                           ; 1 bytes @ 0xD
  3658                           
  3659  002D                     rd2RegCompleteHandler@ptr:	
  3660                           ; 2 bytes @ 0xD
  3661                           
  3662  002D                     wr1RegCompleteHandler@ptr:	
  3663                           ; 2 bytes @ 0xD
  3664                           
  3665  002D                     wr2RegCompleteHandler@ptr:	
  3666                           ; 2 bytes @ 0xD
  3667                           
  3668  002D                     rdBlkRegCompleteHandler@ptr:	
  3669                           ; 2 bytes @ 0xD
  3670                           
  3671  002D                     I2C_CallbackReturnStop@funPtr:	
  3672                           ; 2 bytes @ 0xD
  3673                           
  3674  002D                     I2C_CallbackReturnReset@funPtr:	
  3675                           ; 2 bytes @ 0xD
  3676                           
  3677  002D                     intToBCD@bcdResult:	
  3678                           ; 2 bytes @ 0xD
  3679                           
  3680  002D                     wr1RegCompleteHandler@i2c_simple_master$F2173@p:	
  3681                           ; 2 bytes @ 0xD
  3682                           
  3683  002D                     rd1RegCompleteHandler@i2c_simple_master$F2183@p:	
  3684                           ; 2 bytes @ 0xD
  3685                           
  3686  002D                     rd2RegCompleteHandler@i2c_simple_master$F2191@p:	
  3687                           ; 2 bytes @ 0xD
  3688                           
  3689  002D                     wr2RegCompleteHandler@i2c_simple_master$F2197@p:	
  3690                           ; 2 bytes @ 0xD
  3691                           
  3692  002D                     rdBlkRegCompleteHandler@i2c_simple_master$F2203@p:	
  3693                           ; 2 bytes @ 0xD
  3694                           
  3695  002D                     ___awdiv@quotient:	
  3696                           ; 2 bytes @ 0xD
  3697                           
  3698                           
  3699                           ; 2 bytes @ 0xD
  3700  002D                     	ds	2
  3701  002F                     ??_rd1RegCompleteHandler:
  3702  002F                     ??_rd2RegCompleteHandler:	
  3703                           ; 1 bytes @ 0xF
  3704                           
  3705  002F                     ??_wr1RegCompleteHandler:	
  3706                           ; 1 bytes @ 0xF
  3707                           
  3708  002F                     ??_wr2RegCompleteHandler:	
  3709                           ; 1 bytes @ 0xF
  3710                           
  3711  002F                     ??_rdBlkRegCompleteHandler:	
  3712                           ; 1 bytes @ 0xF
  3713                           
  3714  002F                     ??_I2C_DO_TX:	
  3715                           ; 1 bytes @ 0xF
  3716                           
  3717  002F                     ??_I2C_DO_RX:	
  3718                           ; 1 bytes @ 0xF
  3719                           
  3720  002F                     ??_I2C_DO_TX_EMPTY:	
  3721                           ; 1 bytes @ 0xF
  3722                           
  3723  002F                     ??_I2C_DO_ADDRESS_NACK:	
  3724                           ; 1 bytes @ 0xF
  3725                           
  3726  002F                     ??_I2C_CallbackReturnStop:	
  3727                           ; 1 bytes @ 0xF
  3728                           
  3729  002F                     ??_I2C_CallbackReturnReset:	
  3730                           ; 1 bytes @ 0xF
  3731                           
  3732  002F                     ??_processGestureData:	
  3733                           ; 1 bytes @ 0xF
  3734                           
  3735  002F                     ??_wr1RegCompleteHandler@i2c_simple_master$F2173:	
  3736                           ; 1 bytes @ 0xF
  3737                           
  3738  002F                     ??_rd1RegCompleteHandler@i2c_simple_master$F2183:	
  3739                           ; 1 bytes @ 0xF
  3740                           
  3741  002F                     ??_rd2RegCompleteHandler@i2c_simple_master$F2191:	
  3742                           ; 1 bytes @ 0xF
  3743                           
  3744  002F                     ??_wr2RegCompleteHandler@i2c_simple_master$F2197:	
  3745                           ; 1 bytes @ 0xF
  3746                           
  3747  002F                     ??_rdBlkRegCompleteHandler@i2c_simple_master$F2203:	
  3748                           ; 1 bytes @ 0xF
  3749                           
  3750  002F                     intToBCD@shift:	
  3751                           ; 1 bytes @ 0xF
  3752                           
  3753                           
  3754                           ; 2 bytes @ 0xF
  3755  002F                     	ds	2
  3756  0031                     ??_I2C_MasterFsm:
  3757                           
  3758                           ; 1 bytes @ 0x11
  3759  0031                     	ds	1
  3760  0032                     processGestureData@ud_ratio_first:
  3761                           
  3762                           ; 2 bytes @ 0x12
  3763  0032                     	ds	2
  3764  0034                     ??_I2C_Poller:
  3765  0034                     ??_I2C_MasterOperation:	
  3766                           ; 1 bytes @ 0x14
  3767                           
  3768  0034                     I2C_MasterOperation@read:	
  3769                           ; 1 bytes @ 0x14
  3770                           
  3771  0034                     processGestureData@lr_ratio_first:	
  3772                           ; 1 bytes @ 0x14
  3773                           
  3774                           
  3775                           ; 2 bytes @ 0x14
  3776  0034                     	ds	1
  3777  0035                     I2C_MasterOperation@returnValue:
  3778                           
  3779                           ; 1 bytes @ 0x15
  3780  0035                     	ds	1
  3781  0036                     ??_I2C_MasterWrite:
  3782  0036                     ?_i2c_write1ByteRegister:	
  3783                           ; 1 bytes @ 0x16
  3784                           
  3785  0036                     ?_i2c_read1ByteRegister:	
  3786                           ; 1 bytes @ 0x16
  3787                           
  3788  0036                     ?_i2c_readDataBlock:	
  3789                           ; 1 bytes @ 0x16
  3790                           
  3791  0036                     i2c_write1ByteRegister@reg:	
  3792                           ; 1 bytes @ 0x16
  3793                           
  3794  0036                     i2c_read1ByteRegister@reg:	
  3795                           ; 1 bytes @ 0x16
  3796                           
  3797  0036                     i2c_readDataBlock@reg:	
  3798                           ; 1 bytes @ 0x16
  3799                           
  3800  0036                     processGestureData@ud_ratio_last:	
  3801                           ; 1 bytes @ 0x16
  3802                           
  3803                           
  3804                           ; 2 bytes @ 0x16
  3805  0036                     	ds	1
  3806  0037                     ??_i2c_read1ByteRegister:
  3807  0037                     i2c_write1ByteRegister@data:	
  3808                           ; 1 bytes @ 0x17
  3809                           
  3810  0037                     i2c_readDataBlock@data:	
  3811                           ; 1 bytes @ 0x17
  3812                           
  3813                           
  3814                           ; 2 bytes @ 0x17
  3815  0037                     	ds	1
  3816  0038                     ??_i2c_write1ByteRegister:
  3817  0038                     i2c_write1ByteRegister@address:	
  3818                           ; 1 bytes @ 0x18
  3819                           
  3820  0038                     i2c_read1ByteRegister@address:	
  3821                           ; 1 bytes @ 0x18
  3822                           
  3823  0038                     processGestureData@lr_ratio_last:	
  3824                           ; 1 bytes @ 0x18
  3825                           
  3826                           
  3827                           ; 2 bytes @ 0x18
  3828  0038                     	ds	1
  3829  0039                     ?_wireWriteDataByte:
  3830  0039                     i2c_read1ByteRegister@e:	
  3831                           ; 1 bytes @ 0x19
  3832                           
  3833  0039                     wireWriteDataByte@val:	
  3834                           ; 1 bytes @ 0x19
  3835                           
  3836  0039                     i2c_readDataBlock@len:	
  3837                           ; 1 bytes @ 0x19
  3838                           
  3839                           
  3840                           ; 2 bytes @ 0x19
  3841  0039                     	ds	1
  3842  003A                     ??_wireWriteDataByte:
  3843  003A                     processGestureData@u_last:	
  3844                           ; 1 bytes @ 0x1A
  3845                           
  3846  003A                     i2c_read1ByteRegister@x:	
  3847                           ; 1 bytes @ 0x1A
  3848                           
  3849                           
  3850                           ; 2 bytes @ 0x1A
  3851  003A                     	ds	1
  3852  003B                     ??_i2c_readDataBlock:
  3853  003B                     i2c_readDataBlock@address:	
  3854                           ; 1 bytes @ 0x1B
  3855                           
  3856  003B                     processGestureData@d_last:	
  3857                           ; 1 bytes @ 0x1B
  3858                           
  3859                           
  3860                           ; 1 bytes @ 0x1B
  3861  003B                     	ds	1
  3862  003C                     i2c_read1ByteRegister@d2:
  3863  003C                     processGestureData@l_last:	
  3864                           ; 1 bytes @ 0x1C
  3865                           
  3866  003C                     wireWriteDataByte@reg:	
  3867                           ; 1 bytes @ 0x1C
  3868                           
  3869  003C                     i2c_readDataBlock@d:	
  3870                           ; 1 bytes @ 0x1C
  3871                           
  3872                           
  3873                           ; 4 bytes @ 0x1C
  3874  003C                     	ds	1
  3875  003D                     ??_wireReadDataByte:
  3876  003D                     ??_setProxIntLowThresh:	
  3877                           ; 1 bytes @ 0x1D
  3878                           
  3879  003D                     ??_setProxIntHighThresh:	
  3880                           ; 1 bytes @ 0x1D
  3881                           
  3882  003D                     ?_setLightIntLowThreshold:	
  3883                           ; 1 bytes @ 0x1D
  3884                           
  3885  003D                     ?_setLightIntHighThreshold:	
  3886                           ; 1 bytes @ 0x1D
  3887                           
  3888  003D                     ??_setGestureEnterThresh:	
  3889                           ; 1 bytes @ 0x1D
  3890                           
  3891  003D                     ??_setGestureExitThresh:	
  3892                           ; 1 bytes @ 0x1D
  3893                           
  3894  003D                     processGestureData@r_last:	
  3895                           ; 1 bytes @ 0x1D
  3896                           
  3897  003D                     setLightIntLowThreshold@threshold:	
  3898                           ; 1 bytes @ 0x1D
  3899                           
  3900  003D                     setLightIntHighThreshold@threshold:	
  3901                           ; 2 bytes @ 0x1D
  3902                           
  3903                           
  3904                           ; 2 bytes @ 0x1D
  3905  003D                     	ds	1
  3906  003E                     processGestureData@u_first:
  3907  003E                     setProxIntLowThresh@threshold:	
  3908                           ; 1 bytes @ 0x1E
  3909                           
  3910  003E                     setProxIntHighThresh@threshold:	
  3911                           ; 1 bytes @ 0x1E
  3912                           
  3913  003E                     setGestureEnterThresh@threshold:	
  3914                           ; 1 bytes @ 0x1E
  3915                           
  3916  003E                     setGestureExitThresh@threshold:	
  3917                           ; 1 bytes @ 0x1E
  3918                           
  3919  003E                     wireReadDataByte@reg:	
  3920                           ; 1 bytes @ 0x1E
  3921                           
  3922                           
  3923                           ; 1 bytes @ 0x1E
  3924  003E                     	ds	1
  3925  003F                     ??_readProximity:
  3926  003F                     ??_isGestureAvailable:	
  3927                           ; 1 bytes @ 0x1F
  3928                           
  3929  003F                     ??_setLEDDrive:	
  3930                           ; 1 bytes @ 0x1F
  3931                           
  3932  003F                     ??_setProximityGain:	
  3933                           ; 1 bytes @ 0x1F
  3934                           
  3935  003F                     ??_setAmbientLightGain:	
  3936                           ; 1 bytes @ 0x1F
  3937                           
  3938  003F                     ??_setLightIntLowThreshold:	
  3939                           ; 1 bytes @ 0x1F
  3940                           
  3941  003F                     ??_setLightIntHighThreshold:	
  3942                           ; 1 bytes @ 0x1F
  3943                           
  3944  003F                     ??_setGestureGain:	
  3945                           ; 1 bytes @ 0x1F
  3946                           
  3947  003F                     ??_setGestureLEDDrive:	
  3948                           ; 1 bytes @ 0x1F
  3949                           
  3950  003F                     ??_setGestureWaitTime:	
  3951                           ; 1 bytes @ 0x1F
  3952                           
  3953  003F                     ??_setGestureIntEnable:	
  3954                           ; 1 bytes @ 0x1F
  3955                           
  3956  003F                     ??_setProximityIntEnable:	
  3957                           ; 1 bytes @ 0x1F
  3958                           
  3959  003F                     ??_getMode:	
  3960                           ; 1 bytes @ 0x1F
  3961                           
  3962  003F                     processGestureData@d_first:	
  3963                           ; 1 bytes @ 0x1F
  3964                           
  3965                           
  3966                           ; 1 bytes @ 0x1F
  3967  003F                     	ds	1
  3968  0040                     ?_wireReadDataBlock:
  3969  0040                     getMode@enable_value:	
  3970                           ; 2 bytes @ 0x20
  3971                           
  3972  0040                     isGestureAvailable@val:	
  3973                           ; 1 bytes @ 0x20
  3974                           
  3975  0040                     readProximity@val:	
  3976                           ; 1 bytes @ 0x20
  3977                           
  3978  0040                     processGestureData@l_first:	
  3979                           ; 1 bytes @ 0x20
  3980                           
  3981  0040                     setAmbientLightGain@drive:	
  3982                           ; 1 bytes @ 0x20
  3983                           
  3984  0040                     setGestureWaitTime@time:	
  3985                           ; 1 bytes @ 0x20
  3986                           
  3987  0040                     setLightIntLowThreshold@val_low:	
  3988                           ; 1 bytes @ 0x20
  3989                           
  3990  0040                     setLightIntHighThreshold@val_low:	
  3991                           ; 1 bytes @ 0x20
  3992                           
  3993  0040                     setGestureIntEnable@val:	
  3994                           ; 1 bytes @ 0x20
  3995                           
  3996  0040                     wireReadDataBlock@val:	
  3997                           ; 1 bytes @ 0x20
  3998                           
  3999                           
  4000                           ; 2 bytes @ 0x20
  4001  0040                     	ds	1
  4002  0041                     ?_setMode:
  4003  0041                     setMode@enable:	
  4004                           ; 1 bytes @ 0x21
  4005                           
  4006  0041                     processGestureData@r_first:	
  4007                           ; 1 bytes @ 0x21
  4008                           
  4009  0041                     setLEDDrive@val:	
  4010                           ; 1 bytes @ 0x21
  4011                           
  4012  0041                     setProximityGain@val:	
  4013                           ; 1 bytes @ 0x21
  4014                           
  4015  0041                     setAmbientLightGain@val:	
  4016                           ; 1 bytes @ 0x21
  4017                           
  4018  0041                     setGestureGain@val:	
  4019                           ; 1 bytes @ 0x21
  4020                           
  4021  0041                     setGestureLEDDrive@val:	
  4022                           ; 1 bytes @ 0x21
  4023                           
  4024  0041                     setGestureWaitTime@val:	
  4025                           ; 1 bytes @ 0x21
  4026                           
  4027  0041                     setLightIntLowThreshold@val_high:	
  4028                           ; 1 bytes @ 0x21
  4029                           
  4030  0041                     setLightIntHighThreshold@val_high:	
  4031                           ; 1 bytes @ 0x21
  4032                           
  4033  0041                     setProximityIntEnable@val:	
  4034                           ; 1 bytes @ 0x21
  4035                           
  4036  0041                     setGestureIntEnable@enable:	
  4037                           ; 1 bytes @ 0x21
  4038                           
  4039                           
  4040                           ; 1 bytes @ 0x21
  4041  0041                     	ds	1
  4042  0042                     ??_setMode:
  4043  0042                     setLEDDrive@drive:	
  4044                           ; 1 bytes @ 0x22
  4045                           
  4046  0042                     setProximityGain@drive:	
  4047                           ; 1 bytes @ 0x22
  4048                           
  4049  0042                     setGestureGain@gain:	
  4050                           ; 1 bytes @ 0x22
  4051                           
  4052  0042                     setGestureLEDDrive@drive:	
  4053                           ; 1 bytes @ 0x22
  4054                           
  4055  0042                     setProximityIntEnable@enable:	
  4056                           ; 1 bytes @ 0x22
  4057                           
  4058  0042                     processGestureData@ud_delta:	
  4059                           ; 1 bytes @ 0x22
  4060                           
  4061  0042                     wireReadDataBlock@len:	
  4062                           ; 2 bytes @ 0x22
  4063                           
  4064                           
  4065                           ; 2 bytes @ 0x22
  4066  0042                     	ds	2
  4067  0044                     ??_wireReadDataBlock:
  4068  0044                     setMode@reg_val:	
  4069                           ; 1 bytes @ 0x24
  4070                           
  4071  0044                     processGestureData@lr_delta:	
  4072                           ; 1 bytes @ 0x24
  4073                           
  4074                           
  4075                           ; 2 bytes @ 0x24
  4076  0044                     	ds	1
  4077  0045                     setMode@mode:
  4078                           
  4079                           ; 1 bytes @ 0x25
  4080  0045                     	ds	1
  4081  0046                     ??_APDS9960Init:
  4082  0046                     ??_enableProximitySensor:	
  4083                           ; 1 bytes @ 0x26
  4084                           
  4085  0046                     ??_enablePower:	
  4086                           ; 1 bytes @ 0x26
  4087                           
  4088  0046                     enableProximitySensor@interrupts:	
  4089                           ; 1 bytes @ 0x26
  4090                           
  4091  0046                     wireReadDataBlock@reg:	
  4092                           ; 1 bytes @ 0x26
  4093                           
  4094  0046                     processGestureData@i:	
  4095                           ; 1 bytes @ 0x26
  4096                           
  4097                           
  4098                           ; 2 bytes @ 0x26
  4099  0046                     	ds	1
  4100  0047                     APDS9960Init@id:
  4101  0047                     wireReadDataBlock@i:	
  4102                           ; 1 bytes @ 0x27
  4103                           
  4104                           
  4105                           ; 1 bytes @ 0x27
  4106  0047                     	ds	1
  4107  0048                     ?_readGesture:
  4108                           
  4109                           ; 2 bytes @ 0x28
  4110  0048                     	ds	2
  4111  004A                     ??_readGesture:
  4112                           
  4113                           ; 1 bytes @ 0x2A
  4114  004A                     	ds	9
  4115  0053                     readGesture@motion:
  4116                           
  4117                           ; 2 bytes @ 0x33
  4118  0053                     	ds	2
  4119  0055                     readGesture@gstatus:
  4120                           
  4121                           ; 1 bytes @ 0x35
  4122  0055                     	ds	1
  4123  0056                     readGesture@fifo_level:
  4124                           
  4125                           ; 1 bytes @ 0x36
  4126  0056                     	ds	1
  4127  0057                     readGesture@bytes_read:
  4128                           
  4129                           ; 1 bytes @ 0x37
  4130  0057                     	ds	1
  4131  0058                     readGesture@i:
  4132                           
  4133                           ; 2 bytes @ 0x38
  4134  0058                     	ds	2
  4135  005A                     ??_main:
  4136                           
  4137                           ; 1 bytes @ 0x3A
  4138  005A                     	ds	2
  4139  005C                     main@temp_num:
  4140                           
  4141                           ; 2 bytes @ 0x3C
  4142  005C                     	ds	2
  4143  005E                     main@temp8:
  4144                           
  4145                           ; 1 bytes @ 0x3E
  4146  005E                     	ds	1
  4147  005F                     main@bcd_num:
  4148                           
  4149                           ; 2 bytes @ 0x3F
  4150  005F                     	ds	2
  4151                           
  4152                           	psect	maintext
  4153  0E27                     __pmaintext:	
  4154 ;;
  4155 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4156 ;;
  4157 ;; *************** function _main *****************
  4158 ;; Defined at:
  4159 ;;		line 70 in file "main.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;		None
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  bcd_num         2   63[BANK0 ] unsigned short 
  4164 ;;  temp_num        2   60[BANK0 ] unsigned short 
  4165 ;;  temp8           1   62[BANK0 ] unsigned char 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      void 
  4168 ;; Registers used:
  4169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4170 ;; Tracked objects:
  4171 ;;		On entry : B1F/0
  4172 ;;		On exit  : 1F/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;Total ram usage:        7 bytes
  4180 ;; Hardware stack levels required when called:   18
  4181 ;; This function calls:
  4182 ;;		_APDS9960Init
  4183 ;;		_CCP4_SetCallBack
  4184 ;;		_LCD_Digit1Num
  4185 ;;		_LCD_Digit2Num
  4186 ;;		_LCD_Digit3Num
  4187 ;;		_LCD_Digit4Num
  4188 ;;		_SYSTEM_Initialize
  4189 ;;		_enableProximitySensor
  4190 ;;		_intToBCD
  4191 ;;		_isGestureAvailable
  4192 ;;		_readGesture
  4193 ;;		_readProximity
  4194 ;;		_reverseBits
  4195 ;; This function is called by:
  4196 ;;		Startup code after reset
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           
  4201                           ;psect for function _main
  4202  0E27                     _main:
  4203                           
  4204                           ;main.c: 73:     uint8_t temp8;;main.c: 75:     SYSTEM_Initialize();
  4205                           
  4206                           ;incstack = 0
  4207 ;; hardware stack exceeded
  4208                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4209  0E27  3195  255D  318E   	fcall	_SYSTEM_Initialize
  4210                           
  4211                           ;main.c: 77:     ir_flag = IR_NONE;
  4212  0E2A  0020               	movlb	0	; select bank0
  4213  0E2B  01E9               	clrf	_ir_flag	;volatile
  4214                           
  4215                           ;main.c: 78:     ir_address = ir_address_complement = ir_command = ir_command_complement
      +                           = 0;
  4216  0E2C  01FC               	clrf	_ir_command_complement	;volatile
  4217  0E2D  01EA               	clrf	_ir_command	;volatile
  4218  0E2E  0021               	movlb	1	; select bank1
  4219  0E2F  01EA               	clrf	_ir_address_complement^(0+128)	;volatile
  4220  0E30  0020               	movlb	0	; select bank0
  4221  0E31  01EB               	clrf	_ir_address	;volatile
  4222                           
  4223                           ;main.c: 80:     CCP4_SetCallBack(CCP4_CallBack);
  4224  0E32  3048               	movlw	low _CCP4_CallBack@main$F1923
  4225  0E33  00A0               	movwf	CCP4_SetCallBack@customCallBack
  4226  0E34  3007               	movlw	high _CCP4_CallBack@main$F1923
  4227  0E35  00A1               	movwf	CCP4_SetCallBack@customCallBack+1
  4228  0E36  3191  21EB  318E   	fcall	_CCP4_SetCallBack
  4229                           
  4230                           ;main.c: 86:     (INTCONbits.GIE = 1);
  4231  0E39  178B               	bsf	11,7	;volatile
  4232                           
  4233                           ;main.c: 89:     (INTCONbits.PEIE = 1);
  4234  0E3A  170B               	bsf	11,6	;volatile
  4235                           
  4236                           ;main.c: 97:     if(APDS9960Init()){
  4237  0E3B  3186  2637  318E   	fcall	_APDS9960Init
  4238  0E3E  3A00               	xorlw	0
  4239  0E3F  1903               	skipnz
  4240  0E40  2E46               	goto	l6335
  4241                           
  4242                           ;main.c: 98:         bcd_num = 1;
  4243  0E41  3001               	movlw	1
  4244  0E42  00DF               	movwf	main@bcd_num
  4245  0E43  3000               	movlw	0
  4246  0E44  00E0               	movwf	main@bcd_num+1
  4247                           
  4248                           ;main.c: 99:     } else {
  4249  0E45  2E48               	goto	l6337
  4250  0E46                     l6335:
  4251                           
  4252                           ;main.c: 100:         bcd_num = 0;
  4253  0E46  01DF               	clrf	main@bcd_num
  4254  0E47  01E0               	clrf	main@bcd_num+1
  4255  0E48                     l6337:
  4256                           
  4257                           ;main.c: 103:     LCD_Digit4Num(bcd_num & 0x000F);
  4258  0E48  085F               	movf	main@bcd_num,w
  4259  0E49  390F               	andlw	15
  4260  0E4A  3183  2336  318E   	fcall	_LCD_Digit4Num
  4261                           
  4262                           ;main.c: 108:     enableProximitySensor(0);
  4263  0E4D  3000               	movlw	0
  4264  0E4E  3188  2003  318E   	fcall	_enableProximitySensor
  4265  0E51                     l1096:	
  4266                           ;main.c: 112:     while (1)
  4267                           
  4268  0E51  0064               	clrwdt	;# 
  4269                           
  4270                           ;main.c: 122:         LCDDATA0bits.SEG5COM0 = 0;
  4271  0E52  002F               	movlb	15	; select bank15
  4272  0E53  12A0               	bcf	32,5	;volatile
  4273                           
  4274                           ;main.c: 123:         LCDDATA0bits.SEG3COM0 = 0;
  4275  0E54  11A0               	bcf	32,3	;volatile
  4276                           
  4277                           ;main.c: 124:         LCDDATA1bits.SEG10COM0 = 0;
  4278  0E55  1121               	bcf	33,2	;volatile
  4279                           
  4280                           ;main.c: 125:         LCDDATA0bits.SEG4COM0 = 0;
  4281  0E56  1220               	bcf	32,4	;volatile
  4282                           
  4283                           ;main.c: 128:         temp_num = readProximity();
  4284  0E57  3192  221B  318E   	fcall	_readProximity
  4285  0E5A  00DA               	movwf	??_main
  4286  0E5B  01DB               	clrf	??_main+1
  4287  0E5C  085A               	movf	??_main,w
  4288  0E5D  00DC               	movwf	main@temp_num
  4289  0E5E  085B               	movf	??_main+1,w
  4290  0E5F  00DD               	movwf	main@temp_num+1
  4291                           
  4292                           ;main.c: 130:         if(isGestureAvailable()){
  4293  0E60  3193  230F  318E   	fcall	_isGestureAvailable
  4294  0E63  3A00               	xorlw	0
  4295  0E64  1D03               	btfss	3,2
  4296  0E65  2E75               	goto	l6369
  4297  0E66  2E91               	goto	l6371
  4298  0E67                     l6355:
  4299                           
  4300                           ;main.c: 133:                     LCD_Digit4Num('U');
  4301  0E67  3055               	movlw	85
  4302  0E68  2EBC               	goto	L1
  4303  0E69                     l6357:	
  4304                           ;main.c: 134:                     break;
  4305                           
  4306                           
  4307                           ;main.c: 136:                     LCD_Digit4Num('D');
  4308  0E69  3044               	movlw	68
  4309  0E6A  2EBC               	goto	L1
  4310  0E6B                     l6359:	
  4311                           ;main.c: 137:                     break;
  4312                           
  4313                           
  4314                           ;main.c: 139:                     LCD_Digit4Num('L');
  4315  0E6B  304C               	movlw	76
  4316  0E6C  2EBC               	goto	L1
  4317  0E6D                     l6361:	
  4318                           ;main.c: 140:                     break;
  4319                           
  4320                           
  4321                           ;main.c: 142:                     LCD_Digit4Num('R');
  4322  0E6D  3052               	movlw	82
  4323  0E6E  2EBC               	goto	L1
  4324  0E6F                     l6363:	
  4325                           ;main.c: 143:                     break;
  4326                           
  4327                           
  4328                           ;main.c: 145:                     LCD_Digit4Num('N');
  4329  0E6F  304E               	movlw	78
  4330  0E70  2EBC               	goto	L1
  4331  0E71                     l6365:	
  4332                           ;main.c: 146:                     break;
  4333                           
  4334                           
  4335                           ;main.c: 148:                     LCD_Digit4Num('F');
  4336  0E71  3046               	movlw	70
  4337  0E72  2EBC               	goto	L1
  4338  0E73                     l6367:	
  4339                           ;main.c: 149:                     break;
  4340                           
  4341                           
  4342                           ;main.c: 151:                     LCD_Digit4Num(0);
  4343  0E73  3000               	movlw	0
  4344  0E74  2EBC               	goto	L1
  4345  0E75                     l6369:	
  4346                           ;main.c: 152:             }
  4347                           
  4348  0E75  3185  2512  318E   	fcall	_readGesture
  4349                           
  4350                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4351                           ; Switch size 1, requested type "simple"
  4352                           ; Number of cases is 1, Range of values is 0 to 0
  4353                           ; switch strategies available:
  4354                           ; Name         Instructions Cycles
  4355                           ; simple_byte            4     3 (average)
  4356                           ; direct_byte            8     6 (fixed)
  4357                           ; jumptable            260     6 (fixed)
  4358                           ;	Chosen strategy is simple_byte
  4359  0E78  0849               	movf	?_readGesture+1,w
  4360  0E79  3A00               	xorlw	0	; case 0
  4361  0E7A  1903               	skipnz
  4362  0E7B  2E7D               	goto	l6595
  4363  0E7C  2E73               	goto	l6367
  4364  0E7D                     l6595:
  4365                           
  4366                           ; Switch size 1, requested type "simple"
  4367                           ; Number of cases is 6, Range of values is 1 to 6
  4368                           ; switch strategies available:
  4369                           ; Name         Instructions Cycles
  4370                           ; simple_byte           19    10 (average)
  4371                           ; direct_byte           21     9 (fixed)
  4372                           ; jumptable            263     9 (fixed)
  4373                           ;	Chosen strategy is simple_byte
  4374  0E7D  0848               	movf	?_readGesture,w
  4375  0E7E  3A01               	xorlw	1	; case 1
  4376  0E7F  1903               	skipnz
  4377  0E80  2E6B               	goto	l6359
  4378  0E81  3A03               	xorlw	3	; case 2
  4379  0E82  1903               	skipnz
  4380  0E83  2E6D               	goto	l6361
  4381  0E84  3A01               	xorlw	1	; case 3
  4382  0E85  1903               	skipnz
  4383  0E86  2E67               	goto	l6355
  4384  0E87  3A07               	xorlw	7	; case 4
  4385  0E88  1903               	skipnz
  4386  0E89  2E69               	goto	l6357
  4387  0E8A  3A01               	xorlw	1	; case 5
  4388  0E8B  1903               	skipnz
  4389  0E8C  2E6F               	goto	l6363
  4390  0E8D  3A03               	xorlw	3	; case 6
  4391  0E8E  1903               	skipnz
  4392  0E8F  2E71               	goto	l6365
  4393  0E90  2E73               	goto	l6367
  4394  0E91                     l6371:
  4395                           
  4396                           ;main.c: 156:             bcd_num = intToBCD(temp_num);
  4397  0E91  085D               	movf	main@temp_num+1,w
  4398  0E92  00A9               	movwf	intToBCD@binaryInput+1
  4399  0E93  085C               	movf	main@temp_num,w
  4400  0E94  00A8               	movwf	intToBCD@binaryInput
  4401  0E95  3189  2145  318E   	fcall	_intToBCD
  4402  0E98  0829               	movf	?_intToBCD+1,w
  4403  0E99  00E0               	movwf	main@bcd_num+1
  4404  0E9A  0828               	movf	?_intToBCD,w
  4405  0E9B  00DF               	movwf	main@bcd_num
  4406                           
  4407                           ;main.c: 158:             LCD_Digit1Num((bcd_num >> 12) & 0x000F);
  4408  0E9C  0860               	movf	main@bcd_num+1,w
  4409  0E9D  00DB               	movwf	??_main+1
  4410  0E9E  085F               	movf	main@bcd_num,w
  4411  0E9F  00DA               	movwf	??_main
  4412  0EA0  0E5B               	swapf	??_main+1,w
  4413  0EA1  390F               	andlw	15
  4414  0EA2  00DA               	movwf	??_main
  4415  0EA3  01DB               	clrf	??_main+1
  4416  0EA4  085A               	movf	??_main,w
  4417  0EA5  390F               	andlw	15
  4418  0EA6  318B  23A5  318E   	fcall	_LCD_Digit1Num
  4419                           
  4420                           ;main.c: 159:             LCD_Digit2Num((bcd_num >> 8) & 0x000F);
  4421  0EA9  0020               	movlb	0	; select bank0
  4422  0EAA  0860               	movf	main@bcd_num+1,w
  4423  0EAB  390F               	andlw	15
  4424  0EAC  318C  247B  318E   	fcall	_LCD_Digit2Num
  4425                           
  4426                           ;main.c: 160:             LCD_Digit3Num((bcd_num >> 4) & 0x000F);
  4427  0EAF  0020               	movlb	0	; select bank0
  4428  0EB0  085F               	movf	main@bcd_num,w
  4429  0EB1  00DA               	movwf	??_main
  4430  0EB2  3004               	movlw	4
  4431  0EB3                     u4725:
  4432  0EB3  36DA               	lsrf	??_main,f
  4433  0EB4  0B89               	decfsz	9,f
  4434  0EB5  2EB3               	goto	u4725
  4435  0EB6  085A               	movf	??_main,w
  4436  0EB7  390F               	andlw	15
  4437  0EB8  318D  2551  318E   	fcall	_LCD_Digit3Num
  4438                           
  4439                           ;main.c: 162:             LCD_Digit4Num('P');
  4440  0EBB  3050               	movlw	80
  4441  0EBC                     L1:
  4442  0EBC  3183  2336  318E   	fcall	_LCD_Digit4Num
  4443                           
  4444                           ;main.c: 167:         _delay((unsigned long)((400)*(32000000/4000.0)));
  4445  0EBF  3011               	movlw	17
  4446  0EC0  0020               	movlb	0	; select bank0
  4447  0EC1  00DB               	movwf	??_main+1
  4448  0EC2  303C               	movlw	60
  4449  0EC3  00DA               	movwf	??_main
  4450  0EC4  30CB               	movlw	203
  4451  0EC5                     u4777:
  4452  0EC5  0B89               	decfsz	9,f
  4453  0EC6  2EC5               	goto	u4777
  4454  0EC7  0BDA               	decfsz	??_main,f
  4455  0EC8  2EC5               	goto	u4777
  4456  0EC9  0BDB               	decfsz	??_main+1,f
  4457  0ECA  2EC5               	goto	u4777
  4458                           
  4459                           ;main.c: 169:         if(ir_flag == IR_DONE || ir_flag == IR_REPEAT){
  4460  0ECB  3002               	movlw	2
  4461  0ECC  0020               	movlb	0	; select bank0
  4462  0ECD  0669               	xorwf	_ir_flag,w	;volatile
  4463  0ECE  1903               	btfsc	3,2
  4464  0ECF  2ED4               	goto	l6387
  4465  0ED0  3003               	movlw	3
  4466  0ED1  0669               	xorwf	_ir_flag,w	;volatile
  4467  0ED2  1D03               	btfss	3,2
  4468  0ED3  2E51               	goto	l1096
  4469  0ED4                     l6387:
  4470                           
  4471                           ;main.c: 171:             temp8 = reverseBits(ir_address);
  4472  0ED4  086B               	movf	_ir_address,w	;volatile
  4473  0ED5  3188  2095  318E   	fcall	_reverseBits
  4474  0ED8  00DA               	movwf	??_main
  4475  0ED9  085A               	movf	??_main,w
  4476  0EDA  00DE               	movwf	main@temp8
  4477                           
  4478                           ;main.c: 173:             LCD_Digit1Num((temp8 >> 4) & 0x000F);
  4479  0EDB  085E               	movf	main@temp8,w
  4480  0EDC  00DA               	movwf	??_main
  4481  0EDD  3004               	movlw	4
  4482  0EDE                     u4755:
  4483  0EDE  36DA               	lsrf	??_main,f
  4484  0EDF  0B89               	decfsz	9,f
  4485  0EE0  2EDE               	goto	u4755
  4486  0EE1  085A               	movf	??_main,w
  4487  0EE2  390F               	andlw	15
  4488  0EE3  318B  23A5  318E   	fcall	_LCD_Digit1Num
  4489                           
  4490                           ;main.c: 174:             LCD_Digit2Num(temp8 & 0x000F);
  4491  0EE6  0020               	movlb	0	; select bank0
  4492  0EE7  085E               	movf	main@temp8,w
  4493  0EE8  390F               	andlw	15
  4494  0EE9  318C  247B  318E   	fcall	_LCD_Digit2Num
  4495                           
  4496                           ;main.c: 176:             LCDDATA0bits.SEG4COM0 = 1;
  4497  0EEC  1620               	bsf	32,4	;volatile
  4498                           
  4499                           ;main.c: 178:             temp8 = reverseBits(ir_command);
  4500  0EED  0020               	movlb	0	; select bank0
  4501  0EEE  086A               	movf	_ir_command,w	;volatile
  4502  0EEF  3188  2095  318E   	fcall	_reverseBits
  4503  0EF2  00DA               	movwf	??_main
  4504  0EF3  085A               	movf	??_main,w
  4505  0EF4  00DE               	movwf	main@temp8
  4506                           
  4507                           ;main.c: 180:             LCD_Digit3Num((temp8 >> 4) & 0x000F);
  4508  0EF5  085E               	movf	main@temp8,w
  4509  0EF6  00DA               	movwf	??_main
  4510  0EF7  3004               	movlw	4
  4511  0EF8                     u4765:
  4512  0EF8  36DA               	lsrf	??_main,f
  4513  0EF9  0B89               	decfsz	9,f
  4514  0EFA  2EF8               	goto	u4765
  4515  0EFB  085A               	movf	??_main,w
  4516  0EFC  390F               	andlw	15
  4517  0EFD  318D  2551  318E   	fcall	_LCD_Digit3Num
  4518                           
  4519                           ;main.c: 181:             LCD_Digit4Num(temp8 & 0x000F);
  4520  0F00  0020               	movlb	0	; select bank0
  4521  0F01  085E               	movf	main@temp8,w
  4522  0F02  390F               	andlw	15
  4523  0F03  3183  2336  318E   	fcall	_LCD_Digit4Num
  4524                           
  4525                           ;main.c: 183:             ir_flag = IR_NONE;
  4526  0F06  0020               	movlb	0	; select bank0
  4527  0F07  01E9               	clrf	_ir_flag	;volatile
  4528  0F08  2E51               	goto	l1096
  4529  0F09                     __end_of_main:
  4530                           
  4531                           	psect	text1
  4532  0895                     __ptext1:	
  4533 ;; *************** function _reverseBits *****************
  4534 ;; Defined at:
  4535 ;;		line 381 in file "main.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  b               1    wreg     unsigned char 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  b               1    3[BANK0 ] unsigned char 
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      unsigned char 
  4542 ;; Registers used:
  4543 ;;		wreg, status,2, status,0
  4544 ;; Tracked objects:
  4545 ;;		On entry : 1F/0
  4546 ;;		On exit  : 1F/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4553 ;;Total ram usage:        4 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    4
  4556 ;; This function calls:
  4557 ;;		Nothing
  4558 ;; This function is called by:
  4559 ;;		_main
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           
  4564                           ;psect for function _reverseBits
  4565  0895                     _reverseBits:
  4566                           
  4567                           ;incstack = 0
  4568                           ; Regs used in _reverseBits: [wreg+status,2+status,0]
  4569                           ;reverseBits@b stored from wreg
  4570  0895  00A3               	movwf	reverseBits@b
  4571                           
  4572                           ;main.c: 382:    b = (b & 0b11110000) >> 4 | (b & 0b00001111) << 4;
  4573  0896  0823               	movf	reverseBits@b,w
  4574  0897  390F               	andlw	15
  4575  0898  00A0               	movwf	??_reverseBits
  4576  0899  3004               	movlw	4
  4577  089A                     u4585:
  4578  089A  35A0               	lslf	??_reverseBits,f
  4579  089B  0B89               	decfsz	9,f
  4580  089C  289A               	goto	u4585
  4581  089D  0823               	movf	reverseBits@b,w
  4582  089E  00A1               	movwf	??_reverseBits+1
  4583  089F  3004               	movlw	4
  4584  08A0                     u4595:
  4585  08A0  36A1               	lsrf	??_reverseBits+1,f
  4586  08A1  0B89               	decfsz	9,f
  4587  08A2  28A0               	goto	u4595
  4588  08A3  0821               	movf	??_reverseBits+1,w
  4589  08A4  390F               	andlw	15
  4590  08A5  0420               	iorwf	??_reverseBits,w
  4591  08A6  00A2               	movwf	??_reverseBits+2
  4592  08A7  0822               	movf	??_reverseBits+2,w
  4593  08A8  00A3               	movwf	reverseBits@b
  4594                           
  4595                           ;main.c: 383:    b = (b & 0b11001100) >> 2 | (b & 0b00110011) << 2;
  4596  08A9  0823               	movf	reverseBits@b,w
  4597  08AA  3933               	andlw	51
  4598  08AB  00A0               	movwf	??_reverseBits
  4599  08AC  3002               	movlw	2
  4600  08AD                     u4605:
  4601  08AD  35A0               	lslf	??_reverseBits,f
  4602  08AE  0B89               	decfsz	9,f
  4603  08AF  28AD               	goto	u4605
  4604  08B0  0823               	movf	reverseBits@b,w
  4605  08B1  00A1               	movwf	??_reverseBits+1
  4606  08B2  3002               	movlw	2
  4607  08B3                     u4615:
  4608  08B3  36A1               	lsrf	??_reverseBits+1,f
  4609  08B4  0B89               	decfsz	9,f
  4610  08B5  28B3               	goto	u4615
  4611  08B6  0821               	movf	??_reverseBits+1,w
  4612  08B7  3933               	andlw	51
  4613  08B8  0420               	iorwf	??_reverseBits,w
  4614  08B9  00A2               	movwf	??_reverseBits+2
  4615  08BA  0822               	movf	??_reverseBits+2,w
  4616  08BB  00A3               	movwf	reverseBits@b
  4617                           
  4618                           ;main.c: 384:    b = (b & 0b10101010) >> 1 | (b & 0b01010101) << 1;
  4619  08BC  0823               	movf	reverseBits@b,w
  4620  08BD  3955               	andlw	85
  4621  08BE  00A0               	movwf	??_reverseBits
  4622  08BF  3001               	movlw	1
  4623  08C0                     u4625:
  4624  08C0  35A0               	lslf	??_reverseBits,f
  4625  08C1  0B89               	decfsz	9,f
  4626  08C2  28C0               	goto	u4625
  4627  08C3  3623               	lsrf	reverseBits@b,w
  4628  08C4  3955               	andlw	85
  4629  08C5  0420               	iorwf	??_reverseBits,w
  4630  08C6  00A1               	movwf	??_reverseBits+1
  4631  08C7  0821               	movf	??_reverseBits+1,w
  4632  08C8  00A3               	movwf	reverseBits@b
  4633                           
  4634                           ;main.c: 385:    return b;
  4635  08C9  0823               	movf	reverseBits@b,w
  4636  08CA  0008               	return
  4637  08CB                     __end_of_reverseBits:
  4638                           
  4639                           	psect	text2
  4640  121B                     __ptext2:	
  4641 ;; *************** function _readProximity *****************
  4642 ;; Defined at:
  4643 ;;		line 677 in file "APDS9960.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;  val             1   32[BANK0 ] unsigned char 
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      unsigned char 
  4650 ;; Registers used:
  4651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 1F/F
  4654 ;;		On exit  : 1F/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4660 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4661 ;;Total ram usage:        2 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:   14
  4664 ;; This function calls:
  4665 ;;		_wireReadDataByte
  4666 ;; This function is called by:
  4667 ;;		_main
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           
  4672                           ;psect for function _readProximity
  4673  121B                     _readProximity:
  4674                           
  4675                           ;APDS9960.c: 682:     val = wireReadDataByte(0x9C);
  4676                           
  4677                           ;incstack = 0
  4678                           ; Regs used in _readProximity: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4679  121B  309C               	movlw	156
  4680  121C  3192  2236         	fcall	_wireReadDataByte
  4681  121E  00BF               	movwf	??_readProximity
  4682  121F  083F               	movf	??_readProximity,w
  4683  1220  00C0               	movwf	readProximity@val
  4684                           
  4685                           ;APDS9960.c: 684:     return val;
  4686  1221  0840               	movf	readProximity@val,w
  4687  1222  0008               	return
  4688  1223                     __end_of_readProximity:
  4689                           
  4690                           	psect	text3
  4691  0512                     __ptext3:	
  4692 ;; *************** function _readGesture *****************
  4693 ;; Defined at:
  4694 ;;		line 441 in file "APDS9960.c"
  4695 ;; Parameters:    Size  Location     Type
  4696 ;;		None
  4697 ;; Auto vars:     Size  Location     Type
  4698 ;;  i               2   56[BANK0 ] int 
  4699 ;;  motion          2   51[BANK0 ] int 
  4700 ;;  bytes_read      1   55[BANK0 ] unsigned char 
  4701 ;;  fifo_level      1   54[BANK0 ] unsigned char 
  4702 ;;  gstatus         1   53[BANK0 ] unsigned char 
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  2   40[BANK0 ] int 
  4705 ;; Registers used:
  4706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 1F/0
  4709 ;;		On exit  : 1F/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4712 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;Total ram usage:       18 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:   15
  4719 ;; This function calls:
  4720 ;;		_decodeGesture
  4721 ;;		_getMode
  4722 ;;		_isGestureAvailable
  4723 ;;		_processGestureData
  4724 ;;		_resetGestureParameters
  4725 ;;		_wireReadDataBlock
  4726 ;;		_wireReadDataByte
  4727 ;; This function is called by:
  4728 ;;		_main
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           
  4733                           ;psect for function _readGesture
  4734  0512                     _readGesture:
  4735                           
  4736                           ;APDS9960.c: 444:     uint8_t bytes_read = 0;
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in _readGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4740  0512  01D7               	clrf	readGesture@bytes_read
  4741                           
  4742                           ;APDS9960.c: 446:     uint8_t gstatus;;APDS9960.c: 447:     int motion;;APDS9960.c: 448:
      +                               int i;;APDS9960.c: 451:     if( !isGestureAvailable() || !(getMode() & 0b01000001) 
      +                          ) {
  4743  0513  3193  230F  3185   	fcall	_isGestureAvailable
  4744  0516  3A00               	xorlw	0
  4745  0517  1903               	skipnz
  4746  0518  2D1F               	goto	l6209
  4747  0519  3191  21E3  3185   	fcall	_getMode
  4748  051C  3941               	andlw	65
  4749  051D  1D03               	btfss	3,2
  4750  051E  2E02               	goto	l1581
  4751  051F                     l6209:
  4752                           
  4753                           ;APDS9960.c: 452:         return DIR_NONE;
  4754  051F  01C8               	clrf	?_readGesture
  4755  0520  01C9               	clrf	?_readGesture+1
  4756  0521  0008               	return
  4757  0522                     l6219:	
  4758                           ;APDS9960.c: 453:     }
  4759                           
  4760                           
  4761                           ;APDS9960.c: 468:             fifo_level = wireReadDataByte(0xAE);
  4762  0522  30AE               	movlw	174
  4763  0523  3192  2236  3185   	fcall	_wireReadDataByte
  4764  0526  00CA               	movwf	??_readGesture
  4765  0527  084A               	movf	??_readGesture,w
  4766  0528  00D6               	movwf	readGesture@fifo_level
  4767                           
  4768                           ;APDS9960.c: 476:             if( fifo_level > 0) {
  4769  0529  0856               	movf	readGesture@fifo_level,w
  4770  052A  1903               	btfsc	3,2
  4771  052B  2E02               	goto	l1581
  4772                           
  4773                           ;APDS9960.c: 477:                 bytes_read = wireReadDataBlock( 0xFC,
  4774  052C  3070               	movlw	112
  4775  052D  00C0               	movwf	wireReadDataBlock@val
  4776  052E  3023               	movlw	35
  4777  052F  00C1               	movwf	wireReadDataBlock@val+1
  4778  0530  0856               	movf	readGesture@fifo_level,w
  4779  0531  00CA               	movwf	??_readGesture
  4780  0532  01CB               	clrf	??_readGesture+1
  4781  0533  35CA               	lslf	??_readGesture,f
  4782  0534  0DCB               	rlf	??_readGesture+1,f
  4783  0535  35CA               	lslf	??_readGesture,f
  4784  0536  0DCB               	rlf	??_readGesture+1,f
  4785  0537  084A               	movf	??_readGesture,w
  4786  0538  00C2               	movwf	wireReadDataBlock@len
  4787  0539  084B               	movf	??_readGesture+1,w
  4788  053A  00C3               	movwf	wireReadDataBlock@len+1
  4789  053B  30FC               	movlw	252
  4790  053C  3194  24A5  3185   	fcall	_wireReadDataBlock
  4791  053F  0840               	movf	?_wireReadDataBlock,w
  4792  0540  00CC               	movwf	??_readGesture+2
  4793  0541  084C               	movf	??_readGesture+2,w
  4794  0542  00D7               	movwf	readGesture@bytes_read
  4795                           
  4796                           ;APDS9960.c: 493:                 if( bytes_read >= 4 ) {
  4797                           
  4798                           ;APDS9960.c: 480:                 if( bytes_read == -1 ) {
  4799  0543  3004               	movlw	4
  4800  0544  0257               	subwf	readGesture@bytes_read,w
  4801  0545  1C03               	skipc
  4802  0546  2E02               	goto	l1581
  4803                           
  4804                           ;APDS9960.c: 494:                     for( i = 0; i < bytes_read; i += 4 ) {
  4805  0547  01D8               	clrf	readGesture@i
  4806  0548  01D9               	clrf	readGesture@i+1
  4807  0549                     l6237:
  4808  0549  0859               	movf	readGesture@i+1,w
  4809  054A  3A80               	xorlw	128
  4810  054B  00CA               	movwf	??_readGesture
  4811  054C  3080               	movlw	128
  4812  054D  024A               	subwf	??_readGesture,w
  4813  054E  1D03               	skipz
  4814  054F  2D52               	goto	u4535
  4815  0550  0857               	movf	readGesture@bytes_read,w
  4816  0551  0258               	subwf	readGesture@i,w
  4817  0552                     u4535:
  4818  0552  1803               	btfsc	3,0
  4819  0553  2DEF               	goto	l6239
  4820                           
  4821                           ;APDS9960.c: 495:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  4822  0554  3070               	movlw	112
  4823  0555  0020               	movlb	0	; select bank0
  4824  0556  00CA               	movwf	??_readGesture
  4825  0557  3023               	movlw	35
  4826  0558  00CB               	movwf	??_readGesture+1
  4827  0559  0858               	movf	readGesture@i,w
  4828  055A  074A               	addwf	??_readGesture,w
  4829  055B  0086               	movwf	6
  4830  055C  0859               	movf	readGesture@i+1,w
  4831  055D  3D4B               	addwfc	??_readGesture+1,w
  4832  055E  0087               	movwf	7
  4833  055F  0801               	movf	1,w
  4834  0560  00CC               	movwf	??_readGesture+2
  4835  0561  306C               	movlw	108
  4836  0562  0086               	movwf	6
  4837  0563  3023               	movlw	35
  4838  0564  0087               	movwf	7
  4839  0565  0801               	movf	1,w
  4840  0566  3EEC               	addlw	236
  4841  0567  00CD               	movwf	??_readGesture+3
  4842  0568  01CE               	clrf	??_readGesture+4
  4843  0569  3022               	movlw	34
  4844  056A  3DCE               	addwfc	??_readGesture+4,f
  4845  056B  084D               	movf	??_readGesture+3,w
  4846  056C  0086               	movwf	6
  4847  056D  084E               	movf	??_readGesture+4,w
  4848  056E  0087               	movwf	7
  4849  056F  084C               	movf	??_readGesture+2,w
  4850  0570  0081               	movwf	1
  4851                           
  4852                           ;APDS9960.c: 497:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  4853  0571  3071               	movlw	113
  4854  0572  00CA               	movwf	??_readGesture
  4855  0573  3023               	movlw	35
  4856  0574  00CB               	movwf	??_readGesture+1
  4857  0575  0858               	movf	readGesture@i,w
  4858  0576  074A               	addwf	??_readGesture,w
  4859  0577  0086               	movwf	6
  4860  0578  0859               	movf	readGesture@i+1,w
  4861  0579  3D4B               	addwfc	??_readGesture+1,w
  4862  057A  0087               	movwf	7
  4863  057B  0801               	movf	1,w
  4864  057C  00CC               	movwf	??_readGesture+2
  4865  057D  306C               	movlw	108
  4866  057E  0086               	movwf	6
  4867  057F  3023               	movlw	35
  4868  0580  0087               	movwf	7
  4869  0581  0801               	movf	1,w
  4870  0582  00CD               	movwf	??_readGesture+3
  4871  0583  01CE               	clrf	??_readGesture+4
  4872  0584  300C               	movlw	12
  4873  0585  00CF               	movwf	??_readGesture+5
  4874  0586  3023               	movlw	35
  4875  0587  00D0               	movwf	??_readGesture+6
  4876  0588  084D               	movf	??_readGesture+3,w
  4877  0589  074F               	addwf	??_readGesture+5,w
  4878  058A  00D1               	movwf	??_readGesture+7
  4879  058B  084E               	movf	??_readGesture+4,w
  4880  058C  3D50               	addwfc	??_readGesture+6,w
  4881  058D  00D2               	movwf	??_readGesture+8
  4882  058E  0851               	movf	??_readGesture+7,w
  4883  058F  0086               	movwf	6
  4884  0590  0852               	movf	??_readGesture+8,w
  4885  0591  0087               	movwf	7
  4886  0592  084C               	movf	??_readGesture+2,w
  4887  0593  0081               	movwf	1
  4888                           
  4889                           ;APDS9960.c: 499:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  4890  0594  3072               	movlw	114
  4891  0595  00CA               	movwf	??_readGesture
  4892  0596  3023               	movlw	35
  4893  0597  00CB               	movwf	??_readGesture+1
  4894  0598  0858               	movf	readGesture@i,w
  4895  0599  074A               	addwf	??_readGesture,w
  4896  059A  0086               	movwf	6
  4897  059B  0859               	movf	readGesture@i+1,w
  4898  059C  3D4B               	addwfc	??_readGesture+1,w
  4899  059D  0087               	movwf	7
  4900  059E  0801               	movf	1,w
  4901  059F  00CC               	movwf	??_readGesture+2
  4902  05A0  306C               	movlw	108
  4903  05A1  0086               	movwf	6
  4904  05A2  3023               	movlw	35
  4905  05A3  0087               	movwf	7
  4906  05A4  0801               	movf	1,w
  4907  05A5  00CD               	movwf	??_readGesture+3
  4908  05A6  01CE               	clrf	??_readGesture+4
  4909  05A7  302C               	movlw	44
  4910  05A8  00CF               	movwf	??_readGesture+5
  4911  05A9  3023               	movlw	35
  4912  05AA  00D0               	movwf	??_readGesture+6
  4913  05AB  084D               	movf	??_readGesture+3,w
  4914  05AC  074F               	addwf	??_readGesture+5,w
  4915  05AD  00D1               	movwf	??_readGesture+7
  4916  05AE  084E               	movf	??_readGesture+4,w
  4917  05AF  3D50               	addwfc	??_readGesture+6,w
  4918  05B0  00D2               	movwf	??_readGesture+8
  4919  05B1  0851               	movf	??_readGesture+7,w
  4920  05B2  0086               	movwf	6
  4921  05B3  0852               	movf	??_readGesture+8,w
  4922  05B4  0087               	movwf	7
  4923  05B5  084C               	movf	??_readGesture+2,w
  4924  05B6  0081               	movwf	1
  4925                           
  4926                           ;APDS9960.c: 501:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  4927  05B7  3073               	movlw	115
  4928  05B8  00CA               	movwf	??_readGesture
  4929  05B9  3023               	movlw	35
  4930  05BA  00CB               	movwf	??_readGesture+1
  4931  05BB  0858               	movf	readGesture@i,w
  4932  05BC  074A               	addwf	??_readGesture,w
  4933  05BD  0086               	movwf	6
  4934  05BE  0859               	movf	readGesture@i+1,w
  4935  05BF  3D4B               	addwfc	??_readGesture+1,w
  4936  05C0  0087               	movwf	7
  4937  05C1  0801               	movf	1,w
  4938  05C2  00CC               	movwf	??_readGesture+2
  4939  05C3  306C               	movlw	108
  4940  05C4  0086               	movwf	6
  4941  05C5  3023               	movlw	35
  4942  05C6  0087               	movwf	7
  4943  05C7  0801               	movf	1,w
  4944  05C8  00CD               	movwf	??_readGesture+3
  4945  05C9  01CE               	clrf	??_readGesture+4
  4946  05CA  304C               	movlw	76
  4947  05CB  00CF               	movwf	??_readGesture+5
  4948  05CC  3023               	movlw	35
  4949  05CD  00D0               	movwf	??_readGesture+6
  4950  05CE  084D               	movf	??_readGesture+3,w
  4951  05CF  074F               	addwf	??_readGesture+5,w
  4952  05D0  00D1               	movwf	??_readGesture+7
  4953  05D1  084E               	movf	??_readGesture+4,w
  4954  05D2  3D50               	addwfc	??_readGesture+6,w
  4955  05D3  00D2               	movwf	??_readGesture+8
  4956  05D4  0851               	movf	??_readGesture+7,w
  4957  05D5  0086               	movwf	6
  4958  05D6  0852               	movf	??_readGesture+8,w
  4959  05D7  0087               	movwf	7
  4960  05D8  084C               	movf	??_readGesture+2,w
  4961  05D9  0081               	movwf	1
  4962                           
  4963                           ;APDS9960.c: 503:                         gesture_data_.index++;
  4964  05DA  3001               	movlw	1
  4965  05DB  00CA               	movwf	??_readGesture
  4966  05DC  306C               	movlw	108
  4967  05DD  0086               	movwf	6
  4968  05DE  3023               	movlw	35
  4969  05DF  0087               	movwf	7
  4970  05E0  084A               	movf	??_readGesture,w
  4971  05E1  0781               	addwf	1,f
  4972                           
  4973                           ;APDS9960.c: 504:                         gesture_data_.total_gestures++;
  4974  05E2  3001               	movlw	1
  4975  05E3  00CA               	movwf	??_readGesture
  4976  05E4  306D               	movlw	109
  4977  05E5  0086               	movwf	6
  4978  05E6  3023               	movlw	35
  4979  05E7  0087               	movwf	7
  4980  05E8  084A               	movf	??_readGesture,w
  4981  05E9  0781               	addwf	1,f
  4982                           
  4983                           ;APDS9960.c: 505:                     }
  4984  05EA  3004               	movlw	4
  4985  05EB  07D8               	addwf	readGesture@i,f
  4986  05EC  3000               	movlw	0
  4987  05ED  3DD9               	addwfc	readGesture@i+1,f
  4988  05EE  2D49               	goto	l6237
  4989  05EF                     l6239:
  4990                           
  4991                           ;APDS9960.c: 517:                     if( processGestureData() ) {
  4992  05EF  3180  205E  3185   	fcall	_processGestureData
  4993  05F2  3A00               	xorlw	0
  4994  05F3  1903               	skipnz
  4995  05F4  2DF8               	goto	l6243
  4996                           
  4997                           ;APDS9960.c: 518:                         if( decodeGesture() ) {
  4998  05F5  318F  2709  3185   	fcall	_decodeGesture
  4999  05F8                     l6243:
  5000                           
  5001                           ;APDS9960.c: 527:                     gesture_data_.index = 0;
  5002  05F8  306C               	movlw	108
  5003  05F9  0086               	movwf	6
  5004  05FA  3023               	movlw	35
  5005  05FB  0087               	movwf	7
  5006  05FC  0181               	clrf	1
  5007                           
  5008                           ;APDS9960.c: 528:                     gesture_data_.total_gestures = 0;
  5009  05FD  306D               	movlw	109
  5010  05FE  0086               	movwf	6
  5011  05FF  3023               	movlw	35
  5012  0600  0087               	movwf	7
  5013  0601  0181               	clrf	1
  5014  0602                     l1581:	
  5015                           ;APDS9960.c: 456:     while(1) {
  5016                           
  5017  0602  0064               	clrwdt	;# 
  5018                           
  5019                           ;APDS9960.c: 459:         _delay((unsigned long)((30)*(32000000/4000.0)));
  5020  0603  3002               	movlw	2
  5021  0604  0020               	movlb	0	; select bank0
  5022  0605  00CB               	movwf	??_readGesture+1
  5023  0606  3038               	movlw	56
  5024  0607  00CA               	movwf	??_readGesture
  5025  0608  30AD               	movlw	173
  5026  0609                     u4787:
  5027  0609  0B89               	decfsz	9,f
  5028  060A  2E09               	goto	u4787
  5029  060B  0BCA               	decfsz	??_readGesture,f
  5030  060C  2E09               	goto	u4787
  5031  060D  0BCB               	decfsz	??_readGesture+1,f
  5032  060E  2E09               	goto	u4787
  5033                           
  5034                           ;APDS9960.c: 462:         gstatus = wireReadDataByte(0xAF);
  5035  060F  30AF               	movlw	175
  5036  0610  3192  2236  3185   	fcall	_wireReadDataByte
  5037  0613  00CA               	movwf	??_readGesture
  5038  0614  084A               	movf	??_readGesture,w
  5039  0615  00D5               	movwf	readGesture@gstatus
  5040                           
  5041                           ;APDS9960.c: 465:         if( (gstatus & 0b00000001) == 0b00000001 ) {
  5042  0616  1855               	btfsc	readGesture@gstatus,0
  5043  0617  2D22               	goto	l6219
  5044                           
  5045                           ;APDS9960.c: 534:             _delay((unsigned long)((30)*(32000000/4000.0)));
  5046  0618  3002               	movlw	2
  5047  0619  0020               	movlb	0	; select bank0
  5048  061A  00CB               	movwf	??_readGesture+1
  5049  061B  3038               	movlw	56
  5050  061C  00CA               	movwf	??_readGesture
  5051  061D  30AD               	movlw	173
  5052  061E                     u4797:
  5053  061E  0B89               	decfsz	9,f
  5054  061F  2E1E               	goto	u4797
  5055  0620  0BCA               	decfsz	??_readGesture,f
  5056  0621  2E1E               	goto	u4797
  5057  0622  0BCB               	decfsz	??_readGesture+1,f
  5058  0623  2E1E               	goto	u4797
  5059                           
  5060                           ;APDS9960.c: 535:             decodeGesture();
  5061  0624  318F  2709  3185   	fcall	_decodeGesture
  5062                           
  5063                           ;APDS9960.c: 536:             motion = gesture_motion_;
  5064  0627  0021               	movlb	1	; select bank1
  5065  0628  0855               	movf	(_gesture_motion_+1)^(0+128),w
  5066  0629  0020               	movlb	0	; select bank0
  5067  062A  00D4               	movwf	readGesture@motion+1
  5068  062B  0021               	movlb	1	; select bank1
  5069  062C  0854               	movf	_gesture_motion_^(0+128),w
  5070  062D  0020               	movlb	0	; select bank0
  5071  062E  00D3               	movwf	readGesture@motion
  5072                           
  5073                           ;APDS9960.c: 541:             resetGestureParameters();
  5074  062F  3194  2489         	fcall	_resetGestureParameters
  5075                           
  5076                           ;APDS9960.c: 542:             return motion;
  5077  0631  0020               	movlb	0	; select bank0
  5078  0632  0854               	movf	readGesture@motion+1,w
  5079  0633  00C9               	movwf	?_readGesture+1
  5080  0634  0853               	movf	readGesture@motion,w
  5081  0635  00C8               	movwf	?_readGesture
  5082  0636  0008               	return
  5083  0637                     __end_of_readGesture:
  5084                           
  5085                           	psect	text4
  5086  14A5                     __ptext4:	
  5087 ;; *************** function _wireReadDataBlock *****************
  5088 ;; Defined at:
  5089 ;;		line 2044 in file "APDS9960.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;  reg             1    wreg     unsigned char 
  5092 ;;  val             2   32[BANK0 ] PTR unsigned char 
  5093 ;;		 -> fifo_data(128), 
  5094 ;;  len             2   34[BANK0 ] unsigned int 
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;  reg             1   38[BANK0 ] unsigned char 
  5097 ;;  i               1   39[BANK0 ] unsigned char 
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  2   32[BANK0 ] int 
  5100 ;; Registers used:
  5101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 1F/0
  5104 ;;		On exit  : 1F/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5107 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5108 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5111 ;;Total ram usage:        8 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; Hardware stack levels required when called:   13
  5114 ;; This function calls:
  5115 ;;		_i2c_readDataBlock
  5116 ;; This function is called by:
  5117 ;;		_readGesture
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           
  5122                           ;psect for function _wireReadDataBlock
  5123  14A5                     _wireReadDataBlock:
  5124                           
  5125                           ;incstack = 0
  5126                           ; Regs used in _wireReadDataBlock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5127                           ;wireReadDataBlock@reg stored from wreg
  5128  14A5  00C6               	movwf	wireReadDataBlock@reg
  5129                           
  5130                           ;APDS9960.c: 2044: int wireReadDataBlock( uint8_t reg,;APDS9960.c: 2045:                
      +                                                   uint8_t *val,;APDS9960.c: 2046:                                
      +                                   unsigned int len);APDS9960.c: 2047: {;APDS9960.c: 2048:     unsigned char i = l
      +                          en;
  5131  14A6  0842               	movf	wireReadDataBlock@len,w
  5132  14A7  00C4               	movwf	??_wireReadDataBlock
  5133  14A8  0844               	movf	??_wireReadDataBlock,w
  5134  14A9  00C7               	movwf	wireReadDataBlock@i
  5135                           
  5136                           ;APDS9960.c: 2051:    i2c_readDataBlock(0x39,reg,val,len);
  5137  14AA  0846               	movf	wireReadDataBlock@reg,w
  5138  14AB  00C4               	movwf	??_wireReadDataBlock
  5139  14AC  0844               	movf	??_wireReadDataBlock,w
  5140  14AD  00B6               	movwf	i2c_readDataBlock@reg
  5141  14AE  0841               	movf	wireReadDataBlock@val+1,w
  5142  14AF  00B8               	movwf	i2c_readDataBlock@data+1
  5143  14B0  0840               	movf	wireReadDataBlock@val,w
  5144  14B1  00B7               	movwf	i2c_readDataBlock@data
  5145  14B2  0843               	movf	wireReadDataBlock@len+1,w
  5146  14B3  00BA               	movwf	i2c_readDataBlock@len+1
  5147  14B4  0842               	movf	wireReadDataBlock@len,w
  5148  14B5  00B9               	movwf	i2c_readDataBlock@len
  5149  14B6  3039               	movlw	57
  5150  14B7  3188  20CB         	fcall	_i2c_readDataBlock
  5151                           
  5152                           ;APDS9960.c: 2053:     return i;
  5153  14B9  0847               	movf	wireReadDataBlock@i,w
  5154  14BA  00C4               	movwf	??_wireReadDataBlock
  5155  14BB  01C5               	clrf	??_wireReadDataBlock+1
  5156  14BC  0844               	movf	??_wireReadDataBlock,w
  5157  14BD  00C0               	movwf	?_wireReadDataBlock
  5158  14BE  0845               	movf	??_wireReadDataBlock+1,w
  5159  14BF  00C1               	movwf	?_wireReadDataBlock+1
  5160  14C0  0008               	return
  5161  14C1                     __end_of_wireReadDataBlock:
  5162                           
  5163                           	psect	text5
  5164  08CB                     __ptext5:	
  5165 ;; *************** function _i2c_readDataBlock *****************
  5166 ;; Defined at:
  5167 ;;		line 203 in file "mcc_generated_files/drivers/i2c_simple_master.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  address         1    wreg     unsigned char 
  5170 ;;  reg             1   22[BANK0 ] unsigned char 
  5171 ;;  data            2   23[BANK0 ] PTR void 
  5172 ;;		 -> fifo_data(128), 
  5173 ;;  len             2   25[BANK0 ] unsigned int 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  address         1   27[BANK0 ] unsigned char 
  5176 ;;  d               4   28[BANK0 ] struct .
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  1    wreg      void 
  5179 ;; Registers used:
  5180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5181 ;; Tracked objects:
  5182 ;;		On entry : 1F/0
  5183 ;;		On exit  : 1F/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5186 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5187 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;Total ram usage:       10 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:   12
  5193 ;; This function calls:
  5194 ;;		_I2C_Close
  5195 ;;		_I2C_MasterWrite
  5196 ;;		_I2C_Open
  5197 ;;		_I2C_SetAddressNackCallback
  5198 ;;		_I2C_SetBuffer
  5199 ;;		_I2C_SetDataCompleteCallback
  5200 ;; This function is called by:
  5201 ;;		_wireReadDataBlock
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           
  5206                           ;psect for function _i2c_readDataBlock
  5207  08CB                     _i2c_readDataBlock:
  5208                           
  5209                           ;incstack = 0
  5210                           ; Regs used in _i2c_readDataBlock: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5211                           ;i2c_readDataBlock@address stored from wreg
  5212  08CB  00BB               	movwf	i2c_readDataBlock@address
  5213                           
  5214                           ;mcc_generated_files/drivers/i2c_simple_master.c: 203: void i2c_readDataBlock(i2c_addres
      +                          s_t address, uint8_t reg, void *data, size_t len);mcc_generated_files/drivers/i2c_simple
      +                          _master.c: 204: {;mcc_generated_files/drivers/i2c_simple_master.c: 206:     buf_t d;;mcc
      +                          _generated_files/drivers/i2c_simple_master.c: 207:     d.data = data;
  5215  08CC  0838               	movf	i2c_readDataBlock@data+1,w
  5216  08CD  00BF               	movwf	i2c_readDataBlock@d+3
  5217  08CE  0837               	movf	i2c_readDataBlock@data,w
  5218  08CF  00BE               	movwf	i2c_readDataBlock@d+2
  5219                           
  5220                           ;mcc_generated_files/drivers/i2c_simple_master.c: 208:     d.len = len;
  5221  08D0  083A               	movf	i2c_readDataBlock@len+1,w
  5222  08D1  00BD               	movwf	i2c_readDataBlock@d+1
  5223  08D2  0839               	movf	i2c_readDataBlock@len,w
  5224  08D3  00BC               	movwf	i2c_readDataBlock@d
  5225  08D4                     l5061:	
  5226                           ;mcc_generated_files/drivers/i2c_simple_master.c: 210:     while(!I2C_Open(address));
  5227                           
  5228  08D4  083B               	movf	i2c_readDataBlock@address,w
  5229  08D5  3189  2187  3188   	fcall	_I2C_Open
  5230  08D8  3A00               	xorlw	0
  5231  08D9  1903               	skipnz
  5232  08DA  28D4               	goto	l5061
  5233                           
  5234                           ;mcc_generated_files/drivers/i2c_simple_master.c: 211:     I2C_SetDataCompleteCallback(r
      +                          dBlkRegCompleteHandler,&d);
  5235  08DB  303C               	movlw	low _rdBlkRegCompleteHandler@i2c_simple_master$F2203
  5236  08DC  00A9               	movwf	I2C_SetDataCompleteCallback@cb
  5237  08DD  3015               	movlw	high _rdBlkRegCompleteHandler@i2c_simple_master$F2203
  5238  08DE  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
  5239  08DF  303C               	movlw	low i2c_readDataBlock@d
  5240  08E0  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
  5241  08E1  3000               	movlw	high i2c_readDataBlock@d
  5242  08E2  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
  5243  08E3  3192  2260  3188   	fcall	_I2C_SetDataCompleteCallback
  5244                           
  5245                           ;mcc_generated_files/drivers/i2c_simple_master.c: 212:     I2C_SetBuffer(&reg,1);
  5246  08E6  3036               	movlw	low i2c_readDataBlock@reg
  5247  08E7  00A0               	movwf	I2C_SetBuffer@buffer
  5248  08E8  3000               	movlw	high i2c_readDataBlock@reg
  5249  08E9  00A1               	movwf	I2C_SetBuffer@buffer+1
  5250  08EA  3001               	movlw	1
  5251  08EB  00A2               	movwf	I2C_SetBuffer@bufferSize
  5252  08EC  3000               	movlw	0
  5253  08ED  00A3               	movwf	I2C_SetBuffer@bufferSize+1
  5254  08EE  3193  2336  3188   	fcall	_I2C_SetBuffer
  5255                           
  5256                           ;mcc_generated_files/drivers/i2c_simple_master.c: 213:     I2C_SetAddressNackCallback(((
      +                          void*)0),((void*)0));
  5257  08F1  3000               	movlw	0
  5258  08F2  0020               	movlb	0	; select bank0
  5259  08F3  00A9               	movwf	I2C_SetAddressNackCallback@cb
  5260  08F4  00AA               	movwf	I2C_SetAddressNackCallback@cb+1
  5261  08F5  01AB               	clrf	I2C_SetAddressNackCallback@ptr
  5262  08F6  3192  226C  3188   	fcall	_I2C_SetAddressNackCallback
  5263                           
  5264                           ;mcc_generated_files/drivers/i2c_simple_master.c: 214:     I2C_MasterWrite();
  5265  08F9  3191  21AB  3188   	fcall	_I2C_MasterWrite
  5266  08FC                     l5071:	
  5267                           ;mcc_generated_files/drivers/i2c_simple_master.c: 215:     while(I2C_BUSY == I2C_Close()
      +                          );
  5268                           
  5269  08FC  3194  24DE  3188   	fcall	_I2C_Close
  5270  08FF  3A01               	xorlw	1
  5271  0900  1D03               	btfss	3,2
  5272  0901  0008               	return
  5273  0902  28FC               	goto	l5071
  5274  0903                     __end_of_i2c_readDataBlock:
  5275                           
  5276                           	psect	text6
  5277  1489                     __ptext6:	
  5278 ;; *************** function _resetGestureParameters *****************
  5279 ;; Defined at:
  5280 ;;		line 694 in file "APDS9960.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;		None
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;		None
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  1    wreg      void 
  5287 ;; Registers used:
  5288 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5289 ;; Tracked objects:
  5290 ;;		On entry : 1F/0
  5291 ;;		On exit  : 1F/1
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5298 ;;Total ram usage:        0 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; Hardware stack levels required when called:    4
  5301 ;; This function calls:
  5302 ;;		Nothing
  5303 ;; This function is called by:
  5304 ;;		_readGesture
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           
  5309                           ;psect for function _resetGestureParameters
  5310  1489                     _resetGestureParameters:
  5311                           
  5312                           ;APDS9960.c: 696:     gesture_data_.index = 0;
  5313                           
  5314                           ;incstack = 0
  5315                           ; Regs used in _resetGestureParameters: [wreg+fsr1l+fsr1h+status,2+status,0]
  5316  1489  306C               	movlw	108
  5317  148A  0086               	movwf	6
  5318  148B  3023               	movlw	35
  5319  148C  0087               	movwf	7
  5320  148D  0181               	clrf	1
  5321                           
  5322                           ;APDS9960.c: 697:     gesture_data_.total_gestures = 0;
  5323  148E  306D               	movlw	109
  5324  148F  0086               	movwf	6
  5325  1490  3023               	movlw	35
  5326  1491  0087               	movwf	7
  5327  1492  0181               	clrf	1
  5328                           
  5329                           ;APDS9960.c: 699:     gesture_ud_delta_ = 0;
  5330  1493  01E7               	clrf	_gesture_ud_delta_
  5331  1494  01E8               	clrf	_gesture_ud_delta_+1
  5332                           
  5333                           ;APDS9960.c: 700:     gesture_lr_delta_ = 0;
  5334  1495  01E5               	clrf	_gesture_lr_delta_
  5335  1496  01E6               	clrf	_gesture_lr_delta_+1
  5336                           
  5337                           ;APDS9960.c: 702:     gesture_ud_count_ = 0;
  5338  1497  01E3               	clrf	_gesture_ud_count_
  5339  1498  01E4               	clrf	_gesture_ud_count_+1
  5340                           
  5341                           ;APDS9960.c: 703:     gesture_lr_count_ = 0;
  5342  1499  01E1               	clrf	_gesture_lr_count_
  5343  149A  01E2               	clrf	_gesture_lr_count_+1
  5344                           
  5345                           ;APDS9960.c: 705:     gesture_near_count_ = 0;
  5346  149B  0021               	movlb	1	; select bank1
  5347  149C  01DA               	clrf	_gesture_near_count_^(0+128)
  5348  149D  01DB               	clrf	(_gesture_near_count_+1)^(0+128)
  5349                           
  5350                           ;APDS9960.c: 706:     gesture_far_count_ = 0;
  5351  149E  01D8               	clrf	_gesture_far_count_^(0+128)
  5352  149F  01D9               	clrf	(_gesture_far_count_+1)^(0+128)
  5353                           
  5354                           ;APDS9960.c: 708:     gesture_state_ = 0;
  5355  14A0  01D6               	clrf	_gesture_state_^(0+128)
  5356  14A1  01D7               	clrf	(_gesture_state_+1)^(0+128)
  5357                           
  5358                           ;APDS9960.c: 709:     gesture_motion_ = DIR_NONE;
  5359  14A2  01D4               	clrf	_gesture_motion_^(0+128)
  5360  14A3  01D5               	clrf	(_gesture_motion_+1)^(0+128)
  5361  14A4  0008               	return
  5362  14A5                     __end_of_resetGestureParameters:
  5363                           
  5364                           	psect	text7
  5365  005E                     __ptext7:	
  5366 ;; *************** function _processGestureData *****************
  5367 ;; Defined at:
  5368 ;;		line 717 in file "APDS9960.c"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;		None
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;  i               2   38[BANK0 ] int 
  5373 ;;  lr_delta        2   36[BANK0 ] int 
  5374 ;;  ud_delta        2   34[BANK0 ] int 
  5375 ;;  lr_ratio_las    2   24[BANK0 ] int 
  5376 ;;  ud_ratio_las    2   22[BANK0 ] int 
  5377 ;;  lr_ratio_fir    2   20[BANK0 ] int 
  5378 ;;  ud_ratio_fir    2   18[BANK0 ] int 
  5379 ;;  r_first         1   33[BANK0 ] unsigned char 
  5380 ;;  l_first         1   32[BANK0 ] unsigned char 
  5381 ;;  d_first         1   31[BANK0 ] unsigned char 
  5382 ;;  u_first         1   30[BANK0 ] unsigned char 
  5383 ;;  r_last          1   29[BANK0 ] unsigned char 
  5384 ;;  l_last          1   28[BANK0 ] unsigned char 
  5385 ;;  d_last          1   27[BANK0 ] unsigned char 
  5386 ;;  u_last          1   26[BANK0 ] unsigned char 
  5387 ;; Return value:  Size  Location     Type
  5388 ;;                  1    wreg      _Bool 
  5389 ;; Registers used:
  5390 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5399 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5400 ;;Total ram usage:       25 bytes
  5401 ;; Hardware stack levels used:    1
  5402 ;; Hardware stack levels required when called:    5
  5403 ;; This function calls:
  5404 ;;		___awdiv
  5405 ;;		___wmul
  5406 ;;		_abs
  5407 ;; This function is called by:
  5408 ;;		_readGesture
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           
  5413                           ;psect for function _processGestureData
  5414  005E                     _processGestureData:
  5415                           
  5416                           ;APDS9960.c: 719:     uint8_t u_first = 0;
  5417                           
  5418                           ;incstack = 0
  5419                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5420  005E  0020               	movlb	0	; select bank0
  5421  005F  01BE               	clrf	processGestureData@u_first
  5422                           
  5423                           ;APDS9960.c: 720:     uint8_t d_first = 0;
  5424  0060  01BF               	clrf	processGestureData@d_first
  5425                           
  5426                           ;APDS9960.c: 721:     uint8_t l_first = 0;
  5427  0061  01C0               	clrf	processGestureData@l_first
  5428                           
  5429                           ;APDS9960.c: 722:     uint8_t r_first = 0;
  5430  0062  01C1               	clrf	processGestureData@r_first
  5431                           
  5432                           ;APDS9960.c: 723:     uint8_t u_last = 0;
  5433  0063  01BA               	clrf	processGestureData@u_last
  5434                           
  5435                           ;APDS9960.c: 724:     uint8_t d_last = 0;
  5436  0064  01BB               	clrf	processGestureData@d_last
  5437                           
  5438                           ;APDS9960.c: 725:     uint8_t l_last = 0;
  5439  0065  01BC               	clrf	processGestureData@l_last
  5440                           
  5441                           ;APDS9960.c: 726:     uint8_t r_last = 0;
  5442  0066  01BD               	clrf	processGestureData@r_last
  5443                           
  5444                           ;APDS9960.c: 727:     int ud_ratio_first;;APDS9960.c: 728:     int lr_ratio_first;;APDS9
      +                          960.c: 729:     int ud_ratio_last;;APDS9960.c: 730:     int lr_ratio_last;;APDS9960.c: 7
      +                          31:     int ud_delta;;APDS9960.c: 732:     int lr_delta;;APDS9960.c: 733:     int i;;APD
      +                          S9960.c: 736:     if( gesture_data_.total_gestures <= 4 ) {
  5445  0067  306D               	movlw	109
  5446  0068  0086               	movwf	6
  5447  0069  3023               	movlw	35
  5448  006A  0087               	movwf	7
  5449  006B  3005               	movlw	5
  5450  006C  0201               	subwf	1,w
  5451  006D  1803               	skipnc
  5452  006E  2871               	goto	l5657
  5453  006F                     l5653:
  5454                           
  5455                           ;APDS9960.c: 737:         return 0;
  5456  006F  3000               	movlw	0
  5457  0070  0008               	return
  5458  0071                     l5657:
  5459                           
  5460                           ;APDS9960.c: 741:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  5461  0071  306D               	movlw	109
  5462  0072  0086               	movwf	6
  5463  0073  3023               	movlw	35
  5464  0074  0087               	movwf	7
  5465  0075  3021               	movlw	33
  5466  0076  0201               	subwf	1,w
  5467  0077  1803               	skipnc
  5468  0078  2996               	goto	l5709
  5469  0079  306D               	movlw	109
  5470  007A  0086               	movwf	6
  5471  007B  3023               	movlw	35
  5472  007C  0087               	movwf	7
  5473  007D  0801               	movf	1,w
  5474  007E  1903               	btfsc	3,2
  5475  007F  2996               	goto	l5709
  5476                           
  5477                           ;APDS9960.c: 742: ;APDS9960.c: 745:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  5478  0080  01C6               	clrf	processGestureData@i
  5479  0081  01C7               	clrf	processGestureData@i+1
  5480  0082  2887               	goto	l5675
  5481  0083                     l5673:	
  5482                           ;APDS9960.c: 755:                 break;
  5483                           
  5484                           
  5485                           ;APDS9960.c: 757:         }
  5486  0083  3001               	movlw	1
  5487  0084  07C6               	addwf	processGestureData@i,f
  5488  0085  3000               	movlw	0
  5489  0086  3DC7               	addwfc	processGestureData@i+1,f
  5490  0087                     l5675:
  5491  0087  306D               	movlw	109
  5492  0088  0086               	movwf	6
  5493  0089  3023               	movlw	35
  5494  008A  0087               	movwf	7
  5495  008B  0847               	movf	processGestureData@i+1,w
  5496  008C  3A80               	xorlw	128
  5497  008D  00AF               	movwf	??_processGestureData
  5498  008E  3080               	movlw	128
  5499  008F  022F               	subwf	??_processGestureData,w
  5500  0090  1D03               	skipz
  5501  0091  2894               	goto	u3375
  5502  0092  0801               	movf	1,w
  5503  0093  0246               	subwf	processGestureData@i,w
  5504  0094                     u3375:
  5505  0094  1803               	btfsc	3,0
  5506  0095  2907               	goto	l5677
  5507                           
  5508                           ;APDS9960.c: 746:             if( (gesture_data_.u_data[i] > 10) &&
  5509  0096  30EC               	movlw	236
  5510  0097  0020               	movlb	0	; select bank0
  5511  0098  00AF               	movwf	??_processGestureData
  5512  0099  3022               	movlw	34
  5513  009A  00B0               	movwf	??_processGestureData+1
  5514  009B  0846               	movf	processGestureData@i,w
  5515  009C  072F               	addwf	??_processGestureData,w
  5516  009D  0086               	movwf	6
  5517  009E  0847               	movf	processGestureData@i+1,w
  5518  009F  3D30               	addwfc	??_processGestureData+1,w
  5519  00A0  0087               	movwf	7
  5520  00A1  300B               	movlw	11
  5521  00A2  0201               	subwf	1,w
  5522  00A3  1C03               	skipc
  5523  00A4  2883               	goto	l5673
  5524  00A5  300C               	movlw	12
  5525  00A6  00AF               	movwf	??_processGestureData
  5526  00A7  3023               	movlw	35
  5527  00A8  00B0               	movwf	??_processGestureData+1
  5528  00A9  0846               	movf	processGestureData@i,w
  5529  00AA  072F               	addwf	??_processGestureData,w
  5530  00AB  0086               	movwf	6
  5531  00AC  0847               	movf	processGestureData@i+1,w
  5532  00AD  3D30               	addwfc	??_processGestureData+1,w
  5533  00AE  0087               	movwf	7
  5534  00AF  300B               	movlw	11
  5535  00B0  0201               	subwf	1,w
  5536  00B1  1C03               	skipc
  5537  00B2  2883               	goto	l5673
  5538  00B3  302C               	movlw	44
  5539  00B4  00AF               	movwf	??_processGestureData
  5540  00B5  3023               	movlw	35
  5541  00B6  00B0               	movwf	??_processGestureData+1
  5542  00B7  0846               	movf	processGestureData@i,w
  5543  00B8  072F               	addwf	??_processGestureData,w
  5544  00B9  0086               	movwf	6
  5545  00BA  0847               	movf	processGestureData@i+1,w
  5546  00BB  3D30               	addwfc	??_processGestureData+1,w
  5547  00BC  0087               	movwf	7
  5548  00BD  300B               	movlw	11
  5549  00BE  0201               	subwf	1,w
  5550  00BF  1C03               	skipc
  5551  00C0  2883               	goto	l5673
  5552  00C1  304C               	movlw	76
  5553  00C2  00AF               	movwf	??_processGestureData
  5554  00C3  3023               	movlw	35
  5555  00C4  00B0               	movwf	??_processGestureData+1
  5556  00C5  0846               	movf	processGestureData@i,w
  5557  00C6  072F               	addwf	??_processGestureData,w
  5558  00C7  0086               	movwf	6
  5559  00C8  0847               	movf	processGestureData@i+1,w
  5560  00C9  3D30               	addwfc	??_processGestureData+1,w
  5561  00CA  0087               	movwf	7
  5562  00CB  300B               	movlw	11
  5563  00CC  0201               	subwf	1,w
  5564  00CD  1C03               	skipc
  5565  00CE  2883               	goto	l5673
  5566                           
  5567                           ;APDS9960.c: 749:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 751:   
      +                                        u_first = gesture_data_.u_data[i];
  5568  00CF  30EC               	movlw	236
  5569  00D0  00AF               	movwf	??_processGestureData
  5570  00D1  3022               	movlw	34
  5571  00D2  00B0               	movwf	??_processGestureData+1
  5572  00D3  0846               	movf	processGestureData@i,w
  5573  00D4  072F               	addwf	??_processGestureData,w
  5574  00D5  0086               	movwf	6
  5575  00D6  0847               	movf	processGestureData@i+1,w
  5576  00D7  3D30               	addwfc	??_processGestureData+1,w
  5577  00D8  0087               	movwf	7
  5578  00D9  0801               	movf	1,w
  5579  00DA  00B1               	movwf	??_processGestureData+2
  5580  00DB  0831               	movf	??_processGestureData+2,w
  5581  00DC  00BE               	movwf	processGestureData@u_first
  5582                           
  5583                           ;APDS9960.c: 752:                 d_first = gesture_data_.d_data[i];
  5584  00DD  300C               	movlw	12
  5585  00DE  00AF               	movwf	??_processGestureData
  5586  00DF  3023               	movlw	35
  5587  00E0  00B0               	movwf	??_processGestureData+1
  5588  00E1  0846               	movf	processGestureData@i,w
  5589  00E2  072F               	addwf	??_processGestureData,w
  5590  00E3  0086               	movwf	6
  5591  00E4  0847               	movf	processGestureData@i+1,w
  5592  00E5  3D30               	addwfc	??_processGestureData+1,w
  5593  00E6  0087               	movwf	7
  5594  00E7  0801               	movf	1,w
  5595  00E8  00B1               	movwf	??_processGestureData+2
  5596  00E9  0831               	movf	??_processGestureData+2,w
  5597  00EA  00BF               	movwf	processGestureData@d_first
  5598                           
  5599                           ;APDS9960.c: 753:                 l_first = gesture_data_.l_data[i];
  5600  00EB  302C               	movlw	44
  5601  00EC  00AF               	movwf	??_processGestureData
  5602  00ED  3023               	movlw	35
  5603  00EE  00B0               	movwf	??_processGestureData+1
  5604  00EF  0846               	movf	processGestureData@i,w
  5605  00F0  072F               	addwf	??_processGestureData,w
  5606  00F1  0086               	movwf	6
  5607  00F2  0847               	movf	processGestureData@i+1,w
  5608  00F3  3D30               	addwfc	??_processGestureData+1,w
  5609  00F4  0087               	movwf	7
  5610  00F5  0801               	movf	1,w
  5611  00F6  00B1               	movwf	??_processGestureData+2
  5612  00F7  0831               	movf	??_processGestureData+2,w
  5613  00F8  00C0               	movwf	processGestureData@l_first
  5614                           
  5615                           ;APDS9960.c: 754:                 r_first = gesture_data_.r_data[i];
  5616  00F9  304C               	movlw	76
  5617  00FA  00AF               	movwf	??_processGestureData
  5618  00FB  3023               	movlw	35
  5619  00FC  00B0               	movwf	??_processGestureData+1
  5620  00FD  0846               	movf	processGestureData@i,w
  5621  00FE  072F               	addwf	??_processGestureData,w
  5622  00FF  0086               	movwf	6
  5623  0100  0847               	movf	processGestureData@i+1,w
  5624  0101  3D30               	addwfc	??_processGestureData+1,w
  5625  0102  0087               	movwf	7
  5626  0103  0801               	movf	1,w
  5627  0104  00B1               	movwf	??_processGestureData+2
  5628  0105  0831               	movf	??_processGestureData+2,w
  5629  0106  00C1               	movwf	processGestureData@r_first
  5630  0107                     l5677:
  5631                           
  5632                           ;APDS9960.c: 760:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  5633  0107  0020               	movlb	0	; select bank0
  5634  0108  083E               	movf	processGestureData@u_first,w
  5635  0109  1903               	btfsc	3,2
  5636  010A  286F               	goto	l5653
  5637  010B  083F               	movf	processGestureData@d_first,w
  5638  010C  1903               	btfsc	3,2
  5639  010D  286F               	goto	l5653
  5640  010E  0840               	movf	processGestureData@l_first,w
  5641  010F  1903               	btfsc	3,2
  5642  0110  286F               	goto	l5653
  5643  0111  0841               	movf	processGestureData@r_first,w
  5644  0112  1903               	btfsc	3,2
  5645  0113  286F               	goto	l5653
  5646                           
  5647                           ;APDS9960.c: 766:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  5648  0114  306D               	movlw	109
  5649  0115  0086               	movwf	6
  5650  0116  3023               	movlw	35
  5651  0117  0087               	movwf	7
  5652  0118  0801               	movf	1,w
  5653  0119  3EFF               	addlw	255
  5654  011A  00C6               	movwf	processGestureData@i
  5655  011B  30FF               	movlw	255
  5656  011C  1803               	skipnc
  5657  011D  3000               	movlw	0
  5658  011E  00C7               	movwf	processGestureData@i+1
  5659                           
  5660                           ;APDS9960.c: 787:                 break;
  5661  011F  2924               	goto	l5691
  5662  0120                     l5705:
  5663                           
  5664                           ;APDS9960.c: 789:         }
  5665  0120  30FF               	movlw	255
  5666  0121  07C6               	addwf	processGestureData@i,f
  5667  0122  30FF               	movlw	255
  5668  0123  3DC7               	addwfc	processGestureData@i+1,f
  5669  0124                     l5691:
  5670  0124  1BC7               	btfsc	processGestureData@i+1,7
  5671  0125  2996               	goto	l5709
  5672                           
  5673                           ;APDS9960.c: 778:             if( (gesture_data_.u_data[i] > 10) &&
  5674  0126  30EC               	movlw	236
  5675  0127  00AF               	movwf	??_processGestureData
  5676  0128  3022               	movlw	34
  5677  0129  00B0               	movwf	??_processGestureData+1
  5678  012A  0846               	movf	processGestureData@i,w
  5679  012B  072F               	addwf	??_processGestureData,w
  5680  012C  0086               	movwf	6
  5681  012D  0847               	movf	processGestureData@i+1,w
  5682  012E  3D30               	addwfc	??_processGestureData+1,w
  5683  012F  0087               	movwf	7
  5684  0130  300B               	movlw	11
  5685  0131  0201               	subwf	1,w
  5686  0132  1C03               	skipc
  5687  0133  2920               	goto	l5705
  5688  0134  300C               	movlw	12
  5689  0135  00AF               	movwf	??_processGestureData
  5690  0136  3023               	movlw	35
  5691  0137  00B0               	movwf	??_processGestureData+1
  5692  0138  0846               	movf	processGestureData@i,w
  5693  0139  072F               	addwf	??_processGestureData,w
  5694  013A  0086               	movwf	6
  5695  013B  0847               	movf	processGestureData@i+1,w
  5696  013C  3D30               	addwfc	??_processGestureData+1,w
  5697  013D  0087               	movwf	7
  5698  013E  300B               	movlw	11
  5699  013F  0201               	subwf	1,w
  5700  0140  1C03               	skipc
  5701  0141  2920               	goto	l5705
  5702  0142  302C               	movlw	44
  5703  0143  00AF               	movwf	??_processGestureData
  5704  0144  3023               	movlw	35
  5705  0145  00B0               	movwf	??_processGestureData+1
  5706  0146  0846               	movf	processGestureData@i,w
  5707  0147  072F               	addwf	??_processGestureData,w
  5708  0148  0086               	movwf	6
  5709  0149  0847               	movf	processGestureData@i+1,w
  5710  014A  3D30               	addwfc	??_processGestureData+1,w
  5711  014B  0087               	movwf	7
  5712  014C  300B               	movlw	11
  5713  014D  0201               	subwf	1,w
  5714  014E  1C03               	skipc
  5715  014F  2920               	goto	l5705
  5716  0150  304C               	movlw	76
  5717  0151  00AF               	movwf	??_processGestureData
  5718  0152  3023               	movlw	35
  5719  0153  00B0               	movwf	??_processGestureData+1
  5720  0154  0846               	movf	processGestureData@i,w
  5721  0155  072F               	addwf	??_processGestureData,w
  5722  0156  0086               	movwf	6
  5723  0157  0847               	movf	processGestureData@i+1,w
  5724  0158  3D30               	addwfc	??_processGestureData+1,w
  5725  0159  0087               	movwf	7
  5726  015A  300B               	movlw	11
  5727  015B  0201               	subwf	1,w
  5728  015C  1C03               	skipc
  5729  015D  2920               	goto	l5705
  5730                           
  5731                           ;APDS9960.c: 781:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 783:   
      +                                        u_last = gesture_data_.u_data[i];
  5732  015E  30EC               	movlw	236
  5733  015F  00AF               	movwf	??_processGestureData
  5734  0160  3022               	movlw	34
  5735  0161  00B0               	movwf	??_processGestureData+1
  5736  0162  0846               	movf	processGestureData@i,w
  5737  0163  072F               	addwf	??_processGestureData,w
  5738  0164  0086               	movwf	6
  5739  0165  0847               	movf	processGestureData@i+1,w
  5740  0166  3D30               	addwfc	??_processGestureData+1,w
  5741  0167  0087               	movwf	7
  5742  0168  0801               	movf	1,w
  5743  0169  00B1               	movwf	??_processGestureData+2
  5744  016A  0831               	movf	??_processGestureData+2,w
  5745  016B  00BA               	movwf	processGestureData@u_last
  5746                           
  5747                           ;APDS9960.c: 784:                 d_last = gesture_data_.d_data[i];
  5748  016C  300C               	movlw	12
  5749  016D  00AF               	movwf	??_processGestureData
  5750  016E  3023               	movlw	35
  5751  016F  00B0               	movwf	??_processGestureData+1
  5752  0170  0846               	movf	processGestureData@i,w
  5753  0171  072F               	addwf	??_processGestureData,w
  5754  0172  0086               	movwf	6
  5755  0173  0847               	movf	processGestureData@i+1,w
  5756  0174  3D30               	addwfc	??_processGestureData+1,w
  5757  0175  0087               	movwf	7
  5758  0176  0801               	movf	1,w
  5759  0177  00B1               	movwf	??_processGestureData+2
  5760  0178  0831               	movf	??_processGestureData+2,w
  5761  0179  00BB               	movwf	processGestureData@d_last
  5762                           
  5763                           ;APDS9960.c: 785:                 l_last = gesture_data_.l_data[i];
  5764  017A  302C               	movlw	44
  5765  017B  00AF               	movwf	??_processGestureData
  5766  017C  3023               	movlw	35
  5767  017D  00B0               	movwf	??_processGestureData+1
  5768  017E  0846               	movf	processGestureData@i,w
  5769  017F  072F               	addwf	??_processGestureData,w
  5770  0180  0086               	movwf	6
  5771  0181  0847               	movf	processGestureData@i+1,w
  5772  0182  3D30               	addwfc	??_processGestureData+1,w
  5773  0183  0087               	movwf	7
  5774  0184  0801               	movf	1,w
  5775  0185  00B1               	movwf	??_processGestureData+2
  5776  0186  0831               	movf	??_processGestureData+2,w
  5777  0187  00BC               	movwf	processGestureData@l_last
  5778                           
  5779                           ;APDS9960.c: 786:                 r_last = gesture_data_.r_data[i];
  5780  0188  304C               	movlw	76
  5781  0189  00AF               	movwf	??_processGestureData
  5782  018A  3023               	movlw	35
  5783  018B  00B0               	movwf	??_processGestureData+1
  5784  018C  0846               	movf	processGestureData@i,w
  5785  018D  072F               	addwf	??_processGestureData,w
  5786  018E  0086               	movwf	6
  5787  018F  0847               	movf	processGestureData@i+1,w
  5788  0190  3D30               	addwfc	??_processGestureData+1,w
  5789  0191  0087               	movwf	7
  5790  0192  0801               	movf	1,w
  5791  0193  00B1               	movwf	??_processGestureData+2
  5792  0194  0831               	movf	??_processGestureData+2,w
  5793  0195  00BD               	movwf	processGestureData@r_last
  5794  0196                     l5709:
  5795                           
  5796                           ;APDS9960.c: 793:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  5797  0196  083E               	movf	processGestureData@u_first,w
  5798  0197  073F               	addwf	processGestureData@d_first,w
  5799  0198  00A6               	movwf	___awdiv@divisor
  5800  0199  01A7               	clrf	___awdiv@divisor+1
  5801  019A  0DA7               	rlf	___awdiv@divisor+1,f
  5802  019B  083F               	movf	processGestureData@d_first,w
  5803  019C  023E               	subwf	processGestureData@u_first,w
  5804  019D  00A0               	movwf	___wmul@multiplier
  5805  019E  01A1               	clrf	___wmul@multiplier+1
  5806  019F  1C03               	skipc
  5807  01A0  03A1               	decf	___wmul@multiplier+1,f
  5808  01A1  3064               	movlw	100
  5809  01A2  00A2               	movwf	___wmul@multiplicand
  5810  01A3  3000               	movlw	0
  5811  01A4  00A3               	movwf	___wmul@multiplicand+1
  5812  01A5  3194  246E  3180   	fcall	___wmul
  5813  01A8  0821               	movf	?___wmul+1,w
  5814  01A9  00A9               	movwf	___awdiv@dividend+1
  5815  01AA  0820               	movf	?___wmul,w
  5816  01AB  00A8               	movwf	___awdiv@dividend
  5817  01AC  318A  22A7  3180   	fcall	___awdiv
  5818  01AF  0827               	movf	?___awdiv+1,w
  5819  01B0  00B3               	movwf	processGestureData@ud_ratio_first+1
  5820  01B1  0826               	movf	?___awdiv,w
  5821  01B2  00B2               	movwf	processGestureData@ud_ratio_first
  5822                           
  5823                           ;APDS9960.c: 794:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  5824  01B3  0840               	movf	processGestureData@l_first,w
  5825  01B4  0741               	addwf	processGestureData@r_first,w
  5826  01B5  00A6               	movwf	___awdiv@divisor
  5827  01B6  01A7               	clrf	___awdiv@divisor+1
  5828  01B7  0DA7               	rlf	___awdiv@divisor+1,f
  5829  01B8  0841               	movf	processGestureData@r_first,w
  5830  01B9  0240               	subwf	processGestureData@l_first,w
  5831  01BA  00A0               	movwf	___wmul@multiplier
  5832  01BB  01A1               	clrf	___wmul@multiplier+1
  5833  01BC  1C03               	skipc
  5834  01BD  03A1               	decf	___wmul@multiplier+1,f
  5835  01BE  3064               	movlw	100
  5836  01BF  00A2               	movwf	___wmul@multiplicand
  5837  01C0  3000               	movlw	0
  5838  01C1  00A3               	movwf	___wmul@multiplicand+1
  5839  01C2  3194  246E  3180   	fcall	___wmul
  5840  01C5  0821               	movf	?___wmul+1,w
  5841  01C6  00A9               	movwf	___awdiv@dividend+1
  5842  01C7  0820               	movf	?___wmul,w
  5843  01C8  00A8               	movwf	___awdiv@dividend
  5844  01C9  318A  22A7  3180   	fcall	___awdiv
  5845  01CC  0827               	movf	?___awdiv+1,w
  5846  01CD  00B5               	movwf	processGestureData@lr_ratio_first+1
  5847  01CE  0826               	movf	?___awdiv,w
  5848  01CF  00B4               	movwf	processGestureData@lr_ratio_first
  5849                           
  5850                           ;APDS9960.c: 795:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  5851  01D0  083A               	movf	processGestureData@u_last,w
  5852  01D1  073B               	addwf	processGestureData@d_last,w
  5853  01D2  00A6               	movwf	___awdiv@divisor
  5854  01D3  01A7               	clrf	___awdiv@divisor+1
  5855  01D4  0DA7               	rlf	___awdiv@divisor+1,f
  5856  01D5  083B               	movf	processGestureData@d_last,w
  5857  01D6  023A               	subwf	processGestureData@u_last,w
  5858  01D7  00A0               	movwf	___wmul@multiplier
  5859  01D8  01A1               	clrf	___wmul@multiplier+1
  5860  01D9  1C03               	skipc
  5861  01DA  03A1               	decf	___wmul@multiplier+1,f
  5862  01DB  3064               	movlw	100
  5863  01DC  00A2               	movwf	___wmul@multiplicand
  5864  01DD  3000               	movlw	0
  5865  01DE  00A3               	movwf	___wmul@multiplicand+1
  5866  01DF  3194  246E  3180   	fcall	___wmul
  5867  01E2  0821               	movf	?___wmul+1,w
  5868  01E3  00A9               	movwf	___awdiv@dividend+1
  5869  01E4  0820               	movf	?___wmul,w
  5870  01E5  00A8               	movwf	___awdiv@dividend
  5871  01E6  318A  22A7  3180   	fcall	___awdiv
  5872  01E9  0827               	movf	?___awdiv+1,w
  5873  01EA  00B7               	movwf	processGestureData@ud_ratio_last+1
  5874  01EB  0826               	movf	?___awdiv,w
  5875  01EC  00B6               	movwf	processGestureData@ud_ratio_last
  5876                           
  5877                           ;APDS9960.c: 796:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  5878  01ED  083C               	movf	processGestureData@l_last,w
  5879  01EE  073D               	addwf	processGestureData@r_last,w
  5880  01EF  00A6               	movwf	___awdiv@divisor
  5881  01F0  01A7               	clrf	___awdiv@divisor+1
  5882  01F1  0DA7               	rlf	___awdiv@divisor+1,f
  5883  01F2  083D               	movf	processGestureData@r_last,w
  5884  01F3  023C               	subwf	processGestureData@l_last,w
  5885  01F4  00A0               	movwf	___wmul@multiplier
  5886  01F5  01A1               	clrf	___wmul@multiplier+1
  5887  01F6  1C03               	skipc
  5888  01F7  03A1               	decf	___wmul@multiplier+1,f
  5889  01F8  3064               	movlw	100
  5890  01F9  00A2               	movwf	___wmul@multiplicand
  5891  01FA  3000               	movlw	0
  5892  01FB  00A3               	movwf	___wmul@multiplicand+1
  5893  01FC  3194  246E  3180   	fcall	___wmul
  5894  01FF  0821               	movf	?___wmul+1,w
  5895  0200  00A9               	movwf	___awdiv@dividend+1
  5896  0201  0820               	movf	?___wmul,w
  5897  0202  00A8               	movwf	___awdiv@dividend
  5898  0203  318A  22A7  3180   	fcall	___awdiv
  5899  0206  0827               	movf	?___awdiv+1,w
  5900  0207  00B9               	movwf	processGestureData@lr_ratio_last+1
  5901  0208  0826               	movf	?___awdiv,w
  5902  0209  00B8               	movwf	processGestureData@lr_ratio_last
  5903                           
  5904                           ;APDS9960.c: 821:     ud_delta = ud_ratio_last - ud_ratio_first;
  5905  020A  0832               	movf	processGestureData@ud_ratio_first,w
  5906  020B  0236               	subwf	processGestureData@ud_ratio_last,w
  5907  020C  00C2               	movwf	processGestureData@ud_delta
  5908  020D  0833               	movf	processGestureData@ud_ratio_first+1,w
  5909  020E  3B37               	subwfb	processGestureData@ud_ratio_last+1,w
  5910  020F  00C3               	movwf	processGestureData@ud_delta+1
  5911                           
  5912                           ;APDS9960.c: 822:     lr_delta = lr_ratio_last - lr_ratio_first;
  5913  0210  0834               	movf	processGestureData@lr_ratio_first,w
  5914  0211  0238               	subwf	processGestureData@lr_ratio_last,w
  5915  0212  00C4               	movwf	processGestureData@lr_delta
  5916  0213  0835               	movf	processGestureData@lr_ratio_first+1,w
  5917  0214  3B39               	subwfb	processGestureData@lr_ratio_last+1,w
  5918  0215  00C5               	movwf	processGestureData@lr_delta+1
  5919                           
  5920                           ;APDS9960.c: 833:     gesture_ud_delta_ += ud_delta;
  5921  0216  0842               	movf	processGestureData@ud_delta,w
  5922  0217  07E7               	addwf	_gesture_ud_delta_,f
  5923  0218  0843               	movf	processGestureData@ud_delta+1,w
  5924  0219  3DE8               	addwfc	_gesture_ud_delta_+1,f
  5925                           
  5926                           ;APDS9960.c: 834:     gesture_lr_delta_ += lr_delta;
  5927  021A  0844               	movf	processGestureData@lr_delta,w
  5928  021B  07E5               	addwf	_gesture_lr_delta_,f
  5929  021C  0845               	movf	processGestureData@lr_delta+1,w
  5930  021D  3DE6               	addwfc	_gesture_lr_delta_+1,f
  5931                           
  5932                           ;APDS9960.c: 845:     if( gesture_ud_delta_ >= 50 ) {
  5933  021E  0868               	movf	_gesture_ud_delta_+1,w
  5934  021F  3A80               	xorlw	128
  5935  0220  00AF               	movwf	??_processGestureData
  5936  0221  3080               	movlw	128
  5937  0222  022F               	subwf	??_processGestureData,w
  5938  0223  1D03               	skipz
  5939  0224  2A27               	goto	u3475
  5940  0225  3032               	movlw	50
  5941  0226  0267               	subwf	_gesture_ud_delta_,w
  5942  0227                     u3475:
  5943  0227  1C03               	skipc
  5944  0228  2A2E               	goto	l5723
  5945                           
  5946                           ;APDS9960.c: 846:         gesture_ud_count_ = 1;
  5947  0229  3001               	movlw	1
  5948  022A  0020               	movlb	0	; select bank0
  5949  022B  00E3               	movwf	_gesture_ud_count_
  5950  022C  3000               	movlw	0
  5951  022D  2A3E               	goto	L2
  5952  022E                     l5723:	
  5953                           ;APDS9960.c: 847:     } else if( gesture_ud_delta_ <= -50 ) {
  5954                           
  5955  022E  0020               	movlb	0	; select bank0
  5956  022F  0868               	movf	_gesture_ud_delta_+1,w
  5957  0230  3A80               	xorlw	128
  5958  0231  00AF               	movwf	??_processGestureData
  5959  0232  307F               	movlw	127
  5960  0233  022F               	subwf	??_processGestureData,w
  5961  0234  1D03               	skipz
  5962  0235  2A38               	goto	u3485
  5963  0236  30CF               	movlw	207
  5964  0237  0267               	subwf	_gesture_ud_delta_,w
  5965  0238                     u3485:
  5966  0238  1803               	skipnc
  5967  0239  2A40               	goto	l5727
  5968                           
  5969                           ;APDS9960.c: 848:         gesture_ud_count_ = -1;
  5970  023A  30FF               	movlw	255
  5971  023B  0020               	movlb	0	; select bank0
  5972  023C  00E3               	movwf	_gesture_ud_count_
  5973  023D  30FF               	movlw	255
  5974  023E                     L2:
  5975  023E  00E4               	movwf	_gesture_ud_count_+1
  5976                           
  5977                           ;APDS9960.c: 849:     } else {
  5978  023F  2A43               	goto	l5729
  5979  0240                     l5727:
  5980                           
  5981                           ;APDS9960.c: 850:         gesture_ud_count_ = 0;
  5982  0240  0020               	movlb	0	; select bank0
  5983  0241  01E3               	clrf	_gesture_ud_count_
  5984  0242  01E4               	clrf	_gesture_ud_count_+1
  5985  0243                     l5729:
  5986                           
  5987                           ;APDS9960.c: 854:     if( gesture_lr_delta_ >= 50 ) {
  5988  0243  0866               	movf	_gesture_lr_delta_+1,w
  5989  0244  3A80               	xorlw	128
  5990  0245  00AF               	movwf	??_processGestureData
  5991  0246  3080               	movlw	128
  5992  0247  022F               	subwf	??_processGestureData,w
  5993  0248  1D03               	skipz
  5994  0249  2A4C               	goto	u3495
  5995  024A  3032               	movlw	50
  5996  024B  0265               	subwf	_gesture_lr_delta_,w
  5997  024C                     u3495:
  5998  024C  1C03               	skipc
  5999  024D  2A53               	goto	l5733
  6000                           
  6001                           ;APDS9960.c: 855:         gesture_lr_count_ = 1;
  6002  024E  3001               	movlw	1
  6003  024F  0020               	movlb	0	; select bank0
  6004  0250  00E1               	movwf	_gesture_lr_count_
  6005  0251  3000               	movlw	0
  6006  0252  2A63               	goto	L3
  6007  0253                     l5733:	
  6008                           ;APDS9960.c: 856:     } else if( gesture_lr_delta_ <= -50 ) {
  6009                           
  6010  0253  0020               	movlb	0	; select bank0
  6011  0254  0866               	movf	_gesture_lr_delta_+1,w
  6012  0255  3A80               	xorlw	128
  6013  0256  00AF               	movwf	??_processGestureData
  6014  0257  307F               	movlw	127
  6015  0258  022F               	subwf	??_processGestureData,w
  6016  0259  1D03               	skipz
  6017  025A  2A5D               	goto	u3505
  6018  025B  30CF               	movlw	207
  6019  025C  0265               	subwf	_gesture_lr_delta_,w
  6020  025D                     u3505:
  6021  025D  1803               	skipnc
  6022  025E  2A65               	goto	l5737
  6023                           
  6024                           ;APDS9960.c: 857:         gesture_lr_count_ = -1;
  6025  025F  30FF               	movlw	255
  6026  0260  0020               	movlb	0	; select bank0
  6027  0261  00E1               	movwf	_gesture_lr_count_
  6028  0262  30FF               	movlw	255
  6029  0263                     L3:
  6030  0263  00E2               	movwf	_gesture_lr_count_+1
  6031                           
  6032                           ;APDS9960.c: 858:     } else {
  6033  0264  2A68               	goto	l5739
  6034  0265                     l5737:
  6035                           
  6036                           ;APDS9960.c: 859:         gesture_lr_count_ = 0;
  6037  0265  0020               	movlb	0	; select bank0
  6038  0266  01E1               	clrf	_gesture_lr_count_
  6039  0267  01E2               	clrf	_gesture_lr_count_+1
  6040  0268                     l5739:
  6041                           
  6042                           ;APDS9960.c: 863:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  6043  0268  0863               	movf	_gesture_ud_count_,w
  6044  0269  0464               	iorwf	_gesture_ud_count_+1,w
  6045  026A  1D03               	btfss	3,2
  6046  026B  2AE9               	goto	l5775
  6047  026C  0861               	movf	_gesture_lr_count_,w
  6048  026D  0462               	iorwf	_gesture_lr_count_+1,w
  6049  026E  1D03               	btfss	3,2
  6050  026F  2AE9               	goto	l5775
  6051                           
  6052                           ;APDS9960.c: 864:         if( (abs(ud_delta) < 20) && (abs(lr_delta) < 20) ) {
  6053  0270  0843               	movf	processGestureData@ud_delta+1,w
  6054  0271  00A1               	movwf	abs@a+1
  6055  0272  0842               	movf	processGestureData@ud_delta,w
  6056  0273  00A0               	movwf	abs@a
  6057  0274  3194  2423  3180   	fcall	_abs
  6058  0277  0020               	movlb	0	; select bank0
  6059  0278  0821               	movf	?_abs+1,w
  6060  0279  3A80               	xorlw	128
  6061  027A  00AF               	movwf	??_processGestureData
  6062  027B  3080               	movlw	128
  6063  027C  022F               	subwf	??_processGestureData,w
  6064  027D  1D03               	skipz
  6065  027E  2A81               	goto	u3535
  6066  027F  3014               	movlw	20
  6067  0280  0220               	subwf	?_abs,w
  6068  0281                     u3535:
  6069  0281  1803               	skipnc
  6070  0282  286F               	goto	l5653
  6071  0283  0020               	movlb	0	; select bank0
  6072  0284  0845               	movf	processGestureData@lr_delta+1,w
  6073  0285  00A1               	movwf	abs@a+1
  6074  0286  0844               	movf	processGestureData@lr_delta,w
  6075  0287  00A0               	movwf	abs@a
  6076  0288  3194  2423  3180   	fcall	_abs
  6077  028B  0020               	movlb	0	; select bank0
  6078  028C  0821               	movf	?_abs+1,w
  6079  028D  3A80               	xorlw	128
  6080  028E  00AF               	movwf	??_processGestureData
  6081  028F  3080               	movlw	128
  6082  0290  022F               	subwf	??_processGestureData,w
  6083  0291  1D03               	skipz
  6084  0292  2A95               	goto	u3545
  6085  0293  3014               	movlw	20
  6086  0294  0220               	subwf	?_abs,w
  6087  0295                     u3545:
  6088  0295  1803               	skipnc
  6089  0296  286F               	goto	l5653
  6090                           
  6091                           ;APDS9960.c: 865: ;APDS9960.c: 867:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  6092  0297  0020               	movlb	0	; select bank0
  6093  0298  0842               	movf	processGestureData@ud_delta,w
  6094  0299  0443               	iorwf	processGestureData@ud_delta+1,w
  6095  029A  1D03               	btfss	3,2
  6096  029B  2AA6               	goto	l5753
  6097  029C  0844               	movf	processGestureData@lr_delta,w
  6098  029D  0445               	iorwf	processGestureData@lr_delta+1,w
  6099  029E  1D03               	btfss	3,2
  6100  029F  2AA6               	goto	l5753
  6101                           
  6102                           ;APDS9960.c: 868:                 gesture_near_count_++;
  6103  02A0  3001               	movlw	1
  6104  02A1  0021               	movlb	1	; select bank1
  6105  02A2  07DA               	addwf	_gesture_near_count_^(0+128),f
  6106  02A3  3000               	movlw	0
  6107  02A4  3DDB               	addwfc	(_gesture_near_count_+1)^(0+128),f
  6108                           
  6109                           ;APDS9960.c: 869:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  6110  02A5  2AB3               	goto	l1646
  6111  02A6                     l5753:
  6112  02A6  0842               	movf	processGestureData@ud_delta,w
  6113  02A7  0443               	iorwf	processGestureData@ud_delta+1,w
  6114  02A8  1D03               	btfss	3,2
  6115  02A9  2AAE               	goto	l5757
  6116  02AA  0844               	movf	processGestureData@lr_delta,w
  6117  02AB  0445               	iorwf	processGestureData@lr_delta+1,w
  6118  02AC  1903               	btfsc	3,2
  6119  02AD  2AB3               	goto	l1646
  6120  02AE                     l5757:
  6121                           
  6122                           ;APDS9960.c: 870:                 gesture_far_count_++;
  6123  02AE  3001               	movlw	1
  6124  02AF  0021               	movlb	1	; select bank1
  6125  02B0  07D8               	addwf	_gesture_far_count_^(0+128),f
  6126  02B1  3000               	movlw	0
  6127  02B2  3DD9               	addwfc	(_gesture_far_count_+1)^(0+128),f
  6128  02B3                     l1646:
  6129                           
  6130                           ;APDS9960.c: 873:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  6131  02B3  0021               	movlb	1	; select bank1
  6132  02B4  085B               	movf	(_gesture_near_count_+1)^(0+128),w
  6133  02B5  3A80               	xorlw	128
  6134  02B6  0020               	movlb	0	; select bank0
  6135  02B7  00AF               	movwf	??_processGestureData
  6136  02B8  3080               	movlw	128
  6137  02B9  022F               	subwf	??_processGestureData,w
  6138  02BA  1D03               	skipz
  6139  02BB  2ABF               	goto	u3595
  6140  02BC  300A               	movlw	10
  6141  02BD  0021               	movlb	1	; select bank1
  6142  02BE  025A               	subwf	_gesture_near_count_^(0+128),w
  6143  02BF                     u3595:
  6144  02BF  1C03               	skipc
  6145  02C0  286F               	goto	l5653
  6146  02C1  0021               	movlb	1	; select bank1
  6147  02C2  0859               	movf	(_gesture_far_count_+1)^(0+128),w
  6148  02C3  3A80               	xorlw	128
  6149  02C4  0020               	movlb	0	; select bank0
  6150  02C5  00AF               	movwf	??_processGestureData
  6151  02C6  3080               	movlw	128
  6152  02C7  022F               	subwf	??_processGestureData,w
  6153  02C8  1D03               	skipz
  6154  02C9  2ACD               	goto	u3605
  6155  02CA  3002               	movlw	2
  6156  02CB  0021               	movlb	1	; select bank1
  6157  02CC  0258               	subwf	_gesture_far_count_^(0+128),w
  6158  02CD                     u3605:
  6159  02CD  1C03               	skipc
  6160  02CE  286F               	goto	l5653
  6161                           
  6162                           ;APDS9960.c: 874:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  6163  02CF  0020               	movlb	0	; select bank0
  6164  02D0  0842               	movf	processGestureData@ud_delta,w
  6165  02D1  0443               	iorwf	processGestureData@ud_delta+1,w
  6166  02D2  1D03               	btfss	3,2
  6167  02D3  2ADA               	goto	l5767
  6168  02D4  0844               	movf	processGestureData@lr_delta,w
  6169  02D5  0445               	iorwf	processGestureData@lr_delta+1,w
  6170  02D6  1D03               	btfss	3,2
  6171  02D7  2ADA               	goto	l5767
  6172                           
  6173                           ;APDS9960.c: 875:                     gesture_state_ = NEAR_STATE;
  6174  02D8  3001               	movlw	1
  6175  02D9  2AE3               	goto	L4
  6176  02DA                     l5767:	
  6177                           ;APDS9960.c: 876:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  6178                           
  6179  02DA  0842               	movf	processGestureData@ud_delta,w
  6180  02DB  0443               	iorwf	processGestureData@ud_delta+1,w
  6181  02DC  1903               	btfsc	3,2
  6182  02DD  2AE7               	goto	l1652
  6183  02DE  0844               	movf	processGestureData@lr_delta,w
  6184  02DF  0445               	iorwf	processGestureData@lr_delta+1,w
  6185  02E0  1903               	btfsc	3,2
  6186  02E1  2AE7               	goto	l1652
  6187                           
  6188                           ;APDS9960.c: 877:                     gesture_state_ = FAR_STATE;
  6189  02E2  3002               	movlw	2
  6190  02E3                     L4:
  6191  02E3  0021               	movlb	1	; select bank1
  6192  02E4  00D6               	movwf	_gesture_state_^(0+128)
  6193  02E5  3000               	movlw	0
  6194  02E6  00D7               	movwf	(_gesture_state_^(0+128)+1)
  6195  02E7                     l1652:
  6196                           
  6197                           ;APDS9960.c: 879:                 return 1;
  6198  02E7  3001               	movlw	1
  6199  02E8  0008               	return
  6200  02E9                     l5775:
  6201                           
  6202                           ;APDS9960.c: 883:         if( (abs(ud_delta) < 20) && (abs(lr_delta) < 20) ) {
  6203  02E9  0843               	movf	processGestureData@ud_delta+1,w
  6204  02EA  00A1               	movwf	abs@a+1
  6205  02EB  0842               	movf	processGestureData@ud_delta,w
  6206  02EC  00A0               	movwf	abs@a
  6207  02ED  3194  2423  3180   	fcall	_abs
  6208  02F0  0020               	movlb	0	; select bank0
  6209  02F1  0821               	movf	?_abs+1,w
  6210  02F2  3A80               	xorlw	128
  6211  02F3  00AF               	movwf	??_processGestureData
  6212  02F4  3080               	movlw	128
  6213  02F5  022F               	subwf	??_processGestureData,w
  6214  02F6  1D03               	skipz
  6215  02F7  2AFA               	goto	u3655
  6216  02F8  3014               	movlw	20
  6217  02F9  0220               	subwf	?_abs,w
  6218  02FA                     u3655:
  6219  02FA  1803               	skipnc
  6220  02FB  286F               	goto	l5653
  6221  02FC  0020               	movlb	0	; select bank0
  6222  02FD  0845               	movf	processGestureData@lr_delta+1,w
  6223  02FE  00A1               	movwf	abs@a+1
  6224  02FF  0844               	movf	processGestureData@lr_delta,w
  6225  0300  00A0               	movwf	abs@a
  6226  0301  3194  2423  3180   	fcall	_abs
  6227  0304  0020               	movlb	0	; select bank0
  6228  0305  0821               	movf	?_abs+1,w
  6229  0306  3A80               	xorlw	128
  6230  0307  00AF               	movwf	??_processGestureData
  6231  0308  3080               	movlw	128
  6232  0309  022F               	subwf	??_processGestureData,w
  6233  030A  1D03               	skipz
  6234  030B  2B0E               	goto	u3665
  6235  030C  3014               	movlw	20
  6236  030D  0220               	subwf	?_abs,w
  6237  030E                     u3665:
  6238  030E  1803               	skipnc
  6239  030F  286F               	goto	l5653
  6240                           
  6241                           ;APDS9960.c: 884: ;APDS9960.c: 886:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  6242  0310  0020               	movlb	0	; select bank0
  6243  0311  0842               	movf	processGestureData@ud_delta,w
  6244  0312  0443               	iorwf	processGestureData@ud_delta+1,w
  6245  0313  1D03               	btfss	3,2
  6246  0314  2B1E               	goto	l1656
  6247  0315  0844               	movf	processGestureData@lr_delta,w
  6248  0316  0445               	iorwf	processGestureData@lr_delta+1,w
  6249  0317  1D03               	btfss	3,2
  6250  0318  2B1E               	goto	l1656
  6251                           
  6252                           ;APDS9960.c: 887:                 gesture_near_count_++;
  6253  0319  3001               	movlw	1
  6254  031A  0021               	movlb	1	; select bank1
  6255  031B  07DA               	addwf	_gesture_near_count_^(0+128),f
  6256  031C  3000               	movlw	0
  6257  031D  3DDB               	addwfc	(_gesture_near_count_+1)^(0+128),f
  6258  031E                     l1656:	
  6259                           ;APDS9960.c: 888:             }
  6260                           
  6261                           
  6262                           ;APDS9960.c: 890:             if( gesture_near_count_ >= 10 ) {
  6263  031E  0021               	movlb	1	; select bank1
  6264  031F  085B               	movf	(_gesture_near_count_+1)^(0+128),w
  6265  0320  3A80               	xorlw	128
  6266  0321  0020               	movlb	0	; select bank0
  6267  0322  00AF               	movwf	??_processGestureData
  6268  0323  3080               	movlw	128
  6269  0324  022F               	subwf	??_processGestureData,w
  6270  0325  1D03               	skipz
  6271  0326  2B2A               	goto	u3695
  6272  0327  300A               	movlw	10
  6273  0328  0021               	movlb	1	; select bank1
  6274  0329  025A               	subwf	_gesture_near_count_^(0+128),w
  6275  032A                     u3695:
  6276  032A  1C03               	skipc
  6277  032B  286F               	goto	l5653
  6278                           
  6279                           ;APDS9960.c: 891:                 gesture_ud_count_ = 0;
  6280  032C  0020               	movlb	0	; select bank0
  6281  032D  01E3               	clrf	_gesture_ud_count_
  6282  032E  01E4               	clrf	_gesture_ud_count_+1
  6283                           
  6284                           ;APDS9960.c: 892:                 gesture_lr_count_ = 0;
  6285  032F  01E1               	clrf	_gesture_lr_count_
  6286  0330  01E2               	clrf	_gesture_lr_count_+1
  6287                           
  6288                           ;APDS9960.c: 893:                 gesture_ud_delta_ = 0;
  6289  0331  01E7               	clrf	_gesture_ud_delta_
  6290  0332  01E8               	clrf	_gesture_ud_delta_+1
  6291                           
  6292                           ;APDS9960.c: 894:                 gesture_lr_delta_ = 0;
  6293  0333  01E5               	clrf	_gesture_lr_delta_
  6294  0334  01E6               	clrf	_gesture_lr_delta_+1
  6295  0335  286F               	goto	l5653
  6296  0336                     __end_of_processGestureData:
  6297                           
  6298                           	psect	text8
  6299  146E                     __ptext8:	
  6300 ;; *************** function ___wmul *****************
  6301 ;; Defined at:
  6302 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\Umul16.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6305 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;  product         2    4[BANK0 ] unsigned int 
  6308 ;; Return value:  Size  Location     Type
  6309 ;;                  2    0[BANK0 ] unsigned int 
  6310 ;; Registers used:
  6311 ;;		wreg, status,2, status,0
  6312 ;; Tracked objects:
  6313 ;;		On entry : 1F/0
  6314 ;;		On exit  : 1F/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6317 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;Total ram usage:        6 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:    4
  6324 ;; This function calls:
  6325 ;;		Nothing
  6326 ;; This function is called by:
  6327 ;;		_processGestureData
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           
  6332                           ;psect for function ___wmul
  6333  146E                     ___wmul:
  6334                           
  6335                           ;incstack = 0
  6336                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6337  146E  01A4               	clrf	___wmul@product
  6338  146F  01A5               	clrf	___wmul@product+1
  6339  1470                     l5115:
  6340  1470  1C20               	btfss	___wmul@multiplier,0
  6341  1471  2C76               	goto	l2006
  6342  1472  0822               	movf	___wmul@multiplicand,w
  6343  1473  07A4               	addwf	___wmul@product,f
  6344  1474  0823               	movf	___wmul@multiplicand+1,w
  6345  1475  3DA5               	addwfc	___wmul@product+1,f
  6346  1476                     l2006:
  6347  1476  3001               	movlw	1
  6348  1477                     u2735:
  6349  1477  35A2               	lslf	___wmul@multiplicand,f
  6350  1478  0DA3               	rlf	___wmul@multiplicand+1,f
  6351  1479  0B89               	decfsz	9,f
  6352  147A  2C77               	goto	u2735
  6353  147B  3001               	movlw	1
  6354  147C                     u2745:
  6355  147C  36A1               	lsrf	___wmul@multiplier+1,f
  6356  147D  0CA0               	rrf	___wmul@multiplier,f
  6357  147E  0B89               	decfsz	9,f
  6358  147F  2C7C               	goto	u2745
  6359  1480  0820               	movf	___wmul@multiplier,w
  6360  1481  0421               	iorwf	___wmul@multiplier+1,w
  6361  1482  1D03               	btfss	3,2
  6362  1483  2C70               	goto	l5115
  6363  1484  0825               	movf	___wmul@product+1,w
  6364  1485  00A1               	movwf	?___wmul+1
  6365  1486  0824               	movf	___wmul@product,w
  6366  1487  00A0               	movwf	?___wmul
  6367  1488  0008               	return
  6368  1489                     __end_of___wmul:
  6369                           
  6370                           	psect	text9
  6371  0AA7                     __ptext9:	
  6372 ;; *************** function ___awdiv *****************
  6373 ;; Defined at:
  6374 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\awdiv.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  divisor         2    6[BANK0 ] int 
  6377 ;;  dividend        2    8[BANK0 ] int 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  quotient        2   13[BANK0 ] int 
  6380 ;;  sign            1   12[BANK0 ] unsigned char 
  6381 ;;  counter         1   11[BANK0 ] unsigned char 
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  2    6[BANK0 ] int 
  6384 ;; Registers used:
  6385 ;;		wreg, status,2, status,0
  6386 ;; Tracked objects:
  6387 ;;		On entry : 1F/0
  6388 ;;		On exit  : 1F/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6391 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;Total ram usage:        9 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    4
  6398 ;; This function calls:
  6399 ;;		Nothing
  6400 ;; This function is called by:
  6401 ;;		_processGestureData
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           
  6406                           ;psect for function ___awdiv
  6407  0AA7                     ___awdiv:
  6408                           
  6409                           ;incstack = 0
  6410                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6411  0AA7  01AC               	clrf	___awdiv@sign
  6412  0AA8  1FA7               	btfss	___awdiv@divisor+1,7
  6413  0AA9  2AB1               	goto	l5135
  6414  0AAA  09A6               	comf	___awdiv@divisor,f
  6415  0AAB  09A7               	comf	___awdiv@divisor+1,f
  6416  0AAC  0AA6               	incf	___awdiv@divisor,f
  6417  0AAD  1903               	skipnz
  6418  0AAE  0AA7               	incf	___awdiv@divisor+1,f
  6419  0AAF  01AC               	clrf	___awdiv@sign
  6420  0AB0  0AAC               	incf	___awdiv@sign,f
  6421  0AB1                     l5135:
  6422  0AB1  1FA9               	btfss	___awdiv@dividend+1,7
  6423  0AB2  2ABC               	goto	l5141
  6424  0AB3  09A8               	comf	___awdiv@dividend,f
  6425  0AB4  09A9               	comf	___awdiv@dividend+1,f
  6426  0AB5  0AA8               	incf	___awdiv@dividend,f
  6427  0AB6  1903               	skipnz
  6428  0AB7  0AA9               	incf	___awdiv@dividend+1,f
  6429  0AB8  3001               	movlw	1
  6430  0AB9  00AA               	movwf	??___awdiv
  6431  0ABA  082A               	movf	??___awdiv,w
  6432  0ABB  06AC               	xorwf	___awdiv@sign,f
  6433  0ABC                     l5141:
  6434  0ABC  01AD               	clrf	___awdiv@quotient
  6435  0ABD  01AE               	clrf	___awdiv@quotient+1
  6436  0ABE  0826               	movf	___awdiv@divisor,w
  6437  0ABF  0427               	iorwf	___awdiv@divisor+1,w
  6438  0AC0  1903               	btfsc	3,2
  6439  0AC1  2AEB               	goto	l5163
  6440  0AC2  01AB               	clrf	___awdiv@counter
  6441  0AC3  0AAB               	incf	___awdiv@counter,f
  6442  0AC4                     l5151:
  6443  0AC4  1BA7               	btfsc	___awdiv@divisor+1,7
  6444  0AC5  2AD0               	goto	l5153
  6445  0AC6  3001               	movlw	1
  6446  0AC7                     u2795:
  6447  0AC7  35A6               	lslf	___awdiv@divisor,f
  6448  0AC8  0DA7               	rlf	___awdiv@divisor+1,f
  6449  0AC9  0B89               	decfsz	9,f
  6450  0ACA  2AC7               	goto	u2795
  6451  0ACB  3001               	movlw	1
  6452  0ACC  00AA               	movwf	??___awdiv
  6453  0ACD  082A               	movf	??___awdiv,w
  6454  0ACE  07AB               	addwf	___awdiv@counter,f
  6455  0ACF  2AC4               	goto	l5151
  6456  0AD0                     l5153:
  6457  0AD0  3001               	movlw	1
  6458  0AD1                     u2815:
  6459  0AD1  35AD               	lslf	___awdiv@quotient,f
  6460  0AD2  0DAE               	rlf	___awdiv@quotient+1,f
  6461  0AD3  0B89               	decfsz	9,f
  6462  0AD4  2AD1               	goto	u2815
  6463  0AD5  0827               	movf	___awdiv@divisor+1,w
  6464  0AD6  0229               	subwf	___awdiv@dividend+1,w
  6465  0AD7  1D03               	skipz
  6466  0AD8  2ADB               	goto	u2825
  6467  0AD9  0826               	movf	___awdiv@divisor,w
  6468  0ADA  0228               	subwf	___awdiv@dividend,w
  6469  0ADB                     u2825:
  6470  0ADB  1C03               	skipc
  6471  0ADC  2AE2               	goto	l5159
  6472  0ADD  0826               	movf	___awdiv@divisor,w
  6473  0ADE  02A8               	subwf	___awdiv@dividend,f
  6474  0ADF  0827               	movf	___awdiv@divisor+1,w
  6475  0AE0  3BA9               	subwfb	___awdiv@dividend+1,f
  6476  0AE1  142D               	bsf	___awdiv@quotient,0
  6477  0AE2                     l5159:
  6478  0AE2  3001               	movlw	1
  6479  0AE3                     u2835:
  6480  0AE3  36A7               	lsrf	___awdiv@divisor+1,f
  6481  0AE4  0CA6               	rrf	___awdiv@divisor,f
  6482  0AE5  0B89               	decfsz	9,f
  6483  0AE6  2AE3               	goto	u2835
  6484  0AE7  3001               	movlw	1
  6485  0AE8  02AB               	subwf	___awdiv@counter,f
  6486  0AE9  1D03               	btfss	3,2
  6487  0AEA  2AD0               	goto	l5153
  6488  0AEB                     l5163:
  6489  0AEB  082C               	movf	___awdiv@sign,w
  6490  0AEC  1903               	btfsc	3,2
  6491  0AED  2AF3               	goto	l5167
  6492  0AEE  09AD               	comf	___awdiv@quotient,f
  6493  0AEF  09AE               	comf	___awdiv@quotient+1,f
  6494  0AF0  0AAD               	incf	___awdiv@quotient,f
  6495  0AF1  1903               	skipnz
  6496  0AF2  0AAE               	incf	___awdiv@quotient+1,f
  6497  0AF3                     l5167:
  6498  0AF3  082E               	movf	___awdiv@quotient+1,w
  6499  0AF4  00A7               	movwf	?___awdiv+1
  6500  0AF5  082D               	movf	___awdiv@quotient,w
  6501  0AF6  00A6               	movwf	?___awdiv
  6502  0AF7  0008               	return
  6503  0AF8                     __end_of___awdiv:
  6504                           
  6505                           	psect	text10
  6506  130F                     __ptext10:	
  6507 ;; *************** function _isGestureAvailable *****************
  6508 ;; Defined at:
  6509 ;;		line 417 in file "APDS9960.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;		None
  6512 ;; Auto vars:     Size  Location     Type
  6513 ;;  val             1   32[BANK0 ] unsigned char 
  6514 ;; Return value:  Size  Location     Type
  6515 ;;                  1    wreg      _Bool 
  6516 ;; Registers used:
  6517 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6518 ;; Tracked objects:
  6519 ;;		On entry : 1F/0
  6520 ;;		On exit  : 1F/0
  6521 ;;		Unchanged: 0/0
  6522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6526 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;Total ram usage:        2 bytes
  6528 ;; Hardware stack levels used:    1
  6529 ;; Hardware stack levels required when called:   14
  6530 ;; This function calls:
  6531 ;;		_wireReadDataByte
  6532 ;; This function is called by:
  6533 ;;		_main
  6534 ;;		_readGesture
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           
  6539                           ;psect for function _isGestureAvailable
  6540  130F                     _isGestureAvailable:
  6541                           
  6542                           ;APDS9960.c: 419:     uint8_t val;;APDS9960.c: 422:     val = wireReadDataByte(0xAF);
  6543                           
  6544                           ;incstack = 0
  6545                           ; Regs used in _isGestureAvailable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6546  130F  30AF               	movlw	175
  6547  1310  3192  2236  3193   	fcall	_wireReadDataByte
  6548  1313  00BF               	movwf	??_isGestureAvailable
  6549  1314  083F               	movf	??_isGestureAvailable,w
  6550  1315  00C0               	movwf	isGestureAvailable@val
  6551                           
  6552                           ;APDS9960.c: 425:     val &= 0b00000001;
  6553  1316  3001               	movlw	1
  6554  1317  00BF               	movwf	??_isGestureAvailable
  6555  1318  083F               	movf	??_isGestureAvailable,w
  6556  1319  05C0               	andwf	isGestureAvailable@val,f
  6557                           
  6558                           ;APDS9960.c: 428:     if( val == 1) {
  6559  131A  0340               	decf	isGestureAvailable@val,w
  6560  131B  1D03               	btfss	3,2
  6561  131C  2B1F               	goto	l5309
  6562                           
  6563                           ;APDS9960.c: 429:         return 1;
  6564  131D  3001               	movlw	1
  6565  131E  0008               	return
  6566  131F                     l5309:
  6567                           
  6568                           ;APDS9960.c: 431:         return 0;
  6569  131F  3000               	movlw	0
  6570  1320  0008               	return
  6571  1321                     __end_of_isGestureAvailable:
  6572                           
  6573                           	psect	text11
  6574  0F09                     __ptext11:	
  6575 ;; *************** function _decodeGesture *****************
  6576 ;; Defined at:
  6577 ;;		line 919 in file "APDS9960.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;		None
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;		None
  6582 ;; Return value:  Size  Location     Type
  6583 ;;                  1    wreg      _Bool 
  6584 ;; Registers used:
  6585 ;;		wreg, status,2, status,0, pclath, cstack
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 1E/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;Total ram usage:        3 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    5
  6598 ;; This function calls:
  6599 ;;		_abs
  6600 ;; This function is called by:
  6601 ;;		_readGesture
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           
  6606                           ;psect for function _decodeGesture
  6607  0F09                     _decodeGesture:
  6608                           
  6609                           ;APDS9960.c: 922:     if( gesture_state_ == NEAR_STATE ) {
  6610                           
  6611                           ;incstack = 0
  6612                           ; Regs used in _decodeGesture: [wreg+status,2+status,0+pclath+cstack]
  6613  0F09  0021               	movlb	1	; select bank1
  6614  0F0A  0356               	decf	_gesture_state_^(0+128),w
  6615  0F0B  0457               	iorwf	(_gesture_state_+1)^(0+128),w
  6616  0F0C  1D03               	btfss	3,2
  6617  0F0D  2F14               	goto	l5799
  6618                           
  6619                           ;APDS9960.c: 923:         gesture_motion_ = DIR_NEAR;
  6620  0F0E  3005               	movlw	5
  6621  0F0F  00D4               	movwf	_gesture_motion_^(0+128)
  6622  0F10  3000               	movlw	0
  6623  0F11  00D5               	movwf	(_gesture_motion_^(0+128)+1)
  6624                           
  6625                           ;APDS9960.c: 924:         return 1;
  6626  0F12  3001               	movlw	1
  6627  0F13  0008               	return
  6628  0F14                     l5799:
  6629  0F14  3002               	movlw	2
  6630  0F15  0656               	xorwf	_gesture_state_^(0+128),w
  6631  0F16  0457               	iorwf	(_gesture_state_+1)^(0+128),w
  6632  0F17  1D03               	btfss	3,2
  6633  0F18  2F1F               	goto	l5805
  6634                           
  6635                           ;APDS9960.c: 926:         gesture_motion_ = DIR_FAR;
  6636  0F19  3006               	movlw	6
  6637  0F1A  00D4               	movwf	_gesture_motion_^(0+128)
  6638  0F1B  3000               	movlw	0
  6639  0F1C  00D5               	movwf	(_gesture_motion_^(0+128)+1)
  6640                           
  6641                           ;APDS9960.c: 927:         return 1;
  6642  0F1D  3001               	movlw	1
  6643  0F1E  0008               	return
  6644  0F1F                     l5805:
  6645                           
  6646                           ;APDS9960.c: 931:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  6647  0F1F  0020               	movlb	0	; select bank0
  6648  0F20  0A63               	incf	_gesture_ud_count_,w
  6649  0F21  1D03               	skipz
  6650  0F22  2F2C               	goto	l5811
  6651  0F23  0A64               	incf	_gesture_ud_count_+1,w
  6652  0F24  1D03               	btfss	3,2
  6653  0F25  2F2C               	goto	l5811
  6654  0F26  0861               	movf	_gesture_lr_count_,w
  6655  0F27  0462               	iorwf	_gesture_lr_count_+1,w
  6656  0F28  1D03               	btfss	3,2
  6657  0F29  2F2C               	goto	l5811
  6658  0F2A                     l5809:
  6659                           
  6660                           ;APDS9960.c: 932:         gesture_motion_ = DIR_UP;
  6661  0F2A  3003               	movlw	3
  6662  0F2B  2F4B               	goto	L7
  6663  0F2C                     l5811:	
  6664                           ;APDS9960.c: 933:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
  6665                           
  6666  0F2C  0363               	decf	_gesture_ud_count_,w
  6667  0F2D  0464               	iorwf	_gesture_ud_count_+1,w
  6668  0F2E  1D03               	btfss	3,2
  6669  0F2F  2F36               	goto	l5817
  6670  0F30  0861               	movf	_gesture_lr_count_,w
  6671  0F31  0462               	iorwf	_gesture_lr_count_+1,w
  6672  0F32  1D03               	btfss	3,2
  6673  0F33  2F36               	goto	l5817
  6674  0F34                     l5815:
  6675                           
  6676                           ;APDS9960.c: 934:         gesture_motion_ = DIR_DOWN;
  6677  0F34  3004               	movlw	4
  6678  0F35  2F4B               	goto	L7
  6679  0F36                     l5817:	
  6680                           ;APDS9960.c: 935:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
  6681                           
  6682  0F36  0863               	movf	_gesture_ud_count_,w
  6683  0F37  0464               	iorwf	_gesture_ud_count_+1,w
  6684  0F38  1D03               	btfss	3,2
  6685  0F39  2F40               	goto	l5823
  6686  0F3A  0361               	decf	_gesture_lr_count_,w
  6687  0F3B  0462               	iorwf	_gesture_lr_count_+1,w
  6688  0F3C  1D03               	btfss	3,2
  6689  0F3D  2F40               	goto	l5823
  6690  0F3E                     l5821:
  6691                           
  6692                           ;APDS9960.c: 936:         gesture_motion_ = DIR_RIGHT;
  6693  0F3E  3002               	movlw	2
  6694  0F3F  2F4B               	goto	L7
  6695  0F40                     l5823:	
  6696                           ;APDS9960.c: 937:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
  6697                           
  6698  0F40  0863               	movf	_gesture_ud_count_,w
  6699  0F41  0464               	iorwf	_gesture_ud_count_+1,w
  6700  0F42  1D03               	btfss	3,2
  6701  0F43  2F50               	goto	l5829
  6702  0F44  0A61               	incf	_gesture_lr_count_,w
  6703  0F45  1D03               	skipz
  6704  0F46  2F50               	goto	l5829
  6705  0F47  0A62               	incf	_gesture_lr_count_+1,w
  6706  0F48  1D03               	btfss	3,2
  6707  0F49  2F50               	goto	l5829
  6708  0F4A                     l5827:
  6709                           
  6710                           ;APDS9960.c: 938:         gesture_motion_ = DIR_LEFT;
  6711  0F4A  3001               	movlw	1
  6712  0F4B                     L7:
  6713  0F4B  0021               	movlb	1	; select bank1
  6714  0F4C  00D4               	movwf	_gesture_motion_^(0+128)
  6715  0F4D  3000               	movlw	0
  6716  0F4E  00D5               	movwf	(_gesture_motion_^(0+128)+1)
  6717                           
  6718                           ;APDS9960.c: 939:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
  6719  0F4F  2FFE               	goto	l5873
  6720  0F50                     l5829:
  6721  0F50  0A63               	incf	_gesture_ud_count_,w
  6722  0F51  1D03               	skipz
  6723  0F52  2F7B               	goto	l5839
  6724  0F53  0A64               	incf	_gesture_ud_count_+1,w
  6725  0F54  1D03               	btfss	3,2
  6726  0F55  2F7B               	goto	l5839
  6727  0F56  0361               	decf	_gesture_lr_count_,w
  6728  0F57  0462               	iorwf	_gesture_lr_count_+1,w
  6729  0F58  1D03               	btfss	3,2
  6730  0F59  2F7B               	goto	l5839
  6731                           
  6732                           ;APDS9960.c: 940:         if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
  6733  0F5A  0866               	movf	_gesture_lr_delta_+1,w
  6734  0F5B  00A1               	movwf	abs@a+1
  6735  0F5C  0865               	movf	_gesture_lr_delta_,w
  6736  0F5D  00A0               	movwf	abs@a
  6737  0F5E  3194  2423  318F   	fcall	_abs
  6738  0F61  0020               	movlb	0	; select bank0
  6739  0F62  0820               	movf	?_abs,w
  6740  0F63  00A4               	movwf	??_decodeGesture
  6741  0F64  0821               	movf	?_abs+1,w
  6742  0F65  00A5               	movwf	??_decodeGesture+1
  6743  0F66  0868               	movf	_gesture_ud_delta_+1,w
  6744  0F67  00A1               	movwf	abs@a+1
  6745  0F68  0867               	movf	_gesture_ud_delta_,w
  6746  0F69  00A0               	movwf	abs@a
  6747  0F6A  3194  2423  318F   	fcall	_abs
  6748  0F6D  0020               	movlb	0	; select bank0
  6749  0F6E  0825               	movf	??_decodeGesture+1,w
  6750  0F6F  3A80               	xorlw	128
  6751  0F70  00A6               	movwf	??_decodeGesture+2
  6752  0F71  0821               	movf	?_abs+1,w
  6753  0F72  3A80               	xorlw	128
  6754  0F73  0226               	subwf	??_decodeGesture+2,w
  6755  0F74  1D03               	skipz
  6756  0F75  2F78               	goto	u3825
  6757  0F76  0820               	movf	?_abs,w
  6758  0F77  0224               	subwf	??_decodeGesture,w
  6759  0F78                     u3825:
  6760  0F78  1C03               	btfss	3,0
  6761  0F79  2F2A               	goto	l5809
  6762  0F7A  2F3E               	goto	l5821
  6763  0F7B                     l5839:
  6764  0F7B  0363               	decf	_gesture_ud_count_,w
  6765  0F7C  0464               	iorwf	_gesture_ud_count_+1,w
  6766  0F7D  1D03               	btfss	3,2
  6767  0F7E  2FA6               	goto	l5849
  6768  0F7F  0A61               	incf	_gesture_lr_count_,w
  6769  0F80  1D03               	skipz
  6770  0F81  2FA6               	goto	l5849
  6771  0F82  0A62               	incf	_gesture_lr_count_+1,w
  6772  0F83  1D03               	btfss	3,2
  6773  0F84  2FA6               	goto	l5849
  6774                           
  6775                           ;APDS9960.c: 946:         if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
  6776  0F85  0866               	movf	_gesture_lr_delta_+1,w
  6777  0F86  00A1               	movwf	abs@a+1
  6778  0F87  0865               	movf	_gesture_lr_delta_,w
  6779  0F88  00A0               	movwf	abs@a
  6780  0F89  3194  2423  318F   	fcall	_abs
  6781  0F8C  0020               	movlb	0	; select bank0
  6782  0F8D  0820               	movf	?_abs,w
  6783  0F8E  00A4               	movwf	??_decodeGesture
  6784  0F8F  0821               	movf	?_abs+1,w
  6785  0F90  00A5               	movwf	??_decodeGesture+1
  6786  0F91  0868               	movf	_gesture_ud_delta_+1,w
  6787  0F92  00A1               	movwf	abs@a+1
  6788  0F93  0867               	movf	_gesture_ud_delta_,w
  6789  0F94  00A0               	movwf	abs@a
  6790  0F95  3194  2423  318F   	fcall	_abs
  6791  0F98  0020               	movlb	0	; select bank0
  6792  0F99  0825               	movf	??_decodeGesture+1,w
  6793  0F9A  3A80               	xorlw	128
  6794  0F9B  00A6               	movwf	??_decodeGesture+2
  6795  0F9C  0821               	movf	?_abs+1,w
  6796  0F9D  3A80               	xorlw	128
  6797  0F9E  0226               	subwf	??_decodeGesture+2,w
  6798  0F9F  1D03               	skipz
  6799  0FA0  2FA3               	goto	u3855
  6800  0FA1  0820               	movf	?_abs,w
  6801  0FA2  0224               	subwf	??_decodeGesture,w
  6802  0FA3                     u3855:
  6803  0FA3  1C03               	btfss	3,0
  6804  0FA4  2F34               	goto	l5815
  6805  0FA5  2F4A               	goto	l5827
  6806  0FA6                     l5849:
  6807  0FA6  0A63               	incf	_gesture_ud_count_,w
  6808  0FA7  1D03               	skipz
  6809  0FA8  2FD3               	goto	l5859
  6810  0FA9  0A64               	incf	_gesture_ud_count_+1,w
  6811  0FAA  1D03               	btfss	3,2
  6812  0FAB  2FD3               	goto	l5859
  6813  0FAC  0A61               	incf	_gesture_lr_count_,w
  6814  0FAD  1D03               	skipz
  6815  0FAE  2FD3               	goto	l5859
  6816  0FAF  0A62               	incf	_gesture_lr_count_+1,w
  6817  0FB0  1D03               	btfss	3,2
  6818  0FB1  2FD3               	goto	l5859
  6819                           
  6820                           ;APDS9960.c: 952:         if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
  6821  0FB2  0866               	movf	_gesture_lr_delta_+1,w
  6822  0FB3  00A1               	movwf	abs@a+1
  6823  0FB4  0865               	movf	_gesture_lr_delta_,w
  6824  0FB5  00A0               	movwf	abs@a
  6825  0FB6  3194  2423  318F   	fcall	_abs
  6826  0FB9  0020               	movlb	0	; select bank0
  6827  0FBA  0820               	movf	?_abs,w
  6828  0FBB  00A4               	movwf	??_decodeGesture
  6829  0FBC  0821               	movf	?_abs+1,w
  6830  0FBD  00A5               	movwf	??_decodeGesture+1
  6831  0FBE  0868               	movf	_gesture_ud_delta_+1,w
  6832  0FBF  00A1               	movwf	abs@a+1
  6833  0FC0  0867               	movf	_gesture_ud_delta_,w
  6834  0FC1  00A0               	movwf	abs@a
  6835  0FC2  3194  2423  318F   	fcall	_abs
  6836  0FC5  0020               	movlb	0	; select bank0
  6837  0FC6  0825               	movf	??_decodeGesture+1,w
  6838  0FC7  3A80               	xorlw	128
  6839  0FC8  00A6               	movwf	??_decodeGesture+2
  6840  0FC9  0821               	movf	?_abs+1,w
  6841  0FCA  3A80               	xorlw	128
  6842  0FCB  0226               	subwf	??_decodeGesture+2,w
  6843  0FCC  1D03               	skipz
  6844  0FCD  2FD0               	goto	u3885
  6845  0FCE  0820               	movf	?_abs,w
  6846  0FCF  0224               	subwf	??_decodeGesture,w
  6847  0FD0                     u3885:
  6848  0FD0  1C03               	btfss	3,0
  6849  0FD1  2F2A               	goto	l5809
  6850  0FD2  2F4A               	goto	l5827
  6851  0FD3                     l5859:
  6852  0FD3  0363               	decf	_gesture_ud_count_,w
  6853  0FD4  0464               	iorwf	_gesture_ud_count_+1,w
  6854  0FD5  1D03               	btfss	3,2
  6855  0FD6  2FFC               	goto	l5869
  6856  0FD7  0361               	decf	_gesture_lr_count_,w
  6857  0FD8  0462               	iorwf	_gesture_lr_count_+1,w
  6858  0FD9  1D03               	btfss	3,2
  6859  0FDA  2FFC               	goto	l5869
  6860                           
  6861                           ;APDS9960.c: 958:         if( abs(gesture_ud_delta_) > abs(gesture_lr_delta_) ) {
  6862  0FDB  0866               	movf	_gesture_lr_delta_+1,w
  6863  0FDC  00A1               	movwf	abs@a+1
  6864  0FDD  0865               	movf	_gesture_lr_delta_,w
  6865  0FDE  00A0               	movwf	abs@a
  6866  0FDF  3194  2423  318F   	fcall	_abs
  6867  0FE2  0020               	movlb	0	; select bank0
  6868  0FE3  0820               	movf	?_abs,w
  6869  0FE4  00A4               	movwf	??_decodeGesture
  6870  0FE5  0821               	movf	?_abs+1,w
  6871  0FE6  00A5               	movwf	??_decodeGesture+1
  6872  0FE7  0868               	movf	_gesture_ud_delta_+1,w
  6873  0FE8  00A1               	movwf	abs@a+1
  6874  0FE9  0867               	movf	_gesture_ud_delta_,w
  6875  0FEA  00A0               	movwf	abs@a
  6876  0FEB  3194  2423  318F   	fcall	_abs
  6877  0FEE  0020               	movlb	0	; select bank0
  6878  0FEF  0825               	movf	??_decodeGesture+1,w
  6879  0FF0  3A80               	xorlw	128
  6880  0FF1  00A6               	movwf	??_decodeGesture+2
  6881  0FF2  0821               	movf	?_abs+1,w
  6882  0FF3  3A80               	xorlw	128
  6883  0FF4  0226               	subwf	??_decodeGesture+2,w
  6884  0FF5  1D03               	skipz
  6885  0FF6  2FF9               	goto	u3915
  6886  0FF7  0820               	movf	?_abs,w
  6887  0FF8  0224               	subwf	??_decodeGesture,w
  6888  0FF9                     u3915:
  6889  0FF9  1C03               	btfss	3,0
  6890  0FFA  2F34               	goto	l5815
  6891  0FFB  2F3E               	goto	l5821
  6892  0FFC                     l5869:
  6893                           
  6894                           ;APDS9960.c: 964:         return 0;
  6895  0FFC  3000               	movlw	0
  6896  0FFD  0008               	return
  6897  0FFE                     l5873:
  6898                           
  6899                           ;APDS9960.c: 967:     return 1;
  6900  0FFE  3001               	movlw	1
  6901  0FFF  0008               	return
  6902  1000                     __end_of_decodeGesture:
  6903                           
  6904                           	psect	text12
  6905  1423                     __ptext12:	
  6906 ;; *************** function _abs *****************
  6907 ;; Defined at:
  6908 ;;		line 1 in file "D:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\abs.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;  a               2    0[BANK0 ] int 
  6911 ;; Auto vars:     Size  Location     Type
  6912 ;;		None
  6913 ;; Return value:  Size  Location     Type
  6914 ;;                  2    0[BANK0 ] int 
  6915 ;; Registers used:
  6916 ;;		wreg, status,2, status,0
  6917 ;; Tracked objects:
  6918 ;;		On entry : 1F/0
  6919 ;;		On exit  : 0/0
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6922 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6924 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6925 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;Total ram usage:        4 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; Hardware stack levels required when called:    4
  6929 ;; This function calls:
  6930 ;;		Nothing
  6931 ;; This function is called by:
  6932 ;;		_processGestureData
  6933 ;;		_decodeGesture
  6934 ;; This function uses a non-reentrant model
  6935 ;;
  6936                           
  6937                           
  6938                           ;psect for function _abs
  6939  1423                     _abs:
  6940                           
  6941                           ;incstack = 0
  6942                           ; Regs used in _abs: [wreg+status,2+status,0]
  6943  1423  0821               	movf	abs@a+1,w
  6944  1424  3A80               	xorlw	128
  6945  1425  00A2               	movwf	??_abs
  6946  1426  3080               	movlw	128
  6947  1427  0222               	subwf	??_abs,w
  6948  1428  1D03               	skipz
  6949  1429  2C2C               	goto	u2715
  6950  142A  3001               	movlw	1
  6951  142B  0220               	subwf	abs@a,w
  6952  142C                     u2715:
  6953  142C  1803               	skipnc
  6954  142D  0008               	return
  6955  142E  0020               	movlb	0	; select bank0
  6956  142F  0920               	comf	abs@a,w
  6957  1430  00A2               	movwf	??_abs
  6958  1431  0921               	comf	abs@a+1,w
  6959  1432  00A3               	movwf	??_abs+1
  6960  1433  0AA2               	incf	??_abs,f
  6961  1434  1903               	skipnz
  6962  1435  0AA3               	incf	??_abs+1,f
  6963  1436  0822               	movf	??_abs,w
  6964  1437  00A0               	movwf	?_abs
  6965  1438  0823               	movf	??_abs+1,w
  6966  1439  00A1               	movwf	?_abs+1
  6967  143A  0008               	return
  6968  143B                     __end_of_abs:
  6969                           
  6970                           	psect	text13
  6971  0945                     __ptext13:	
  6972 ;; *************** function _intToBCD *****************
  6973 ;; Defined at:
  6974 ;;		line 369 in file "main.c"
  6975 ;; Parameters:    Size  Location     Type
  6976 ;;  binaryInput     2    8[BANK0 ] unsigned short 
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;  shift           2   15[BANK0 ] unsigned short 
  6979 ;;  bcdResult       2   13[BANK0 ] unsigned short 
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  2    8[BANK0 ] unsigned short 
  6982 ;; Registers used:
  6983 ;;		wreg, status,2, status,0, pclath, cstack
  6984 ;; Tracked objects:
  6985 ;;		On entry : 1F/0
  6986 ;;		On exit  : 1F/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6989 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6990 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;Total ram usage:        9 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; Hardware stack levels required when called:    5
  6996 ;; This function calls:
  6997 ;;		___lwdiv
  6998 ;;		___lwmod
  6999 ;; This function is called by:
  7000 ;;		_main
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           
  7005                           ;psect for function _intToBCD
  7006  0945                     _intToBCD:
  7007                           
  7008                           ;main.c: 370:     uint16_t bcdResult = 0;
  7009                           
  7010                           ;incstack = 0
  7011                           ; Regs used in _intToBCD: [wreg+status,2+status,0+pclath+cstack]
  7012  0945  01AD               	clrf	intToBCD@bcdResult
  7013  0946  01AE               	clrf	intToBCD@bcdResult+1
  7014                           
  7015                           ;main.c: 371:     uint16_t shift = 0;
  7016  0947  01AF               	clrf	intToBCD@shift
  7017  0948  01B0               	clrf	intToBCD@shift+1
  7018  0949                     l6265:	
  7019                           ;main.c: 373:     while (binaryInput > 0) {
  7020                           
  7021                           
  7022                           ;main.c: 373:     while (binaryInput > 0) {
  7023  0949  0828               	movf	intToBCD@binaryInput,w
  7024  094A  0429               	iorwf	intToBCD@binaryInput+1,w
  7025  094B  1903               	btfsc	3,2
  7026  094C  2982               	goto	l6267
  7027                           
  7028                           ;main.c: 374:       bcdResult |= (binaryInput % 10) << (shift++ << 2);
  7029  094D  300A               	movlw	10
  7030  094E  00A0               	movwf	___lwmod@divisor
  7031  094F  3000               	movlw	0
  7032  0950  00A1               	movwf	___lwmod@divisor+1
  7033  0951  0829               	movf	intToBCD@binaryInput+1,w
  7034  0952  00A3               	movwf	___lwmod@dividend+1
  7035  0953  0828               	movf	intToBCD@binaryInput,w
  7036  0954  00A2               	movwf	___lwmod@dividend
  7037  0955  3196  262F  3189   	fcall	___lwmod
  7038  0958  0820               	movf	?___lwmod,w
  7039  0959  00AA               	movwf	??_intToBCD
  7040  095A  0821               	movf	?___lwmod+1,w
  7041  095B  00AB               	movwf	??_intToBCD+1
  7042  095C  082F               	movf	intToBCD@shift,w
  7043  095D  00AC               	movwf	??_intToBCD+2
  7044  095E  3001               	movlw	1
  7045  095F                     u4555:
  7046  095F  35AC               	lslf	??_intToBCD+2,f
  7047  0960  3EFF               	addlw	-1
  7048  0961  1D03               	skipz
  7049  0962  295F               	goto	u4555
  7050  0963  352C               	lslf	??_intToBCD+2,w
  7051  0964  0A89               	incf	9,f
  7052  0965  2968               	goto	u4564
  7053  0966                     u4565:
  7054  0966  35AA               	lslf	??_intToBCD,f
  7055  0967  0DAB               	rlf	??_intToBCD+1,f
  7056  0968                     u4564:
  7057  0968  0B89               	decfsz	9,f
  7058  0969  2966               	goto	u4565
  7059  096A  082A               	movf	??_intToBCD,w
  7060  096B  04AD               	iorwf	intToBCD@bcdResult,f
  7061  096C  082B               	movf	??_intToBCD+1,w
  7062  096D  04AE               	iorwf	intToBCD@bcdResult+1,f
  7063  096E  3001               	movlw	1
  7064  096F  07AF               	addwf	intToBCD@shift,f
  7065  0970  3000               	movlw	0
  7066  0971  3DB0               	addwfc	intToBCD@shift+1,f
  7067                           
  7068                           ;main.c: 375:       binaryInput /= 10;
  7069  0972  300A               	movlw	10
  7070  0973  00A0               	movwf	___lwdiv@divisor
  7071  0974  3000               	movlw	0
  7072  0975  00A1               	movwf	___lwdiv@divisor+1
  7073  0976  0829               	movf	intToBCD@binaryInput+1,w
  7074  0977  00A3               	movwf	___lwdiv@dividend+1
  7075  0978  0828               	movf	intToBCD@binaryInput,w
  7076  0979  00A2               	movwf	___lwdiv@dividend
  7077  097A  3188  202B  3189   	fcall	___lwdiv
  7078  097D  0821               	movf	?___lwdiv+1,w
  7079  097E  00A9               	movwf	intToBCD@binaryInput+1
  7080  097F  0820               	movf	?___lwdiv,w
  7081  0980  00A8               	movwf	intToBCD@binaryInput
  7082  0981  2949               	goto	l6265
  7083  0982                     l6267:
  7084                           
  7085                           ;main.c: 378:     return bcdResult;
  7086  0982  082E               	movf	intToBCD@bcdResult+1,w
  7087  0983  00A9               	movwf	?_intToBCD+1
  7088  0984  082D               	movf	intToBCD@bcdResult,w
  7089  0985  00A8               	movwf	?_intToBCD
  7090  0986  0008               	return
  7091  0987                     __end_of_intToBCD:
  7092                           
  7093                           	psect	text14
  7094  162F                     __ptext14:	
  7095 ;; *************** function ___lwmod *****************
  7096 ;; Defined at:
  7097 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\lwmod.c"
  7098 ;; Parameters:    Size  Location     Type
  7099 ;;  divisor         2    0[BANK0 ] unsigned int 
  7100 ;;  dividend        2    2[BANK0 ] unsigned int 
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;  counter         1    5[BANK0 ] unsigned char 
  7103 ;; Return value:  Size  Location     Type
  7104 ;;                  2    0[BANK0 ] unsigned int 
  7105 ;; Registers used:
  7106 ;;		wreg, status,2, status,0
  7107 ;; Tracked objects:
  7108 ;;		On entry : 1F/0
  7109 ;;		On exit  : 1F/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7112 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;Total ram usage:        6 bytes
  7117 ;; Hardware stack levels used:    1
  7118 ;; Hardware stack levels required when called:    4
  7119 ;; This function calls:
  7120 ;;		Nothing
  7121 ;; This function is called by:
  7122 ;;		_intToBCD
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           
  7127                           ;psect for function ___lwmod
  7128  162F                     ___lwmod:
  7129                           
  7130                           ;incstack = 0
  7131                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7132  162F  0820               	movf	___lwmod@divisor,w
  7133  1630  0421               	iorwf	___lwmod@divisor+1,w
  7134  1631  1903               	btfsc	3,2
  7135  1632  2E56               	goto	l5921
  7136  1633  01A5               	clrf	___lwmod@counter
  7137  1634  0AA5               	incf	___lwmod@counter,f
  7138  1635                     l5911:
  7139  1635  1BA1               	btfsc	___lwmod@divisor+1,7
  7140  1636  2E41               	goto	l5913
  7141  1637  3001               	movlw	1
  7142  1638                     u4005:
  7143  1638  35A0               	lslf	___lwmod@divisor,f
  7144  1639  0DA1               	rlf	___lwmod@divisor+1,f
  7145  163A  0B89               	decfsz	9,f
  7146  163B  2E38               	goto	u4005
  7147  163C  3001               	movlw	1
  7148  163D  00A4               	movwf	??___lwmod
  7149  163E  0824               	movf	??___lwmod,w
  7150  163F  07A5               	addwf	___lwmod@counter,f
  7151  1640  2E35               	goto	l5911
  7152  1641                     l5913:
  7153  1641  0821               	movf	___lwmod@divisor+1,w
  7154  1642  0223               	subwf	___lwmod@dividend+1,w
  7155  1643  1D03               	skipz
  7156  1644  2E47               	goto	u4025
  7157  1645  0820               	movf	___lwmod@divisor,w
  7158  1646  0222               	subwf	___lwmod@dividend,w
  7159  1647                     u4025:
  7160  1647  1C03               	skipc
  7161  1648  2E4D               	goto	l5917
  7162  1649  0820               	movf	___lwmod@divisor,w
  7163  164A  02A2               	subwf	___lwmod@dividend,f
  7164  164B  0821               	movf	___lwmod@divisor+1,w
  7165  164C  3BA3               	subwfb	___lwmod@dividend+1,f
  7166  164D                     l5917:
  7167  164D  3001               	movlw	1
  7168  164E                     u4035:
  7169  164E  36A1               	lsrf	___lwmod@divisor+1,f
  7170  164F  0CA0               	rrf	___lwmod@divisor,f
  7171  1650  0B89               	decfsz	9,f
  7172  1651  2E4E               	goto	u4035
  7173  1652  3001               	movlw	1
  7174  1653  02A5               	subwf	___lwmod@counter,f
  7175  1654  1D03               	btfss	3,2
  7176  1655  2E41               	goto	l5913
  7177  1656                     l5921:
  7178  1656  0823               	movf	___lwmod@dividend+1,w
  7179  1657  00A1               	movwf	?___lwmod+1
  7180  1658  0822               	movf	___lwmod@dividend,w
  7181  1659  00A0               	movwf	?___lwmod
  7182  165A  0008               	return
  7183  165B                     __end_of___lwmod:
  7184                           
  7185                           	psect	text15
  7186  082B                     __ptext15:	
  7187 ;; *************** function ___lwdiv *****************
  7188 ;; Defined at:
  7189 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\lwdiv.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;  divisor         2    0[BANK0 ] unsigned int 
  7192 ;;  dividend        2    2[BANK0 ] unsigned int 
  7193 ;; Auto vars:     Size  Location     Type
  7194 ;;  quotient        2    5[BANK0 ] unsigned int 
  7195 ;;  counter         1    7[BANK0 ] unsigned char 
  7196 ;; Return value:  Size  Location     Type
  7197 ;;                  2    0[BANK0 ] unsigned int 
  7198 ;; Registers used:
  7199 ;;		wreg, status,2, status,0
  7200 ;; Tracked objects:
  7201 ;;		On entry : 1F/0
  7202 ;;		On exit  : 1F/0
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7205 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7209 ;;Total ram usage:        8 bytes
  7210 ;; Hardware stack levels used:    1
  7211 ;; Hardware stack levels required when called:    4
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		_intToBCD
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           
  7220                           ;psect for function ___lwdiv
  7221  082B                     ___lwdiv:
  7222                           
  7223                           ;incstack = 0
  7224                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7225  082B  01A5               	clrf	___lwdiv@quotient
  7226  082C  01A6               	clrf	___lwdiv@quotient+1
  7227  082D  0820               	movf	___lwdiv@divisor,w
  7228  082E  0421               	iorwf	___lwdiv@divisor+1,w
  7229  082F  1903               	btfsc	3,2
  7230  0830  285A               	goto	l5899
  7231  0831  01A7               	clrf	___lwdiv@counter
  7232  0832  0AA7               	incf	___lwdiv@counter,f
  7233  0833                     l5887:
  7234  0833  1BA1               	btfsc	___lwdiv@divisor+1,7
  7235  0834  283F               	goto	l5889
  7236  0835  3001               	movlw	1
  7237  0836                     u3935:
  7238  0836  35A0               	lslf	___lwdiv@divisor,f
  7239  0837  0DA1               	rlf	___lwdiv@divisor+1,f
  7240  0838  0B89               	decfsz	9,f
  7241  0839  2836               	goto	u3935
  7242  083A  3001               	movlw	1
  7243  083B  00A4               	movwf	??___lwdiv
  7244  083C  0824               	movf	??___lwdiv,w
  7245  083D  07A7               	addwf	___lwdiv@counter,f
  7246  083E  2833               	goto	l5887
  7247  083F                     l5889:
  7248  083F  3001               	movlw	1
  7249  0840                     u3955:
  7250  0840  35A5               	lslf	___lwdiv@quotient,f
  7251  0841  0DA6               	rlf	___lwdiv@quotient+1,f
  7252  0842  0B89               	decfsz	9,f
  7253  0843  2840               	goto	u3955
  7254  0844  0821               	movf	___lwdiv@divisor+1,w
  7255  0845  0223               	subwf	___lwdiv@dividend+1,w
  7256  0846  1D03               	skipz
  7257  0847  284A               	goto	u3965
  7258  0848  0820               	movf	___lwdiv@divisor,w
  7259  0849  0222               	subwf	___lwdiv@dividend,w
  7260  084A                     u3965:
  7261  084A  1C03               	skipc
  7262  084B  2851               	goto	l5895
  7263  084C  0820               	movf	___lwdiv@divisor,w
  7264  084D  02A2               	subwf	___lwdiv@dividend,f
  7265  084E  0821               	movf	___lwdiv@divisor+1,w
  7266  084F  3BA3               	subwfb	___lwdiv@dividend+1,f
  7267  0850  1425               	bsf	___lwdiv@quotient,0
  7268  0851                     l5895:
  7269  0851  3001               	movlw	1
  7270  0852                     u3975:
  7271  0852  36A1               	lsrf	___lwdiv@divisor+1,f
  7272  0853  0CA0               	rrf	___lwdiv@divisor,f
  7273  0854  0B89               	decfsz	9,f
  7274  0855  2852               	goto	u3975
  7275  0856  3001               	movlw	1
  7276  0857  02A7               	subwf	___lwdiv@counter,f
  7277  0858  1D03               	btfss	3,2
  7278  0859  283F               	goto	l5889
  7279  085A                     l5899:
  7280  085A  0826               	movf	___lwdiv@quotient+1,w
  7281  085B  00A1               	movwf	?___lwdiv+1
  7282  085C  0825               	movf	___lwdiv@quotient,w
  7283  085D  00A0               	movwf	?___lwdiv
  7284  085E  0008               	return
  7285  085F                     __end_of___lwdiv:
  7286                           
  7287                           	psect	text16
  7288  0803                     __ptext16:	
  7289 ;; *************** function _enableProximitySensor *****************
  7290 ;; Defined at:
  7291 ;;		line 293 in file "APDS9960.c"
  7292 ;; Parameters:    Size  Location     Type
  7293 ;;  interrupts      1    wreg     _Bool 
  7294 ;; Auto vars:     Size  Location     Type
  7295 ;;  interrupts      1   38[BANK0 ] _Bool 
  7296 ;; Return value:  Size  Location     Type
  7297 ;;                  1    wreg      _Bool 
  7298 ;; Registers used:
  7299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7300 ;; Tracked objects:
  7301 ;;		On entry : 1F/F
  7302 ;;		On exit  : 1F/0
  7303 ;;		Unchanged: 0/0
  7304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7308 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7309 ;;Total ram usage:        1 bytes
  7310 ;; Hardware stack levels used:    1
  7311 ;; Hardware stack levels required when called:   17
  7312 ;; This function calls:
  7313 ;;		_enablePower
  7314 ;;		_setLEDDrive
  7315 ;;		_setMode
  7316 ;;		_setProximityGain
  7317 ;;		_setProximityIntEnable
  7318 ;; This function is called by:
  7319 ;;		_main
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           
  7324                           ;psect for function _enableProximitySensor
  7325  0803                     _enableProximitySensor:
  7326                           
  7327                           ;incstack = 0
  7328 ;; hardware stack exceeded
  7329                           ; Regs used in _enableProximitySensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7330                           ;enableProximitySensor@interrupts stored from wreg
  7331  0803  0020               	movlb	0	; select bank0
  7332  0804  00C6               	movwf	enableProximitySensor@interrupts
  7333                           
  7334                           ;APDS9960.c: 293: _Bool enableProximitySensor(_Bool interrupts);APDS9960.c: 294: {;APDS9
      +                          960.c: 296:     if( !setProximityGain(2) ) {
  7335  0805  3002               	movlw	2
  7336  0806  3197  2712  3188   	fcall	_setProximityGain
  7337  0809  3A00               	xorlw	0
  7338  080A  1903               	btfsc	3,2
  7339  080B  0008               	return
  7340                           
  7341                           ;APDS9960.c: 299:     if( !setLEDDrive(0) ) {
  7342  080C  3000               	movlw	0
  7343  080D  3196  26E4  3188   	fcall	_setLEDDrive
  7344  0810  3A00               	xorlw	0
  7345  0811  1903               	btfsc	3,2
  7346  0812  0008               	return
  7347                           
  7348                           ;APDS9960.c: 302:     if( interrupts ) {
  7349  0813  0846               	movf	enableProximitySensor@interrupts,w
  7350  0814  1903               	btfsc	3,2
  7351  0815  2818               	goto	l6183
  7352                           
  7353                           ;APDS9960.c: 303:         if( !setProximityIntEnable(1) ) {
  7354  0816  3001               	movlw	1
  7355  0817  2819               	goto	L8
  7356  0818                     l6183:
  7357                           
  7358                           ;APDS9960.c: 307:         if( !setProximityIntEnable(0) ) {
  7359  0818  3000               	movlw	0
  7360  0819                     L8:
  7361  0819  3197  2740  3188   	fcall	_setProximityIntEnable
  7362  081C  3A00               	xorlw	0
  7363  081D  1903               	btfsc	3,2
  7364  081E  0008               	return
  7365                           
  7366                           ;APDS9960.c: 311:     if( !enablePower() ){
  7367  081F  3192  2284  3188   	fcall	_enablePower
  7368  0822  3A00               	xorlw	0
  7369  0823  1903               	btfsc	3,2
  7370  0824  0008               	return
  7371                           
  7372                           ;APDS9960.c: 314:     if( !setMode(2, 1) ) {
  7373  0825  01C1               	clrf	setMode@enable
  7374  0826  0AC1               	incf	setMode@enable,f
  7375  0827  3002               	movlw	2
  7376  0828  318A  225C         	fcall	_setMode
  7377  082A  0008               	return
  7378  082B                     __end_of_enableProximitySensor:
  7379                           
  7380                           	psect	text17
  7381  1740                     __ptext17:	
  7382 ;; *************** function _setProximityIntEnable *****************
  7383 ;; Defined at:
  7384 ;;		line 1838 in file "APDS9960.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  enable          1    wreg     unsigned char 
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;  enable          1   34[BANK0 ] unsigned char 
  7389 ;;  val             1   33[BANK0 ] unsigned char 
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  1    wreg      _Bool 
  7392 ;; Registers used:
  7393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7394 ;; Tracked objects:
  7395 ;;		On entry : 1F/0
  7396 ;;		On exit  : 1F/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7401 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;Total ram usage:        4 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:   14
  7406 ;; This function calls:
  7407 ;;		_wireReadDataByte
  7408 ;;		_wireWriteDataByte
  7409 ;; This function is called by:
  7410 ;;		_enableProximitySensor
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           
  7415                           ;psect for function _setProximityIntEnable
  7416  1740                     _setProximityIntEnable:
  7417                           
  7418                           ;incstack = 0
  7419                           ; Regs used in _setProximityIntEnable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7420                           ;setProximityIntEnable@enable stored from wreg
  7421  1740  00C2               	movwf	setProximityIntEnable@enable
  7422                           
  7423                           ;APDS9960.c: 1838: _Bool setProximityIntEnable(uint8_t enable);APDS9960.c: 1839: {;APDS9
      +                          960.c: 1840:     uint8_t val;;APDS9960.c: 1843:     val = wireReadDataByte(0x80);
  7424  1741  3080               	movlw	128
  7425  1742  3192  2236  3197   	fcall	_wireReadDataByte
  7426  1745  00BF               	movwf	??_setProximityIntEnable
  7427  1746  083F               	movf	??_setProximityIntEnable,w
  7428  1747  00C1               	movwf	setProximityIntEnable@val
  7429                           
  7430                           ;APDS9960.c: 1846:     enable &= 0b00000001;
  7431  1748  3001               	movlw	1
  7432  1749  00BF               	movwf	??_setProximityIntEnable
  7433  174A  083F               	movf	??_setProximityIntEnable,w
  7434  174B  05C2               	andwf	setProximityIntEnable@enable,f
  7435                           
  7436                           ;APDS9960.c: 1847:     enable = enable << 5;
  7437  174C  0842               	movf	setProximityIntEnable@enable,w
  7438  174D  00BF               	movwf	??_setProximityIntEnable
  7439  174E  3004               	movlw	4
  7440  174F                     u3285:
  7441  174F  35BF               	lslf	??_setProximityIntEnable,f
  7442  1750  3EFF               	addlw	-1
  7443  1751  1D03               	skipz
  7444  1752  2F4F               	goto	u3285
  7445  1753  353F               	lslf	??_setProximityIntEnable,w
  7446  1754  00C0               	movwf	??_setProximityIntEnable+1
  7447  1755  0840               	movf	??_setProximityIntEnable+1,w
  7448  1756  00C2               	movwf	setProximityIntEnable@enable
  7449                           
  7450                           ;APDS9960.c: 1848:     val &= 0b11011111;
  7451  1757  30DF               	movlw	223
  7452  1758  00BF               	movwf	??_setProximityIntEnable
  7453  1759  083F               	movf	??_setProximityIntEnable,w
  7454  175A  05C1               	andwf	setProximityIntEnable@val,f
  7455                           
  7456                           ;APDS9960.c: 1849:     val |= enable;
  7457  175B  0842               	movf	setProximityIntEnable@enable,w
  7458  175C  00BF               	movwf	??_setProximityIntEnable
  7459  175D  083F               	movf	??_setProximityIntEnable,w
  7460  175E  04C1               	iorwf	setProximityIntEnable@val,f
  7461                           
  7462                           ;APDS9960.c: 1852:     if( !wireWriteDataByte(0x80, val) ) {
  7463  175F  0841               	movf	setProximityIntEnable@val,w
  7464  1760  00BF               	movwf	??_setProximityIntEnable
  7465  1761  083F               	movf	??_setProximityIntEnable,w
  7466  1762  00B9               	movwf	wireWriteDataByte@val
  7467  1763  3080               	movlw	128
  7468  1764  3192  2291  3197   	fcall	_wireWriteDataByte
  7469  1767  3A00               	xorlw	0
  7470  1768  1D03               	skipz
  7471  1769  2F6C               	goto	l5619
  7472                           
  7473                           ;APDS9960.c: 1853:         return 0;
  7474  176A  3000               	movlw	0
  7475  176B  0008               	return
  7476  176C                     l5619:
  7477                           
  7478                           ;APDS9960.c: 1856:     return 1;
  7479  176C  3001               	movlw	1
  7480  176D  0008               	return
  7481  176E                     __end_of_setProximityIntEnable:
  7482                           
  7483                           	psect	text18
  7484  1284                     __ptext18:	
  7485 ;; *************** function _enablePower *****************
  7486 ;; Defined at:
  7487 ;;		line 552 in file "APDS9960.c"
  7488 ;; Parameters:    Size  Location     Type
  7489 ;;		None
  7490 ;; Auto vars:     Size  Location     Type
  7491 ;;		None
  7492 ;; Return value:  Size  Location     Type
  7493 ;;                  1    wreg      _Bool 
  7494 ;; Registers used:
  7495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7496 ;; Tracked objects:
  7497 ;;		On entry : 1F/0
  7498 ;;		On exit  : 1F/0
  7499 ;;		Unchanged: 0/0
  7500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7505 ;;Total ram usage:        0 bytes
  7506 ;; Hardware stack levels used:    1
  7507 ;; Hardware stack levels required when called:   16
  7508 ;; This function calls:
  7509 ;;		_setMode
  7510 ;; This function is called by:
  7511 ;;		_enableProximitySensor
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           
  7516                           ;psect for function _enablePower
  7517  1284                     _enablePower:
  7518                           
  7519                           ;APDS9960.c: 554:     if( !setMode(0, 1) ) {
  7520                           
  7521                           ;incstack = 0
  7522 ;; hardware stack exceeded
  7523                           ; Regs used in _enablePower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7524  1284  01C1               	clrf	setMode@enable
  7525  1285  0AC1               	incf	setMode@enable,f
  7526  1286  3000               	movlw	0
  7527  1287  318A  225C  3192   	fcall	_setMode
  7528  128A  3A00               	xorlw	0
  7529  128B  1D03               	skipz
  7530  128C  2A8F               	goto	l5601
  7531                           
  7532                           ;APDS9960.c: 555:         return 0;
  7533  128D  3000               	movlw	0
  7534  128E  0008               	return
  7535  128F                     l5601:
  7536                           
  7537                           ;APDS9960.c: 558:     return 1;
  7538  128F  3001               	movlw	1
  7539  1290  0008               	return
  7540  1291                     __end_of_enablePower:
  7541                           
  7542                           	psect	text19
  7543  155D                     __ptext19:	
  7544 ;; *************** function _SYSTEM_Initialize *****************
  7545 ;; Defined at:
  7546 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;		None
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;		None
  7551 ;; Return value:  Size  Location     Type
  7552 ;;                  1    wreg      void 
  7553 ;; Registers used:
  7554 ;;		wreg, status,2, status,0, pclath, cstack
  7555 ;; Tracked objects:
  7556 ;;		On entry : B1F/0
  7557 ;;		On exit  : 1F/F
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7564 ;;Total ram usage:        0 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    6
  7567 ;; This function calls:
  7568 ;;		_CCP4_Initialize
  7569 ;;		_DAC_Initialize
  7570 ;;		_EUSART_Initialize
  7571 ;;		_FVR_Initialize
  7572 ;;		_I2C_Initialize
  7573 ;;		_LCD_Initialize
  7574 ;;		_OSCILLATOR_Initialize
  7575 ;;		_PIN_MANAGER_Initialize
  7576 ;;		_TMR0_Initialize
  7577 ;;		_TMR1_Initialize
  7578 ;;		_WDT_Initialize
  7579 ;; This function is called by:
  7580 ;;		_main
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           
  7585                           ;psect for function _SYSTEM_Initialize
  7586  155D                     _SYSTEM_Initialize:
  7587                           
  7588                           ;mcc_generated_files/mcc.c: 53:     I2C_Initialize();
  7589                           
  7590                           ;incstack = 0
  7591                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7592  155D  3192  2223  3195   	fcall	_I2C_Initialize
  7593                           
  7594                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  7595  1560  3194  2454  3195   	fcall	_PIN_MANAGER_Initialize
  7596                           
  7597                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  7598  1563  3192  2240  3195   	fcall	_OSCILLATOR_Initialize
  7599                           
  7600                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  7601  1566  3187  27FD  3195   	fcall	_WDT_Initialize
  7602                           
  7603                           ;mcc_generated_files/mcc.c: 57:     FVR_Initialize();
  7604  1569  3191  21AF  3195   	fcall	_FVR_Initialize
  7605                           
  7606                           ;mcc_generated_files/mcc.c: 58:     DAC_Initialize();
  7607  156C  3191  21BD  3195   	fcall	_DAC_Initialize
  7608                           
  7609                           ;mcc_generated_files/mcc.c: 59:     CCP4_Initialize();
  7610  156F  3192  22FE  3195   	fcall	_CCP4_Initialize
  7611                           
  7612                           ;mcc_generated_files/mcc.c: 60:     TMR1_Initialize();
  7613  1572  3192  22EE  3195   	fcall	_TMR1_Initialize
  7614                           
  7615                           ;mcc_generated_files/mcc.c: 61:     TMR0_Initialize();
  7616  1575  3192  2255  3195   	fcall	_TMR0_Initialize
  7617                           
  7618                           ;mcc_generated_files/mcc.c: 62:     EUSART_Initialize();
  7619  1578  3189  2103  3195   	fcall	_EUSART_Initialize
  7620                           
  7621                           ;mcc_generated_files/mcc.c: 63:     LCD_Initialize();
  7622  157B  3194  240B         	fcall	_LCD_Initialize
  7623  157D  0008               	return
  7624  157E                     __end_of_SYSTEM_Initialize:
  7625                           
  7626                           	psect	text20
  7627  07FD                     __ptext20:	
  7628 ;; *************** function _WDT_Initialize *****************
  7629 ;; Defined at:
  7630 ;;		line 80 in file "mcc_generated_files/mcc.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;		None
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;		None
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  1    wreg      void 
  7637 ;; Registers used:
  7638 ;;		wreg
  7639 ;; Tracked objects:
  7640 ;;		On entry : B1F/1
  7641 ;;		On exit  : B1F/1
  7642 ;;		Unchanged: B00/0
  7643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;Total ram usage:        0 bytes
  7649 ;; Hardware stack levels used:    1
  7650 ;; Hardware stack levels required when called:    4
  7651 ;; This function calls:
  7652 ;;		Nothing
  7653 ;; This function is called by:
  7654 ;;		_SYSTEM_Initialize
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           
  7659                           ;psect for function _WDT_Initialize
  7660  07FD                     _WDT_Initialize:
  7661                           
  7662                           ;mcc_generated_files/mcc.c: 83:     WDTCON = 0x16;
  7663                           
  7664                           ;incstack = 0
  7665                           ; Regs used in _WDT_Initialize: [wreg]
  7666  07FD  3016               	movlw	22
  7667  07FE  0097               	movwf	23	;volatile
  7668  07FF  0008               	return
  7669  0800                     __end_of_WDT_Initialize:
  7670                           
  7671                           	psect	text21
  7672  12EE                     __ptext21:	
  7673 ;; *************** function _TMR1_Initialize *****************
  7674 ;; Defined at:
  7675 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  7676 ;; Parameters:    Size  Location     Type
  7677 ;;		None
  7678 ;; Auto vars:     Size  Location     Type
  7679 ;;		None
  7680 ;; Return value:  Size  Location     Type
  7681 ;;                  1    wreg      void 
  7682 ;; Registers used:
  7683 ;;		wreg, status,2
  7684 ;; Tracked objects:
  7685 ;;		On entry : 1F/1
  7686 ;;		On exit  : 1F/0
  7687 ;;		Unchanged: 0/0
  7688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;Total ram usage:        0 bytes
  7694 ;; Hardware stack levels used:    1
  7695 ;; Hardware stack levels required when called:    4
  7696 ;; This function calls:
  7697 ;;		Nothing
  7698 ;; This function is called by:
  7699 ;;		_SYSTEM_Initialize
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           
  7704                           ;psect for function _TMR1_Initialize
  7705  12EE                     _TMR1_Initialize:
  7706                           
  7707                           ;mcc_generated_files/tmr1.c: 68:     T1GCON = 0x00;
  7708                           
  7709                           ;incstack = 0
  7710                           ; Regs used in _TMR1_Initialize: [wreg+status,2]
  7711  12EE  0020               	movlb	0	; select bank0
  7712  12EF  0199               	clrf	25	;volatile
  7713                           
  7714                           ;mcc_generated_files/tmr1.c: 71:     TMR1H = 0x00;
  7715  12F0  0197               	clrf	23	;volatile
  7716                           
  7717                           ;mcc_generated_files/tmr1.c: 74:     TMR1L = 0x00;
  7718  12F1  0196               	clrf	22	;volatile
  7719                           
  7720                           ;mcc_generated_files/tmr1.c: 77:     PIR1bits.TMR1IF = 0;
  7721  12F2  1011               	bcf	17,0	;volatile
  7722                           
  7723                           ;mcc_generated_files/tmr1.c: 80:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  7724  12F3  0817               	movf	23,w	;volatile
  7725  12F4  0021               	movlb	1	; select bank1
  7726  12F5  00DF               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
  7727  12F6  0020               	movlb	0	; select bank0
  7728  12F7  0816               	movf	22,w	;volatile
  7729  12F8  0021               	movlb	1	; select bank1
  7730  12F9  00DE               	movwf	_timer1ReloadVal^(0+128)	;volatile
  7731                           
  7732                           ;mcc_generated_files/tmr1.c: 83:     T1CON = 0x31;
  7733  12FA  3031               	movlw	49
  7734  12FB  0020               	movlb	0	; select bank0
  7735  12FC  0098               	movwf	24	;volatile
  7736  12FD  0008               	return
  7737  12FE                     __end_of_TMR1_Initialize:
  7738                           
  7739                           	psect	text22
  7740  1255                     __ptext22:	
  7741 ;; *************** function _TMR0_Initialize *****************
  7742 ;; Defined at:
  7743 ;;		line 63 in file "mcc_generated_files/tmr0.c"
  7744 ;; Parameters:    Size  Location     Type
  7745 ;;		None
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;		None
  7748 ;; Return value:  Size  Location     Type
  7749 ;;                  1    wreg      void 
  7750 ;; Registers used:
  7751 ;;		wreg, status,2
  7752 ;; Tracked objects:
  7753 ;;		On entry : 1F/0
  7754 ;;		On exit  : 1F/1
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7761 ;;Total ram usage:        0 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    4
  7764 ;; This function calls:
  7765 ;;		Nothing
  7766 ;; This function is called by:
  7767 ;;		_SYSTEM_Initialize
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           
  7772                           ;psect for function _TMR0_Initialize
  7773  1255                     _TMR0_Initialize:
  7774                           
  7775                           ;mcc_generated_files/tmr0.c: 68:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xDF 
      +                          & 0x3F));
  7776                           
  7777                           ;incstack = 0
  7778                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  7779  1255  0021               	movlb	1	; select bank1
  7780  1256  0815               	movf	21,w	;volatile
  7781  1257  39C0               	andlw	192
  7782  1258  381F               	iorlw	31
  7783  1259  0095               	movwf	21	;volatile
  7784                           
  7785                           ;mcc_generated_files/tmr0.c: 71:     TMR0 = 0x00;
  7786  125A  0020               	movlb	0	; select bank0
  7787  125B  0195               	clrf	21	;volatile
  7788                           
  7789                           ;mcc_generated_files/tmr0.c: 74:     timer0ReloadVal= 0;
  7790  125C  0021               	movlb	1	; select bank1
  7791  125D  01EB               	clrf	_timer0ReloadVal^(0+128)	;volatile
  7792                           
  7793                           ;mcc_generated_files/tmr0.c: 77:     INTCONbits.TMR0IF = 0;
  7794  125E  110B               	bcf	11,2	;volatile
  7795  125F  0008               	return
  7796  1260                     __end_of_TMR0_Initialize:
  7797                           
  7798                           	psect	text23
  7799  1454                     __ptext23:	
  7800 ;; *************** function _PIN_MANAGER_Initialize *****************
  7801 ;; Defined at:
  7802 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  7803 ;; Parameters:    Size  Location     Type
  7804 ;;		None
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;		None
  7807 ;; Return value:  Size  Location     Type
  7808 ;;                  1    wreg      void 
  7809 ;; Registers used:
  7810 ;;		wreg, status,2
  7811 ;; Tracked objects:
  7812 ;;		On entry : B1F/4
  7813 ;;		On exit  : B1F/2
  7814 ;;		Unchanged: B00/0
  7815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;Total ram usage:        0 bytes
  7821 ;; Hardware stack levels used:    1
  7822 ;; Hardware stack levels required when called:    4
  7823 ;; This function calls:
  7824 ;;		Nothing
  7825 ;; This function is called by:
  7826 ;;		_SYSTEM_Initialize
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           
  7831                           ;psect for function _PIN_MANAGER_Initialize
  7832  1454                     _PIN_MANAGER_Initialize:
  7833                           
  7834                           ;mcc_generated_files/pin_manager.c: 60:     LATE = 0x00;
  7835                           
  7836                           ;incstack = 0
  7837                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7838  1454  0022               	movlb	2	; select bank2
  7839  1455  0190               	clrf	16	;volatile
  7840                           
  7841                           ;mcc_generated_files/pin_manager.c: 61:     LATA = 0x00;
  7842  1456  018C               	clrf	12	;volatile
  7843                           
  7844                           ;mcc_generated_files/pin_manager.c: 62:     LATB = 0x00;
  7845  1457  018D               	clrf	13	;volatile
  7846                           
  7847                           ;mcc_generated_files/pin_manager.c: 63:     LATC = 0x00;
  7848  1458  018E               	clrf	14	;volatile
  7849                           
  7850                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0x08;
  7851  1459  3008               	movlw	8
  7852  145A  0021               	movlb	1	; select bank1
  7853  145B  0090               	movwf	16	;volatile
  7854                           
  7855                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x00;
  7856  145C  018C               	clrf	12	;volatile
  7857                           
  7858                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xCF;
  7859  145D  30CF               	movlw	207
  7860  145E  008D               	movwf	13	;volatile
  7861                           
  7862                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x9B;
  7863  145F  309B               	movlw	155
  7864  1460  008E               	movwf	14	;volatile
  7865                           
  7866                           ;mcc_generated_files/pin_manager.c: 76:     ANSELB = 0x0E;
  7867  1461  300E               	movlw	14
  7868  1462  0023               	movlb	3	; select bank3
  7869  1463  008D               	movwf	13	;volatile
  7870                           
  7871                           ;mcc_generated_files/pin_manager.c: 77:     ANSELA = 0x00;
  7872  1464  018C               	clrf	12	;volatile
  7873                           
  7874                           ;mcc_generated_files/pin_manager.c: 82:     WPUE = 0x00;
  7875  1465  0024               	movlb	4	; select bank4
  7876  1466  0190               	clrf	16	;volatile
  7877                           
  7878                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x01;
  7879  1467  3001               	movlw	1
  7880  1468  008D               	movwf	13	;volatile
  7881                           
  7882                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 0;
  7883  1469  0021               	movlb	1	; select bank1
  7884  146A  1395               	bcf	21,7	;volatile
  7885                           
  7886                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  7887  146B  0022               	movlb	2	; select bank2
  7888  146C  019D               	clrf	29	;volatile
  7889  146D  0008               	return
  7890  146E                     __end_of_PIN_MANAGER_Initialize:
  7891                           
  7892                           	psect	text24
  7893  1240                     __ptext24:	
  7894 ;; *************** function _OSCILLATOR_Initialize *****************
  7895 ;; Defined at:
  7896 ;;		line 66 in file "mcc_generated_files/mcc.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;		None
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;		None
  7901 ;; Return value:  Size  Location     Type
  7902 ;;                  1    wreg      void 
  7903 ;; Registers used:
  7904 ;;		wreg, status,2
  7905 ;; Tracked objects:
  7906 ;;		On entry : B1F/2
  7907 ;;		On exit  : B1F/1
  7908 ;;		Unchanged: B00/0
  7909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7914 ;;Total ram usage:        0 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; Hardware stack levels required when called:    4
  7917 ;; This function calls:
  7918 ;;		Nothing
  7919 ;; This function is called by:
  7920 ;;		_SYSTEM_Initialize
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           
  7925                           ;psect for function _OSCILLATOR_Initialize
  7926  1240                     _OSCILLATOR_Initialize:
  7927                           
  7928                           ;mcc_generated_files/mcc.c: 69:     OSCCON = 0x70;
  7929                           
  7930                           ;incstack = 0
  7931                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7932  1240  3070               	movlw	112
  7933  1241  0021               	movlb	1	; select bank1
  7934  1242  0099               	movwf	25	;volatile
  7935                           
  7936                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
  7937  1243  0198               	clrf	24	;volatile
  7938                           
  7939                           ;mcc_generated_files/mcc.c: 73:     BORCON = 0x00;
  7940  1244  0022               	movlb	2	; select bank2
  7941  1245  0196               	clrf	22	;volatile
  7942  1246                     l887:	
  7943                           ;mcc_generated_files/mcc.c: 76:     {;mcc_generated_files/mcc.c: 77:     }
  7944                           
  7945                           
  7946                           ;mcc_generated_files/mcc.c: 75:     while(PLLR == 0)
  7947  1246  0021               	movlb	1	; select bank1
  7948  1247  1B1A               	btfsc	26,6	;volatile
  7949  1248  0008               	return
  7950  1249  2A46               	goto	l887
  7951  124A                     __end_of_OSCILLATOR_Initialize:
  7952                           
  7953                           	psect	text25
  7954  140B                     __ptext25:	
  7955 ;; *************** function _LCD_Initialize *****************
  7956 ;; Defined at:
  7957 ;;		line 58 in file "mcc_generated_files/lcd.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;		None
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;		None
  7962 ;; Return value:  Size  Location     Type
  7963 ;;                  1    wreg      void 
  7964 ;; Registers used:
  7965 ;;		wreg, status,2
  7966 ;; Tracked objects:
  7967 ;;		On entry : 1F/1
  7968 ;;		On exit  : 1F/F
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;Total ram usage:        0 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    4
  7978 ;; This function calls:
  7979 ;;		Nothing
  7980 ;; This function is called by:
  7981 ;;		_SYSTEM_Initialize
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           
  7986                           ;psect for function _LCD_Initialize
  7987  140B                     _LCD_Initialize:
  7988                           
  7989                           ;mcc_generated_files/lcd.c: 61:     LCDCONbits.LCDEN = 0;
  7990                           
  7991                           ;incstack = 0
  7992                           ; Regs used in _LCD_Initialize: [wreg+status,2]
  7993  140B  002F               	movlb	15	; select bank15
  7994  140C  1391               	bcf	17,7	;volatile
  7995                           
  7996                           ;mcc_generated_files/lcd.c: 65:     LCDPS = 0x01;
  7997  140D  3001               	movlw	1
  7998  140E  0092               	movwf	18	;volatile
  7999                           
  8000                           ;mcc_generated_files/lcd.c: 68:     LCDREF = 0xA0;
  8001  140F  30A0               	movlw	160
  8002  1410  0093               	movwf	19	;volatile
  8003                           
  8004                           ;mcc_generated_files/lcd.c: 71:     LCDRL = 0x10;
  8005  1411  3010               	movlw	16
  8006  1412  0095               	movwf	21	;volatile
  8007                           
  8008                           ;mcc_generated_files/lcd.c: 74:     LCDCST = 0x00;
  8009  1413  0194               	clrf	20	;volatile
  8010                           
  8011                           ;mcc_generated_files/lcd.c: 77:  LCDDATA0 = 0x00;
  8012  1414  01A0               	clrf	32	;volatile
  8013                           
  8014                           ;mcc_generated_files/lcd.c: 78:  LCDDATA1 = 0x00;
  8015  1415  01A1               	clrf	33	;volatile
  8016                           
  8017                           ;mcc_generated_files/lcd.c: 79:  LCDDATA3 = 0x00;
  8018  1416  01A3               	clrf	35	;volatile
  8019                           
  8020                           ;mcc_generated_files/lcd.c: 80:  LCDDATA4 = 0x00;
  8021  1417  01A4               	clrf	36	;volatile
  8022                           
  8023                           ;mcc_generated_files/lcd.c: 81:  LCDDATA6 = 0x00;
  8024  1418  01A6               	clrf	38	;volatile
  8025                           
  8026                           ;mcc_generated_files/lcd.c: 82:  LCDDATA7 = 0x00;
  8027  1419  01A7               	clrf	39	;volatile
  8028                           
  8029                           ;mcc_generated_files/lcd.c: 83:  LCDDATA9 = 0x00;
  8030  141A  01A9               	clrf	41	;volatile
  8031                           
  8032                           ;mcc_generated_files/lcd.c: 84:  LCDDATA10 = 0x00;
  8033  141B  01AA               	clrf	42	;volatile
  8034                           
  8035                           ;mcc_generated_files/lcd.c: 87:  LCDSE0 = 0xBE;
  8036  141C  30BE               	movlw	190
  8037  141D  0098               	movwf	24	;volatile
  8038                           
  8039                           ;mcc_generated_files/lcd.c: 88:  LCDSE1 = 0x14;
  8040  141E  3014               	movlw	20
  8041  141F  0099               	movwf	25	;volatile
  8042                           
  8043                           ;mcc_generated_files/lcd.c: 91:     LCDCON = 0xCB;
  8044  1420  30CB               	movlw	203
  8045  1421  0091               	movwf	17	;volatile
  8046  1422  0008               	return
  8047  1423                     __end_of_LCD_Initialize:
  8048                           
  8049                           	psect	text26
  8050  1223                     __ptext26:	
  8051 ;; *************** function _I2C_Initialize *****************
  8052 ;; Defined at:
  8053 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;		None
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;		None
  8058 ;; Return value:  Size  Location     Type
  8059 ;;                  1    wreg      void 
  8060 ;; Registers used:
  8061 ;;		wreg, status,2
  8062 ;; Tracked objects:
  8063 ;;		On entry : B1F/0
  8064 ;;		On exit  : B1F/4
  8065 ;;		Unchanged: B00/0
  8066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;Total ram usage:        0 bytes
  8072 ;; Hardware stack levels used:    1
  8073 ;; Hardware stack levels required when called:    4
  8074 ;; This function calls:
  8075 ;;		Nothing
  8076 ;; This function is called by:
  8077 ;;		_SYSTEM_Initialize
  8078 ;; This function uses a non-reentrant model
  8079 ;;
  8080                           
  8081                           
  8082                           ;psect for function _I2C_Initialize
  8083  1223                     _I2C_Initialize:
  8084                           
  8085                           ;mcc_generated_files/i2c_master.c: 169:     SSPSTAT = 0x00;
  8086                           
  8087                           ;incstack = 0
  8088                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  8089  1223  0024               	movlb	4	; select bank4
  8090  1224  0194               	clrf	20	;volatile
  8091                           
  8092                           ;mcc_generated_files/i2c_master.c: 170:     SSPCON1 = 0x08;
  8093  1225  3008               	movlw	8
  8094  1226  0095               	movwf	21	;volatile
  8095                           
  8096                           ;mcc_generated_files/i2c_master.c: 171:     SSPCON2 = 0x00;
  8097  1227  0196               	clrf	22	;volatile
  8098                           
  8099                           ;mcc_generated_files/i2c_master.c: 172:     SSPADD = 0x4F;
  8100  1228  304F               	movlw	79
  8101  1229  0092               	movwf	18	;volatile
  8102                           
  8103                           ;mcc_generated_files/i2c_master.c: 173:     SSPCON1bits.SSPEN = 0;
  8104  122A  1295               	bcf	21,5	;volatile
  8105  122B  0008               	return
  8106  122C                     __end_of_I2C_Initialize:
  8107                           
  8108                           	psect	text27
  8109  11AF                     __ptext27:	
  8110 ;; *************** function _FVR_Initialize *****************
  8111 ;; Defined at:
  8112 ;;		line 58 in file "mcc_generated_files/fvr.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;		None
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;		None
  8117 ;; Return value:  Size  Location     Type
  8118 ;;                  1    wreg      void 
  8119 ;; Registers used:
  8120 ;;		wreg
  8121 ;; Tracked objects:
  8122 ;;		On entry : B1F/1
  8123 ;;		On exit  : B1F/2
  8124 ;;		Unchanged: B00/0
  8125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;Total ram usage:        0 bytes
  8131 ;; Hardware stack levels used:    1
  8132 ;; Hardware stack levels required when called:    4
  8133 ;; This function calls:
  8134 ;;		Nothing
  8135 ;; This function is called by:
  8136 ;;		_SYSTEM_Initialize
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           
  8141                           ;psect for function _FVR_Initialize
  8142  11AF                     _FVR_Initialize:
  8143                           
  8144                           ;mcc_generated_files/fvr.c: 61:     FVRCON = 0x8A;
  8145                           
  8146                           ;incstack = 0
  8147                           ; Regs used in _FVR_Initialize: [wreg]
  8148  11AF  308A               	movlw	138
  8149  11B0  0022               	movlb	2	; select bank2
  8150  11B1  0097               	movwf	23	;volatile
  8151  11B2  0008               	return
  8152  11B3                     __end_of_FVR_Initialize:
  8153                           
  8154                           	psect	text28
  8155  0903                     __ptext28:	
  8156 ;; *************** function _EUSART_Initialize *****************
  8157 ;; Defined at:
  8158 ;;		line 88 in file "mcc_generated_files/eusart.c"
  8159 ;; Parameters:    Size  Location     Type
  8160 ;;		None
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;		None
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  1    wreg      void 
  8165 ;; Registers used:
  8166 ;;		wreg, status,2, status,0, pclath, cstack
  8167 ;; Tracked objects:
  8168 ;;		On entry : 1F/1
  8169 ;;		On exit  : 1F/1
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;Total ram usage:        1 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    5
  8179 ;; This function calls:
  8180 ;;		_EUSART_SetErrorHandler
  8181 ;;		_EUSART_SetFramingErrorHandler
  8182 ;;		_EUSART_SetOverrunErrorHandler
  8183 ;;		_EUSART_SetRxInterruptHandler
  8184 ;;		_EUSART_SetTxInterruptHandler
  8185 ;; This function is called by:
  8186 ;;		_SYSTEM_Initialize
  8187 ;; This function uses a non-reentrant model
  8188 ;;
  8189                           
  8190                           
  8191                           ;psect for function _EUSART_Initialize
  8192  0903                     _EUSART_Initialize:
  8193                           
  8194                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  8195                           
  8196                           ;incstack = 0
  8197                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8198  0903  1291               	bcf	17,5	;volatile
  8199                           
  8200                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  8201  0904  305F               	movlw	low _EUSART_Receive_ISR
  8202  0905  0020               	movlb	0	; select bank0
  8203  0906  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  8204  0907  3008               	movlw	high _EUSART_Receive_ISR
  8205  0908  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  8206  0909  3192  220B  3189   	fcall	_EUSART_SetRxInterruptHandler
  8207                           
  8208                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  8209  090C  1211               	bcf	17,4	;volatile
  8210                           
  8211                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  8212  090D  30C1               	movlw	low _EUSART_Transmit_ISR
  8213  090E  0020               	movlb	0	; select bank0
  8214  090F  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  8215  0910  3014               	movlw	high _EUSART_Transmit_ISR
  8216  0911  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  8217  0912  3192  2213  3189   	fcall	_EUSART_SetTxInterruptHandler
  8218                           
  8219                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  8220  0915  3008               	movlw	8
  8221  0916  0023               	movlb	3	; select bank3
  8222  0917  009F               	movwf	31	;volatile
  8223                           
  8224                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  8225  0918  3090               	movlw	144
  8226  0919  009D               	movwf	29	;volatile
  8227                           
  8228                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  8229  091A  3024               	movlw	36
  8230  091B  009E               	movwf	30	;volatile
  8231                           
  8232                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0x40;
  8233  091C  3040               	movlw	64
  8234  091D  009B               	movwf	27	;volatile
  8235                           
  8236                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x03;
  8237  091E  3003               	movlw	3
  8238  091F  009C               	movwf	28	;volatile
  8239                           
  8240                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  8241  0920  3062               	movlw	low _EUSART_DefaultFramingErrorHandler
  8242  0921  0020               	movlb	0	; select bank0
  8243  0922  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  8244  0923  3011               	movlw	high _EUSART_DefaultFramingErrorHandler
  8245  0924  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  8246  0925  3191  21FB  3189   	fcall	_EUSART_SetFramingErrorHandler
  8247                           
  8248                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  8249  0928  307F               	movlw	low _EUSART_DefaultOverrunErrorHandler
  8250  0929  0020               	movlb	0	; select bank0
  8251  092A  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  8252  092B  3011               	movlw	high _EUSART_DefaultOverrunErrorHandler
  8253  092C  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  8254  092D  3192  2203  3189   	fcall	_EUSART_SetOverrunErrorHandler
  8255                           
  8256                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  8257  0930  3067               	movlw	low _EUSART_DefaultErrorHandler
  8258  0931  0020               	movlb	0	; select bank0
  8259  0932  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
  8260  0933  3011               	movlw	high _EUSART_DefaultErrorHandler
  8261  0934  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  8262  0935  3191  21F3         	fcall	_EUSART_SetErrorHandler
  8263                           
  8264                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  8265  0937  01EC               	clrf	_eusartRxLastError^(0+128)	;volatile
  8266                           
  8267                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  8268  0938  0020               	movlb	0	; select bank0
  8269  0939  01EF               	clrf	_eusartTxHead	;volatile
  8270                           
  8271                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  8272  093A  01EE               	clrf	_eusartTxTail	;volatile
  8273                           
  8274                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  8275  093B  3008               	movlw	8
  8276  093C  00A2               	movwf	??_EUSART_Initialize
  8277  093D  0822               	movf	??_EUSART_Initialize,w
  8278  093E  00ED               	movwf	_eusartTxBufferRemaining	;volatile
  8279                           
  8280                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  8281  093F  01EC               	clrf	_eusartRxHead	;volatile
  8282                           
  8283                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  8284  0940  01FD               	clrf	_eusartRxTail	;volatile
  8285                           
  8286                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  8287  0941  0021               	movlb	1	; select bank1
  8288  0942  01ED               	clrf	_eusartRxCount^(0+128)	;volatile
  8289                           
  8290                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  8291  0943  1691               	bsf	17,5	;volatile
  8292  0944  0008               	return
  8293  0945                     __end_of_EUSART_Initialize:
  8294                           
  8295                           	psect	text29
  8296  1213                     __ptext29:	
  8297 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  8298 ;; Defined at:
  8299 ;;		line 276 in file "mcc_generated_files/eusart.c"
  8300 ;; Parameters:    Size  Location     Type
  8301 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8302 ;;		 -> EUSART_Transmit_ISR(1), 
  8303 ;; Auto vars:     Size  Location     Type
  8304 ;;		None
  8305 ;; Return value:  Size  Location     Type
  8306 ;;                  1    wreg      void 
  8307 ;; Registers used:
  8308 ;;		wreg
  8309 ;; Tracked objects:
  8310 ;;		On entry : 1F/0
  8311 ;;		On exit  : 1F/1
  8312 ;;		Unchanged: 0/0
  8313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8314 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8317 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8318 ;;Total ram usage:        2 bytes
  8319 ;; Hardware stack levels used:    1
  8320 ;; Hardware stack levels required when called:    4
  8321 ;; This function calls:
  8322 ;;		Nothing
  8323 ;; This function is called by:
  8324 ;;		_EUSART_Initialize
  8325 ;; This function uses a non-reentrant model
  8326 ;;
  8327                           
  8328                           
  8329                           ;psect for function _EUSART_SetTxInterruptHandler
  8330  1213                     _EUSART_SetTxInterruptHandler:
  8331                           
  8332                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  8333                           
  8334                           ;incstack = 0
  8335                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  8336  1213  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  8337  1214  0021               	movlb	1	; select bank1
  8338  1215  00E9               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  8339  1216  0020               	movlb	0	; select bank0
  8340  1217  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  8341  1218  0021               	movlb	1	; select bank1
  8342  1219  00E8               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  8343  121A  0008               	return
  8344  121B                     __end_of_EUSART_SetTxInterruptHandler:
  8345                           
  8346                           	psect	text30
  8347  120B                     __ptext30:	
  8348 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  8349 ;; Defined at:
  8350 ;;		line 280 in file "mcc_generated_files/eusart.c"
  8351 ;; Parameters:    Size  Location     Type
  8352 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8353 ;;		 -> EUSART_Receive_ISR(1), 
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;		None
  8356 ;; Return value:  Size  Location     Type
  8357 ;;                  1    wreg      void 
  8358 ;; Registers used:
  8359 ;;		wreg
  8360 ;; Tracked objects:
  8361 ;;		On entry : 1F/0
  8362 ;;		On exit  : 1F/1
  8363 ;;		Unchanged: 0/0
  8364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8365 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8369 ;;Total ram usage:        2 bytes
  8370 ;; Hardware stack levels used:    1
  8371 ;; Hardware stack levels required when called:    4
  8372 ;; This function calls:
  8373 ;;		Nothing
  8374 ;; This function is called by:
  8375 ;;		_EUSART_Initialize
  8376 ;; This function uses a non-reentrant model
  8377 ;;
  8378                           
  8379                           
  8380                           ;psect for function _EUSART_SetRxInterruptHandler
  8381  120B                     _EUSART_SetRxInterruptHandler:
  8382                           
  8383                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  8384                           
  8385                           ;incstack = 0
  8386                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  8387  120B  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  8388  120C  0021               	movlb	1	; select bank1
  8389  120D  00E7               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  8390  120E  0020               	movlb	0	; select bank0
  8391  120F  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  8392  1210  0021               	movlb	1	; select bank1
  8393  1211  00E6               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  8394  1212  0008               	return
  8395  1213                     __end_of_EUSART_SetRxInterruptHandler:
  8396                           
  8397                           	psect	text31
  8398  1203                     __ptext31:	
  8399 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  8400 ;; Defined at:
  8401 ;;		line 268 in file "mcc_generated_files/eusart.c"
  8402 ;; Parameters:    Size  Location     Type
  8403 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8404 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;		None
  8407 ;; Return value:  Size  Location     Type
  8408 ;;                  1    wreg      void 
  8409 ;; Registers used:
  8410 ;;		wreg
  8411 ;; Tracked objects:
  8412 ;;		On entry : 1F/0
  8413 ;;		On exit  : 1F/1
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8416 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;Total ram usage:        2 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    4
  8423 ;; This function calls:
  8424 ;;		Nothing
  8425 ;; This function is called by:
  8426 ;;		_EUSART_Initialize
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           
  8431                           ;psect for function _EUSART_SetOverrunErrorHandler
  8432  1203                     _EUSART_SetOverrunErrorHandler:
  8433                           
  8434                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  8435                           
  8436                           ;incstack = 0
  8437                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  8438  1203  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  8439  1204  0021               	movlb	1	; select bank1
  8440  1205  00E3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  8441  1206  0020               	movlb	0	; select bank0
  8442  1207  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  8443  1208  0021               	movlb	1	; select bank1
  8444  1209  00E2               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  8445  120A  0008               	return
  8446  120B                     __end_of_EUSART_SetOverrunErrorHandler:
  8447                           
  8448                           	psect	text32
  8449  11FB                     __ptext32:	
  8450 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  8451 ;; Defined at:
  8452 ;;		line 264 in file "mcc_generated_files/eusart.c"
  8453 ;; Parameters:    Size  Location     Type
  8454 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8455 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  8456 ;; Auto vars:     Size  Location     Type
  8457 ;;		None
  8458 ;; Return value:  Size  Location     Type
  8459 ;;                  1    wreg      void 
  8460 ;; Registers used:
  8461 ;;		wreg
  8462 ;; Tracked objects:
  8463 ;;		On entry : 1F/0
  8464 ;;		On exit  : 1F/1
  8465 ;;		Unchanged: 0/0
  8466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8467 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;Total ram usage:        2 bytes
  8472 ;; Hardware stack levels used:    1
  8473 ;; Hardware stack levels required when called:    4
  8474 ;; This function calls:
  8475 ;;		Nothing
  8476 ;; This function is called by:
  8477 ;;		_EUSART_Initialize
  8478 ;; This function uses a non-reentrant model
  8479 ;;
  8480                           
  8481                           
  8482                           ;psect for function _EUSART_SetFramingErrorHandler
  8483  11FB                     _EUSART_SetFramingErrorHandler:
  8484                           
  8485                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  8486                           
  8487                           ;incstack = 0
  8488                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  8489  11FB  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  8490  11FC  0021               	movlb	1	; select bank1
  8491  11FD  00E5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  8492  11FE  0020               	movlb	0	; select bank0
  8493  11FF  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  8494  1200  0021               	movlb	1	; select bank1
  8495  1201  00E4               	movwf	_EUSART_FramingErrorHandler^(0+128)
  8496  1202  0008               	return
  8497  1203                     __end_of_EUSART_SetFramingErrorHandler:
  8498                           
  8499                           	psect	text33
  8500  11F3                     __ptext33:	
  8501 ;; *************** function _EUSART_SetErrorHandler *****************
  8502 ;; Defined at:
  8503 ;;		line 272 in file "mcc_generated_files/eusart.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  8506 ;;		 -> EUSART_DefaultErrorHandler(1), 
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;		None
  8509 ;; Return value:  Size  Location     Type
  8510 ;;                  1    wreg      void 
  8511 ;; Registers used:
  8512 ;;		wreg
  8513 ;; Tracked objects:
  8514 ;;		On entry : 1F/0
  8515 ;;		On exit  : 1F/1
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8518 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;Total ram usage:        2 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; Hardware stack levels required when called:    4
  8525 ;; This function calls:
  8526 ;;		Nothing
  8527 ;; This function is called by:
  8528 ;;		_EUSART_Initialize
  8529 ;; This function uses a non-reentrant model
  8530 ;;
  8531                           
  8532                           
  8533                           ;psect for function _EUSART_SetErrorHandler
  8534  11F3                     _EUSART_SetErrorHandler:
  8535                           
  8536                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  8537                           
  8538                           ;incstack = 0
  8539                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  8540  11F3  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  8541  11F4  0021               	movlb	1	; select bank1
  8542  11F5  00E1               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  8543  11F6  0020               	movlb	0	; select bank0
  8544  11F7  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
  8545  11F8  0021               	movlb	1	; select bank1
  8546  11F9  00E0               	movwf	_EUSART_ErrorHandler^(0+128)
  8547  11FA  0008               	return
  8548  11FB                     __end_of_EUSART_SetErrorHandler:
  8549                           
  8550                           	psect	text34
  8551  11BD                     __ptext34:	
  8552 ;; *************** function _DAC_Initialize *****************
  8553 ;; Defined at:
  8554 ;;		line 58 in file "mcc_generated_files/dac.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;		None
  8557 ;; Auto vars:     Size  Location     Type
  8558 ;;		None
  8559 ;; Return value:  Size  Location     Type
  8560 ;;                  1    wreg      void 
  8561 ;; Registers used:
  8562 ;;		wreg
  8563 ;; Tracked objects:
  8564 ;;		On entry : B1F/2
  8565 ;;		On exit  : B1F/2
  8566 ;;		Unchanged: B00/0
  8567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8572 ;;Total ram usage:        0 bytes
  8573 ;; Hardware stack levels used:    1
  8574 ;; Hardware stack levels required when called:    4
  8575 ;; This function calls:
  8576 ;;		Nothing
  8577 ;; This function is called by:
  8578 ;;		_SYSTEM_Initialize
  8579 ;; This function uses a non-reentrant model
  8580 ;;
  8581                           
  8582                           
  8583                           ;psect for function _DAC_Initialize
  8584  11BD                     _DAC_Initialize:
  8585                           
  8586                           ;mcc_generated_files/dac.c: 61:     DACCON0 = 0x88;
  8587                           
  8588                           ;incstack = 0
  8589                           ; Regs used in _DAC_Initialize: [wreg]
  8590  11BD  3088               	movlw	136
  8591  11BE  0098               	movwf	24	;volatile
  8592                           
  8593                           ;mcc_generated_files/dac.c: 63:     DACCON1 = 0x10;
  8594  11BF  3010               	movlw	16
  8595  11C0  0099               	movwf	25	;volatile
  8596  11C1  0008               	return
  8597  11C2                     __end_of_DAC_Initialize:
  8598                           
  8599                           	psect	text35
  8600  12FE                     __ptext35:	
  8601 ;; *************** function _CCP4_Initialize *****************
  8602 ;; Defined at:
  8603 ;;		line 65 in file "mcc_generated_files/ccp4.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;		None
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;		None
  8608 ;; Return value:  Size  Location     Type
  8609 ;;                  1    wreg      void 
  8610 ;; Registers used:
  8611 ;;		wreg, status,2, status,0, pclath, cstack
  8612 ;; Tracked objects:
  8613 ;;		On entry : B1F/2
  8614 ;;		On exit  : 1F/1
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;Total ram usage:        0 bytes
  8622 ;; Hardware stack levels used:    1
  8623 ;; Hardware stack levels required when called:    5
  8624 ;; This function calls:
  8625 ;;		_CCP4_SetCallBack
  8626 ;; This function is called by:
  8627 ;;		_SYSTEM_Initialize
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           
  8632                           ;psect for function _CCP4_Initialize
  8633  12FE                     _CCP4_Initialize:
  8634                           
  8635                           ;mcc_generated_files/ccp4.c: 70:  CCP4CON = 0x04;
  8636                           
  8637                           ;incstack = 0
  8638                           ; Regs used in _CCP4_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8639  12FE  3004               	movlw	4
  8640  12FF  0026               	movlb	6	; select bank6
  8641  1300  009A               	movwf	26	;volatile
  8642                           
  8643                           ;mcc_generated_files/ccp4.c: 73:  CCPR4L = 0x00;
  8644  1301  0198               	clrf	24	;volatile
  8645                           
  8646                           ;mcc_generated_files/ccp4.c: 76:  CCPR4H = 0x00;
  8647  1302  0199               	clrf	25	;volatile
  8648                           
  8649                           ;mcc_generated_files/ccp4.c: 79:     CCP4_SetCallBack(CCP4_DefaultCallBack);
  8650  1303  3061               	movlw	low _CCP4_DefaultCallBack
  8651  1304  0020               	movlb	0	; select bank0
  8652  1305  00A0               	movwf	CCP4_SetCallBack@customCallBack
  8653  1306  3011               	movlw	high _CCP4_DefaultCallBack
  8654  1307  00A1               	movwf	CCP4_SetCallBack@customCallBack+1
  8655  1308  3191  21EB         	fcall	_CCP4_SetCallBack
  8656                           
  8657                           ;mcc_generated_files/ccp4.c: 83:     PIR3bits.CCP4IF = 0;
  8658  130A  0020               	movlb	0	; select bank0
  8659  130B  1293               	bcf	19,5	;volatile
  8660                           
  8661                           ;mcc_generated_files/ccp4.c: 86:     PIE3bits.CCP4IE = 1;
  8662  130C  0021               	movlb	1	; select bank1
  8663  130D  1693               	bsf	19,5	;volatile
  8664  130E  0008               	return
  8665  130F                     __end_of_CCP4_Initialize:
  8666                           
  8667                           	psect	text36
  8668  11EB                     __ptext36:	
  8669 ;; *************** function _CCP4_SetCallBack *****************
  8670 ;; Defined at:
  8671 ;;		line 104 in file "mcc_generated_files/ccp4.c"
  8672 ;; Parameters:    Size  Location     Type
  8673 ;;  customCallBa    2    0[BANK0 ] PTR FTN(unsigned short ,
  8674 ;;		 -> CCP4_CallBack@main$F1923(1), CCP4_DefaultCallBack(1), 
  8675 ;; Auto vars:     Size  Location     Type
  8676 ;;		None
  8677 ;; Return value:  Size  Location     Type
  8678 ;;                  1    wreg      void 
  8679 ;; Registers used:
  8680 ;;		wreg
  8681 ;; Tracked objects:
  8682 ;;		On entry : 1F/0
  8683 ;;		On exit  : 1F/1
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8686 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;Total ram usage:        2 bytes
  8691 ;; Hardware stack levels used:    1
  8692 ;; Hardware stack levels required when called:    4
  8693 ;; This function calls:
  8694 ;;		Nothing
  8695 ;; This function is called by:
  8696 ;;		_CCP4_Initialize
  8697 ;;		_main
  8698 ;; This function uses a non-reentrant model
  8699 ;;
  8700                           
  8701                           
  8702                           ;psect for function _CCP4_SetCallBack
  8703  11EB                     _CCP4_SetCallBack:
  8704                           
  8705                           ;mcc_generated_files/ccp4.c: 105:     CCP4_CallBack = customCallBack;
  8706                           
  8707                           ;incstack = 0
  8708                           ; Regs used in _CCP4_SetCallBack: [wreg]
  8709  11EB  0821               	movf	CCP4_SetCallBack@customCallBack+1,w
  8710  11EC  0021               	movlb	1	; select bank1
  8711  11ED  00DD               	movwf	(_CCP4_CallBack+1)^(0+128)
  8712  11EE  0020               	movlb	0	; select bank0
  8713  11EF  0820               	movf	CCP4_SetCallBack@customCallBack,w
  8714  11F0  0021               	movlb	1	; select bank1
  8715  11F1  00DC               	movwf	_CCP4_CallBack^(0+128)
  8716  11F2  0008               	return
  8717  11F3                     __end_of_CCP4_SetCallBack:
  8718                           
  8719                           	psect	text37
  8720  0336                     __ptext37:	
  8721 ;; *************** function _LCD_Digit4Num *****************
  8722 ;; Defined at:
  8723 ;;		line 331 in file "main.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;  num             1    wreg     unsigned char 
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;  num             1    2[BANK0 ] unsigned char 
  8728 ;; Return value:  Size  Location     Type
  8729 ;;                  1    wreg      void 
  8730 ;; Registers used:
  8731 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8732 ;; Tracked objects:
  8733 ;;		On entry : 10/0
  8734 ;;		On exit  : 1F/F
  8735 ;;		Unchanged: 0/0
  8736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8739 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;Total ram usage:        3 bytes
  8742 ;; Hardware stack levels used:    1
  8743 ;; Hardware stack levels required when called:    4
  8744 ;; This function calls:
  8745 ;;		Nothing
  8746 ;; This function is called by:
  8747 ;;		_main
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           
  8752                           ;psect for function _LCD_Digit4Num
  8753  0336                     _LCD_Digit4Num:
  8754                           
  8755                           ;incstack = 0
  8756                           ; Regs used in _LCD_Digit4Num: [wreg-fsr0h+status,2+status,0]
  8757                           ;LCD_Digit4Num@num stored from wreg
  8758  0336  0020               	movlb	0	; select bank0
  8759  0337  00A2               	movwf	LCD_Digit4Num@num
  8760                           
  8761                           ;main.c: 331: void LCD_Digit4Num (unsigned char num);main.c: 332: {;main.c: 333:     swi
      +                          tch (num)
  8762  0338  2C47               	goto	l6161
  8763  0339                     l1214:
  8764  0339  002F               	movlb	15	; select bank15
  8765  033A  152A               	bsf	42,2	;volatile
  8766  033B  1529               	bsf	41,2	;volatile
  8767  033C  1523               	bsf	35,2	;volatile
  8768  033D  1520               	bsf	32,2	;volatile
  8769  033E  1524               	bsf	36,2	;volatile
  8770  033F  1527               	bsf	39,2	;volatile
  8771  0340  1126               	bcf	38,2	;volatile
  8772  0341  0008               	return
  8773  0342                     l1217:
  8774  0342  002F               	movlb	15	; select bank15
  8775  0343  112A               	bcf	42,2	;volatile
  8776  0344  1529               	bsf	41,2	;volatile
  8777  0345  1523               	bsf	35,2	;volatile
  8778  0346  1120               	bcf	32,2	;volatile
  8779  0347  1124               	bcf	36,2	;volatile
  8780  0348  1127               	bcf	39,2	;volatile
  8781  0349  1126               	bcf	38,2	;volatile
  8782  034A  0008               	return
  8783  034B                     l1219:
  8784  034B  002F               	movlb	15	; select bank15
  8785  034C  152A               	bsf	42,2	;volatile
  8786  034D  1529               	bsf	41,2	;volatile
  8787  034E  1123               	bcf	35,2	;volatile
  8788  034F  1520               	bsf	32,2	;volatile
  8789  0350  1524               	bsf	36,2	;volatile
  8790  0351  1127               	bcf	39,2	;volatile
  8791  0352  1526               	bsf	38,2	;volatile
  8792  0353  0008               	return
  8793  0354                     l1221:
  8794  0354  002F               	movlb	15	; select bank15
  8795  0355  152A               	bsf	42,2	;volatile
  8796  0356  1529               	bsf	41,2	;volatile
  8797  0357  1523               	bsf	35,2	;volatile
  8798  0358  1520               	bsf	32,2	;volatile
  8799  0359  1124               	bcf	36,2	;volatile
  8800  035A  1127               	bcf	39,2	;volatile
  8801  035B  1526               	bsf	38,2	;volatile
  8802  035C  0008               	return
  8803  035D                     l1223:
  8804  035D  002F               	movlb	15	; select bank15
  8805  035E  112A               	bcf	42,2	;volatile
  8806  035F  1529               	bsf	41,2	;volatile
  8807  0360  1523               	bsf	35,2	;volatile
  8808  0361  1120               	bcf	32,2	;volatile
  8809  0362  1124               	bcf	36,2	;volatile
  8810  0363  1527               	bsf	39,2	;volatile
  8811  0364  1526               	bsf	38,2	;volatile
  8812  0365  0008               	return
  8813  0366                     l1225:
  8814  0366  002F               	movlb	15	; select bank15
  8815  0367  152A               	bsf	42,2	;volatile
  8816  0368  1129               	bcf	41,2	;volatile
  8817  0369  1523               	bsf	35,2	;volatile
  8818  036A  1520               	bsf	32,2	;volatile
  8819  036B  1124               	bcf	36,2	;volatile
  8820  036C  1527               	bsf	39,2	;volatile
  8821  036D  1526               	bsf	38,2	;volatile
  8822  036E  0008               	return
  8823  036F                     l1227:
  8824  036F  002F               	movlb	15	; select bank15
  8825  0370  152A               	bsf	42,2	;volatile
  8826  0371  1129               	bcf	41,2	;volatile
  8827  0372  1523               	bsf	35,2	;volatile
  8828  0373  1520               	bsf	32,2	;volatile
  8829  0374  1524               	bsf	36,2	;volatile
  8830  0375  1527               	bsf	39,2	;volatile
  8831  0376  1526               	bsf	38,2	;volatile
  8832  0377  0008               	return
  8833  0378                     l1229:
  8834  0378  002F               	movlb	15	; select bank15
  8835  0379  152A               	bsf	42,2	;volatile
  8836  037A  1529               	bsf	41,2	;volatile
  8837  037B  1523               	bsf	35,2	;volatile
  8838  037C  1120               	bcf	32,2	;volatile
  8839  037D  1124               	bcf	36,2	;volatile
  8840  037E  1127               	bcf	39,2	;volatile
  8841  037F  1126               	bcf	38,2	;volatile
  8842  0380  0008               	return
  8843  0381                     l1231:
  8844  0381  002F               	movlb	15	; select bank15
  8845  0382  152A               	bsf	42,2	;volatile
  8846  0383  1529               	bsf	41,2	;volatile
  8847  0384  1523               	bsf	35,2	;volatile
  8848  0385  1520               	bsf	32,2	;volatile
  8849  0386  1524               	bsf	36,2	;volatile
  8850  0387  1527               	bsf	39,2	;volatile
  8851  0388  1526               	bsf	38,2	;volatile
  8852  0389  0008               	return
  8853  038A                     l1233:
  8854  038A  002F               	movlb	15	; select bank15
  8855  038B  152A               	bsf	42,2	;volatile
  8856  038C  1529               	bsf	41,2	;volatile
  8857  038D  1523               	bsf	35,2	;volatile
  8858  038E  1520               	bsf	32,2	;volatile
  8859  038F  1124               	bcf	36,2	;volatile
  8860  0390  1527               	bsf	39,2	;volatile
  8861  0391  1526               	bsf	38,2	;volatile
  8862  0392  0008               	return
  8863  0393                     l1236:
  8864  0393  002F               	movlb	15	; select bank15
  8865  0394  152A               	bsf	42,2	;volatile
  8866  0395  1529               	bsf	41,2	;volatile
  8867  0396  1523               	bsf	35,2	;volatile
  8868  0397  1120               	bcf	32,2	;volatile
  8869  0398  1524               	bsf	36,2	;volatile
  8870  0399  1527               	bsf	39,2	;volatile
  8871  039A  1526               	bsf	38,2	;volatile
  8872  039B  0008               	return
  8873  039C                     l1239:
  8874  039C  002F               	movlb	15	; select bank15
  8875  039D  112A               	bcf	42,2	;volatile
  8876  039E  1129               	bcf	41,2	;volatile
  8877  039F  1523               	bsf	35,2	;volatile
  8878  03A0  1520               	bsf	32,2	;volatile
  8879  03A1  1524               	bsf	36,2	;volatile
  8880  03A2  1527               	bsf	39,2	;volatile
  8881  03A3  1526               	bsf	38,2	;volatile
  8882  03A4  0008               	return
  8883  03A5                     l1242:
  8884  03A5  002F               	movlb	15	; select bank15
  8885  03A6  152A               	bsf	42,2	;volatile
  8886  03A7  1129               	bcf	41,2	;volatile
  8887  03A8  1123               	bcf	35,2	;volatile
  8888  03A9  1520               	bsf	32,2	;volatile
  8889  03AA  1524               	bsf	36,2	;volatile
  8890  03AB  1527               	bsf	39,2	;volatile
  8891  03AC  1126               	bcf	38,2	;volatile
  8892  03AD  0008               	return
  8893  03AE                     l1245:
  8894  03AE  002F               	movlb	15	; select bank15
  8895  03AF  112A               	bcf	42,2	;volatile
  8896  03B0  1529               	bsf	41,2	;volatile
  8897  03B1  1523               	bsf	35,2	;volatile
  8898  03B2  1520               	bsf	32,2	;volatile
  8899  03B3  1524               	bsf	36,2	;volatile
  8900  03B4  1127               	bcf	39,2	;volatile
  8901  03B5  1526               	bsf	38,2	;volatile
  8902  03B6  0008               	return
  8903  03B7                     l1248:
  8904  03B7  002F               	movlb	15	; select bank15
  8905  03B8  152A               	bsf	42,2	;volatile
  8906  03B9  1129               	bcf	41,2	;volatile
  8907  03BA  1123               	bcf	35,2	;volatile
  8908  03BB  1520               	bsf	32,2	;volatile
  8909  03BC  1524               	bsf	36,2	;volatile
  8910  03BD  1527               	bsf	39,2	;volatile
  8911  03BE  1526               	bsf	38,2	;volatile
  8912  03BF  0008               	return
  8913  03C0                     l1251:
  8914  03C0  002F               	movlb	15	; select bank15
  8915  03C1  152A               	bsf	42,2	;volatile
  8916  03C2  1129               	bcf	41,2	;volatile
  8917  03C3  1123               	bcf	35,2	;volatile
  8918  03C4  1120               	bcf	32,2	;volatile
  8919  03C5  1524               	bsf	36,2	;volatile
  8920  03C6  1527               	bsf	39,2	;volatile
  8921  03C7  1526               	bsf	38,2	;volatile
  8922  03C8  0008               	return
  8923  03C9                     l1253:
  8924  03C9  002F               	movlb	15	; select bank15
  8925  03CA  152A               	bsf	42,2	;volatile
  8926  03CB  1129               	bcf	41,2	;volatile
  8927  03CC  1523               	bsf	35,2	;volatile
  8928  03CD  1520               	bsf	32,2	;volatile
  8929  03CE  1524               	bsf	36,2	;volatile
  8930  03CF  1527               	bsf	39,2	;volatile
  8931  03D0  1526               	bsf	38,2	;volatile
  8932  03D1  0008               	return
  8933  03D2                     l1255:
  8934  03D2  002F               	movlb	15	; select bank15
  8935  03D3  112A               	bcf	42,2	;volatile
  8936  03D4  1529               	bsf	41,2	;volatile
  8937  03D5  1523               	bsf	35,2	;volatile
  8938  03D6  1120               	bcf	32,2	;volatile
  8939  03D7  1524               	bsf	36,2	;volatile
  8940  03D8  1527               	bsf	39,2	;volatile
  8941  03D9  1526               	bsf	38,2	;volatile
  8942  03DA  0008               	return
  8943  03DB                     l1257:
  8944  03DB  002F               	movlb	15	; select bank15
  8945  03DC  152A               	bsf	42,2	;volatile
  8946  03DD  1529               	bsf	41,2	;volatile
  8947  03DE  1523               	bsf	35,2	;volatile
  8948  03DF  1520               	bsf	32,2	;volatile
  8949  03E0  1524               	bsf	36,2	;volatile
  8950  03E1  1527               	bsf	39,2	;volatile
  8951  03E2  1526               	bsf	38,2	;volatile
  8952  03E3  0008               	return
  8953  03E4                     l1259:
  8954  03E4  002F               	movlb	15	; select bank15
  8955  03E5  112A               	bcf	42,2	;volatile
  8956  03E6  1529               	bsf	41,2	;volatile
  8957  03E7  1523               	bsf	35,2	;volatile
  8958  03E8  1520               	bsf	32,2	;volatile
  8959  03E9  1524               	bsf	36,2	;volatile
  8960  03EA  1127               	bcf	39,2	;volatile
  8961  03EB  1126               	bcf	38,2	;volatile
  8962  03EC  0008               	return
  8963  03ED                     l1261:
  8964  03ED  002F               	movlb	15	; select bank15
  8965  03EE  152A               	bsf	42,2	;volatile
  8966  03EF  1529               	bsf	41,2	;volatile
  8967  03F0  1523               	bsf	35,2	;volatile
  8968  03F1  1520               	bsf	32,2	;volatile
  8969  03F2  1524               	bsf	36,2	;volatile
  8970  03F3  1527               	bsf	39,2	;volatile
  8971  03F4  1526               	bsf	38,2	;volatile
  8972  03F5  0008               	return
  8973  03F6                     l1263:
  8974  03F6  002F               	movlb	15	; select bank15
  8975  03F7  112A               	bcf	42,2	;volatile
  8976  03F8  1129               	bcf	41,2	;volatile
  8977  03F9  1123               	bcf	35,2	;volatile
  8978  03FA  1520               	bsf	32,2	;volatile
  8979  03FB  1524               	bsf	36,2	;volatile
  8980  03FC  1527               	bsf	39,2	;volatile
  8981  03FD  1126               	bcf	38,2	;volatile
  8982  03FE  0008               	return
  8983  03FF                     l1265:
  8984  03FF  002F               	movlb	15	; select bank15
  8985  0400  112A               	bcf	42,2	;volatile
  8986  0401  1129               	bcf	41,2	;volatile
  8987  0402  1523               	bsf	35,2	;volatile
  8988  0403  1120               	bcf	32,2	;volatile
  8989  0404  1524               	bsf	36,2	;volatile
  8990  0405  1127               	bcf	39,2	;volatile
  8991  0406  1126               	bcf	38,2	;volatile
  8992  0407  0008               	return
  8993  0408                     l1267:
  8994  0408  002F               	movlb	15	; select bank15
  8995  0409  112A               	bcf	42,2	;volatile
  8996  040A  1129               	bcf	41,2	;volatile
  8997  040B  1523               	bsf	35,2	;volatile
  8998  040C  1520               	bsf	32,2	;volatile
  8999  040D  1524               	bsf	36,2	;volatile
  9000  040E  1127               	bcf	39,2	;volatile
  9001  040F  1526               	bsf	38,2	;volatile
  9002  0410  0008               	return
  9003  0411                     l1269:
  9004  0411  002F               	movlb	15	; select bank15
  9005  0412  152A               	bsf	42,2	;volatile
  9006  0413  1529               	bsf	41,2	;volatile
  9007  0414  1123               	bcf	35,2	;volatile
  9008  0415  1120               	bcf	32,2	;volatile
  9009  0416  1524               	bsf	36,2	;volatile
  9010  0417  1527               	bsf	39,2	;volatile
  9011  0418  1526               	bsf	38,2	;volatile
  9012  0419  0008               	return
  9013  041A                     l1271:
  9014  041A  002F               	movlb	15	; select bank15
  9015  041B  152A               	bsf	42,2	;volatile
  9016  041C  1529               	bsf	41,2	;volatile
  9017  041D  1523               	bsf	35,2	;volatile
  9018  041E  1520               	bsf	32,2	;volatile
  9019  041F  1524               	bsf	36,2	;volatile
  9020  0420  1527               	bsf	39,2	;volatile
  9021  0421  1526               	bsf	38,2	;volatile
  9022  0422  0008               	return
  9023  0423                     l1273:
  9024  0423  002F               	movlb	15	; select bank15
  9025  0424  152A               	bsf	42,2	;volatile
  9026  0425  1529               	bsf	41,2	;volatile
  9027  0426  1523               	bsf	35,2	;volatile
  9028  0427  1520               	bsf	32,2	;volatile
  9029  0428  1524               	bsf	36,2	;volatile
  9030  0429  1527               	bsf	39,2	;volatile
  9031  042A  1526               	bsf	38,2	;volatile
  9032  042B  0008               	return
  9033  042C                     l1275:
  9034  042C  002F               	movlb	15	; select bank15
  9035  042D  152A               	bsf	42,2	;volatile
  9036  042E  1529               	bsf	41,2	;volatile
  9037  042F  1523               	bsf	35,2	;volatile
  9038  0430  1520               	bsf	32,2	;volatile
  9039  0431  1524               	bsf	36,2	;volatile
  9040  0432  1527               	bsf	39,2	;volatile
  9041  0433  1526               	bsf	38,2	;volatile
  9042  0434  0008               	return
  9043  0435                     l1277:
  9044  0435  002F               	movlb	15	; select bank15
  9045  0436  152A               	bsf	42,2	;volatile
  9046  0437  1529               	bsf	41,2	;volatile
  9047  0438  1523               	bsf	35,2	;volatile
  9048  0439  1520               	bsf	32,2	;volatile
  9049  043A  1524               	bsf	36,2	;volatile
  9050  043B  1527               	bsf	39,2	;volatile
  9051  043C  1526               	bsf	38,2	;volatile
  9052  043D  0008               	return
  9053  043E                     l1278:	
  9054                           ;main.c: 365:         default: LCDDATA10bits.SEG10COM3 = 0; LCDDATA9bits.SEG2COM3 = 0; L
      +                          CDDATA3bits.SEG2COM1 = 0; LCDDATA0bits.SEG2COM0 = 0; LCDDATA4bits.SEG10COM1 = 0; LCDDATA
      +                          7bits.SEG10COM2 = 0; LCDDATA6bits.SEG2COM2 = 0;
  9055                           
  9056  043E  002F               	movlb	15	; select bank15
  9057  043F  112A               	bcf	42,2	;volatile
  9058  0440  1129               	bcf	41,2	;volatile
  9059  0441  1123               	bcf	35,2	;volatile
  9060  0442  1120               	bcf	32,2	;volatile
  9061  0443  1124               	bcf	36,2	;volatile
  9062  0444  1127               	bcf	39,2	;volatile
  9063  0445  1126               	bcf	38,2	;volatile
  9064                           
  9065                           ;main.c: 366:     }
  9066  0446  0008               	return
  9067  0447                     l6161:
  9068  0447  0822               	movf	LCD_Digit4Num@num,w
  9069  0448  00A0               	movwf	??_LCD_Digit4Num
  9070  0449  01A1               	clrf	??_LCD_Digit4Num+1
  9071                           
  9072                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9073                           ; Switch size 1, requested type "simple"
  9074                           ; Number of cases is 1, Range of values is 0 to 0
  9075                           ; switch strategies available:
  9076                           ; Name         Instructions Cycles
  9077                           ; simple_byte            4     3 (average)
  9078                           ; direct_byte            8     6 (fixed)
  9079                           ; jumptable            260     6 (fixed)
  9080                           ;	Chosen strategy is simple_byte
  9081  044A  0821               	movf	??_LCD_Digit4Num+1,w
  9082  044B  3A00               	xorlw	0	; case 0
  9083  044C  1903               	skipnz
  9084  044D  2C4F               	goto	l6597
  9085  044E  2C3E               	goto	l1278
  9086  044F                     l6597:
  9087                           
  9088                           ; Switch size 1, requested type "simple"
  9089                           ; Number of cases is 64, Range of values is 0 to 121
  9090                           ; switch strategies available:
  9091                           ; Name         Instructions Cycles
  9092                           ; simple_byte          193    97 (average)
  9093                           ; direct_byte          250     6 (fixed)
  9094                           ; jumptable            260     6 (fixed)
  9095                           ;	Chosen strategy is simple_byte
  9096  044F  0820               	movf	??_LCD_Digit4Num,w
  9097  0450  3A00               	xorlw	0	; case 0
  9098  0451  1903               	skipnz
  9099  0452  2B39               	goto	l1214
  9100  0453  3A01               	xorlw	1	; case 1
  9101  0454  1903               	skipnz
  9102  0455  2B42               	goto	l1217
  9103  0456  3A03               	xorlw	3	; case 2
  9104  0457  1903               	skipnz
  9105  0458  2B4B               	goto	l1219
  9106  0459  3A01               	xorlw	1	; case 3
  9107  045A  1903               	skipnz
  9108  045B  2B54               	goto	l1221
  9109  045C  3A07               	xorlw	7	; case 4
  9110  045D  1903               	skipnz
  9111  045E  2B5D               	goto	l1223
  9112  045F  3A01               	xorlw	1	; case 5
  9113  0460  1903               	skipnz
  9114  0461  2B66               	goto	l1225
  9115  0462  3A03               	xorlw	3	; case 6
  9116  0463  1903               	skipnz
  9117  0464  2B6F               	goto	l1227
  9118  0465  3A01               	xorlw	1	; case 7
  9119  0466  1903               	skipnz
  9120  0467  2B78               	goto	l1229
  9121  0468  3A0F               	xorlw	15	; case 8
  9122  0469  1903               	skipnz
  9123  046A  2B81               	goto	l1231
  9124  046B  3A01               	xorlw	1	; case 9
  9125  046C  1903               	skipnz
  9126  046D  2B8A               	goto	l1233
  9127  046E  3A03               	xorlw	3	; case 10
  9128  046F  1903               	skipnz
  9129  0470  2B93               	goto	l1236
  9130  0471  3A01               	xorlw	1	; case 11
  9131  0472  1903               	skipnz
  9132  0473  2B9C               	goto	l1239
  9133  0474  3A07               	xorlw	7	; case 12
  9134  0475  1903               	skipnz
  9135  0476  2BA5               	goto	l1242
  9136  0477  3A01               	xorlw	1	; case 13
  9137  0478  1903               	skipnz
  9138  0479  2BAE               	goto	l1245
  9139  047A  3A03               	xorlw	3	; case 14
  9140  047B  1903               	skipnz
  9141  047C  2BB7               	goto	l1248
  9142  047D  3A01               	xorlw	1	; case 15
  9143  047E  1903               	skipnz
  9144  047F  2BC0               	goto	l1251
  9145  0480  3A3F               	xorlw	63	; case 48
  9146  0481  1903               	skipnz
  9147  0482  2B39               	goto	l1214
  9148  0483  3A01               	xorlw	1	; case 49
  9149  0484  1903               	skipnz
  9150  0485  2B42               	goto	l1217
  9151  0486  3A03               	xorlw	3	; case 50
  9152  0487  1903               	skipnz
  9153  0488  2B4B               	goto	l1219
  9154  0489  3A01               	xorlw	1	; case 51
  9155  048A  1903               	skipnz
  9156  048B  2B54               	goto	l1221
  9157  048C  3A07               	xorlw	7	; case 52
  9158  048D  1903               	skipnz
  9159  048E  2B5D               	goto	l1223
  9160  048F  3A01               	xorlw	1	; case 53
  9161  0490  1903               	skipnz
  9162  0491  2B66               	goto	l1225
  9163  0492  3A03               	xorlw	3	; case 54
  9164  0493  1903               	skipnz
  9165  0494  2B6F               	goto	l1227
  9166  0495  3A01               	xorlw	1	; case 55
  9167  0496  1903               	skipnz
  9168  0497  2B78               	goto	l1229
  9169  0498  3A0F               	xorlw	15	; case 56
  9170  0499  1903               	skipnz
  9171  049A  2B81               	goto	l1231
  9172  049B  3A01               	xorlw	1	; case 57
  9173  049C  1903               	skipnz
  9174  049D  2B8A               	goto	l1233
  9175  049E  3A78               	xorlw	120	; case 65
  9176  049F  1903               	skipnz
  9177  04A0  2B93               	goto	l1236
  9178  04A1  3A03               	xorlw	3	; case 66
  9179  04A2  1903               	skipnz
  9180  04A3  2B9C               	goto	l1239
  9181  04A4  3A01               	xorlw	1	; case 67
  9182  04A5  1903               	skipnz
  9183  04A6  2BA5               	goto	l1242
  9184  04A7  3A07               	xorlw	7	; case 68
  9185  04A8  1903               	skipnz
  9186  04A9  2BAE               	goto	l1245
  9187  04AA  3A01               	xorlw	1	; case 69
  9188  04AB  1903               	skipnz
  9189  04AC  2BB7               	goto	l1248
  9190  04AD  3A03               	xorlw	3	; case 70
  9191  04AE  1903               	skipnz
  9192  04AF  2BC0               	goto	l1251
  9193  04B0  3A01               	xorlw	1	; case 71
  9194  04B1  1903               	skipnz
  9195  04B2  2BC9               	goto	l1253
  9196  04B3  3A0F               	xorlw	15	; case 72
  9197  04B4  1903               	skipnz
  9198  04B5  2BD2               	goto	l1255
  9199  04B6  3A01               	xorlw	1	; case 73
  9200  04B7  1903               	skipnz
  9201  04B8  2BDB               	goto	l1257
  9202  04B9  3A03               	xorlw	3	; case 74
  9203  04BA  1903               	skipnz
  9204  04BB  2BE4               	goto	l1259
  9205  04BC  3A01               	xorlw	1	; case 75
  9206  04BD  1903               	skipnz
  9207  04BE  2BED               	goto	l1261
  9208  04BF  3A07               	xorlw	7	; case 76
  9209  04C0  1903               	skipnz
  9210  04C1  2BF6               	goto	l1263
  9211  04C2  3A02               	xorlw	2	; case 78
  9212  04C3  1903               	skipnz
  9213  04C4  2BFF               	goto	l1265
  9214  04C5  3A01               	xorlw	1	; case 79
  9215  04C6  1903               	skipnz
  9216  04C7  2C08               	goto	l1267
  9217  04C8  3A1F               	xorlw	31	; case 80
  9218  04C9  1903               	skipnz
  9219  04CA  2C11               	goto	l1269
  9220  04CB  3A03               	xorlw	3	; case 83
  9221  04CC  1903               	skipnz
  9222  04CD  2C1A               	goto	l1271
  9223  04CE  3A07               	xorlw	7	; case 84
  9224  04CF  1903               	skipnz
  9225  04D0  2C23               	goto	l1273
  9226  04D1  3A01               	xorlw	1	; case 85
  9227  04D2  1903               	skipnz
  9228  04D3  2C2C               	goto	l1275
  9229  04D4  3A0C               	xorlw	12	; case 89
  9230  04D5  1903               	skipnz
  9231  04D6  2C35               	goto	l1277
  9232  04D7  3A38               	xorlw	56	; case 97
  9233  04D8  1903               	skipnz
  9234  04D9  2B93               	goto	l1236
  9235  04DA  3A03               	xorlw	3	; case 98
  9236  04DB  1903               	skipnz
  9237  04DC  2B9C               	goto	l1239
  9238  04DD  3A01               	xorlw	1	; case 99
  9239  04DE  1903               	skipnz
  9240  04DF  2BA5               	goto	l1242
  9241  04E0  3A07               	xorlw	7	; case 100
  9242  04E1  1903               	skipnz
  9243  04E2  2BAE               	goto	l1245
  9244  04E3  3A01               	xorlw	1	; case 101
  9245  04E4  1903               	skipnz
  9246  04E5  2BB7               	goto	l1248
  9247  04E6  3A03               	xorlw	3	; case 102
  9248  04E7  1903               	skipnz
  9249  04E8  2BC0               	goto	l1251
  9250  04E9  3A01               	xorlw	1	; case 103
  9251  04EA  1903               	skipnz
  9252  04EB  2BC9               	goto	l1253
  9253  04EC  3A0F               	xorlw	15	; case 104
  9254  04ED  1903               	skipnz
  9255  04EE  2BD2               	goto	l1255
  9256  04EF  3A01               	xorlw	1	; case 105
  9257  04F0  1903               	skipnz
  9258  04F1  2BDB               	goto	l1257
  9259  04F2  3A03               	xorlw	3	; case 106
  9260  04F3  1903               	skipnz
  9261  04F4  2BE4               	goto	l1259
  9262  04F5  3A01               	xorlw	1	; case 107
  9263  04F6  1903               	skipnz
  9264  04F7  2BED               	goto	l1261
  9265  04F8  3A07               	xorlw	7	; case 108
  9266  04F9  1903               	skipnz
  9267  04FA  2BF6               	goto	l1263
  9268  04FB  3A02               	xorlw	2	; case 110
  9269  04FC  1903               	skipnz
  9270  04FD  2BFF               	goto	l1265
  9271  04FE  3A01               	xorlw	1	; case 111
  9272  04FF  1903               	skipnz
  9273  0500  2C08               	goto	l1267
  9274  0501  3A1F               	xorlw	31	; case 112
  9275  0502  1903               	skipnz
  9276  0503  2C11               	goto	l1269
  9277  0504  3A03               	xorlw	3	; case 115
  9278  0505  1903               	skipnz
  9279  0506  2C1A               	goto	l1271
  9280  0507  3A07               	xorlw	7	; case 116
  9281  0508  1903               	skipnz
  9282  0509  2C23               	goto	l1273
  9283  050A  3A01               	xorlw	1	; case 117
  9284  050B  1903               	skipnz
  9285  050C  2C2C               	goto	l1275
  9286  050D  3A0C               	xorlw	12	; case 121
  9287  050E  1903               	skipnz
  9288  050F  2C35               	goto	l1277
  9289  0510  2C3E               	goto	l1278
  9290  0511  0008               	return
  9291  0512                     __end_of_LCD_Digit4Num:
  9292                           
  9293                           	psect	text38
  9294  0D51                     __ptext38:	
  9295 ;; *************** function _LCD_Digit3Num *****************
  9296 ;; Defined at:
  9297 ;;		line 306 in file "main.c"
  9298 ;; Parameters:    Size  Location     Type
  9299 ;;  num             1    wreg     unsigned char 
  9300 ;; Auto vars:     Size  Location     Type
  9301 ;;  num             1    2[BANK0 ] unsigned char 
  9302 ;; Return value:  Size  Location     Type
  9303 ;;                  1    wreg      void 
  9304 ;; Registers used:
  9305 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9306 ;; Tracked objects:
  9307 ;;		On entry : 1F/0
  9308 ;;		On exit  : 1F/F
  9309 ;;		Unchanged: 0/0
  9310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;Total ram usage:        3 bytes
  9316 ;; Hardware stack levels used:    1
  9317 ;; Hardware stack levels required when called:    4
  9318 ;; This function calls:
  9319 ;;		Nothing
  9320 ;; This function is called by:
  9321 ;;		_main
  9322 ;; This function uses a non-reentrant model
  9323 ;;
  9324                           
  9325                           
  9326                           ;psect for function _LCD_Digit3Num
  9327  0D51                     _LCD_Digit3Num:
  9328                           
  9329                           ;incstack = 0
  9330                           ; Regs used in _LCD_Digit3Num: [wreg-fsr0h+status,2+status,0]
  9331                           ;LCD_Digit3Num@num stored from wreg
  9332  0D51  00A2               	movwf	LCD_Digit3Num@num
  9333                           
  9334                           ;main.c: 306: void LCD_Digit3Num (unsigned char num);main.c: 307: {;main.c: 308:     swi
      +                          tch (num)
  9335  0D52  2DEC               	goto	l6289
  9336  0D53                     l1191:	
  9337                           ;main.c: 309:     {;main.c: 310:         case 0: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits
      +                          .SEG1COM3 = 1; LCDDATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3CO
      +                          M1 = 1; LCDDATA6bits.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 0; break;
  9338                           
  9339  0D53  002F               	movlb	15	; select bank15
  9340  0D54  15A9               	bsf	41,3	;volatile
  9341  0D55  14A9               	bsf	41,1	;volatile
  9342  0D56  14A3               	bsf	35,1	;volatile
  9343  0D57  14A0               	bsf	32,1	;volatile
  9344  0D58  15A3               	bsf	35,3	;volatile
  9345  0D59  15A6               	bsf	38,3	;volatile
  9346  0D5A  10A6               	bcf	38,1	;volatile
  9347  0D5B  0008               	return
  9348  0D5C                     l1193:	
  9349                           ;main.c: 311:         case 1: LCDDATA9bits.SEG3COM3 = 0; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 0; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bit
      +                          s.SEG3COM2 = 0; LCDDATA6bits.SEG1COM2 = 0; break;
  9350                           
  9351  0D5C  002F               	movlb	15	; select bank15
  9352  0D5D  11A9               	bcf	41,3	;volatile
  9353  0D5E  14A9               	bsf	41,1	;volatile
  9354  0D5F  14A3               	bsf	35,1	;volatile
  9355  0D60  10A0               	bcf	32,1	;volatile
  9356  0D61  11A3               	bcf	35,3	;volatile
  9357  0D62  11A6               	bcf	38,3	;volatile
  9358  0D63  10A6               	bcf	38,1	;volatile
  9359  0D64  0008               	return
  9360  0D65                     l1194:	
  9361                           ;main.c: 312:         case 2: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 0; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 1; LCDDATA6bit
      +                          s.SEG3COM2 = 0; LCDDATA6bits.SEG1COM2 = 1; break;
  9362                           
  9363  0D65  002F               	movlb	15	; select bank15
  9364  0D66  15A9               	bsf	41,3	;volatile
  9365  0D67  14A9               	bsf	41,1	;volatile
  9366  0D68  10A3               	bcf	35,1	;volatile
  9367  0D69  14A0               	bsf	32,1	;volatile
  9368  0D6A  15A3               	bsf	35,3	;volatile
  9369  0D6B  11A6               	bcf	38,3	;volatile
  9370  0D6C  14A6               	bsf	38,1	;volatile
  9371  0D6D  0008               	return
  9372  0D6E                     l1195:	
  9373                           ;main.c: 313:         case 3: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bit
      +                          s.SEG3COM2 = 0; LCDDATA6bits.SEG1COM2 = 1; break;
  9374                           
  9375  0D6E  002F               	movlb	15	; select bank15
  9376  0D6F  15A9               	bsf	41,3	;volatile
  9377  0D70  14A9               	bsf	41,1	;volatile
  9378  0D71  14A3               	bsf	35,1	;volatile
  9379  0D72  14A0               	bsf	32,1	;volatile
  9380  0D73  11A3               	bcf	35,3	;volatile
  9381  0D74  11A6               	bcf	38,3	;volatile
  9382  0D75  14A6               	bsf	38,1	;volatile
  9383  0D76  0008               	return
  9384  0D77                     l1196:	
  9385                           ;main.c: 314:         case 4: LCDDATA9bits.SEG3COM3 = 0; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 0; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bit
      +                          s.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9386                           
  9387  0D77  002F               	movlb	15	; select bank15
  9388  0D78  11A9               	bcf	41,3	;volatile
  9389  0D79  14A9               	bsf	41,1	;volatile
  9390  0D7A  14A3               	bsf	35,1	;volatile
  9391  0D7B  10A0               	bcf	32,1	;volatile
  9392  0D7C  11A3               	bcf	35,3	;volatile
  9393  0D7D  15A6               	bsf	38,3	;volatile
  9394  0D7E  14A6               	bsf	38,1	;volatile
  9395  0D7F  0008               	return
  9396  0D80                     l1197:	
  9397                           ;main.c: 315:         case 5: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 0; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bit
      +                          s.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9398                           
  9399  0D80  002F               	movlb	15	; select bank15
  9400  0D81  15A9               	bsf	41,3	;volatile
  9401  0D82  10A9               	bcf	41,1	;volatile
  9402  0D83  14A3               	bsf	35,1	;volatile
  9403  0D84  14A0               	bsf	32,1	;volatile
  9404  0D85  11A3               	bcf	35,3	;volatile
  9405  0D86  15A6               	bsf	38,3	;volatile
  9406  0D87  14A6               	bsf	38,1	;volatile
  9407  0D88  0008               	return
  9408  0D89                     l1198:	
  9409                           ;main.c: 316:         case 6: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 0; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 1; LCDDATA6bit
      +                          s.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9410                           
  9411  0D89  002F               	movlb	15	; select bank15
  9412  0D8A  15A9               	bsf	41,3	;volatile
  9413  0D8B  10A9               	bcf	41,1	;volatile
  9414  0D8C  14A3               	bsf	35,1	;volatile
  9415  0D8D  14A0               	bsf	32,1	;volatile
  9416  0D8E  15A3               	bsf	35,3	;volatile
  9417  0D8F  15A6               	bsf	38,3	;volatile
  9418  0D90  14A6               	bsf	38,1	;volatile
  9419  0D91  0008               	return
  9420  0D92                     l1199:	
  9421                           ;main.c: 317:         case 7: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 0; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bit
      +                          s.SEG3COM2 = 0; LCDDATA6bits.SEG1COM2 = 0; break;
  9422                           
  9423  0D92  002F               	movlb	15	; select bank15
  9424  0D93  15A9               	bsf	41,3	;volatile
  9425  0D94  14A9               	bsf	41,1	;volatile
  9426  0D95  14A3               	bsf	35,1	;volatile
  9427  0D96  10A0               	bcf	32,1	;volatile
  9428  0D97  11A3               	bcf	35,3	;volatile
  9429  0D98  11A6               	bcf	38,3	;volatile
  9430  0D99  10A6               	bcf	38,1	;volatile
  9431  0D9A  0008               	return
  9432  0D9B                     l1200:	
  9433                           ;main.c: 318:         case 8: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 1; LCDDATA6bit
      +                          s.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9434                           
  9435  0D9B  002F               	movlb	15	; select bank15
  9436  0D9C  15A9               	bsf	41,3	;volatile
  9437  0D9D  14A9               	bsf	41,1	;volatile
  9438  0D9E  14A3               	bsf	35,1	;volatile
  9439  0D9F  14A0               	bsf	32,1	;volatile
  9440  0DA0  15A3               	bsf	35,3	;volatile
  9441  0DA1  15A6               	bsf	38,3	;volatile
  9442  0DA2  14A6               	bsf	38,1	;volatile
  9443  0DA3  0008               	return
  9444  0DA4                     l1201:	
  9445                           ;main.c: 319:         case 9: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 1; LCDD
      +                          ATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bit
      +                          s.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9446                           
  9447  0DA4  002F               	movlb	15	; select bank15
  9448  0DA5  15A9               	bsf	41,3	;volatile
  9449  0DA6  14A9               	bsf	41,1	;volatile
  9450  0DA7  14A3               	bsf	35,1	;volatile
  9451  0DA8  14A0               	bsf	32,1	;volatile
  9452  0DA9  11A3               	bcf	35,3	;volatile
  9453  0DAA  15A6               	bsf	38,3	;volatile
  9454  0DAB  14A6               	bsf	38,1	;volatile
  9455  0DAC  0008               	return
  9456  0DAD                     l1202:	
  9457                           ;main.c: 320:         case 0x0A: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 1; L
      +                          CDDATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 0; LCDDATA3bits.SEG3COM1 = 1; LCDDATA6
      +                          bits.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9458                           
  9459  0DAD  002F               	movlb	15	; select bank15
  9460  0DAE  15A9               	bsf	41,3	;volatile
  9461  0DAF  14A9               	bsf	41,1	;volatile
  9462  0DB0  14A3               	bsf	35,1	;volatile
  9463  0DB1  10A0               	bcf	32,1	;volatile
  9464  0DB2  15A3               	bsf	35,3	;volatile
  9465  0DB3  15A6               	bsf	38,3	;volatile
  9466  0DB4  14A6               	bsf	38,1	;volatile
  9467  0DB5  0008               	return
  9468  0DB6                     l1203:	
  9469                           ;main.c: 321:         case 0x0B: LCDDATA9bits.SEG3COM3 = 0; LCDDATA9bits.SEG1COM3 = 0; L
      +                          CDDATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 1; LCDDATA6
      +                          bits.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9470                           
  9471  0DB6  002F               	movlb	15	; select bank15
  9472  0DB7  11A9               	bcf	41,3	;volatile
  9473  0DB8  10A9               	bcf	41,1	;volatile
  9474  0DB9  14A3               	bsf	35,1	;volatile
  9475  0DBA  14A0               	bsf	32,1	;volatile
  9476  0DBB  15A3               	bsf	35,3	;volatile
  9477  0DBC  15A6               	bsf	38,3	;volatile
  9478  0DBD  14A6               	bsf	38,1	;volatile
  9479  0DBE  0008               	return
  9480  0DBF                     l1204:	
  9481                           ;main.c: 322:         case 0x0C: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 0; L
      +                          CDDATA3bits.SEG1COM1 = 0; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 1; LCDDATA6
      +                          bits.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 0; break;
  9482                           
  9483  0DBF  002F               	movlb	15	; select bank15
  9484  0DC0  15A9               	bsf	41,3	;volatile
  9485  0DC1  10A9               	bcf	41,1	;volatile
  9486  0DC2  10A3               	bcf	35,1	;volatile
  9487  0DC3  14A0               	bsf	32,1	;volatile
  9488  0DC4  15A3               	bsf	35,3	;volatile
  9489  0DC5  15A6               	bsf	38,3	;volatile
  9490  0DC6  10A6               	bcf	38,1	;volatile
  9491  0DC7  0008               	return
  9492  0DC8                     l1205:	
  9493                           ;main.c: 323:         case 0x0D: LCDDATA9bits.SEG3COM3 = 0; LCDDATA9bits.SEG1COM3 = 1; L
      +                          CDDATA3bits.SEG1COM1 = 1; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 1; LCDDATA6
      +                          bits.SEG3COM2 = 0; LCDDATA6bits.SEG1COM2 = 1; break;
  9494                           
  9495  0DC8  002F               	movlb	15	; select bank15
  9496  0DC9  11A9               	bcf	41,3	;volatile
  9497  0DCA  14A9               	bsf	41,1	;volatile
  9498  0DCB  14A3               	bsf	35,1	;volatile
  9499  0DCC  14A0               	bsf	32,1	;volatile
  9500  0DCD  15A3               	bsf	35,3	;volatile
  9501  0DCE  11A6               	bcf	38,3	;volatile
  9502  0DCF  14A6               	bsf	38,1	;volatile
  9503  0DD0  0008               	return
  9504  0DD1                     l1206:	
  9505                           ;main.c: 324:         case 0x0E: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 0; L
      +                          CDDATA3bits.SEG1COM1 = 0; LCDDATA0bits.SEG1COM0 = 1; LCDDATA3bits.SEG3COM1 = 1; LCDDATA6
      +                          bits.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9506                           
  9507  0DD1  002F               	movlb	15	; select bank15
  9508  0DD2  15A9               	bsf	41,3	;volatile
  9509  0DD3  10A9               	bcf	41,1	;volatile
  9510  0DD4  10A3               	bcf	35,1	;volatile
  9511  0DD5  14A0               	bsf	32,1	;volatile
  9512  0DD6  15A3               	bsf	35,3	;volatile
  9513  0DD7  15A6               	bsf	38,3	;volatile
  9514  0DD8  14A6               	bsf	38,1	;volatile
  9515  0DD9  0008               	return
  9516  0DDA                     l1207:	
  9517                           ;main.c: 325:         case 0x0F: LCDDATA9bits.SEG3COM3 = 1; LCDDATA9bits.SEG1COM3 = 0; L
      +                          CDDATA3bits.SEG1COM1 = 0; LCDDATA0bits.SEG1COM0 = 0; LCDDATA3bits.SEG3COM1 = 1; LCDDATA6
      +                          bits.SEG3COM2 = 1; LCDDATA6bits.SEG1COM2 = 1; break;
  9518                           
  9519  0DDA  002F               	movlb	15	; select bank15
  9520  0DDB  15A9               	bsf	41,3	;volatile
  9521  0DDC  10A9               	bcf	41,1	;volatile
  9522  0DDD  10A3               	bcf	35,1	;volatile
  9523  0DDE  10A0               	bcf	32,1	;volatile
  9524  0DDF  15A3               	bsf	35,3	;volatile
  9525  0DE0  15A6               	bsf	38,3	;volatile
  9526  0DE1  14A6               	bsf	38,1	;volatile
  9527  0DE2  0008               	return
  9528  0DE3                     l1208:	
  9529                           ;main.c: 327:         default: LCDDATA9bits.SEG3COM3 = 0; LCDDATA9bits.SEG1COM3 = 0; LCD
      +                          DATA3bits.SEG1COM1 = 0; LCDDATA0bits.SEG1COM0 = 0; LCDDATA3bits.SEG3COM1 = 0; LCDDATA6bi
      +                          ts.SEG3COM2 = 0; LCDDATA6bits.SEG1COM2 = 0;
  9530                           
  9531  0DE3  002F               	movlb	15	; select bank15
  9532  0DE4  11A9               	bcf	41,3	;volatile
  9533  0DE5  10A9               	bcf	41,1	;volatile
  9534  0DE6  10A3               	bcf	35,1	;volatile
  9535  0DE7  10A0               	bcf	32,1	;volatile
  9536  0DE8  11A3               	bcf	35,3	;volatile
  9537  0DE9  11A6               	bcf	38,3	;volatile
  9538  0DEA  10A6               	bcf	38,1	;volatile
  9539                           
  9540                           ;main.c: 328:     }
  9541  0DEB  0008               	return
  9542  0DEC                     l6289:
  9543  0DEC  0822               	movf	LCD_Digit3Num@num,w
  9544  0DED  00A0               	movwf	??_LCD_Digit3Num
  9545  0DEE  01A1               	clrf	??_LCD_Digit3Num+1
  9546                           
  9547                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9548                           ; Switch size 1, requested type "simple"
  9549                           ; Number of cases is 1, Range of values is 0 to 0
  9550                           ; switch strategies available:
  9551                           ; Name         Instructions Cycles
  9552                           ; simple_byte            4     3 (average)
  9553                           ; direct_byte            8     6 (fixed)
  9554                           ; jumptable            260     6 (fixed)
  9555                           ;	Chosen strategy is simple_byte
  9556  0DEF  0821               	movf	??_LCD_Digit3Num+1,w
  9557  0DF0  3A00               	xorlw	0	; case 0
  9558  0DF1  1903               	skipnz
  9559  0DF2  2DF4               	goto	l6599
  9560  0DF3  2DE3               	goto	l1208
  9561  0DF4                     l6599:
  9562                           
  9563                           ; Switch size 1, requested type "simple"
  9564                           ; Number of cases is 16, Range of values is 0 to 15
  9565                           ; switch strategies available:
  9566                           ; Name         Instructions Cycles
  9567                           ; direct_byte           38     6 (fixed)
  9568                           ; simple_byte           49    25 (average)
  9569                           ; jumptable            260     6 (fixed)
  9570                           ;	Chosen strategy is simple_byte
  9571  0DF4  0820               	movf	??_LCD_Digit3Num,w
  9572  0DF5  3A00               	xorlw	0	; case 0
  9573  0DF6  1903               	skipnz
  9574  0DF7  2D53               	goto	l1191
  9575  0DF8  3A01               	xorlw	1	; case 1
  9576  0DF9  1903               	skipnz
  9577  0DFA  2D5C               	goto	l1193
  9578  0DFB  3A03               	xorlw	3	; case 2
  9579  0DFC  1903               	skipnz
  9580  0DFD  2D65               	goto	l1194
  9581  0DFE  3A01               	xorlw	1	; case 3
  9582  0DFF  1903               	skipnz
  9583  0E00  2D6E               	goto	l1195
  9584  0E01  3A07               	xorlw	7	; case 4
  9585  0E02  1903               	skipnz
  9586  0E03  2D77               	goto	l1196
  9587  0E04  3A01               	xorlw	1	; case 5
  9588  0E05  1903               	skipnz
  9589  0E06  2D80               	goto	l1197
  9590  0E07  3A03               	xorlw	3	; case 6
  9591  0E08  1903               	skipnz
  9592  0E09  2D89               	goto	l1198
  9593  0E0A  3A01               	xorlw	1	; case 7
  9594  0E0B  1903               	skipnz
  9595  0E0C  2D92               	goto	l1199
  9596  0E0D  3A0F               	xorlw	15	; case 8
  9597  0E0E  1903               	skipnz
  9598  0E0F  2D9B               	goto	l1200
  9599  0E10  3A01               	xorlw	1	; case 9
  9600  0E11  1903               	skipnz
  9601  0E12  2DA4               	goto	l1201
  9602  0E13  3A03               	xorlw	3	; case 10
  9603  0E14  1903               	skipnz
  9604  0E15  2DAD               	goto	l1202
  9605  0E16  3A01               	xorlw	1	; case 11
  9606  0E17  1903               	skipnz
  9607  0E18  2DB6               	goto	l1203
  9608  0E19  3A07               	xorlw	7	; case 12
  9609  0E1A  1903               	skipnz
  9610  0E1B  2DBF               	goto	l1204
  9611  0E1C  3A01               	xorlw	1	; case 13
  9612  0E1D  1903               	skipnz
  9613  0E1E  2DC8               	goto	l1205
  9614  0E1F  3A03               	xorlw	3	; case 14
  9615  0E20  1903               	skipnz
  9616  0E21  2DD1               	goto	l1206
  9617  0E22  3A01               	xorlw	1	; case 15
  9618  0E23  1903               	skipnz
  9619  0E24  2DDA               	goto	l1207
  9620  0E25  2DE3               	goto	l1208
  9621  0E26  0008               	return
  9622  0E27                     __end_of_LCD_Digit3Num:
  9623                           
  9624                           	psect	text39
  9625  0C7B                     __ptext39:	
  9626 ;; *************** function _LCD_Digit2Num *****************
  9627 ;; Defined at:
  9628 ;;		line 281 in file "main.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;  num             1    wreg     unsigned char 
  9631 ;; Auto vars:     Size  Location     Type
  9632 ;;  num             1    2[BANK0 ] unsigned char 
  9633 ;; Return value:  Size  Location     Type
  9634 ;;                  1    wreg      void 
  9635 ;; Registers used:
  9636 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9637 ;; Tracked objects:
  9638 ;;		On entry : 1F/0
  9639 ;;		On exit  : 1F/F
  9640 ;;		Unchanged: 0/0
  9641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;Total ram usage:        3 bytes
  9647 ;; Hardware stack levels used:    1
  9648 ;; Hardware stack levels required when called:    4
  9649 ;; This function calls:
  9650 ;;		Nothing
  9651 ;; This function is called by:
  9652 ;;		_main
  9653 ;; This function uses a non-reentrant model
  9654 ;;
  9655                           
  9656                           
  9657                           ;psect for function _LCD_Digit2Num
  9658  0C7B                     _LCD_Digit2Num:
  9659                           
  9660                           ;incstack = 0
  9661                           ; Regs used in _LCD_Digit2Num: [wreg-fsr0h+status,2+status,0]
  9662                           ;LCD_Digit2Num@num stored from wreg
  9663  0C7B  00A2               	movwf	LCD_Digit2Num@num
  9664                           
  9665                           ;main.c: 281: void LCD_Digit2Num (unsigned char num);main.c: 282: {;main.c: 283:     swi
      +                          tch (num)
  9666  0C7C  2D16               	goto	l6281
  9667  0C7D                     l1169:	
  9668                           ;main.c: 284:     {;main.c: 285:         case 0: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bit
      +                          s.SEG12COM3 = 1; LCDDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SE
      +                          G5COM1 = 1; LCDDATA6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 0; break;
  9669                           
  9670  0C7D  002F               	movlb	15	; select bank15
  9671  0C7E  16A9               	bsf	41,5	;volatile
  9672  0C7F  162A               	bsf	42,4	;volatile
  9673  0C80  1624               	bsf	36,4	;volatile
  9674  0C81  1621               	bsf	33,4	;volatile
  9675  0C82  16A3               	bsf	35,5	;volatile
  9676  0C83  16A6               	bsf	38,5	;volatile
  9677  0C84  1227               	bcf	39,4	;volatile
  9678  0C85  0008               	return
  9679  0C86                     l1171:	
  9680                           ;main.c: 286:         case 1: LCDDATA9bits.SEG5COM3 = 0; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 0; LCDDATA3bits.SEG5COM1 = 0; LCDDATA
      +                          6bits.SEG5COM2 = 0; LCDDATA7bits.SEG12COM2 = 0; break;
  9681                           
  9682  0C86  002F               	movlb	15	; select bank15
  9683  0C87  12A9               	bcf	41,5	;volatile
  9684  0C88  162A               	bsf	42,4	;volatile
  9685  0C89  1624               	bsf	36,4	;volatile
  9686  0C8A  1221               	bcf	33,4	;volatile
  9687  0C8B  12A3               	bcf	35,5	;volatile
  9688  0C8C  12A6               	bcf	38,5	;volatile
  9689  0C8D  1227               	bcf	39,4	;volatile
  9690  0C8E  0008               	return
  9691  0C8F                     l1172:	
  9692                           ;main.c: 287:         case 2: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 0; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 1; LCDDATA
      +                          6bits.SEG5COM2 = 0; LCDDATA7bits.SEG12COM2 = 1; break;
  9693                           
  9694  0C8F  002F               	movlb	15	; select bank15
  9695  0C90  16A9               	bsf	41,5	;volatile
  9696  0C91  162A               	bsf	42,4	;volatile
  9697  0C92  1224               	bcf	36,4	;volatile
  9698  0C93  1621               	bsf	33,4	;volatile
  9699  0C94  16A3               	bsf	35,5	;volatile
  9700  0C95  12A6               	bcf	38,5	;volatile
  9701  0C96  1627               	bsf	39,4	;volatile
  9702  0C97  0008               	return
  9703  0C98                     l1173:	
  9704                           ;main.c: 288:         case 3: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 0; LCDDATA
      +                          6bits.SEG5COM2 = 0; LCDDATA7bits.SEG12COM2 = 1; break;
  9705                           
  9706  0C98  002F               	movlb	15	; select bank15
  9707  0C99  16A9               	bsf	41,5	;volatile
  9708  0C9A  162A               	bsf	42,4	;volatile
  9709  0C9B  1624               	bsf	36,4	;volatile
  9710  0C9C  1621               	bsf	33,4	;volatile
  9711  0C9D  12A3               	bcf	35,5	;volatile
  9712  0C9E  12A6               	bcf	38,5	;volatile
  9713  0C9F  1627               	bsf	39,4	;volatile
  9714  0CA0  0008               	return
  9715  0CA1                     l1174:	
  9716                           ;main.c: 289:         case 4: LCDDATA9bits.SEG5COM3 = 0; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 0; LCDDATA3bits.SEG5COM1 = 0; LCDDATA
      +                          6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9717                           
  9718  0CA1  002F               	movlb	15	; select bank15
  9719  0CA2  12A9               	bcf	41,5	;volatile
  9720  0CA3  162A               	bsf	42,4	;volatile
  9721  0CA4  1624               	bsf	36,4	;volatile
  9722  0CA5  1221               	bcf	33,4	;volatile
  9723  0CA6  12A3               	bcf	35,5	;volatile
  9724  0CA7  16A6               	bsf	38,5	;volatile
  9725  0CA8  1627               	bsf	39,4	;volatile
  9726  0CA9  0008               	return
  9727  0CAA                     l1175:	
  9728                           ;main.c: 290:         case 5: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 0; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 0; LCDDATA
      +                          6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9729                           
  9730  0CAA  002F               	movlb	15	; select bank15
  9731  0CAB  16A9               	bsf	41,5	;volatile
  9732  0CAC  122A               	bcf	42,4	;volatile
  9733  0CAD  1624               	bsf	36,4	;volatile
  9734  0CAE  1621               	bsf	33,4	;volatile
  9735  0CAF  12A3               	bcf	35,5	;volatile
  9736  0CB0  16A6               	bsf	38,5	;volatile
  9737  0CB1  1627               	bsf	39,4	;volatile
  9738  0CB2  0008               	return
  9739  0CB3                     l1176:	
  9740                           ;main.c: 291:         case 6: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 0; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 1; LCDDATA
      +                          6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9741                           
  9742  0CB3  002F               	movlb	15	; select bank15
  9743  0CB4  16A9               	bsf	41,5	;volatile
  9744  0CB5  122A               	bcf	42,4	;volatile
  9745  0CB6  1624               	bsf	36,4	;volatile
  9746  0CB7  1621               	bsf	33,4	;volatile
  9747  0CB8  16A3               	bsf	35,5	;volatile
  9748  0CB9  16A6               	bsf	38,5	;volatile
  9749  0CBA  1627               	bsf	39,4	;volatile
  9750  0CBB  0008               	return
  9751  0CBC                     l1177:	
  9752                           ;main.c: 292:         case 7: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 0; LCDDATA3bits.SEG5COM1 = 0; LCDDATA
      +                          6bits.SEG5COM2 = 0; LCDDATA7bits.SEG12COM2 = 0; break;
  9753                           
  9754  0CBC  002F               	movlb	15	; select bank15
  9755  0CBD  16A9               	bsf	41,5	;volatile
  9756  0CBE  162A               	bsf	42,4	;volatile
  9757  0CBF  1624               	bsf	36,4	;volatile
  9758  0CC0  1221               	bcf	33,4	;volatile
  9759  0CC1  12A3               	bcf	35,5	;volatile
  9760  0CC2  12A6               	bcf	38,5	;volatile
  9761  0CC3  1227               	bcf	39,4	;volatile
  9762  0CC4  0008               	return
  9763  0CC5                     l1178:	
  9764                           ;main.c: 293:         case 8: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 1; LCDDATA
      +                          6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9765                           
  9766  0CC5  002F               	movlb	15	; select bank15
  9767  0CC6  16A9               	bsf	41,5	;volatile
  9768  0CC7  162A               	bsf	42,4	;volatile
  9769  0CC8  1624               	bsf	36,4	;volatile
  9770  0CC9  1621               	bsf	33,4	;volatile
  9771  0CCA  16A3               	bsf	35,5	;volatile
  9772  0CCB  16A6               	bsf	38,5	;volatile
  9773  0CCC  1627               	bsf	39,4	;volatile
  9774  0CCD  0008               	return
  9775  0CCE                     l1179:	
  9776                           ;main.c: 294:         case 9: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 1; LC
      +                          DDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 0; LCDDATA
      +                          6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9777                           
  9778  0CCE  002F               	movlb	15	; select bank15
  9779  0CCF  16A9               	bsf	41,5	;volatile
  9780  0CD0  162A               	bsf	42,4	;volatile
  9781  0CD1  1624               	bsf	36,4	;volatile
  9782  0CD2  1621               	bsf	33,4	;volatile
  9783  0CD3  12A3               	bcf	35,5	;volatile
  9784  0CD4  16A6               	bsf	38,5	;volatile
  9785  0CD5  1627               	bsf	39,4	;volatile
  9786  0CD6  0008               	return
  9787  0CD7                     l1180:	
  9788                           ;main.c: 295:         case 0x0A: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 1;
      +                           LCDDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 0; LCDDATA3bits.SEG5COM1 = 1; LCDD
      +                          ATA6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9789                           
  9790  0CD7  002F               	movlb	15	; select bank15
  9791  0CD8  16A9               	bsf	41,5	;volatile
  9792  0CD9  162A               	bsf	42,4	;volatile
  9793  0CDA  1624               	bsf	36,4	;volatile
  9794  0CDB  1221               	bcf	33,4	;volatile
  9795  0CDC  16A3               	bsf	35,5	;volatile
  9796  0CDD  16A6               	bsf	38,5	;volatile
  9797  0CDE  1627               	bsf	39,4	;volatile
  9798  0CDF  0008               	return
  9799  0CE0                     l1181:	
  9800                           ;main.c: 296:         case 0x0B: LCDDATA9bits.SEG5COM3 = 0; LCDDATA10bits.SEG12COM3 = 0;
      +                           LCDDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 1; LCDD
      +                          ATA6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9801                           
  9802  0CE0  002F               	movlb	15	; select bank15
  9803  0CE1  12A9               	bcf	41,5	;volatile
  9804  0CE2  122A               	bcf	42,4	;volatile
  9805  0CE3  1624               	bsf	36,4	;volatile
  9806  0CE4  1621               	bsf	33,4	;volatile
  9807  0CE5  16A3               	bsf	35,5	;volatile
  9808  0CE6  16A6               	bsf	38,5	;volatile
  9809  0CE7  1627               	bsf	39,4	;volatile
  9810  0CE8  0008               	return
  9811  0CE9                     l1182:	
  9812                           ;main.c: 297:         case 0x0C: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 0;
      +                           LCDDATA4bits.SEG12COM1 = 0; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 1; LCDD
      +                          ATA6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 0; break;
  9813                           
  9814  0CE9  002F               	movlb	15	; select bank15
  9815  0CEA  16A9               	bsf	41,5	;volatile
  9816  0CEB  122A               	bcf	42,4	;volatile
  9817  0CEC  1224               	bcf	36,4	;volatile
  9818  0CED  1621               	bsf	33,4	;volatile
  9819  0CEE  16A3               	bsf	35,5	;volatile
  9820  0CEF  16A6               	bsf	38,5	;volatile
  9821  0CF0  1227               	bcf	39,4	;volatile
  9822  0CF1  0008               	return
  9823  0CF2                     l1183:	
  9824                           ;main.c: 298:         case 0x0D: LCDDATA9bits.SEG5COM3 = 0; LCDDATA10bits.SEG12COM3 = 1;
      +                           LCDDATA4bits.SEG12COM1 = 1; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 1; LCDD
      +                          ATA6bits.SEG5COM2 = 0; LCDDATA7bits.SEG12COM2 = 1; break;
  9825                           
  9826  0CF2  002F               	movlb	15	; select bank15
  9827  0CF3  12A9               	bcf	41,5	;volatile
  9828  0CF4  162A               	bsf	42,4	;volatile
  9829  0CF5  1624               	bsf	36,4	;volatile
  9830  0CF6  1621               	bsf	33,4	;volatile
  9831  0CF7  16A3               	bsf	35,5	;volatile
  9832  0CF8  12A6               	bcf	38,5	;volatile
  9833  0CF9  1627               	bsf	39,4	;volatile
  9834  0CFA  0008               	return
  9835  0CFB                     l1184:	
  9836                           ;main.c: 299:         case 0x0E: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 0;
      +                           LCDDATA4bits.SEG12COM1 = 0; LCDDATA1bits.SEG12COM0 = 1; LCDDATA3bits.SEG5COM1 = 1; LCDD
      +                          ATA6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9837                           
  9838  0CFB  002F               	movlb	15	; select bank15
  9839  0CFC  16A9               	bsf	41,5	;volatile
  9840  0CFD  122A               	bcf	42,4	;volatile
  9841  0CFE  1224               	bcf	36,4	;volatile
  9842  0CFF  1621               	bsf	33,4	;volatile
  9843  0D00  16A3               	bsf	35,5	;volatile
  9844  0D01  16A6               	bsf	38,5	;volatile
  9845  0D02  1627               	bsf	39,4	;volatile
  9846  0D03  0008               	return
  9847  0D04                     l1185:	
  9848                           ;main.c: 300:         case 0x0F: LCDDATA9bits.SEG5COM3 = 1; LCDDATA10bits.SEG12COM3 = 0;
      +                           LCDDATA4bits.SEG12COM1 = 0; LCDDATA1bits.SEG12COM0 = 0; LCDDATA3bits.SEG5COM1 = 1; LCDD
      +                          ATA6bits.SEG5COM2 = 1; LCDDATA7bits.SEG12COM2 = 1; break;
  9849                           
  9850  0D04  002F               	movlb	15	; select bank15
  9851  0D05  16A9               	bsf	41,5	;volatile
  9852  0D06  122A               	bcf	42,4	;volatile
  9853  0D07  1224               	bcf	36,4	;volatile
  9854  0D08  1221               	bcf	33,4	;volatile
  9855  0D09  16A3               	bsf	35,5	;volatile
  9856  0D0A  16A6               	bsf	38,5	;volatile
  9857  0D0B  1627               	bsf	39,4	;volatile
  9858  0D0C  0008               	return
  9859  0D0D                     l1186:	
  9860                           ;main.c: 302:         default: LCDDATA9bits.SEG5COM3 = 0; LCDDATA10bits.SEG12COM3 = 0; L
      +                          CDDATA4bits.SEG12COM1 = 0; LCDDATA1bits.SEG12COM0 = 0; LCDDATA3bits.SEG5COM1 = 0; LCDDAT
      +                          A6bits.SEG5COM2 = 0; LCDDATA7bits.SEG12COM2 = 0;
  9861                           
  9862  0D0D  002F               	movlb	15	; select bank15
  9863  0D0E  12A9               	bcf	41,5	;volatile
  9864  0D0F  122A               	bcf	42,4	;volatile
  9865  0D10  1224               	bcf	36,4	;volatile
  9866  0D11  1221               	bcf	33,4	;volatile
  9867  0D12  12A3               	bcf	35,5	;volatile
  9868  0D13  12A6               	bcf	38,5	;volatile
  9869  0D14  1227               	bcf	39,4	;volatile
  9870                           
  9871                           ;main.c: 303:     }
  9872  0D15  0008               	return
  9873  0D16                     l6281:
  9874  0D16  0822               	movf	LCD_Digit2Num@num,w
  9875  0D17  00A0               	movwf	??_LCD_Digit2Num
  9876  0D18  01A1               	clrf	??_LCD_Digit2Num+1
  9877                           
  9878                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9879                           ; Switch size 1, requested type "simple"
  9880                           ; Number of cases is 1, Range of values is 0 to 0
  9881                           ; switch strategies available:
  9882                           ; Name         Instructions Cycles
  9883                           ; simple_byte            4     3 (average)
  9884                           ; direct_byte            8     6 (fixed)
  9885                           ; jumptable            260     6 (fixed)
  9886                           ;	Chosen strategy is simple_byte
  9887  0D19  0821               	movf	??_LCD_Digit2Num+1,w
  9888  0D1A  3A00               	xorlw	0	; case 0
  9889  0D1B  1903               	skipnz
  9890  0D1C  2D1E               	goto	l6601
  9891  0D1D  2D0D               	goto	l1186
  9892  0D1E                     l6601:
  9893                           
  9894                           ; Switch size 1, requested type "simple"
  9895                           ; Number of cases is 16, Range of values is 0 to 15
  9896                           ; switch strategies available:
  9897                           ; Name         Instructions Cycles
  9898                           ; direct_byte           38     6 (fixed)
  9899                           ; simple_byte           49    25 (average)
  9900                           ; jumptable            260     6 (fixed)
  9901                           ;	Chosen strategy is simple_byte
  9902  0D1E  0820               	movf	??_LCD_Digit2Num,w
  9903  0D1F  3A00               	xorlw	0	; case 0
  9904  0D20  1903               	skipnz
  9905  0D21  2C7D               	goto	l1169
  9906  0D22  3A01               	xorlw	1	; case 1
  9907  0D23  1903               	skipnz
  9908  0D24  2C86               	goto	l1171
  9909  0D25  3A03               	xorlw	3	; case 2
  9910  0D26  1903               	skipnz
  9911  0D27  2C8F               	goto	l1172
  9912  0D28  3A01               	xorlw	1	; case 3
  9913  0D29  1903               	skipnz
  9914  0D2A  2C98               	goto	l1173
  9915  0D2B  3A07               	xorlw	7	; case 4
  9916  0D2C  1903               	skipnz
  9917  0D2D  2CA1               	goto	l1174
  9918  0D2E  3A01               	xorlw	1	; case 5
  9919  0D2F  1903               	skipnz
  9920  0D30  2CAA               	goto	l1175
  9921  0D31  3A03               	xorlw	3	; case 6
  9922  0D32  1903               	skipnz
  9923  0D33  2CB3               	goto	l1176
  9924  0D34  3A01               	xorlw	1	; case 7
  9925  0D35  1903               	skipnz
  9926  0D36  2CBC               	goto	l1177
  9927  0D37  3A0F               	xorlw	15	; case 8
  9928  0D38  1903               	skipnz
  9929  0D39  2CC5               	goto	l1178
  9930  0D3A  3A01               	xorlw	1	; case 9
  9931  0D3B  1903               	skipnz
  9932  0D3C  2CCE               	goto	l1179
  9933  0D3D  3A03               	xorlw	3	; case 10
  9934  0D3E  1903               	skipnz
  9935  0D3F  2CD7               	goto	l1180
  9936  0D40  3A01               	xorlw	1	; case 11
  9937  0D41  1903               	skipnz
  9938  0D42  2CE0               	goto	l1181
  9939  0D43  3A07               	xorlw	7	; case 12
  9940  0D44  1903               	skipnz
  9941  0D45  2CE9               	goto	l1182
  9942  0D46  3A01               	xorlw	1	; case 13
  9943  0D47  1903               	skipnz
  9944  0D48  2CF2               	goto	l1183
  9945  0D49  3A03               	xorlw	3	; case 14
  9946  0D4A  1903               	skipnz
  9947  0D4B  2CFB               	goto	l1184
  9948  0D4C  3A01               	xorlw	1	; case 15
  9949  0D4D  1903               	skipnz
  9950  0D4E  2D04               	goto	l1185
  9951  0D4F  2D0D               	goto	l1186
  9952  0D50  0008               	return
  9953  0D51                     __end_of_LCD_Digit2Num:
  9954                           
  9955                           	psect	text40
  9956  0BA5                     __ptext40:	
  9957 ;; *************** function _LCD_Digit1Num *****************
  9958 ;; Defined at:
  9959 ;;		line 256 in file "main.c"
  9960 ;; Parameters:    Size  Location     Type
  9961 ;;  num             1    wreg     unsigned char 
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;  num             1    2[BANK0 ] unsigned char 
  9964 ;; Return value:  Size  Location     Type
  9965 ;;                  1    wreg      void 
  9966 ;; Registers used:
  9967 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9968 ;; Tracked objects:
  9969 ;;		On entry : 1F/0
  9970 ;;		On exit  : 1F/F
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;Total ram usage:        3 bytes
  9978 ;; Hardware stack levels used:    1
  9979 ;; Hardware stack levels required when called:    4
  9980 ;; This function calls:
  9981 ;;		Nothing
  9982 ;; This function is called by:
  9983 ;;		_main
  9984 ;; This function uses a non-reentrant model
  9985 ;;
  9986                           
  9987                           
  9988                           ;psect for function _LCD_Digit1Num
  9989  0BA5                     _LCD_Digit1Num:
  9990                           
  9991                           ;incstack = 0
  9992                           ; Regs used in _LCD_Digit1Num: [wreg-fsr0h+status,2+status,0]
  9993                           ;LCD_Digit1Num@num stored from wreg
  9994  0BA5  00A2               	movwf	LCD_Digit1Num@num
  9995                           
  9996                           ;main.c: 256: void LCD_Digit1Num (unsigned char num);main.c: 257: {;main.c: 258:     swi
      +                          tch (num)
  9997  0BA6  2C40               	goto	l6273
  9998  0BA7                     l1147:	
  9999                           ;main.c: 259:     {;main.c: 260:         case 0: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits
      +                          .SEG7COM3 = 1; LCDDATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4CO
      +                          M1 = 1; LCDDATA6bits.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 0; break;
 10000                           
 10001  0BA7  002F               	movlb	15	; select bank15
 10002  0BA8  1629               	bsf	41,4	;volatile
 10003  0BA9  17A9               	bsf	41,7	;volatile
 10004  0BAA  17A3               	bsf	35,7	;volatile
 10005  0BAB  17A0               	bsf	32,7	;volatile
 10006  0BAC  1623               	bsf	35,4	;volatile
 10007  0BAD  1626               	bsf	38,4	;volatile
 10008  0BAE  13A6               	bcf	38,7	;volatile
 10009  0BAF  0008               	return
 10010  0BB0                     l1149:	
 10011                           ;main.c: 261:         case 1: LCDDATA9bits.SEG4COM3 = 0; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 0; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bit
      +                          s.SEG4COM2 = 0; LCDDATA6bits.SEG7COM2 = 0; break;
 10012                           
 10013  0BB0  002F               	movlb	15	; select bank15
 10014  0BB1  1229               	bcf	41,4	;volatile
 10015  0BB2  17A9               	bsf	41,7	;volatile
 10016  0BB3  17A3               	bsf	35,7	;volatile
 10017  0BB4  13A0               	bcf	32,7	;volatile
 10018  0BB5  1223               	bcf	35,4	;volatile
 10019  0BB6  1226               	bcf	38,4	;volatile
 10020  0BB7  13A6               	bcf	38,7	;volatile
 10021  0BB8  0008               	return
 10022  0BB9                     l1150:	
 10023                           ;main.c: 262:         case 2: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 0; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 1; LCDDATA6bit
      +                          s.SEG4COM2 = 0; LCDDATA6bits.SEG7COM2 = 1; break;
 10024                           
 10025  0BB9  002F               	movlb	15	; select bank15
 10026  0BBA  1629               	bsf	41,4	;volatile
 10027  0BBB  17A9               	bsf	41,7	;volatile
 10028  0BBC  13A3               	bcf	35,7	;volatile
 10029  0BBD  17A0               	bsf	32,7	;volatile
 10030  0BBE  1623               	bsf	35,4	;volatile
 10031  0BBF  1226               	bcf	38,4	;volatile
 10032  0BC0  17A6               	bsf	38,7	;volatile
 10033  0BC1  0008               	return
 10034  0BC2                     l1151:	
 10035                           ;main.c: 263:         case 3: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bit
      +                          s.SEG4COM2 = 0; LCDDATA6bits.SEG7COM2 = 1; break;
 10036                           
 10037  0BC2  002F               	movlb	15	; select bank15
 10038  0BC3  1629               	bsf	41,4	;volatile
 10039  0BC4  17A9               	bsf	41,7	;volatile
 10040  0BC5  17A3               	bsf	35,7	;volatile
 10041  0BC6  17A0               	bsf	32,7	;volatile
 10042  0BC7  1223               	bcf	35,4	;volatile
 10043  0BC8  1226               	bcf	38,4	;volatile
 10044  0BC9  17A6               	bsf	38,7	;volatile
 10045  0BCA  0008               	return
 10046  0BCB                     l1152:	
 10047                           ;main.c: 264:         case 4: LCDDATA9bits.SEG4COM3 = 0; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 0; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bit
      +                          s.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10048                           
 10049  0BCB  002F               	movlb	15	; select bank15
 10050  0BCC  1229               	bcf	41,4	;volatile
 10051  0BCD  17A9               	bsf	41,7	;volatile
 10052  0BCE  17A3               	bsf	35,7	;volatile
 10053  0BCF  13A0               	bcf	32,7	;volatile
 10054  0BD0  1223               	bcf	35,4	;volatile
 10055  0BD1  1626               	bsf	38,4	;volatile
 10056  0BD2  17A6               	bsf	38,7	;volatile
 10057  0BD3  0008               	return
 10058  0BD4                     l1153:	
 10059                           ;main.c: 265:         case 5: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 0; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bit
      +                          s.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10060                           
 10061  0BD4  002F               	movlb	15	; select bank15
 10062  0BD5  1629               	bsf	41,4	;volatile
 10063  0BD6  13A9               	bcf	41,7	;volatile
 10064  0BD7  17A3               	bsf	35,7	;volatile
 10065  0BD8  17A0               	bsf	32,7	;volatile
 10066  0BD9  1223               	bcf	35,4	;volatile
 10067  0BDA  1626               	bsf	38,4	;volatile
 10068  0BDB  17A6               	bsf	38,7	;volatile
 10069  0BDC  0008               	return
 10070  0BDD                     l1154:	
 10071                           ;main.c: 266:         case 6: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 0; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 1; LCDDATA6bit
      +                          s.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10072                           
 10073  0BDD  002F               	movlb	15	; select bank15
 10074  0BDE  1629               	bsf	41,4	;volatile
 10075  0BDF  13A9               	bcf	41,7	;volatile
 10076  0BE0  17A3               	bsf	35,7	;volatile
 10077  0BE1  17A0               	bsf	32,7	;volatile
 10078  0BE2  1623               	bsf	35,4	;volatile
 10079  0BE3  1626               	bsf	38,4	;volatile
 10080  0BE4  17A6               	bsf	38,7	;volatile
 10081  0BE5  0008               	return
 10082  0BE6                     l1155:	
 10083                           ;main.c: 267:         case 7: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 0; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bit
      +                          s.SEG4COM2 = 0; LCDDATA6bits.SEG7COM2 = 0; break;
 10084                           
 10085  0BE6  002F               	movlb	15	; select bank15
 10086  0BE7  1629               	bsf	41,4	;volatile
 10087  0BE8  17A9               	bsf	41,7	;volatile
 10088  0BE9  17A3               	bsf	35,7	;volatile
 10089  0BEA  13A0               	bcf	32,7	;volatile
 10090  0BEB  1223               	bcf	35,4	;volatile
 10091  0BEC  1226               	bcf	38,4	;volatile
 10092  0BED  13A6               	bcf	38,7	;volatile
 10093  0BEE  0008               	return
 10094  0BEF                     l1156:	
 10095                           ;main.c: 268:         case 8: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 1; LCDDATA6bit
      +                          s.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10096                           
 10097  0BEF  002F               	movlb	15	; select bank15
 10098  0BF0  1629               	bsf	41,4	;volatile
 10099  0BF1  17A9               	bsf	41,7	;volatile
 10100  0BF2  17A3               	bsf	35,7	;volatile
 10101  0BF3  17A0               	bsf	32,7	;volatile
 10102  0BF4  1623               	bsf	35,4	;volatile
 10103  0BF5  1626               	bsf	38,4	;volatile
 10104  0BF6  17A6               	bsf	38,7	;volatile
 10105  0BF7  0008               	return
 10106  0BF8                     l1157:	
 10107                           ;main.c: 269:         case 9: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 1; LCDD
      +                          ATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bit
      +                          s.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10108                           
 10109  0BF8  002F               	movlb	15	; select bank15
 10110  0BF9  1629               	bsf	41,4	;volatile
 10111  0BFA  17A9               	bsf	41,7	;volatile
 10112  0BFB  17A3               	bsf	35,7	;volatile
 10113  0BFC  17A0               	bsf	32,7	;volatile
 10114  0BFD  1223               	bcf	35,4	;volatile
 10115  0BFE  1626               	bsf	38,4	;volatile
 10116  0BFF  17A6               	bsf	38,7	;volatile
 10117  0C00  0008               	return
 10118  0C01                     l1158:	
 10119                           ;main.c: 270:         case 0x0A: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 1; L
      +                          CDDATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 0; LCDDATA3bits.SEG4COM1 = 1; LCDDATA6
      +                          bits.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10120                           
 10121  0C01  002F               	movlb	15	; select bank15
 10122  0C02  1629               	bsf	41,4	;volatile
 10123  0C03  17A9               	bsf	41,7	;volatile
 10124  0C04  17A3               	bsf	35,7	;volatile
 10125  0C05  13A0               	bcf	32,7	;volatile
 10126  0C06  1623               	bsf	35,4	;volatile
 10127  0C07  1626               	bsf	38,4	;volatile
 10128  0C08  17A6               	bsf	38,7	;volatile
 10129  0C09  0008               	return
 10130  0C0A                     l1159:	
 10131                           ;main.c: 271:         case 0x0B: LCDDATA9bits.SEG4COM3 = 0; LCDDATA9bits.SEG7COM3 = 0; L
      +                          CDDATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 1; LCDDATA6
      +                          bits.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10132                           
 10133  0C0A  002F               	movlb	15	; select bank15
 10134  0C0B  1229               	bcf	41,4	;volatile
 10135  0C0C  13A9               	bcf	41,7	;volatile
 10136  0C0D  17A3               	bsf	35,7	;volatile
 10137  0C0E  17A0               	bsf	32,7	;volatile
 10138  0C0F  1623               	bsf	35,4	;volatile
 10139  0C10  1626               	bsf	38,4	;volatile
 10140  0C11  17A6               	bsf	38,7	;volatile
 10141  0C12  0008               	return
 10142  0C13                     l1160:	
 10143                           ;main.c: 272:         case 0x0C: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 0; L
      +                          CDDATA3bits.SEG7COM1 = 0; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 1; LCDDATA6
      +                          bits.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 0; break;
 10144                           
 10145  0C13  002F               	movlb	15	; select bank15
 10146  0C14  1629               	bsf	41,4	;volatile
 10147  0C15  13A9               	bcf	41,7	;volatile
 10148  0C16  13A3               	bcf	35,7	;volatile
 10149  0C17  17A0               	bsf	32,7	;volatile
 10150  0C18  1623               	bsf	35,4	;volatile
 10151  0C19  1626               	bsf	38,4	;volatile
 10152  0C1A  13A6               	bcf	38,7	;volatile
 10153  0C1B  0008               	return
 10154  0C1C                     l1161:	
 10155                           ;main.c: 273:         case 0x0D: LCDDATA9bits.SEG4COM3 = 0; LCDDATA9bits.SEG7COM3 = 1; L
      +                          CDDATA3bits.SEG7COM1 = 1; LCDDATA0bits.SEG7COM0 = 1; LCDDATA3bits.SEG4COM1 = 1; LCDDATA6
      +                          bits.SEG4COM2 = 0; LCDDATA6bits.SEG7COM2 = 1; break;
 10156                           
 10157  0C1C  002F               	movlb	15	; select bank15
 10158  0C1D  1229               	bcf	41,4	;volatile
 10159  0C1E  17A9               	bsf	41,7	;volatile
 10160  0C1F  17A3               	bsf	35,7	;volatile
 10161  0C20  17A0               	bsf	32,7	;volatile
 10162  0C21  1623               	bsf	35,4	;volatile
 10163  0C22  1226               	bcf	38,4	;volatile
 10164  0C23  17A6               	bsf	38,7	;volatile
 10165  0C24  0008               	return
 10166  0C25                     l1162:	
 10167                           ;main.c: 274:         case 0x0E: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 1; L
      +                          CDDATA3bits.SEG7COM1 = 0; LCDDATA0bits.SEG7COM0 = 0; LCDDATA3bits.SEG4COM1 = 1; LCDDATA6
      +                          bits.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10168                           
 10169  0C25  002F               	movlb	15	; select bank15
 10170  0C26  1629               	bsf	41,4	;volatile
 10171  0C27  17A9               	bsf	41,7	;volatile
 10172  0C28  13A3               	bcf	35,7	;volatile
 10173  0C29  13A0               	bcf	32,7	;volatile
 10174  0C2A  1623               	bsf	35,4	;volatile
 10175  0C2B  1626               	bsf	38,4	;volatile
 10176  0C2C  17A6               	bsf	38,7	;volatile
 10177  0C2D  0008               	return
 10178  0C2E                     l1163:	
 10179                           ;main.c: 275:         case 0x0F: LCDDATA9bits.SEG4COM3 = 1; LCDDATA9bits.SEG7COM3 = 0; L
      +                          CDDATA3bits.SEG7COM1 = 0; LCDDATA0bits.SEG7COM0 = 0; LCDDATA3bits.SEG4COM1 = 1; LCDDATA6
      +                          bits.SEG4COM2 = 1; LCDDATA6bits.SEG7COM2 = 1; break;
 10180                           
 10181  0C2E  002F               	movlb	15	; select bank15
 10182  0C2F  1629               	bsf	41,4	;volatile
 10183  0C30  13A9               	bcf	41,7	;volatile
 10184  0C31  13A3               	bcf	35,7	;volatile
 10185  0C32  13A0               	bcf	32,7	;volatile
 10186  0C33  1623               	bsf	35,4	;volatile
 10187  0C34  1626               	bsf	38,4	;volatile
 10188  0C35  17A6               	bsf	38,7	;volatile
 10189  0C36  0008               	return
 10190  0C37                     l1164:	
 10191                           ;main.c: 277:         default: LCDDATA9bits.SEG4COM3 = 0; LCDDATA9bits.SEG7COM3 = 0; LCD
      +                          DATA3bits.SEG7COM1 = 0; LCDDATA0bits.SEG7COM0 = 0; LCDDATA3bits.SEG4COM1 = 0; LCDDATA6bi
      +                          ts.SEG4COM2 = 0; LCDDATA6bits.SEG7COM2 = 0;
 10192                           
 10193  0C37  002F               	movlb	15	; select bank15
 10194  0C38  1229               	bcf	41,4	;volatile
 10195  0C39  13A9               	bcf	41,7	;volatile
 10196  0C3A  13A3               	bcf	35,7	;volatile
 10197  0C3B  13A0               	bcf	32,7	;volatile
 10198  0C3C  1223               	bcf	35,4	;volatile
 10199  0C3D  1226               	bcf	38,4	;volatile
 10200  0C3E  13A6               	bcf	38,7	;volatile
 10201                           
 10202                           ;main.c: 278:     }
 10203  0C3F  0008               	return
 10204  0C40                     l6273:
 10205  0C40  0822               	movf	LCD_Digit1Num@num,w
 10206  0C41  00A0               	movwf	??_LCD_Digit1Num
 10207  0C42  01A1               	clrf	??_LCD_Digit1Num+1
 10208                           
 10209                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10210                           ; Switch size 1, requested type "simple"
 10211                           ; Number of cases is 1, Range of values is 0 to 0
 10212                           ; switch strategies available:
 10213                           ; Name         Instructions Cycles
 10214                           ; simple_byte            4     3 (average)
 10215                           ; direct_byte            8     6 (fixed)
 10216                           ; jumptable            260     6 (fixed)
 10217                           ;	Chosen strategy is simple_byte
 10218  0C43  0821               	movf	??_LCD_Digit1Num+1,w
 10219  0C44  3A00               	xorlw	0	; case 0
 10220  0C45  1903               	skipnz
 10221  0C46  2C48               	goto	l6603
 10222  0C47  2C37               	goto	l1164
 10223  0C48                     l6603:
 10224                           
 10225                           ; Switch size 1, requested type "simple"
 10226                           ; Number of cases is 16, Range of values is 0 to 15
 10227                           ; switch strategies available:
 10228                           ; Name         Instructions Cycles
 10229                           ; direct_byte           38     6 (fixed)
 10230                           ; simple_byte           49    25 (average)
 10231                           ; jumptable            260     6 (fixed)
 10232                           ;	Chosen strategy is simple_byte
 10233  0C48  0820               	movf	??_LCD_Digit1Num,w
 10234  0C49  3A00               	xorlw	0	; case 0
 10235  0C4A  1903               	skipnz
 10236  0C4B  2BA7               	goto	l1147
 10237  0C4C  3A01               	xorlw	1	; case 1
 10238  0C4D  1903               	skipnz
 10239  0C4E  2BB0               	goto	l1149
 10240  0C4F  3A03               	xorlw	3	; case 2
 10241  0C50  1903               	skipnz
 10242  0C51  2BB9               	goto	l1150
 10243  0C52  3A01               	xorlw	1	; case 3
 10244  0C53  1903               	skipnz
 10245  0C54  2BC2               	goto	l1151
 10246  0C55  3A07               	xorlw	7	; case 4
 10247  0C56  1903               	skipnz
 10248  0C57  2BCB               	goto	l1152
 10249  0C58  3A01               	xorlw	1	; case 5
 10250  0C59  1903               	skipnz
 10251  0C5A  2BD4               	goto	l1153
 10252  0C5B  3A03               	xorlw	3	; case 6
 10253  0C5C  1903               	skipnz
 10254  0C5D  2BDD               	goto	l1154
 10255  0C5E  3A01               	xorlw	1	; case 7
 10256  0C5F  1903               	skipnz
 10257  0C60  2BE6               	goto	l1155
 10258  0C61  3A0F               	xorlw	15	; case 8
 10259  0C62  1903               	skipnz
 10260  0C63  2BEF               	goto	l1156
 10261  0C64  3A01               	xorlw	1	; case 9
 10262  0C65  1903               	skipnz
 10263  0C66  2BF8               	goto	l1157
 10264  0C67  3A03               	xorlw	3	; case 10
 10265  0C68  1903               	skipnz
 10266  0C69  2C01               	goto	l1158
 10267  0C6A  3A01               	xorlw	1	; case 11
 10268  0C6B  1903               	skipnz
 10269  0C6C  2C0A               	goto	l1159
 10270  0C6D  3A07               	xorlw	7	; case 12
 10271  0C6E  1903               	skipnz
 10272  0C6F  2C13               	goto	l1160
 10273  0C70  3A01               	xorlw	1	; case 13
 10274  0C71  1903               	skipnz
 10275  0C72  2C1C               	goto	l1161
 10276  0C73  3A03               	xorlw	3	; case 14
 10277  0C74  1903               	skipnz
 10278  0C75  2C25               	goto	l1162
 10279  0C76  3A01               	xorlw	1	; case 15
 10280  0C77  1903               	skipnz
 10281  0C78  2C2E               	goto	l1163
 10282  0C79  2C37               	goto	l1164
 10283  0C7A  0008               	return
 10284  0C7B                     __end_of_LCD_Digit1Num:
 10285                           
 10286                           	psect	text41
 10287  0637                     __ptext41:	
 10288 ;; *************** function _APDS9960Init *****************
 10289 ;; Defined at:
 10290 ;;		line 54 in file "APDS9960.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;		None
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;  id              1   39[BANK0 ] unsigned char 
 10295 ;; Return value:  Size  Location     Type
 10296 ;;                  1    wreg      _Bool 
 10297 ;; Registers used:
 10298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10299 ;; Tracked objects:
 10300 ;;		On entry : 1F/1
 10301 ;;		On exit  : 1F/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;Total ram usage:        2 bytes
 10309 ;; Hardware stack levels used:    1
 10310 ;; Hardware stack levels required when called:   16
 10311 ;; This function calls:
 10312 ;;		_setAmbientLightGain
 10313 ;;		_setGestureEnterThresh
 10314 ;;		_setGestureExitThresh
 10315 ;;		_setGestureGain
 10316 ;;		_setGestureIntEnable
 10317 ;;		_setGestureLEDDrive
 10318 ;;		_setGestureWaitTime
 10319 ;;		_setLEDDrive
 10320 ;;		_setLightIntHighThreshold
 10321 ;;		_setLightIntLowThreshold
 10322 ;;		_setMode
 10323 ;;		_setProxIntHighThresh
 10324 ;;		_setProxIntLowThresh
 10325 ;;		_setProximityGain
 10326 ;;		_wireReadDataByte
 10327 ;;		_wireWriteDataByte
 10328 ;; This function is called by:
 10329 ;;		_main
 10330 ;; This function uses a non-reentrant model
 10331 ;;
 10332                           
 10333                           
 10334                           ;psect for function _APDS9960Init
 10335  0637                     _APDS9960Init:
 10336                           
 10337                           ;APDS9960.c: 56:     uint8_t id;;APDS9960.c: 61:     id = wireReadDataByte(0x92);
 10338                           
 10339                           ;incstack = 0
 10340 ;; hardware stack exceeded
 10341                           ; Regs used in _APDS9960Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10342  0637  3092               	movlw	146
 10343  0638  3192  2236  3186   	fcall	_wireReadDataByte
 10344  063B  00C6               	movwf	??_APDS9960Init
 10345  063C  0846               	movf	??_APDS9960Init,w
 10346  063D  00C7               	movwf	APDS9960Init@id
 10347                           
 10348                           ;APDS9960.c: 63:     if( !(id == 0xAB || id == 0x9C) ) {
 10349  063E  30AB               	movlw	171
 10350  063F  0647               	xorwf	APDS9960Init@id,w
 10351  0640  1903               	btfsc	3,2
 10352  0641  2E48               	goto	l5975
 10353  0642  309C               	movlw	156
 10354  0643  0647               	xorwf	APDS9960Init@id,w
 10355  0644  1903               	btfsc	3,2
 10356  0645  2E48               	goto	l5975
 10357  0646                     l5971:
 10358                           
 10359                           ;APDS9960.c: 64:         return 0;
 10360  0646  3000               	movlw	0
 10361  0647  0008               	return
 10362  0648                     l5975:
 10363                           
 10364                           ;APDS9960.c: 68:     if( !setMode(7, 0) ) {
 10365  0648  01C1               	clrf	setMode@enable
 10366  0649  3007               	movlw	7
 10367  064A  318A  225C  3186   	fcall	_setMode
 10368  064D  3A00               	xorlw	0
 10369  064E  1903               	btfsc	3,2
 10370  064F  2E46               	goto	l5971
 10371                           
 10372                           ;APDS9960.c: 73:     if( !wireWriteDataByte(0x81, 219) ) {
 10373  0650  30DB               	movlw	219
 10374  0651  00C6               	movwf	??_APDS9960Init
 10375  0652  0846               	movf	??_APDS9960Init,w
 10376  0653  00B9               	movwf	wireWriteDataByte@val
 10377  0654  3081               	movlw	129
 10378  0655  3192  2291  3186   	fcall	_wireWriteDataByte
 10379  0658  3A00               	xorlw	0
 10380  0659  1903               	btfsc	3,2
 10381  065A  2E46               	goto	l5971
 10382                           
 10383                           ;APDS9960.c: 76:     if( !wireWriteDataByte(0x83, 246) ) {
 10384  065B  30F6               	movlw	246
 10385  065C  00C6               	movwf	??_APDS9960Init
 10386  065D  0846               	movf	??_APDS9960Init,w
 10387  065E  00B9               	movwf	wireWriteDataByte@val
 10388  065F  3083               	movlw	131
 10389  0660  3192  2291  3186   	fcall	_wireWriteDataByte
 10390  0663  3A00               	xorlw	0
 10391  0664  1903               	btfsc	3,2
 10392  0665  2E46               	goto	l5971
 10393                           
 10394                           ;APDS9960.c: 79:     if( !wireWriteDataByte(0x8E, 0x87) ) {
 10395  0666  3087               	movlw	135
 10396  0667  00C6               	movwf	??_APDS9960Init
 10397  0668  0846               	movf	??_APDS9960Init,w
 10398  0669  00B9               	movwf	wireWriteDataByte@val
 10399  066A  308E               	movlw	142
 10400  066B  3192  2291  3186   	fcall	_wireWriteDataByte
 10401  066E  3A00               	xorlw	0
 10402  066F  1903               	btfsc	3,2
 10403  0670  2E46               	goto	l5971
 10404                           
 10405                           ;APDS9960.c: 82:     if( !wireWriteDataByte(0x9D, 0) ) {
 10406  0671  01B9               	clrf	wireWriteDataByte@val
 10407  0672  309D               	movlw	157
 10408  0673  3192  2291  3186   	fcall	_wireWriteDataByte
 10409  0676  3A00               	xorlw	0
 10410  0677  1903               	btfsc	3,2
 10411  0678  2E46               	goto	l5971
 10412                           
 10413                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0x9E, 0) ) {
 10414  0679  01B9               	clrf	wireWriteDataByte@val
 10415  067A  309E               	movlw	158
 10416  067B  3192  2291  3186   	fcall	_wireWriteDataByte
 10417  067E  3A00               	xorlw	0
 10418  067F  1903               	btfsc	3,2
 10419  0680  2E46               	goto	l5971
 10420                           
 10421                           ;APDS9960.c: 88:     if( !wireWriteDataByte(0x8D, 0x60) ) {
 10422  0681  3060               	movlw	96
 10423  0682  00C6               	movwf	??_APDS9960Init
 10424  0683  0846               	movf	??_APDS9960Init,w
 10425  0684  00B9               	movwf	wireWriteDataByte@val
 10426  0685  308D               	movlw	141
 10427  0686  3192  2291  3186   	fcall	_wireWriteDataByte
 10428  0689  3A00               	xorlw	0
 10429  068A  1903               	btfsc	3,2
 10430  068B  2E46               	goto	l5971
 10431                           
 10432                           ;APDS9960.c: 91:     if( !setLEDDrive(0) ) {
 10433  068C  3000               	movlw	0
 10434  068D  3196  26E4  3186   	fcall	_setLEDDrive
 10435  0690  3A00               	xorlw	0
 10436  0691  1903               	btfsc	3,2
 10437  0692  2E46               	goto	l5971
 10438                           
 10439                           ;APDS9960.c: 94:     if( !setProximityGain(2) ) {
 10440  0693  3002               	movlw	2
 10441  0694  3197  2712  3186   	fcall	_setProximityGain
 10442  0697  3A00               	xorlw	0
 10443  0698  1903               	btfsc	3,2
 10444  0699  2E46               	goto	l5971
 10445                           
 10446                           ;APDS9960.c: 97:     if( !setAmbientLightGain(1) ) {
 10447  069A  3001               	movlw	1
 10448  069B  3195  25C2  3186   	fcall	_setAmbientLightGain
 10449  069E  3A00               	xorlw	0
 10450  069F  1903               	btfsc	3,2
 10451  06A0  2E46               	goto	l5971
 10452                           
 10453                           ;APDS9960.c: 100:     if( !setProxIntLowThresh(0) ) {
 10454  06A1  3000               	movlw	0
 10455  06A2  3192  22DE  3186   	fcall	_setProxIntLowThresh
 10456  06A5  3A00               	xorlw	0
 10457  06A6  1903               	btfsc	3,2
 10458  06A7  2E46               	goto	l5971
 10459                           
 10460                           ;APDS9960.c: 103:     if( !setProxIntHighThresh(50) ) {
 10461  06A8  3032               	movlw	50
 10462  06A9  3192  22CE  3186   	fcall	_setProxIntHighThresh
 10463  06AC  3A00               	xorlw	0
 10464  06AD  1903               	btfsc	3,2
 10465  06AE  2E46               	goto	l5971
 10466                           
 10467                           ;APDS9960.c: 106:     if( !setLightIntLowThreshold(0xFFFF) ) {
 10468  06AF  30FF               	movlw	255
 10469  06B0  00BD               	movwf	setLightIntLowThreshold@threshold
 10470  06B1  30FF               	movlw	255
 10471  06B2  00BE               	movwf	setLightIntLowThreshold@threshold+1
 10472  06B3  3195  25A0  3186   	fcall	_setLightIntLowThreshold
 10473  06B6  3A00               	xorlw	0
 10474  06B7  1903               	btfsc	3,2
 10475  06B8  2E46               	goto	l5971
 10476                           
 10477                           ;APDS9960.c: 109:     if( !setLightIntHighThreshold(0) ) {
 10478  06B9  3000               	movlw	0
 10479  06BA  00BD               	movwf	setLightIntHighThreshold@threshold
 10480  06BB  00BE               	movwf	setLightIntHighThreshold@threshold+1
 10481  06BC  3195  257E  3186   	fcall	_setLightIntHighThreshold
 10482  06BF  3A00               	xorlw	0
 10483  06C0  1903               	btfsc	3,2
 10484  06C1  2E46               	goto	l5971
 10485                           
 10486                           ;APDS9960.c: 112:     if( !wireWriteDataByte(0x8C, 0x11) ) {
 10487  06C2  3011               	movlw	17
 10488  06C3  00C6               	movwf	??_APDS9960Init
 10489  06C4  0846               	movf	??_APDS9960Init,w
 10490  06C5  00B9               	movwf	wireWriteDataByte@val
 10491  06C6  308C               	movlw	140
 10492  06C7  3192  2291  3186   	fcall	_wireWriteDataByte
 10493  06CA  3A00               	xorlw	0
 10494  06CB  1903               	btfsc	3,2
 10495  06CC  2E46               	goto	l5971
 10496                           
 10497                           ;APDS9960.c: 115:     if( !wireWriteDataByte(0x90, 0x01) ) {
 10498  06CD  01B9               	clrf	wireWriteDataByte@val
 10499  06CE  0AB9               	incf	wireWriteDataByte@val,f
 10500  06CF  3090               	movlw	144
 10501  06D0  3192  2291  3186   	fcall	_wireWriteDataByte
 10502  06D3  3A00               	xorlw	0
 10503  06D4  1903               	btfsc	3,2
 10504  06D5  2E46               	goto	l5971
 10505                           
 10506                           ;APDS9960.c: 118:     if( !wireWriteDataByte(0x9F, 0) ) {
 10507  06D6  01B9               	clrf	wireWriteDataByte@val
 10508  06D7  309F               	movlw	159
 10509  06D8  3192  2291  3186   	fcall	_wireWriteDataByte
 10510  06DB  3A00               	xorlw	0
 10511  06DC  1903               	btfsc	3,2
 10512  06DD  2E46               	goto	l5971
 10513                           
 10514                           ;APDS9960.c: 123:     if( !setGestureEnterThresh(40) ) {
 10515  06DE  3028               	movlw	40
 10516  06DF  3192  22AE  3186   	fcall	_setGestureEnterThresh
 10517  06E2  3A00               	xorlw	0
 10518  06E3  1903               	btfsc	3,2
 10519  06E4  2E46               	goto	l5971
 10520                           
 10521                           ;APDS9960.c: 126:     if( !setGestureExitThresh(30) ) {
 10522  06E5  301E               	movlw	30
 10523  06E6  3192  22BE  3186   	fcall	_setGestureExitThresh
 10524  06E9  3A00               	xorlw	0
 10525  06EA  1903               	btfsc	3,2
 10526  06EB  2E46               	goto	l5971
 10527                           
 10528                           ;APDS9960.c: 129:     if( !wireWriteDataByte(0xA2, 0x40) ) {
 10529  06EC  3040               	movlw	64
 10530  06ED  00C6               	movwf	??_APDS9960Init
 10531  06EE  0846               	movf	??_APDS9960Init,w
 10532  06EF  00B9               	movwf	wireWriteDataByte@val
 10533  06F0  30A2               	movlw	162
 10534  06F1  3192  2291  3186   	fcall	_wireWriteDataByte
 10535  06F4  3A00               	xorlw	0
 10536  06F5  1903               	btfsc	3,2
 10537  06F6  2E46               	goto	l5971
 10538                           
 10539                           ;APDS9960.c: 132:     if( !setGestureGain(2) ) {
 10540  06F7  3002               	movlw	2
 10541  06F8  3196  2688  3186   	fcall	_setGestureGain
 10542  06FB  3A00               	xorlw	0
 10543  06FC  1903               	btfsc	3,2
 10544  06FD  2E46               	goto	l5971
 10545                           
 10546                           ;APDS9960.c: 135:     if( !setGestureLEDDrive(0) ) {
 10547  06FE  3000               	movlw	0
 10548  06FF  3196  26B6  3186   	fcall	_setGestureLEDDrive
 10549  0702  3A00               	xorlw	0
 10550  0703  1903               	btfsc	3,2
 10551  0704  2E46               	goto	l5971
 10552                           
 10553                           ;APDS9960.c: 138:     if( !setGestureWaitTime(1) ) {
 10554  0705  3001               	movlw	1
 10555  0706  3195  25E5  3186   	fcall	_setGestureWaitTime
 10556  0709  3A00               	xorlw	0
 10557  070A  1903               	btfsc	3,2
 10558  070B  2E46               	goto	l5971
 10559                           
 10560                           ;APDS9960.c: 141:     if( !wireWriteDataByte(0xA4, 0) ) {
 10561  070C  01B9               	clrf	wireWriteDataByte@val
 10562  070D  30A4               	movlw	164
 10563  070E  3192  2291  3186   	fcall	_wireWriteDataByte
 10564  0711  3A00               	xorlw	0
 10565  0712  1903               	btfsc	3,2
 10566  0713  2E46               	goto	l5971
 10567                           
 10568                           ;APDS9960.c: 144:     if( !wireWriteDataByte(0xA5, 0) ) {
 10569  0714  01B9               	clrf	wireWriteDataByte@val
 10570  0715  30A5               	movlw	165
 10571  0716  3192  2291  3186   	fcall	_wireWriteDataByte
 10572  0719  3A00               	xorlw	0
 10573  071A  1903               	btfsc	3,2
 10574  071B  2E46               	goto	l5971
 10575                           
 10576                           ;APDS9960.c: 147:     if( !wireWriteDataByte(0xA7, 0) ) {
 10577  071C  01B9               	clrf	wireWriteDataByte@val
 10578  071D  30A7               	movlw	167
 10579  071E  3192  2291  3186   	fcall	_wireWriteDataByte
 10580  0721  3A00               	xorlw	0
 10581  0722  1903               	btfsc	3,2
 10582  0723  2E46               	goto	l5971
 10583                           
 10584                           ;APDS9960.c: 150:     if( !wireWriteDataByte(0xA9, 0) ) {
 10585  0724  01B9               	clrf	wireWriteDataByte@val
 10586  0725  30A9               	movlw	169
 10587  0726  3192  2291  3186   	fcall	_wireWriteDataByte
 10588  0729  3A00               	xorlw	0
 10589  072A  1903               	btfsc	3,2
 10590  072B  2E46               	goto	l5971
 10591                           
 10592                           ;APDS9960.c: 153:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
 10593  072C  30C9               	movlw	201
 10594  072D  00C6               	movwf	??_APDS9960Init
 10595  072E  0846               	movf	??_APDS9960Init,w
 10596  072F  00B9               	movwf	wireWriteDataByte@val
 10597  0730  30A6               	movlw	166
 10598  0731  3192  2291  3186   	fcall	_wireWriteDataByte
 10599  0734  3A00               	xorlw	0
 10600  0735  1903               	btfsc	3,2
 10601  0736  2E46               	goto	l5971
 10602                           
 10603                           ;APDS9960.c: 156:     if( !wireWriteDataByte(0xAA, 0) ) {
 10604  0737  01B9               	clrf	wireWriteDataByte@val
 10605  0738  30AA               	movlw	170
 10606  0739  3192  2291  3186   	fcall	_wireWriteDataByte
 10607  073C  3A00               	xorlw	0
 10608  073D  1903               	btfsc	3,2
 10609  073E  2E46               	goto	l5971
 10610                           
 10611                           ;APDS9960.c: 159:     if( !setGestureIntEnable(0) ) {
 10612  073F  3000               	movlw	0
 10613  0740  3196  2608  3186   	fcall	_setGestureIntEnable
 10614  0743  3A00               	xorlw	0
 10615  0744  1903               	btfsc	3,2
 10616  0745  2E46               	goto	l5971
 10617                           
 10618                           ;APDS9960.c: 163:     return 1;
 10619  0746  3001               	movlw	1
 10620  0747  0008               	return
 10621  0748                     __end_of_APDS9960Init:
 10622                           
 10623                           	psect	text42
 10624  1712                     __ptext42:	
 10625 ;; *************** function _setProximityGain *****************
 10626 ;; Defined at:
 10627 ;;		line 1127 in file "APDS9960.c"
 10628 ;; Parameters:    Size  Location     Type
 10629 ;;  drive           1    wreg     unsigned char 
 10630 ;; Auto vars:     Size  Location     Type
 10631 ;;  drive           1   34[BANK0 ] unsigned char 
 10632 ;;  val             1   33[BANK0 ] unsigned char 
 10633 ;; Return value:  Size  Location     Type
 10634 ;;                  1    wreg      _Bool 
 10635 ;; Registers used:
 10636 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10637 ;; Tracked objects:
 10638 ;;		On entry : 1F/0
 10639 ;;		On exit  : 1F/0
 10640 ;;		Unchanged: 0/0
 10641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10644 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;Total ram usage:        4 bytes
 10647 ;; Hardware stack levels used:    1
 10648 ;; Hardware stack levels required when called:   14
 10649 ;; This function calls:
 10650 ;;		_wireReadDataByte
 10651 ;;		_wireWriteDataByte
 10652 ;; This function is called by:
 10653 ;;		_APDS9960Init
 10654 ;;		_enableProximitySensor
 10655 ;; This function uses a non-reentrant model
 10656 ;;
 10657                           
 10658                           
 10659                           ;psect for function _setProximityGain
 10660  1712                     _setProximityGain:
 10661                           
 10662                           ;incstack = 0
 10663                           ; Regs used in _setProximityGain: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10664                           ;setProximityGain@drive stored from wreg
 10665  1712  00C2               	movwf	setProximityGain@drive
 10666                           
 10667                           ;APDS9960.c: 1127: _Bool setProximityGain(uint8_t drive);APDS9960.c: 1128: {;APDS9960.c:
      +                           1129:     uint8_t val;;APDS9960.c: 1132:     val = wireReadDataByte(0x8F);
 10668  1713  308F               	movlw	143
 10669  1714  3192  2236  3197   	fcall	_wireReadDataByte
 10670  1717  00BF               	movwf	??_setProximityGain
 10671  1718  083F               	movf	??_setProximityGain,w
 10672  1719  00C1               	movwf	setProximityGain@val
 10673                           
 10674                           ;APDS9960.c: 1135:     drive &= 0b00000011;
 10675  171A  3003               	movlw	3
 10676  171B  00BF               	movwf	??_setProximityGain
 10677  171C  083F               	movf	??_setProximityGain,w
 10678  171D  05C2               	andwf	setProximityGain@drive,f
 10679                           
 10680                           ;APDS9960.c: 1136:     drive = drive << 2;
 10681  171E  0842               	movf	setProximityGain@drive,w
 10682  171F  00BF               	movwf	??_setProximityGain
 10683  1720  3001               	movlw	1
 10684  1721                     u3105:
 10685  1721  35BF               	lslf	??_setProximityGain,f
 10686  1722  3EFF               	addlw	-1
 10687  1723  1D03               	skipz
 10688  1724  2F21               	goto	u3105
 10689  1725  353F               	lslf	??_setProximityGain,w
 10690  1726  00C0               	movwf	??_setProximityGain+1
 10691  1727  0840               	movf	??_setProximityGain+1,w
 10692  1728  00C2               	movwf	setProximityGain@drive
 10693                           
 10694                           ;APDS9960.c: 1137:     val &= 0b11110011;
 10695  1729  30F3               	movlw	243
 10696  172A  00BF               	movwf	??_setProximityGain
 10697  172B  083F               	movf	??_setProximityGain,w
 10698  172C  05C1               	andwf	setProximityGain@val,f
 10699                           
 10700                           ;APDS9960.c: 1138:     val |= drive;
 10701  172D  0842               	movf	setProximityGain@drive,w
 10702  172E  00BF               	movwf	??_setProximityGain
 10703  172F  083F               	movf	??_setProximityGain,w
 10704  1730  04C1               	iorwf	setProximityGain@val,f
 10705                           
 10706                           ;APDS9960.c: 1141:     if( !wireWriteDataByte(0x8F, val) ) {
 10707  1731  0841               	movf	setProximityGain@val,w
 10708  1732  00BF               	movwf	??_setProximityGain
 10709  1733  083F               	movf	??_setProximityGain,w
 10710  1734  00B9               	movwf	wireWriteDataByte@val
 10711  1735  308F               	movlw	143
 10712  1736  3192  2291  3197   	fcall	_wireWriteDataByte
 10713  1739  3A00               	xorlw	0
 10714  173A  1D03               	skipz
 10715  173B  2F3E               	goto	l5425
 10716                           
 10717                           ;APDS9960.c: 1142:         return 0;
 10718  173C  3000               	movlw	0
 10719  173D  0008               	return
 10720  173E                     l5425:
 10721                           
 10722                           ;APDS9960.c: 1145:     return 1;
 10723  173E  3001               	movlw	1
 10724  173F  0008               	return
 10725  1740                     __end_of_setProximityGain:
 10726                           
 10727                           	psect	text43
 10728  12DE                     __ptext43:	
 10729 ;; *************** function _setProxIntLowThresh *****************
 10730 ;; Defined at:
 10731 ;;		line 995 in file "APDS9960.c"
 10732 ;; Parameters:    Size  Location     Type
 10733 ;;  threshold       1    wreg     unsigned char 
 10734 ;; Auto vars:     Size  Location     Type
 10735 ;;  threshold       1   30[BANK0 ] unsigned char 
 10736 ;; Return value:  Size  Location     Type
 10737 ;;                  1    wreg      _Bool 
 10738 ;; Registers used:
 10739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10740 ;; Tracked objects:
 10741 ;;		On entry : 1F/0
 10742 ;;		On exit  : 1F/0
 10743 ;;		Unchanged: 0/0
 10744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10747 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10748 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;Total ram usage:        2 bytes
 10750 ;; Hardware stack levels used:    1
 10751 ;; Hardware stack levels required when called:   14
 10752 ;; This function calls:
 10753 ;;		_wireWriteDataByte
 10754 ;; This function is called by:
 10755 ;;		_APDS9960Init
 10756 ;; This function uses a non-reentrant model
 10757 ;;
 10758                           
 10759                           
 10760                           ;psect for function _setProxIntLowThresh
 10761  12DE                     _setProxIntLowThresh:
 10762                           
 10763                           ;incstack = 0
 10764                           ; Regs used in _setProxIntLowThresh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10765                           ;setProxIntLowThresh@threshold stored from wreg
 10766  12DE  00BE               	movwf	setProxIntLowThresh@threshold
 10767                           
 10768                           ;APDS9960.c: 995: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 996: {;APDS99
      +                          60.c: 997:     if( !wireWriteDataByte(0x89, threshold) ) {
 10769  12DF  083E               	movf	setProxIntLowThresh@threshold,w
 10770  12E0  00BD               	movwf	??_setProxIntLowThresh
 10771  12E1  083D               	movf	??_setProxIntLowThresh,w
 10772  12E2  00B9               	movwf	wireWriteDataByte@val
 10773  12E3  3089               	movlw	137
 10774  12E4  3192  2291  3192   	fcall	_wireWriteDataByte
 10775  12E7  3A00               	xorlw	0
 10776  12E8  1D03               	skipz
 10777  12E9  2AEC               	goto	l5453
 10778                           
 10779                           ;APDS9960.c: 998:         return 0;
 10780  12EA  3000               	movlw	0
 10781  12EB  0008               	return
 10782  12EC                     l5453:
 10783                           
 10784                           ;APDS9960.c: 1001:     return 1;
 10785  12EC  3001               	movlw	1
 10786  12ED  0008               	return
 10787  12EE                     __end_of_setProxIntLowThresh:
 10788                           
 10789                           	psect	text44
 10790  12CE                     __ptext44:	
 10791 ;; *************** function _setProxIntHighThresh *****************
 10792 ;; Defined at:
 10793 ;;		line 1025 in file "APDS9960.c"
 10794 ;; Parameters:    Size  Location     Type
 10795 ;;  threshold       1    wreg     unsigned char 
 10796 ;; Auto vars:     Size  Location     Type
 10797 ;;  threshold       1   30[BANK0 ] unsigned char 
 10798 ;; Return value:  Size  Location     Type
 10799 ;;                  1    wreg      _Bool 
 10800 ;; Registers used:
 10801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10802 ;; Tracked objects:
 10803 ;;		On entry : 1F/0
 10804 ;;		On exit  : 1F/0
 10805 ;;		Unchanged: 0/0
 10806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;Total ram usage:        2 bytes
 10812 ;; Hardware stack levels used:    1
 10813 ;; Hardware stack levels required when called:   14
 10814 ;; This function calls:
 10815 ;;		_wireWriteDataByte
 10816 ;; This function is called by:
 10817 ;;		_APDS9960Init
 10818 ;; This function uses a non-reentrant model
 10819 ;;
 10820                           
 10821                           
 10822                           ;psect for function _setProxIntHighThresh
 10823  12CE                     _setProxIntHighThresh:
 10824                           
 10825                           ;incstack = 0
 10826                           ; Regs used in _setProxIntHighThresh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10827                           ;setProxIntHighThresh@threshold stored from wreg
 10828  12CE  00BE               	movwf	setProxIntHighThresh@threshold
 10829                           
 10830                           ;APDS9960.c: 1025: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 1026: {;APD
      +                          S9960.c: 1027:     if( !wireWriteDataByte(0x8B, threshold) ) {
 10831  12CF  083E               	movf	setProxIntHighThresh@threshold,w
 10832  12D0  00BD               	movwf	??_setProxIntHighThresh
 10833  12D1  083D               	movf	??_setProxIntHighThresh,w
 10834  12D2  00B9               	movwf	wireWriteDataByte@val
 10835  12D3  308B               	movlw	139
 10836  12D4  3192  2291  3192   	fcall	_wireWriteDataByte
 10837  12D7  3A00               	xorlw	0
 10838  12D8  1D03               	skipz
 10839  12D9  2ADC               	goto	l5463
 10840                           
 10841                           ;APDS9960.c: 1028:         return 0;
 10842  12DA  3000               	movlw	0
 10843  12DB  0008               	return
 10844  12DC                     l5463:
 10845                           
 10846                           ;APDS9960.c: 1031:     return 1;
 10847  12DC  3001               	movlw	1
 10848  12DD  0008               	return
 10849  12DE                     __end_of_setProxIntHighThresh:
 10850                           
 10851                           	psect	text45
 10852  0A5C                     __ptext45:	
 10853 ;; *************** function _setMode *****************
 10854 ;; Defined at:
 10855 ;;		line 203 in file "APDS9960.c"
 10856 ;; Parameters:    Size  Location     Type
 10857 ;;  mode            1    wreg     unsigned char 
 10858 ;;  enable          1   33[BANK0 ] unsigned char 
 10859 ;; Auto vars:     Size  Location     Type
 10860 ;;  mode            1   37[BANK0 ] unsigned char 
 10861 ;;  reg_val         1   36[BANK0 ] unsigned char 
 10862 ;; Return value:  Size  Location     Type
 10863 ;;                  1    wreg      _Bool 
 10864 ;; Registers used:
 10865 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10866 ;; Tracked objects:
 10867 ;;		On entry : 1F/0
 10868 ;;		On exit  : 1F/0
 10869 ;;		Unchanged: 0/0
 10870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10871 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10872 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10873 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10874 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10875 ;;Total ram usage:        5 bytes
 10876 ;; Hardware stack levels used:    1
 10877 ;; Hardware stack levels required when called:   15
 10878 ;; This function calls:
 10879 ;;		_getMode
 10880 ;;		_wireWriteDataByte
 10881 ;; This function is called by:
 10882 ;;		_APDS9960Init
 10883 ;;		_enableProximitySensor
 10884 ;;		_enablePower
 10885 ;; This function uses a non-reentrant model
 10886 ;;
 10887                           
 10888                           
 10889                           ;psect for function _setMode
 10890  0A5C                     _setMode:
 10891                           
 10892                           ;incstack = 0
 10893 ;; hardware stack exceeded
 10894                           ; Regs used in _setMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10895                           ;setMode@mode stored from wreg
 10896  0A5C  00C5               	movwf	setMode@mode
 10897                           
 10898                           ;APDS9960.c: 203: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 204: {;APDS996
      +                          0.c: 205:     uint8_t reg_val;;APDS9960.c: 208:     reg_val = getMode();
 10899  0A5D  3191  21E3  318A   	fcall	_getMode
 10900  0A60  00C2               	movwf	??_setMode
 10901  0A61  0842               	movf	??_setMode,w
 10902  0A62  00C4               	movwf	setMode@reg_val
 10903                           
 10904                           ;APDS9960.c: 209:     if( reg_val == 0xFF ) {
 10905  0A63  0A44               	incf	setMode@reg_val,w
 10906  0A64  1D03               	btfss	3,2
 10907  0A65  2A68               	goto	l5081
 10908  0A66                     l5077:
 10909                           
 10910                           ;APDS9960.c: 210:         return 0;
 10911  0A66  3000               	movlw	0
 10912  0A67  0008               	return
 10913  0A68                     l5081:
 10914                           
 10915                           ;APDS9960.c: 214:     enable = enable & 0x01;
 10916  0A68  0841               	movf	setMode@enable,w
 10917  0A69  3901               	andlw	1
 10918  0A6A  00C2               	movwf	??_setMode
 10919  0A6B  0842               	movf	??_setMode,w
 10920  0A6C  00C1               	movwf	setMode@enable
 10921                           
 10922                           ;APDS9960.c: 215:     if( mode >= 0 && mode <= 6 ) {
 10923  0A6D  3007               	movlw	7
 10924  0A6E  0245               	subwf	setMode@mode,w
 10925  0A6F  1803               	skipnc
 10926  0A70  2A8D               	goto	l5091
 10927                           
 10928                           ;APDS9960.c: 216:         if (enable) {
 10929  0A71  0841               	movf	setMode@enable,w
 10930  0A72  1903               	btfsc	3,2
 10931  0A73  2A80               	goto	l5089
 10932                           
 10933                           ;APDS9960.c: 217:             reg_val |= (1 << mode);
 10934  0A74  3001               	movlw	1
 10935  0A75  00C2               	movwf	??_setMode
 10936  0A76  0A45               	incf	setMode@mode,w
 10937  0A77  2A79               	goto	u2664
 10938  0A78                     u2665:
 10939  0A78  35C2               	lslf	??_setMode,f
 10940  0A79                     u2664:
 10941  0A79  0B89               	decfsz	9,f
 10942  0A7A  2A78               	goto	u2665
 10943  0A7B  0842               	movf	??_setMode,w
 10944  0A7C  00C3               	movwf	??_setMode+1
 10945  0A7D  0843               	movf	??_setMode+1,w
 10946  0A7E  04C4               	iorwf	setMode@reg_val,f
 10947                           
 10948                           ;APDS9960.c: 218:         } else {
 10949  0A7F  2A9A               	goto	l5099
 10950  0A80                     l5089:
 10951                           
 10952                           ;APDS9960.c: 219:             reg_val &= ~(1 << mode);
 10953  0A80  3001               	movlw	1
 10954  0A81  00C2               	movwf	??_setMode
 10955  0A82  0A45               	incf	setMode@mode,w
 10956  0A83  2A85               	goto	u2674
 10957  0A84                     u2675:
 10958  0A84  35C2               	lslf	??_setMode,f
 10959  0A85                     u2674:
 10960  0A85  0B89               	decfsz	9,f
 10961  0A86  2A84               	goto	u2675
 10962  0A87  0842               	movf	??_setMode,w
 10963  0A88  3AFF               	xorlw	255
 10964  0A89  00C3               	movwf	??_setMode+1
 10965  0A8A  0843               	movf	??_setMode+1,w
 10966  0A8B  05C4               	andwf	setMode@reg_val,f
 10967  0A8C  2A9A               	goto	l5099
 10968  0A8D                     l5091:
 10969  0A8D  3007               	movlw	7
 10970  0A8E  0645               	xorwf	setMode@mode,w
 10971  0A8F  1D03               	btfss	3,2
 10972  0A90  2A9A               	goto	l5099
 10973                           
 10974                           ;APDS9960.c: 222:         if (enable) {
 10975  0A91  0841               	movf	setMode@enable,w
 10976  0A92  1903               	btfsc	3,2
 10977  0A93  2A99               	goto	l5097
 10978                           
 10979                           ;APDS9960.c: 223:             reg_val = 0x7F;
 10980  0A94  307F               	movlw	127
 10981  0A95  00C2               	movwf	??_setMode
 10982  0A96  0842               	movf	??_setMode,w
 10983  0A97  00C4               	movwf	setMode@reg_val
 10984                           
 10985                           ;APDS9960.c: 224:         } else {
 10986  0A98  2A9A               	goto	l5099
 10987  0A99                     l5097:
 10988                           
 10989                           ;APDS9960.c: 225:             reg_val = 0x00;
 10990  0A99  01C4               	clrf	setMode@reg_val
 10991  0A9A                     l5099:
 10992                           
 10993                           ;APDS9960.c: 230:     if( !wireWriteDataByte(0x80, reg_val) ) {
 10994  0A9A  0844               	movf	setMode@reg_val,w
 10995  0A9B  00C2               	movwf	??_setMode
 10996  0A9C  0842               	movf	??_setMode,w
 10997  0A9D  00B9               	movwf	wireWriteDataByte@val
 10998  0A9E  3080               	movlw	128
 10999  0A9F  3192  2291  318A   	fcall	_wireWriteDataByte
 11000  0AA2  3A00               	xorlw	0
 11001  0AA3  1903               	btfsc	3,2
 11002  0AA4  2A66               	goto	l5077
 11003                           
 11004                           ;APDS9960.c: 234:     return 1;
 11005  0AA5  3001               	movlw	1
 11006  0AA6  0008               	return
 11007  0AA7                     __end_of_setMode:
 11008                           
 11009                           	psect	text46
 11010  11E3                     __ptext46:	
 11011 ;; *************** function _getMode *****************
 11012 ;; Defined at:
 11013 ;;		line 186 in file "APDS9960.c"
 11014 ;; Parameters:    Size  Location     Type
 11015 ;;		None
 11016 ;; Auto vars:     Size  Location     Type
 11017 ;;  enable_value    1   32[BANK0 ] unsigned char 
 11018 ;; Return value:  Size  Location     Type
 11019 ;;                  1    wreg      unsigned char 
 11020 ;; Registers used:
 11021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11022 ;; Tracked objects:
 11023 ;;		On entry : 1F/0
 11024 ;;		On exit  : 1F/0
 11025 ;;		Unchanged: 0/0
 11026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11030 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11031 ;;Total ram usage:        2 bytes
 11032 ;; Hardware stack levels used:    1
 11033 ;; Hardware stack levels required when called:   14
 11034 ;; This function calls:
 11035 ;;		_wireReadDataByte
 11036 ;; This function is called by:
 11037 ;;		_setMode
 11038 ;;		_readGesture
 11039 ;; This function uses a non-reentrant model
 11040 ;;
 11041                           
 11042                           
 11043                           ;psect for function _getMode
 11044  11E3                     _getMode:
 11045                           
 11046                           ;APDS9960.c: 188:     uint8_t enable_value;;APDS9960.c: 191:     enable_value = wireRead
      +                          DataByte(0x80);
 11047                           
 11048                           ;incstack = 0
 11049                           ; Regs used in _getMode: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11050  11E3  3080               	movlw	128
 11051  11E4  3192  2236         	fcall	_wireReadDataByte
 11052  11E6  00BF               	movwf	??_getMode
 11053  11E7  083F               	movf	??_getMode,w
 11054  11E8  00C0               	movwf	getMode@enable_value
 11055                           
 11056                           ;APDS9960.c: 193:     return enable_value;
 11057  11E9  0840               	movf	getMode@enable_value,w
 11058  11EA  0008               	return
 11059  11EB                     __end_of_getMode:
 11060                           
 11061                           	psect	text47
 11062  15A0                     __ptext47:	
 11063 ;; *************** function _setLightIntLowThreshold *****************
 11064 ;; Defined at:
 11065 ;;		line 1631 in file "APDS9960.c"
 11066 ;; Parameters:    Size  Location     Type
 11067 ;;  threshold       2   29[BANK0 ] unsigned short 
 11068 ;; Auto vars:     Size  Location     Type
 11069 ;;  val_high        1   33[BANK0 ] unsigned char 
 11070 ;;  val_low         1   32[BANK0 ] unsigned char 
 11071 ;; Return value:  Size  Location     Type
 11072 ;;                  1    wreg      _Bool 
 11073 ;; Registers used:
 11074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11075 ;; Tracked objects:
 11076 ;;		On entry : 1F/0
 11077 ;;		On exit  : 1F/0
 11078 ;;		Unchanged: 0/0
 11079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11080 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11081 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11083 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11084 ;;Total ram usage:        5 bytes
 11085 ;; Hardware stack levels used:    1
 11086 ;; Hardware stack levels required when called:   14
 11087 ;; This function calls:
 11088 ;;		_wireWriteDataByte
 11089 ;; This function is called by:
 11090 ;;		_APDS9960Init
 11091 ;; This function uses a non-reentrant model
 11092 ;;
 11093                           
 11094                           
 11095                           ;psect for function _setLightIntLowThreshold
 11096  15A0                     _setLightIntLowThreshold:
 11097                           
 11098                           ;APDS9960.c: 1631: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 1632: {
      +                          ;APDS9960.c: 1633:     uint8_t val_low;;APDS9960.c: 1634:     uint8_t val_high;;APDS9960
      +                          .c: 1637:     val_low = threshold & 0x00FF;
 11099                           
 11100                           ;incstack = 0
 11101                           ; Regs used in _setLightIntLowThreshold: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11102  15A0  083D               	movf	setLightIntLowThreshold@threshold,w
 11103  15A1  00BF               	movwf	??_setLightIntLowThreshold
 11104  15A2  083F               	movf	??_setLightIntLowThreshold,w
 11105  15A3  00C0               	movwf	setLightIntLowThreshold@val_low
 11106                           
 11107                           ;APDS9960.c: 1638:     val_high = (threshold & 0xFF00) >> 8;
 11108  15A4  083E               	movf	setLightIntLowThreshold@threshold+1,w
 11109  15A5  00BF               	movwf	??_setLightIntLowThreshold
 11110  15A6  083F               	movf	??_setLightIntLowThreshold,w
 11111  15A7  00C1               	movwf	setLightIntLowThreshold@val_high
 11112                           
 11113                           ;APDS9960.c: 1641:     if( !wireWriteDataByte(0x84, val_low) ) {
 11114  15A8  0840               	movf	setLightIntLowThreshold@val_low,w
 11115  15A9  00BF               	movwf	??_setLightIntLowThreshold
 11116  15AA  083F               	movf	??_setLightIntLowThreshold,w
 11117  15AB  00B9               	movwf	wireWriteDataByte@val
 11118  15AC  3084               	movlw	132
 11119  15AD  3192  2291  3195   	fcall	_wireWriteDataByte
 11120  15B0  3A00               	xorlw	0
 11121  15B1  1D03               	skipz
 11122  15B2  2DB5               	goto	l5475
 11123  15B3                     l5471:
 11124                           
 11125                           ;APDS9960.c: 1642:         return 0;
 11126  15B3  3000               	movlw	0
 11127  15B4  0008               	return
 11128  15B5                     l5475:
 11129                           
 11130                           ;APDS9960.c: 1646:     if( !wireWriteDataByte(0x85, val_high) ) {
 11131  15B5  0841               	movf	setLightIntLowThreshold@val_high,w
 11132  15B6  00BF               	movwf	??_setLightIntLowThreshold
 11133  15B7  083F               	movf	??_setLightIntLowThreshold,w
 11134  15B8  00B9               	movwf	wireWriteDataByte@val
 11135  15B9  3085               	movlw	133
 11136  15BA  3192  2291  3195   	fcall	_wireWriteDataByte
 11137  15BD  3A00               	xorlw	0
 11138  15BE  1903               	btfsc	3,2
 11139  15BF  2DB3               	goto	l5471
 11140                           
 11141                           ;APDS9960.c: 1650:     return 1;
 11142  15C0  3001               	movlw	1
 11143  15C1  0008               	return
 11144  15C2                     __end_of_setLightIntLowThreshold:
 11145                           
 11146                           	psect	text48
 11147  157E                     __ptext48:	
 11148 ;; *************** function _setLightIntHighThreshold *****************
 11149 ;; Defined at:
 11150 ;;		line 1681 in file "APDS9960.c"
 11151 ;; Parameters:    Size  Location     Type
 11152 ;;  threshold       2   29[BANK0 ] unsigned short 
 11153 ;; Auto vars:     Size  Location     Type
 11154 ;;  val_high        1   33[BANK0 ] unsigned char 
 11155 ;;  val_low         1   32[BANK0 ] unsigned char 
 11156 ;; Return value:  Size  Location     Type
 11157 ;;                  1    wreg      _Bool 
 11158 ;; Registers used:
 11159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11160 ;; Tracked objects:
 11161 ;;		On entry : 1F/0
 11162 ;;		On exit  : 1F/0
 11163 ;;		Unchanged: 0/0
 11164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11165 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11169 ;;Total ram usage:        5 bytes
 11170 ;; Hardware stack levels used:    1
 11171 ;; Hardware stack levels required when called:   14
 11172 ;; This function calls:
 11173 ;;		_wireWriteDataByte
 11174 ;; This function is called by:
 11175 ;;		_APDS9960Init
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           
 11180                           ;psect for function _setLightIntHighThreshold
 11181  157E                     _setLightIntHighThreshold:
 11182                           
 11183                           ;APDS9960.c: 1681: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 1682: 
      +                          {;APDS9960.c: 1683:     uint8_t val_low;;APDS9960.c: 1684:     uint8_t val_high;;APDS996
      +                          0.c: 1687:     val_low = threshold & 0x00FF;
 11184                           
 11185                           ;incstack = 0
 11186                           ; Regs used in _setLightIntHighThreshold: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11187  157E  083D               	movf	setLightIntHighThreshold@threshold,w
 11188  157F  00BF               	movwf	??_setLightIntHighThreshold
 11189  1580  083F               	movf	??_setLightIntHighThreshold,w
 11190  1581  00C0               	movwf	setLightIntHighThreshold@val_low
 11191                           
 11192                           ;APDS9960.c: 1688:     val_high = (threshold & 0xFF00) >> 8;
 11193  1582  083E               	movf	setLightIntHighThreshold@threshold+1,w
 11194  1583  00BF               	movwf	??_setLightIntHighThreshold
 11195  1584  083F               	movf	??_setLightIntHighThreshold,w
 11196  1585  00C1               	movwf	setLightIntHighThreshold@val_high
 11197                           
 11198                           ;APDS9960.c: 1691:     if( !wireWriteDataByte(0x86, val_low) ) {
 11199  1586  0840               	movf	setLightIntHighThreshold@val_low,w
 11200  1587  00BF               	movwf	??_setLightIntHighThreshold
 11201  1588  083F               	movf	??_setLightIntHighThreshold,w
 11202  1589  00B9               	movwf	wireWriteDataByte@val
 11203  158A  3086               	movlw	134
 11204  158B  3192  2291  3195   	fcall	_wireWriteDataByte
 11205  158E  3A00               	xorlw	0
 11206  158F  1D03               	skipz
 11207  1590  2D93               	goto	l5493
 11208  1591                     l5489:
 11209                           
 11210                           ;APDS9960.c: 1692:         return 0;
 11211  1591  3000               	movlw	0
 11212  1592  0008               	return
 11213  1593                     l5493:
 11214                           
 11215                           ;APDS9960.c: 1696:     if( !wireWriteDataByte(0x87, val_high) ) {
 11216  1593  0841               	movf	setLightIntHighThreshold@val_high,w
 11217  1594  00BF               	movwf	??_setLightIntHighThreshold
 11218  1595  083F               	movf	??_setLightIntHighThreshold,w
 11219  1596  00B9               	movwf	wireWriteDataByte@val
 11220  1597  3087               	movlw	135
 11221  1598  3192  2291  3195   	fcall	_wireWriteDataByte
 11222  159B  3A00               	xorlw	0
 11223  159C  1903               	btfsc	3,2
 11224  159D  2D91               	goto	l5489
 11225                           
 11226                           ;APDS9960.c: 1700:     return 1;
 11227  159E  3001               	movlw	1
 11228  159F  0008               	return
 11229  15A0                     __end_of_setLightIntHighThreshold:
 11230                           
 11231                           	psect	text49
 11232  16E4                     __ptext49:	
 11233 ;; *************** function _setLEDDrive *****************
 11234 ;; Defined at:
 11235 ;;		line 1070 in file "APDS9960.c"
 11236 ;; Parameters:    Size  Location     Type
 11237 ;;  drive           1    wreg     unsigned char 
 11238 ;; Auto vars:     Size  Location     Type
 11239 ;;  drive           1   34[BANK0 ] unsigned char 
 11240 ;;  val             1   33[BANK0 ] unsigned char 
 11241 ;; Return value:  Size  Location     Type
 11242 ;;                  1    wreg      _Bool 
 11243 ;; Registers used:
 11244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11245 ;; Tracked objects:
 11246 ;;		On entry : 1F/0
 11247 ;;		On exit  : 1F/0
 11248 ;;		Unchanged: 0/0
 11249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11254 ;;Total ram usage:        4 bytes
 11255 ;; Hardware stack levels used:    1
 11256 ;; Hardware stack levels required when called:   14
 11257 ;; This function calls:
 11258 ;;		_wireReadDataByte
 11259 ;;		_wireWriteDataByte
 11260 ;; This function is called by:
 11261 ;;		_APDS9960Init
 11262 ;;		_enableProximitySensor
 11263 ;; This function uses a non-reentrant model
 11264 ;;
 11265                           
 11266                           
 11267                           ;psect for function _setLEDDrive
 11268  16E4                     _setLEDDrive:
 11269                           
 11270                           ;incstack = 0
 11271                           ; Regs used in _setLEDDrive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11272                           ;setLEDDrive@drive stored from wreg
 11273  16E4  00C2               	movwf	setLEDDrive@drive
 11274                           
 11275                           ;APDS9960.c: 1070: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 1071: {;APDS9960.c: 1072
      +                          :     uint8_t val;;APDS9960.c: 1075:     val = wireReadDataByte(0x8F);
 11276  16E5  308F               	movlw	143
 11277  16E6  3192  2236  3196   	fcall	_wireReadDataByte
 11278  16E9  00BF               	movwf	??_setLEDDrive
 11279  16EA  083F               	movf	??_setLEDDrive,w
 11280  16EB  00C1               	movwf	setLEDDrive@val
 11281                           
 11282                           ;APDS9960.c: 1078:     drive &= 0b00000011;
 11283  16EC  3003               	movlw	3
 11284  16ED  00BF               	movwf	??_setLEDDrive
 11285  16EE  083F               	movf	??_setLEDDrive,w
 11286  16EF  05C2               	andwf	setLEDDrive@drive,f
 11287                           
 11288                           ;APDS9960.c: 1079:     drive = drive << 6;
 11289  16F0  0842               	movf	setLEDDrive@drive,w
 11290  16F1  00BF               	movwf	??_setLEDDrive
 11291  16F2  3005               	movlw	5
 11292  16F3                     u3085:
 11293  16F3  35BF               	lslf	??_setLEDDrive,f
 11294  16F4  3EFF               	addlw	-1
 11295  16F5  1D03               	skipz
 11296  16F6  2EF3               	goto	u3085
 11297  16F7  353F               	lslf	??_setLEDDrive,w
 11298  16F8  00C0               	movwf	??_setLEDDrive+1
 11299  16F9  0840               	movf	??_setLEDDrive+1,w
 11300  16FA  00C2               	movwf	setLEDDrive@drive
 11301                           
 11302                           ;APDS9960.c: 1080:     val &= 0b00111111;
 11303  16FB  303F               	movlw	63
 11304  16FC  00BF               	movwf	??_setLEDDrive
 11305  16FD  083F               	movf	??_setLEDDrive,w
 11306  16FE  05C1               	andwf	setLEDDrive@val,f
 11307                           
 11308                           ;APDS9960.c: 1081:     val |= drive;
 11309  16FF  0842               	movf	setLEDDrive@drive,w
 11310  1700  00BF               	movwf	??_setLEDDrive
 11311  1701  083F               	movf	??_setLEDDrive,w
 11312  1702  04C1               	iorwf	setLEDDrive@val,f
 11313                           
 11314                           ;APDS9960.c: 1084:     if( !wireWriteDataByte(0x8F, val) ) {
 11315  1703  0841               	movf	setLEDDrive@val,w
 11316  1704  00BF               	movwf	??_setLEDDrive
 11317  1705  083F               	movf	??_setLEDDrive,w
 11318  1706  00B9               	movwf	wireWriteDataByte@val
 11319  1707  308F               	movlw	143
 11320  1708  3192  2291  3196   	fcall	_wireWriteDataByte
 11321  170B  3A00               	xorlw	0
 11322  170C  1D03               	skipz
 11323  170D  2F10               	goto	l5407
 11324                           
 11325                           ;APDS9960.c: 1085:         return 0;
 11326  170E  3000               	movlw	0
 11327  170F  0008               	return
 11328  1710                     l5407:
 11329                           
 11330                           ;APDS9960.c: 1088:     return 1;
 11331  1710  3001               	movlw	1
 11332  1711  0008               	return
 11333  1712                     __end_of_setLEDDrive:
 11334                           
 11335                           	psect	text50
 11336  15E5                     __ptext50:	
 11337 ;; *************** function _setGestureWaitTime *****************
 11338 ;; Defined at:
 11339 ;;		line 1583 in file "APDS9960.c"
 11340 ;; Parameters:    Size  Location     Type
 11341 ;;  time            1    wreg     unsigned char 
 11342 ;; Auto vars:     Size  Location     Type
 11343 ;;  time            1   32[BANK0 ] unsigned char 
 11344 ;;  val             1   33[BANK0 ] unsigned char 
 11345 ;; Return value:  Size  Location     Type
 11346 ;;                  1    wreg      _Bool 
 11347 ;; Registers used:
 11348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11349 ;; Tracked objects:
 11350 ;;		On entry : 1F/0
 11351 ;;		On exit  : 1F/0
 11352 ;;		Unchanged: 0/0
 11353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11355 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;Total ram usage:        3 bytes
 11359 ;; Hardware stack levels used:    1
 11360 ;; Hardware stack levels required when called:   14
 11361 ;; This function calls:
 11362 ;;		_wireReadDataByte
 11363 ;;		_wireWriteDataByte
 11364 ;; This function is called by:
 11365 ;;		_APDS9960Init
 11366 ;; This function uses a non-reentrant model
 11367 ;;
 11368                           
 11369                           
 11370                           ;psect for function _setGestureWaitTime
 11371  15E5                     _setGestureWaitTime:
 11372                           
 11373                           ;incstack = 0
 11374                           ; Regs used in _setGestureWaitTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11375                           ;setGestureWaitTime@time stored from wreg
 11376  15E5  00C0               	movwf	setGestureWaitTime@time
 11377                           
 11378                           ;APDS9960.c: 1583: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 1584: {;APDS9960.c
      +                          : 1585:     uint8_t val;;APDS9960.c: 1588:     val = wireReadDataByte(0xA3);
 11379  15E6  30A3               	movlw	163
 11380  15E7  3192  2236  3195   	fcall	_wireReadDataByte
 11381  15EA  00BF               	movwf	??_setGestureWaitTime
 11382  15EB  083F               	movf	??_setGestureWaitTime,w
 11383  15EC  00C1               	movwf	setGestureWaitTime@val
 11384                           
 11385                           ;APDS9960.c: 1591:     time &= 0b00000111;
 11386  15ED  3007               	movlw	7
 11387  15EE  00BF               	movwf	??_setGestureWaitTime
 11388  15EF  083F               	movf	??_setGestureWaitTime,w
 11389  15F0  05C0               	andwf	setGestureWaitTime@time,f
 11390                           
 11391                           ;APDS9960.c: 1592:     val &= 0b11111000;
 11392  15F1  30F8               	movlw	248
 11393  15F2  00BF               	movwf	??_setGestureWaitTime
 11394  15F3  083F               	movf	??_setGestureWaitTime,w
 11395  15F4  05C1               	andwf	setGestureWaitTime@val,f
 11396                           
 11397                           ;APDS9960.c: 1593:     val |= time;
 11398  15F5  0840               	movf	setGestureWaitTime@time,w
 11399  15F6  00BF               	movwf	??_setGestureWaitTime
 11400  15F7  083F               	movf	??_setGestureWaitTime,w
 11401  15F8  04C1               	iorwf	setGestureWaitTime@val,f
 11402                           
 11403                           ;APDS9960.c: 1596:     if( !wireWriteDataByte(0xA3, val) ) {
 11404  15F9  0841               	movf	setGestureWaitTime@val,w
 11405  15FA  00BF               	movwf	??_setGestureWaitTime
 11406  15FB  083F               	movf	??_setGestureWaitTime,w
 11407  15FC  00B9               	movwf	wireWriteDataByte@val
 11408  15FD  30A3               	movlw	163
 11409  15FE  3192  2291  3195   	fcall	_wireWriteDataByte
 11410  1601  3A00               	xorlw	0
 11411  1602  1D03               	skipz
 11412  1603  2E06               	goto	l5573
 11413                           
 11414                           ;APDS9960.c: 1597:         return 0;
 11415  1604  3000               	movlw	0
 11416  1605  0008               	return
 11417  1606                     l5573:
 11418                           
 11419                           ;APDS9960.c: 1600:     return 1;
 11420  1606  3001               	movlw	1
 11421  1607  0008               	return
 11422  1608                     __end_of_setGestureWaitTime:
 11423                           
 11424                           	psect	text51
 11425  16B6                     __ptext51:	
 11426 ;; *************** function _setGestureLEDDrive *****************
 11427 ;; Defined at:
 11428 ;;		line 1518 in file "APDS9960.c"
 11429 ;; Parameters:    Size  Location     Type
 11430 ;;  drive           1    wreg     unsigned char 
 11431 ;; Auto vars:     Size  Location     Type
 11432 ;;  drive           1   34[BANK0 ] unsigned char 
 11433 ;;  val             1   33[BANK0 ] unsigned char 
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  1    wreg      _Bool 
 11436 ;; Registers used:
 11437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11438 ;; Tracked objects:
 11439 ;;		On entry : 1F/0
 11440 ;;		On exit  : 1F/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11445 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11446 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11447 ;;Total ram usage:        4 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:   14
 11450 ;; This function calls:
 11451 ;;		_wireReadDataByte
 11452 ;;		_wireWriteDataByte
 11453 ;; This function is called by:
 11454 ;;		_APDS9960Init
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           
 11459                           ;psect for function _setGestureLEDDrive
 11460  16B6                     _setGestureLEDDrive:
 11461                           
 11462                           ;incstack = 0
 11463                           ; Regs used in _setGestureLEDDrive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11464                           ;setGestureLEDDrive@drive stored from wreg
 11465  16B6  00C2               	movwf	setGestureLEDDrive@drive
 11466                           
 11467                           ;APDS9960.c: 1518: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 1519: {;APDS9960.
      +                          c: 1520:     uint8_t val;;APDS9960.c: 1523:     val = wireReadDataByte(0xA3);
 11468  16B7  30A3               	movlw	163
 11469  16B8  3192  2236  3196   	fcall	_wireReadDataByte
 11470  16BB  00BF               	movwf	??_setGestureLEDDrive
 11471  16BC  083F               	movf	??_setGestureLEDDrive,w
 11472  16BD  00C1               	movwf	setGestureLEDDrive@val
 11473                           
 11474                           ;APDS9960.c: 1526:     drive &= 0b00000011;
 11475  16BE  3003               	movlw	3
 11476  16BF  00BF               	movwf	??_setGestureLEDDrive
 11477  16C0  083F               	movf	??_setGestureLEDDrive,w
 11478  16C1  05C2               	andwf	setGestureLEDDrive@drive,f
 11479                           
 11480                           ;APDS9960.c: 1527:     drive = drive << 3;
 11481  16C2  0842               	movf	setGestureLEDDrive@drive,w
 11482  16C3  00BF               	movwf	??_setGestureLEDDrive
 11483  16C4  3002               	movlw	2
 11484  16C5                     u3235:
 11485  16C5  35BF               	lslf	??_setGestureLEDDrive,f
 11486  16C6  3EFF               	addlw	-1
 11487  16C7  1D03               	skipz
 11488  16C8  2EC5               	goto	u3235
 11489  16C9  353F               	lslf	??_setGestureLEDDrive,w
 11490  16CA  00C0               	movwf	??_setGestureLEDDrive+1
 11491  16CB  0840               	movf	??_setGestureLEDDrive+1,w
 11492  16CC  00C2               	movwf	setGestureLEDDrive@drive
 11493                           
 11494                           ;APDS9960.c: 1528:     val &= 0b11100111;
 11495  16CD  30E7               	movlw	231
 11496  16CE  00BF               	movwf	??_setGestureLEDDrive
 11497  16CF  083F               	movf	??_setGestureLEDDrive,w
 11498  16D0  05C1               	andwf	setGestureLEDDrive@val,f
 11499                           
 11500                           ;APDS9960.c: 1529:     val |= drive;
 11501  16D1  0842               	movf	setGestureLEDDrive@drive,w
 11502  16D2  00BF               	movwf	??_setGestureLEDDrive
 11503  16D3  083F               	movf	??_setGestureLEDDrive,w
 11504  16D4  04C1               	iorwf	setGestureLEDDrive@val,f
 11505                           
 11506                           ;APDS9960.c: 1532:     if( !wireWriteDataByte(0xA3, val) ) {
 11507  16D5  0841               	movf	setGestureLEDDrive@val,w
 11508  16D6  00BF               	movwf	??_setGestureLEDDrive
 11509  16D7  083F               	movf	??_setGestureLEDDrive,w
 11510  16D8  00B9               	movwf	wireWriteDataByte@val
 11511  16D9  30A3               	movlw	163
 11512  16DA  3192  2291  3196   	fcall	_wireWriteDataByte
 11513  16DD  3A00               	xorlw	0
 11514  16DE  1D03               	skipz
 11515  16DF  2EE2               	goto	l5555
 11516                           
 11517                           ;APDS9960.c: 1533:         return 0;
 11518  16E0  3000               	movlw	0
 11519  16E1  0008               	return
 11520  16E2                     l5555:
 11521                           
 11522                           ;APDS9960.c: 1536:     return 1;
 11523  16E2  3001               	movlw	1
 11524  16E3  0008               	return
 11525  16E4                     __end_of_setGestureLEDDrive:
 11526                           
 11527                           	psect	text52
 11528  1608                     __ptext52:	
 11529 ;; *************** function _setGestureIntEnable *****************
 11530 ;; Defined at:
 11531 ;;		line 1883 in file "APDS9960.c"
 11532 ;; Parameters:    Size  Location     Type
 11533 ;;  enable          1    wreg     unsigned char 
 11534 ;; Auto vars:     Size  Location     Type
 11535 ;;  enable          1   33[BANK0 ] unsigned char 
 11536 ;;  val             1   32[BANK0 ] unsigned char 
 11537 ;; Return value:  Size  Location     Type
 11538 ;;                  1    wreg      _Bool 
 11539 ;; Registers used:
 11540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11541 ;; Tracked objects:
 11542 ;;		On entry : 1F/0
 11543 ;;		On exit  : 1F/0
 11544 ;;		Unchanged: 0/0
 11545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;Total ram usage:        3 bytes
 11551 ;; Hardware stack levels used:    1
 11552 ;; Hardware stack levels required when called:   14
 11553 ;; This function calls:
 11554 ;;		_wireReadDataByte
 11555 ;;		_wireWriteDataByte
 11556 ;; This function is called by:
 11557 ;;		_APDS9960Init
 11558 ;; This function uses a non-reentrant model
 11559 ;;
 11560                           
 11561                           
 11562                           ;psect for function _setGestureIntEnable
 11563  1608                     _setGestureIntEnable:
 11564                           
 11565                           ;incstack = 0
 11566                           ; Regs used in _setGestureIntEnable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11567                           ;setGestureIntEnable@enable stored from wreg
 11568  1608  00C1               	movwf	setGestureIntEnable@enable
 11569                           
 11570                           ;APDS9960.c: 1883: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 1884: {;APDS996
      +                          0.c: 1885:     uint8_t val;;APDS9960.c: 1888:     val = wireReadDataByte(0xAB);
 11571  1609  30AB               	movlw	171
 11572  160A  3192  2236  3196   	fcall	_wireReadDataByte
 11573  160D  00BF               	movwf	??_setGestureIntEnable
 11574  160E  083F               	movf	??_setGestureIntEnable,w
 11575  160F  00C0               	movwf	setGestureIntEnable@val
 11576                           
 11577                           ;APDS9960.c: 1891:     enable &= 0b00000001;
 11578  1610  3001               	movlw	1
 11579  1611  00BF               	movwf	??_setGestureIntEnable
 11580  1612  083F               	movf	??_setGestureIntEnable,w
 11581  1613  05C1               	andwf	setGestureIntEnable@enable,f
 11582                           
 11583                           ;APDS9960.c: 1892:     enable = enable << 1;
 11584  1614  3541               	lslf	setGestureIntEnable@enable,w
 11585  1615  00BF               	movwf	??_setGestureIntEnable
 11586  1616  083F               	movf	??_setGestureIntEnable,w
 11587  1617  00C1               	movwf	setGestureIntEnable@enable
 11588                           
 11589                           ;APDS9960.c: 1893:     val &= 0b11111101;
 11590  1618  30FD               	movlw	253
 11591  1619  00BF               	movwf	??_setGestureIntEnable
 11592  161A  083F               	movf	??_setGestureIntEnable,w
 11593  161B  05C0               	andwf	setGestureIntEnable@val,f
 11594                           
 11595                           ;APDS9960.c: 1894:     val |= enable;
 11596  161C  0841               	movf	setGestureIntEnable@enable,w
 11597  161D  00BF               	movwf	??_setGestureIntEnable
 11598  161E  083F               	movf	??_setGestureIntEnable,w
 11599  161F  04C0               	iorwf	setGestureIntEnable@val,f
 11600                           
 11601                           ;APDS9960.c: 1897:     if( !wireWriteDataByte(0xAB, val) ) {
 11602  1620  0840               	movf	setGestureIntEnable@val,w
 11603  1621  00BF               	movwf	??_setGestureIntEnable
 11604  1622  083F               	movf	??_setGestureIntEnable,w
 11605  1623  00B9               	movwf	wireWriteDataByte@val
 11606  1624  30AB               	movlw	171
 11607  1625  3192  2291  3196   	fcall	_wireWriteDataByte
 11608  1628  3A00               	xorlw	0
 11609  1629  1D03               	skipz
 11610  162A  2E2D               	goto	l5591
 11611                           
 11612                           ;APDS9960.c: 1898:         return 0;
 11613  162B  3000               	movlw	0
 11614  162C  0008               	return
 11615  162D                     l5591:
 11616                           
 11617                           ;APDS9960.c: 1901:     return 1;
 11618  162D  3001               	movlw	1
 11619  162E  0008               	return
 11620  162F                     __end_of_setGestureIntEnable:
 11621                           
 11622                           	psect	text53
 11623  1688                     __ptext53:	
 11624 ;; *************** function _setGestureGain *****************
 11625 ;; Defined at:
 11626 ;;		line 1461 in file "APDS9960.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;  gain            1    wreg     unsigned char 
 11629 ;; Auto vars:     Size  Location     Type
 11630 ;;  gain            1   34[BANK0 ] unsigned char 
 11631 ;;  val             1   33[BANK0 ] unsigned char 
 11632 ;; Return value:  Size  Location     Type
 11633 ;;                  1    wreg      _Bool 
 11634 ;; Registers used:
 11635 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11636 ;; Tracked objects:
 11637 ;;		On entry : 1F/0
 11638 ;;		On exit  : 1F/0
 11639 ;;		Unchanged: 0/0
 11640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;Total ram usage:        4 bytes
 11646 ;; Hardware stack levels used:    1
 11647 ;; Hardware stack levels required when called:   14
 11648 ;; This function calls:
 11649 ;;		_wireReadDataByte
 11650 ;;		_wireWriteDataByte
 11651 ;; This function is called by:
 11652 ;;		_APDS9960Init
 11653 ;; This function uses a non-reentrant model
 11654 ;;
 11655                           
 11656                           
 11657                           ;psect for function _setGestureGain
 11658  1688                     _setGestureGain:
 11659                           
 11660                           ;incstack = 0
 11661                           ; Regs used in _setGestureGain: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11662                           ;setGestureGain@gain stored from wreg
 11663  1688  00C2               	movwf	setGestureGain@gain
 11664                           
 11665                           ;APDS9960.c: 1461: _Bool setGestureGain(uint8_t gain);APDS9960.c: 1462: {;APDS9960.c: 14
      +                          63:     uint8_t val;;APDS9960.c: 1466:     val = wireReadDataByte(0xA3);
 11666  1689  30A3               	movlw	163
 11667  168A  3192  2236  3196   	fcall	_wireReadDataByte
 11668  168D  00BF               	movwf	??_setGestureGain
 11669  168E  083F               	movf	??_setGestureGain,w
 11670  168F  00C1               	movwf	setGestureGain@val
 11671                           
 11672                           ;APDS9960.c: 1469:     gain &= 0b00000011;
 11673  1690  3003               	movlw	3
 11674  1691  00BF               	movwf	??_setGestureGain
 11675  1692  083F               	movf	??_setGestureGain,w
 11676  1693  05C2               	andwf	setGestureGain@gain,f
 11677                           
 11678                           ;APDS9960.c: 1470:     gain = gain << 5;
 11679  1694  0842               	movf	setGestureGain@gain,w
 11680  1695  00BF               	movwf	??_setGestureGain
 11681  1696  3004               	movlw	4
 11682  1697                     u3215:
 11683  1697  35BF               	lslf	??_setGestureGain,f
 11684  1698  3EFF               	addlw	-1
 11685  1699  1D03               	skipz
 11686  169A  2E97               	goto	u3215
 11687  169B  353F               	lslf	??_setGestureGain,w
 11688  169C  00C0               	movwf	??_setGestureGain+1
 11689  169D  0840               	movf	??_setGestureGain+1,w
 11690  169E  00C2               	movwf	setGestureGain@gain
 11691                           
 11692                           ;APDS9960.c: 1471:     val &= 0b10011111;
 11693  169F  309F               	movlw	159
 11694  16A0  00BF               	movwf	??_setGestureGain
 11695  16A1  083F               	movf	??_setGestureGain,w
 11696  16A2  05C1               	andwf	setGestureGain@val,f
 11697                           
 11698                           ;APDS9960.c: 1472:     val |= gain;
 11699  16A3  0842               	movf	setGestureGain@gain,w
 11700  16A4  00BF               	movwf	??_setGestureGain
 11701  16A5  083F               	movf	??_setGestureGain,w
 11702  16A6  04C1               	iorwf	setGestureGain@val,f
 11703                           
 11704                           ;APDS9960.c: 1475:     if( !wireWriteDataByte(0xA3, val) ) {
 11705  16A7  0841               	movf	setGestureGain@val,w
 11706  16A8  00BF               	movwf	??_setGestureGain
 11707  16A9  083F               	movf	??_setGestureGain,w
 11708  16AA  00B9               	movwf	wireWriteDataByte@val
 11709  16AB  30A3               	movlw	163
 11710  16AC  3192  2291  3196   	fcall	_wireWriteDataByte
 11711  16AF  3A00               	xorlw	0
 11712  16B0  1D03               	skipz
 11713  16B1  2EB4               	goto	l5537
 11714                           
 11715                           ;APDS9960.c: 1476:         return 0;
 11716  16B2  3000               	movlw	0
 11717  16B3  0008               	return
 11718  16B4                     l5537:
 11719                           
 11720                           ;APDS9960.c: 1479:     return 1;
 11721  16B4  3001               	movlw	1
 11722  16B5  0008               	return
 11723  16B6                     __end_of_setGestureGain:
 11724                           
 11725                           	psect	text54
 11726  12BE                     __ptext54:	
 11727 ;; *************** function _setGestureExitThresh *****************
 11728 ;; Defined at:
 11729 ;;		line 1416 in file "APDS9960.c"
 11730 ;; Parameters:    Size  Location     Type
 11731 ;;  threshold       1    wreg     unsigned char 
 11732 ;; Auto vars:     Size  Location     Type
 11733 ;;  threshold       1   30[BANK0 ] unsigned char 
 11734 ;; Return value:  Size  Location     Type
 11735 ;;                  1    wreg      _Bool 
 11736 ;; Registers used:
 11737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11738 ;; Tracked objects:
 11739 ;;		On entry : 1F/0
 11740 ;;		On exit  : 1F/0
 11741 ;;		Unchanged: 0/0
 11742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11747 ;;Total ram usage:        2 bytes
 11748 ;; Hardware stack levels used:    1
 11749 ;; Hardware stack levels required when called:   14
 11750 ;; This function calls:
 11751 ;;		_wireWriteDataByte
 11752 ;; This function is called by:
 11753 ;;		_APDS9960Init
 11754 ;; This function uses a non-reentrant model
 11755 ;;
 11756                           
 11757                           
 11758                           ;psect for function _setGestureExitThresh
 11759  12BE                     _setGestureExitThresh:
 11760                           
 11761                           ;incstack = 0
 11762                           ; Regs used in _setGestureExitThresh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11763                           ;setGestureExitThresh@threshold stored from wreg
 11764  12BE  00BE               	movwf	setGestureExitThresh@threshold
 11765                           
 11766                           ;APDS9960.c: 1416: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 1417: {;APD
      +                          S9960.c: 1418:     if( !wireWriteDataByte(0xA1, threshold) ) {
 11767  12BF  083E               	movf	setGestureExitThresh@threshold,w
 11768  12C0  00BD               	movwf	??_setGestureExitThresh
 11769  12C1  083D               	movf	??_setGestureExitThresh,w
 11770  12C2  00B9               	movwf	wireWriteDataByte@val
 11771  12C3  30A1               	movlw	161
 11772  12C4  3192  2291  3192   	fcall	_wireWriteDataByte
 11773  12C7  3A00               	xorlw	0
 11774  12C8  1D03               	skipz
 11775  12C9  2ACC               	goto	l5519
 11776                           
 11777                           ;APDS9960.c: 1419:         return 0;
 11778  12CA  3000               	movlw	0
 11779  12CB  0008               	return
 11780  12CC                     l5519:
 11781                           
 11782                           ;APDS9960.c: 1422:     return 1;
 11783  12CC  3001               	movlw	1
 11784  12CD  0008               	return
 11785  12CE                     __end_of_setGestureExitThresh:
 11786                           
 11787                           	psect	text55
 11788  12AE                     __ptext55:	
 11789 ;; *************** function _setGestureEnterThresh *****************
 11790 ;; Defined at:
 11791 ;;		line 1386 in file "APDS9960.c"
 11792 ;; Parameters:    Size  Location     Type
 11793 ;;  threshold       1    wreg     unsigned char 
 11794 ;; Auto vars:     Size  Location     Type
 11795 ;;  threshold       1   30[BANK0 ] unsigned char 
 11796 ;; Return value:  Size  Location     Type
 11797 ;;                  1    wreg      _Bool 
 11798 ;; Registers used:
 11799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11800 ;; Tracked objects:
 11801 ;;		On entry : 1F/0
 11802 ;;		On exit  : 1F/0
 11803 ;;		Unchanged: 0/0
 11804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;Total ram usage:        2 bytes
 11810 ;; Hardware stack levels used:    1
 11811 ;; Hardware stack levels required when called:   14
 11812 ;; This function calls:
 11813 ;;		_wireWriteDataByte
 11814 ;; This function is called by:
 11815 ;;		_APDS9960Init
 11816 ;; This function uses a non-reentrant model
 11817 ;;
 11818                           
 11819                           
 11820                           ;psect for function _setGestureEnterThresh
 11821  12AE                     _setGestureEnterThresh:
 11822                           
 11823                           ;incstack = 0
 11824                           ; Regs used in _setGestureEnterThresh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11825                           ;setGestureEnterThresh@threshold stored from wreg
 11826  12AE  00BE               	movwf	setGestureEnterThresh@threshold
 11827                           
 11828                           ;APDS9960.c: 1386: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 1387: {;AP
      +                          DS9960.c: 1388:     if( !wireWriteDataByte(0xA0, threshold) ) {
 11829  12AF  083E               	movf	setGestureEnterThresh@threshold,w
 11830  12B0  00BD               	movwf	??_setGestureEnterThresh
 11831  12B1  083D               	movf	??_setGestureEnterThresh,w
 11832  12B2  00B9               	movwf	wireWriteDataByte@val
 11833  12B3  30A0               	movlw	160
 11834  12B4  3192  2291  3192   	fcall	_wireWriteDataByte
 11835  12B7  3A00               	xorlw	0
 11836  12B8  1D03               	skipz
 11837  12B9  2ABC               	goto	l5509
 11838                           
 11839                           ;APDS9960.c: 1389:         return 0;
 11840  12BA  3000               	movlw	0
 11841  12BB  0008               	return
 11842  12BC                     l5509:
 11843                           
 11844                           ;APDS9960.c: 1392:     return 1;
 11845  12BC  3001               	movlw	1
 11846  12BD  0008               	return
 11847  12BE                     __end_of_setGestureEnterThresh:
 11848                           
 11849                           	psect	text56
 11850  15C2                     __ptext56:	
 11851 ;; *************** function _setAmbientLightGain *****************
 11852 ;; Defined at:
 11853 ;;		line 1184 in file "APDS9960.c"
 11854 ;; Parameters:    Size  Location     Type
 11855 ;;  drive           1    wreg     unsigned char 
 11856 ;; Auto vars:     Size  Location     Type
 11857 ;;  drive           1   32[BANK0 ] unsigned char 
 11858 ;;  val             1   33[BANK0 ] unsigned char 
 11859 ;; Return value:  Size  Location     Type
 11860 ;;                  1    wreg      _Bool 
 11861 ;; Registers used:
 11862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11863 ;; Tracked objects:
 11864 ;;		On entry : 1F/0
 11865 ;;		On exit  : 1F/0
 11866 ;;		Unchanged: 0/0
 11867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;Total ram usage:        3 bytes
 11873 ;; Hardware stack levels used:    1
 11874 ;; Hardware stack levels required when called:   14
 11875 ;; This function calls:
 11876 ;;		_wireReadDataByte
 11877 ;;		_wireWriteDataByte
 11878 ;; This function is called by:
 11879 ;;		_APDS9960Init
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           
 11884                           ;psect for function _setAmbientLightGain
 11885  15C2                     _setAmbientLightGain:
 11886                           
 11887                           ;incstack = 0
 11888                           ; Regs used in _setAmbientLightGain: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11889                           ;setAmbientLightGain@drive stored from wreg
 11890  15C2  00C0               	movwf	setAmbientLightGain@drive
 11891                           
 11892                           ;APDS9960.c: 1184: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 1185: {;APDS9960
      +                          .c: 1186:     uint8_t val;;APDS9960.c: 1189:     val = wireReadDataByte(0x8F);
 11893  15C3  308F               	movlw	143
 11894  15C4  3192  2236  3195   	fcall	_wireReadDataByte
 11895  15C7  00BF               	movwf	??_setAmbientLightGain
 11896  15C8  083F               	movf	??_setAmbientLightGain,w
 11897  15C9  00C1               	movwf	setAmbientLightGain@val
 11898                           
 11899                           ;APDS9960.c: 1192:     drive &= 0b00000011;
 11900  15CA  3003               	movlw	3
 11901  15CB  00BF               	movwf	??_setAmbientLightGain
 11902  15CC  083F               	movf	??_setAmbientLightGain,w
 11903  15CD  05C0               	andwf	setAmbientLightGain@drive,f
 11904                           
 11905                           ;APDS9960.c: 1193:     val &= 0b11111100;
 11906  15CE  30FC               	movlw	252
 11907  15CF  00BF               	movwf	??_setAmbientLightGain
 11908  15D0  083F               	movf	??_setAmbientLightGain,w
 11909  15D1  05C1               	andwf	setAmbientLightGain@val,f
 11910                           
 11911                           ;APDS9960.c: 1194:     val |= drive;
 11912  15D2  0840               	movf	setAmbientLightGain@drive,w
 11913  15D3  00BF               	movwf	??_setAmbientLightGain
 11914  15D4  083F               	movf	??_setAmbientLightGain,w
 11915  15D5  04C1               	iorwf	setAmbientLightGain@val,f
 11916                           
 11917                           ;APDS9960.c: 1197:     if( !wireWriteDataByte(0x8F, val) ) {
 11918  15D6  0841               	movf	setAmbientLightGain@val,w
 11919  15D7  00BF               	movwf	??_setAmbientLightGain
 11920  15D8  083F               	movf	??_setAmbientLightGain,w
 11921  15D9  00B9               	movwf	wireWriteDataByte@val
 11922  15DA  308F               	movlw	143
 11923  15DB  3192  2291  3195   	fcall	_wireWriteDataByte
 11924  15DE  3A00               	xorlw	0
 11925  15DF  1D03               	skipz
 11926  15E0  2DE3               	goto	l5443
 11927                           
 11928                           ;APDS9960.c: 1198:         return 0;
 11929  15E1  3000               	movlw	0
 11930  15E2  0008               	return
 11931  15E3                     l5443:
 11932                           
 11933                           ;APDS9960.c: 1201:     return 1;
 11934  15E3  3001               	movlw	1
 11935  15E4  0008               	return
 11936  15E5                     __end_of_setAmbientLightGain:
 11937                           
 11938                           	psect	text57
 11939  1291                     __ptext57:	
 11940 ;; *************** function _wireWriteDataByte *****************
 11941 ;; Defined at:
 11942 ;;		line 1997 in file "APDS9960.c"
 11943 ;; Parameters:    Size  Location     Type
 11944 ;;  reg             1    wreg     unsigned char 
 11945 ;;  val             1   25[BANK0 ] unsigned char 
 11946 ;; Auto vars:     Size  Location     Type
 11947 ;;  reg             1   28[BANK0 ] unsigned char 
 11948 ;; Return value:  Size  Location     Type
 11949 ;;                  1    wreg      _Bool 
 11950 ;; Registers used:
 11951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11952 ;; Tracked objects:
 11953 ;;		On entry : 1F/0
 11954 ;;		On exit  : 1F/0
 11955 ;;		Unchanged: 0/0
 11956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11957 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11960 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11961 ;;Total ram usage:        4 bytes
 11962 ;; Hardware stack levels used:    1
 11963 ;; Hardware stack levels required when called:   13
 11964 ;; This function calls:
 11965 ;;		_i2c_write1ByteRegister
 11966 ;; This function is called by:
 11967 ;;		_APDS9960Init
 11968 ;;		_setMode
 11969 ;;		_setProxIntLowThresh
 11970 ;;		_setProxIntHighThresh
 11971 ;;		_setLEDDrive
 11972 ;;		_setProximityGain
 11973 ;;		_setAmbientLightGain
 11974 ;;		_setGestureEnterThresh
 11975 ;;		_setGestureExitThresh
 11976 ;;		_setGestureGain
 11977 ;;		_setGestureLEDDrive
 11978 ;;		_setGestureWaitTime
 11979 ;;		_setLightIntLowThreshold
 11980 ;;		_setLightIntHighThreshold
 11981 ;;		_setProximityIntEnable
 11982 ;;		_setGestureIntEnable
 11983 ;; This function uses a non-reentrant model
 11984 ;;
 11985                           
 11986                           
 11987                           ;psect for function _wireWriteDataByte
 11988  1291                     _wireWriteDataByte:
 11989                           
 11990                           ;incstack = 0
 11991                           ; Regs used in _wireWriteDataByte: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11992                           ;wireWriteDataByte@reg stored from wreg
 11993  1291  00BC               	movwf	wireWriteDataByte@reg
 11994                           
 11995                           ;APDS9960.c: 1997: _Bool wireWriteDataByte(uint8_t reg, uint8_t val);APDS9960.c: 1998: {
      +                          ;APDS9960.c: 1999:     i2c_write1ByteRegister(0x39,reg,val);
 11996  1292  083C               	movf	wireWriteDataByte@reg,w
 11997  1293  00BA               	movwf	??_wireWriteDataByte
 11998  1294  083A               	movf	??_wireWriteDataByte,w
 11999  1295  00B6               	movwf	i2c_write1ByteRegister@reg
 12000  1296  0839               	movf	wireWriteDataByte@val,w
 12001  1297  00BB               	movwf	??_wireWriteDataByte+1
 12002  1298  083B               	movf	??_wireWriteDataByte+1,w
 12003  1299  00B7               	movwf	i2c_write1ByteRegister@data
 12004  129A  3039               	movlw	57
 12005  129B  3197  276E         	fcall	_i2c_write1ByteRegister
 12006                           
 12007                           ;APDS9960.c: 2001:     return 1;
 12008  129D  3001               	movlw	1
 12009  129E  0008               	return
 12010  129F                     __end_of_wireWriteDataByte:
 12011                           
 12012                           	psect	text58
 12013  176E                     __ptext58:	
 12014 ;; *************** function _i2c_write1ByteRegister *****************
 12015 ;; Defined at:
 12016 ;;		line 51 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12017 ;; Parameters:    Size  Location     Type
 12018 ;;  address         1    wreg     unsigned char 
 12019 ;;  reg             1   22[BANK0 ] unsigned char 
 12020 ;;  data            1   23[BANK0 ] unsigned char 
 12021 ;; Auto vars:     Size  Location     Type
 12022 ;;  address         1   24[BANK0 ] unsigned char 
 12023 ;; Return value:  Size  Location     Type
 12024 ;;                  1    wreg      void 
 12025 ;; Registers used:
 12026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12027 ;; Tracked objects:
 12028 ;;		On entry : 1F/0
 12029 ;;		On exit  : 1F/0
 12030 ;;		Unchanged: 0/0
 12031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12032 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12035 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12036 ;;Total ram usage:        3 bytes
 12037 ;; Hardware stack levels used:    1
 12038 ;; Hardware stack levels required when called:   12
 12039 ;; This function calls:
 12040 ;;		_I2C_Close
 12041 ;;		_I2C_MasterWrite
 12042 ;;		_I2C_Open
 12043 ;;		_I2C_SetAddressNackCallback
 12044 ;;		_I2C_SetBuffer
 12045 ;;		_I2C_SetDataCompleteCallback
 12046 ;; This function is called by:
 12047 ;;		_wireWriteDataByte
 12048 ;; This function uses a non-reentrant model
 12049 ;;
 12050                           
 12051                           
 12052                           ;psect for function _i2c_write1ByteRegister
 12053  176E                     _i2c_write1ByteRegister:
 12054                           
 12055                           ;incstack = 0
 12056                           ; Regs used in _i2c_write1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12057                           ;i2c_write1ByteRegister@address stored from wreg
 12058  176E  00B8               	movwf	i2c_write1ByteRegister@address
 12059  176F                     l4999:	
 12060                           ;mcc_generated_files/drivers/i2c_simple_master.c: 51: void i2c_write1ByteRegister(i2c_ad
      +                          dress_t address, uint8_t reg, uint8_t data);mcc_generated_files/drivers/i2c_simple_maste
      +                          r.c: 52: {;mcc_generated_files/drivers/i2c_simple_master.c: 53:     while(!I2C_Open(addr
      +                          ess));
 12061                           
 12062  176F  0838               	movf	i2c_write1ByteRegister@address,w
 12063  1770  3189  2187  3197   	fcall	_I2C_Open
 12064  1773  3A00               	xorlw	0
 12065  1774  1903               	skipnz
 12066  1775  2F6F               	goto	l4999
 12067                           
 12068                           ;mcc_generated_files/drivers/i2c_simple_master.c: 54:     I2C_SetDataCompleteCallback(wr
      +                          1RegCompleteHandler,&data);
 12069  1776  30C3               	movlw	low _wr1RegCompleteHandler@i2c_simple_master$F2173
 12070  1777  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 12071  1778  3013               	movlw	high _wr1RegCompleteHandler@i2c_simple_master$F2173
 12072  1779  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 12073  177A  3037               	movlw	low i2c_write1ByteRegister@data
 12074  177B  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 12075  177C  3000               	movlw	high i2c_write1ByteRegister@data
 12076  177D  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 12077  177E  3192  2260  3197   	fcall	_I2C_SetDataCompleteCallback
 12078                           
 12079                           ;mcc_generated_files/drivers/i2c_simple_master.c: 55:     I2C_SetBuffer(&reg,1);
 12080  1781  3036               	movlw	low i2c_write1ByteRegister@reg
 12081  1782  00A0               	movwf	I2C_SetBuffer@buffer
 12082  1783  3000               	movlw	high i2c_write1ByteRegister@reg
 12083  1784  00A1               	movwf	I2C_SetBuffer@buffer+1
 12084  1785  3001               	movlw	1
 12085  1786  00A2               	movwf	I2C_SetBuffer@bufferSize
 12086  1787  3000               	movlw	0
 12087  1788  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 12088  1789  3193  2336  3197   	fcall	_I2C_SetBuffer
 12089                           
 12090                           ;mcc_generated_files/drivers/i2c_simple_master.c: 56:     I2C_SetAddressNackCallback(((v
      +                          oid*)0),((void*)0));
 12091  178C  3000               	movlw	0
 12092  178D  0020               	movlb	0	; select bank0
 12093  178E  00A9               	movwf	I2C_SetAddressNackCallback@cb
 12094  178F  00AA               	movwf	I2C_SetAddressNackCallback@cb+1
 12095  1790  01AB               	clrf	I2C_SetAddressNackCallback@ptr
 12096  1791  3192  226C  3197   	fcall	_I2C_SetAddressNackCallback
 12097                           
 12098                           ;mcc_generated_files/drivers/i2c_simple_master.c: 57:     I2C_MasterWrite();
 12099  1794  3191  21AB  3197   	fcall	_I2C_MasterWrite
 12100  1797                     l5009:	
 12101                           ;mcc_generated_files/drivers/i2c_simple_master.c: 58:     while(I2C_BUSY == I2C_Close())
      +                          ;
 12102                           
 12103  1797  3194  24DE  3197   	fcall	_I2C_Close
 12104  179A  3A01               	xorlw	1
 12105  179B  1D03               	btfss	3,2
 12106  179C  0008               	return
 12107  179D  2F97               	goto	l5009
 12108  179E                     __end_of_i2c_write1ByteRegister:
 12109                           
 12110                           	psect	text59
 12111  1236                     __ptext59:	
 12112 ;; *************** function _wireReadDataByte *****************
 12113 ;; Defined at:
 12114 ;;		line 2029 in file "APDS9960.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;  reg             1    wreg     unsigned char 
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;  reg             1   30[BANK0 ] unsigned char 
 12119 ;; Return value:  Size  Location     Type
 12120 ;;                  1    wreg      unsigned char 
 12121 ;; Registers used:
 12122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/F
 12125 ;;		On exit  : 1F/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;Total ram usage:        2 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:   13
 12135 ;; This function calls:
 12136 ;;		_i2c_read1ByteRegister
 12137 ;; This function is called by:
 12138 ;;		_APDS9960Init
 12139 ;;		_getMode
 12140 ;;		_isGestureAvailable
 12141 ;;		_readGesture
 12142 ;;		_readProximity
 12143 ;;		_setLEDDrive
 12144 ;;		_setProximityGain
 12145 ;;		_setAmbientLightGain
 12146 ;;		_setGestureGain
 12147 ;;		_setGestureLEDDrive
 12148 ;;		_setGestureWaitTime
 12149 ;;		_setProximityIntEnable
 12150 ;;		_setGestureIntEnable
 12151 ;; This function uses a non-reentrant model
 12152 ;;
 12153                           
 12154                           
 12155                           ;psect for function _wireReadDataByte
 12156  1236                     _wireReadDataByte:
 12157                           
 12158                           ;incstack = 0
 12159                           ; Regs used in _wireReadDataByte: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12160                           ;wireReadDataByte@reg stored from wreg
 12161  1236  0020               	movlb	0	; select bank0
 12162  1237  00BE               	movwf	wireReadDataByte@reg
 12163                           
 12164                           ;APDS9960.c: 2029: uint8_t wireReadDataByte(uint8_t reg);APDS9960.c: 2030: {;APDS9960.c:
      +                           2032:     return i2c_read1ByteRegister(0x39, reg);
 12165  1238  083E               	movf	wireReadDataByte@reg,w
 12166  1239  00BD               	movwf	??_wireReadDataByte
 12167  123A  083D               	movf	??_wireReadDataByte,w
 12168  123B  00B6               	movwf	i2c_read1ByteRegister@reg
 12169  123C  3039               	movlw	57
 12170  123D  3189  21CB         	fcall	_i2c_read1ByteRegister
 12171  123F  0008               	return
 12172  1240                     __end_of_wireReadDataByte:
 12173                           
 12174                           	psect	text60
 12175  09CB                     __ptext60:	
 12176 ;; *************** function _i2c_read1ByteRegister *****************
 12177 ;; Defined at:
 12178 ;;		line 97 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 12179 ;; Parameters:    Size  Location     Type
 12180 ;;  address         1    wreg     unsigned char 
 12181 ;;  reg             1   22[BANK0 ] unsigned char 
 12182 ;; Auto vars:     Size  Location     Type
 12183 ;;  address         1   24[BANK0 ] unsigned char 
 12184 ;;  x               2   26[BANK0 ] int 
 12185 ;;  d2              1   28[BANK0 ] unsigned char 
 12186 ;;  e               1   25[BANK0 ] enum E355
 12187 ;; Return value:  Size  Location     Type
 12188 ;;                  1    wreg      unsigned char 
 12189 ;; Registers used:
 12190 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12191 ;; Tracked objects:
 12192 ;;		On entry : 1F/0
 12193 ;;		On exit  : 1F/0
 12194 ;;		Unchanged: 0/0
 12195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12196 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12199 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12200 ;;Total ram usage:        7 bytes
 12201 ;; Hardware stack levels used:    1
 12202 ;; Hardware stack levels required when called:   12
 12203 ;; This function calls:
 12204 ;;		_I2C_Close
 12205 ;;		_I2C_MasterWrite
 12206 ;;		_I2C_Open
 12207 ;;		_I2C_SetAddressNackCallback
 12208 ;;		_I2C_SetBuffer
 12209 ;;		_I2C_SetDataCompleteCallback
 12210 ;; This function is called by:
 12211 ;;		_wireReadDataByte
 12212 ;; This function uses a non-reentrant model
 12213 ;;
 12214                           
 12215                           
 12216                           ;psect for function _i2c_read1ByteRegister
 12217  09CB                     _i2c_read1ByteRegister:
 12218                           
 12219                           ;incstack = 0
 12220                           ; Regs used in _i2c_read1ByteRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12221                           ;i2c_read1ByteRegister@address stored from wreg
 12222  09CB  00B8               	movwf	i2c_read1ByteRegister@address
 12223                           
 12224                           ;mcc_generated_files/drivers/i2c_simple_master.c: 97: uint8_t i2c_read1ByteRegister(i2c_
      +                          address_t address, uint8_t reg);mcc_generated_files/drivers/i2c_simple_master.c: 98: {;m
      +                          cc_generated_files/drivers/i2c_simple_master.c: 99:     uint8_t d2=42;
 12225  09CC  302A               	movlw	42
 12226  09CD  00B7               	movwf	??_i2c_read1ByteRegister
 12227  09CE  0837               	movf	??_i2c_read1ByteRegister,w
 12228  09CF  00BC               	movwf	i2c_read1ByteRegister@d2
 12229                           
 12230                           ;mcc_generated_files/drivers/i2c_simple_master.c: 100:     i2c_error_t e;;mcc_generated_
      +                          files/drivers/i2c_simple_master.c: 101:     int x;;mcc_generated_files/drivers/i2c_simpl
      +                          e_master.c: 103:     for(x = 2; x != 0; x--)
 12231  09D0  3002               	movlw	2
 12232  09D1  00BA               	movwf	i2c_read1ByteRegister@x
 12233  09D2  3000               	movlw	0
 12234  09D3  00BB               	movwf	i2c_read1ByteRegister@x+1
 12235  09D4                     l4973:
 12236  09D4  0838               	movf	i2c_read1ByteRegister@address,w
 12237  09D5  3189  2187  3189   	fcall	_I2C_Open
 12238  09D8  3A00               	xorlw	0
 12239  09D9  1903               	skipnz
 12240  09DA  29D4               	goto	l4973
 12241                           
 12242                           ;mcc_generated_files/drivers/i2c_simple_master.c: 106:         I2C_SetDataCompleteCallba
      +                          ck(rd1RegCompleteHandler,&d2);
 12243  09DB  30DB               	movlw	low _rd1RegCompleteHandler@i2c_simple_master$F2183
 12244  09DC  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 12245  09DD  3013               	movlw	high _rd1RegCompleteHandler@i2c_simple_master$F2183
 12246  09DE  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 12247  09DF  303C               	movlw	low i2c_read1ByteRegister@d2
 12248  09E0  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 12249  09E1  3000               	movlw	high i2c_read1ByteRegister@d2
 12250  09E2  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 12251  09E3  3192  2260  3189   	fcall	_I2C_SetDataCompleteCallback
 12252                           
 12253                           ;mcc_generated_files/drivers/i2c_simple_master.c: 107:         I2C_SetBuffer(&reg,1);
 12254  09E6  3036               	movlw	low i2c_read1ByteRegister@reg
 12255  09E7  00A0               	movwf	I2C_SetBuffer@buffer
 12256  09E8  3000               	movlw	high i2c_read1ByteRegister@reg
 12257  09E9  00A1               	movwf	I2C_SetBuffer@buffer+1
 12258  09EA  3001               	movlw	1
 12259  09EB  00A2               	movwf	I2C_SetBuffer@bufferSize
 12260  09EC  3000               	movlw	0
 12261  09ED  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 12262  09EE  3193  2336  3189   	fcall	_I2C_SetBuffer
 12263                           
 12264                           ;mcc_generated_files/drivers/i2c_simple_master.c: 108:         I2C_SetAddressNackCallbac
      +                          k(((void*)0),((void*)0));
 12265  09F1  3000               	movlw	0
 12266  09F2  0020               	movlb	0	; select bank0
 12267  09F3  00A9               	movwf	I2C_SetAddressNackCallback@cb
 12268  09F4  00AA               	movwf	I2C_SetAddressNackCallback@cb+1
 12269  09F5  01AB               	clrf	I2C_SetAddressNackCallback@ptr
 12270  09F6  3192  226C  3189   	fcall	_I2C_SetAddressNackCallback
 12271                           
 12272                           ;mcc_generated_files/drivers/i2c_simple_master.c: 109:         I2C_MasterWrite();
 12273  09F9  3191  21AB  3189   	fcall	_I2C_MasterWrite
 12274  09FC                     l4983:	
 12275                           ;mcc_generated_files/drivers/i2c_simple_master.c: 110:         while(I2C_BUSY == (e = I2
      +                          C_Close()));
 12276                           
 12277  09FC  3194  24DE  3189   	fcall	_I2C_Close
 12278  09FF  00B7               	movwf	??_i2c_read1ByteRegister
 12279  0A00  0837               	movf	??_i2c_read1ByteRegister,w
 12280  0A01  00B9               	movwf	i2c_read1ByteRegister@e
 12281  0A02  0339               	decf	i2c_read1ByteRegister@e,w
 12282  0A03  1903               	btfsc	3,2
 12283  0A04  29FC               	goto	l4983
 12284                           
 12285                           ;mcc_generated_files/drivers/i2c_simple_master.c: 111:         if(e==I2C_NOERR) break;
 12286  0A05  0839               	movf	i2c_read1ByteRegister@e,w
 12287  0A06  1903               	btfsc	3,2
 12288  0A07  2A10               	goto	l4993
 12289                           
 12290                           ;mcc_generated_files/drivers/i2c_simple_master.c: 112:     }
 12291  0A08  30FF               	movlw	255
 12292  0A09  07BA               	addwf	i2c_read1ByteRegister@x,f
 12293  0A0A  30FF               	movlw	255
 12294  0A0B  3DBB               	addwfc	i2c_read1ByteRegister@x+1,f
 12295  0A0C  083A               	movf	i2c_read1ByteRegister@x,w
 12296  0A0D  043B               	iorwf	i2c_read1ByteRegister@x+1,w
 12297  0A0E  1D03               	btfss	3,2
 12298  0A0F  29D4               	goto	l4973
 12299  0A10                     l4993:
 12300                           
 12301                           ;mcc_generated_files/drivers/i2c_simple_master.c: 115:     return d2;
 12302  0A10  083C               	movf	i2c_read1ByteRegister@d2,w
 12303  0A11  0008               	return
 12304  0A12                     __end_of_i2c_read1ByteRegister:
 12305                           
 12306                           	psect	text61
 12307  126C                     __ptext61:	
 12308 ;; *************** function _I2C_SetAddressNackCallback *****************
 12309 ;; Defined at:
 12310 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
 12311 ;; Parameters:    Size  Location     Type
 12312 ;;  cb              2    9[BANK0 ] PTR FTN(PTR void ,)enum 
 12313 ;;		 -> Absolute function(1), 
 12314 ;;  ptr             1   11[BANK0 ] PTR void 
 12315 ;;		 -> NULL(0), 
 12316 ;; Auto vars:     Size  Location     Type
 12317 ;;		None
 12318 ;; Return value:  Size  Location     Type
 12319 ;;                  1    wreg      void 
 12320 ;; Registers used:
 12321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12322 ;; Tracked objects:
 12323 ;;		On entry : 1F/0
 12324 ;;		On exit  : 1F/0
 12325 ;;		Unchanged: 0/0
 12326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12327 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12330 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12331 ;;Total ram usage:        3 bytes
 12332 ;; Hardware stack levels used:    1
 12333 ;; Hardware stack levels required when called:    5
 12334 ;; This function calls:
 12335 ;;		_I2C_SetCallback
 12336 ;; This function is called by:
 12337 ;;		_i2c_write1ByteRegister
 12338 ;;		_i2c_read1ByteRegister
 12339 ;;		_i2c_readDataBlock
 12340 ;; This function uses a non-reentrant model
 12341 ;;
 12342                           
 12343                           
 12344                           ;psect for function _I2C_SetAddressNackCallback
 12345  126C                     _I2C_SetAddressNackCallback:
 12346                           
 12347                           ;mcc_generated_files/i2c_master.c: 283: void I2C_SetAddressNackCallback(i2c_callback_t c
      +                          b, void *ptr);mcc_generated_files/i2c_master.c: 284: {;mcc_generated_files/i2c_master.c:
      +                           285:     I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
 12348                           
 12349                           ;incstack = 0
 12350                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12351  126C  082A               	movf	I2C_SetAddressNackCallback@cb+1,w
 12352  126D  00A1               	movwf	I2C_SetCallback@cb+1
 12353  126E  0829               	movf	I2C_SetAddressNackCallback@cb,w
 12354  126F  00A0               	movwf	I2C_SetCallback@cb
 12355  1270  082B               	movf	I2C_SetAddressNackCallback@ptr,w
 12356  1271  00A2               	movwf	I2C_SetCallback@ptr
 12357  1272  3000               	movlw	0
 12358  1273  00A3               	movwf	I2C_SetCallback@ptr+1
 12359  1274  3002               	movlw	2
 12360  1275  318A  22F8         	fcall	_I2C_SetCallback
 12361  1277  0008               	return
 12362  1278                     __end_of_I2C_SetAddressNackCallback:
 12363                           
 12364                           	psect	text62
 12365  0987                     __ptext62:	
 12366 ;; *************** function _I2C_Open *****************
 12367 ;; Defined at:
 12368 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
 12369 ;; Parameters:    Size  Location     Type
 12370 ;;  address         1    wreg     unsigned char 
 12371 ;; Auto vars:     Size  Location     Type
 12372 ;;  address         1    0[BANK0 ] unsigned char 
 12373 ;;  returnValue     1    1[BANK0 ] enum E355
 12374 ;; Return value:  Size  Location     Type
 12375 ;;                  1    wreg      enum E355
 12376 ;; Registers used:
 12377 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12378 ;; Tracked objects:
 12379 ;;		On entry : 1F/0
 12380 ;;		On exit  : 1F/0
 12381 ;;		Unchanged: 0/0
 12382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12384 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12387 ;;Total ram usage:        2 bytes
 12388 ;; Hardware stack levels used:    1
 12389 ;; Hardware stack levels required when called:    5
 12390 ;; This function calls:
 12391 ;;		_I2C_MasterClearIrq
 12392 ;;		_I2C_MasterOpen
 12393 ;; This function is called by:
 12394 ;;		_i2c_write1ByteRegister
 12395 ;;		_i2c_read1ByteRegister
 12396 ;;		_i2c_readDataBlock
 12397 ;; This function uses a non-reentrant model
 12398 ;;
 12399                           
 12400                           
 12401                           ;psect for function _I2C_Open
 12402  0987                     _I2C_Open:
 12403                           
 12404                           ;incstack = 0
 12405                           ; Regs used in _I2C_Open: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12406                           ;I2C_Open@address stored from wreg
 12407  0987  00A0               	movwf	I2C_Open@address
 12408                           
 12409                           ;mcc_generated_files/i2c_master.c: 176: i2c_error_t I2C_Open(i2c_address_t address);mcc_
      +                          generated_files/i2c_master.c: 177: {;mcc_generated_files/i2c_master.c: 178:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
 12410  0988  01A1               	clrf	I2C_Open@returnValue
 12411  0989  0AA1               	incf	I2C_Open@returnValue,f
 12412                           
 12413                           ;mcc_generated_files/i2c_master.c: 180:     if(!I2C_Status.inUse)
 12414  098A  0021               	movlb	1	; select bank1
 12415  098B  1943               	btfsc	(_I2C_Status^(0+128)+35),2
 12416  098C  29C8               	goto	l4939
 12417                           
 12418                           ;mcc_generated_files/i2c_master.c: 181:     {;mcc_generated_files/i2c_master.c: 182:    
      +                               I2C_Status.address = address;
 12419  098D  30BC               	movlw	low (_I2C_Status+28)
 12420  098E  0086               	movwf	6
 12421  098F  3000               	movlw	high (_I2C_Status+28)
 12422  0990  0087               	movwf	7
 12423  0991  0020               	movlb	0	; select bank0
 12424  0992  0820               	movf	I2C_Open@address,w
 12425  0993  0081               	movwf	1
 12426                           
 12427                           ;mcc_generated_files/i2c_master.c: 183:         I2C_Status.busy = 0;
 12428  0994  0021               	movlb	1	; select bank1
 12429  0995  10C3               	bcf	(_I2C_Status^(0+128)+35),1
 12430                           
 12431                           ;mcc_generated_files/i2c_master.c: 184:         I2C_Status.inUse = 1;
 12432  0996  1543               	bsf	(_I2C_Status^(0+128)+35),2
 12433                           
 12434                           ;mcc_generated_files/i2c_master.c: 185:         I2C_Status.addressNackCheck = 0;
 12435  0997  1043               	bcf	(_I2C_Status^(0+128)+35),0
 12436                           
 12437                           ;mcc_generated_files/i2c_master.c: 186:         I2C_Status.state = I2C_RESET;
 12438  0998  30C1               	movlw	low (_I2C_Status+33)
 12439  0999  0086               	movwf	6
 12440  099A  3000               	movlw	high (_I2C_Status+33)
 12441  099B  0087               	movwf	7
 12442  099C  300E               	movlw	14
 12443  099D  0081               	movwf	1
 12444                           
 12445                           ;mcc_generated_files/i2c_master.c: 187:         I2C_Status.time_out_value = 500;
 12446  099E  30F4               	movlw	244
 12447  099F  00BA               	movwf	(_I2C_Status^(0+128)+26)
 12448  09A0  3001               	movlw	1
 12449  09A1  00BB               	movwf	(_I2C_Status^(0+128)+27)
 12450                           
 12451                           ;mcc_generated_files/i2c_master.c: 188:         I2C_Status.bufferFree = 1;
 12452  09A2  15C3               	bsf	(_I2C_Status^(0+128)+35),3
 12453                           
 12454                           ;mcc_generated_files/i2c_master.c: 191:         I2C_Status.callbackTable[I2C_DATA_COMPLE
      +                          TE]=I2C_CallbackReturnStop;
 12455  09A3  3063               	movlw	low _I2C_CallbackReturnStop
 12456  09A4  00A0               	movwf	_I2C_Status^(0+128)
 12457  09A5  3011               	movlw	high _I2C_CallbackReturnStop
 12458  09A6  00A1               	movwf	(_I2C_Status^(0+128)+1)
 12459                           
 12460                           ;mcc_generated_files/i2c_master.c: 192:         I2C_Status.callbackPayload[I2C_DATA_COMP
      +                          LETE] = ((void*)0);
 12461  09A7  01AC               	clrf	(_I2C_Status^(0+128)+12)
 12462  09A8  01AD               	clrf	((_I2C_Status+1)^(0+128)+12)
 12463                           
 12464                           ;mcc_generated_files/i2c_master.c: 193:         I2C_Status.callbackTable[I2C_WRITE_COLLI
      +                          SION]=I2C_CallbackReturnStop;
 12465  09A9  3063               	movlw	low _I2C_CallbackReturnStop
 12466  09AA  00A2               	movwf	(_I2C_Status^(0+128)+2)
 12467  09AB  3011               	movlw	high _I2C_CallbackReturnStop
 12468  09AC  00A3               	movwf	(_I2C_Status^(0+128)+3)
 12469                           
 12470                           ;mcc_generated_files/i2c_master.c: 194:         I2C_Status.callbackPayload[I2C_WRITE_COL
      +                          LISION] = ((void*)0);
 12471  09AD  01AE               	clrf	(_I2C_Status^(0+128)+14)
 12472  09AE  01AF               	clrf	((_I2C_Status+1)^(0+128)+14)
 12473                           
 12474                           ;mcc_generated_files/i2c_master.c: 195:         I2C_Status.callbackTable[I2C_ADDR_NACK]=
      +                          I2C_CallbackReturnStop;
 12475  09AF  3063               	movlw	low _I2C_CallbackReturnStop
 12476  09B0  00A4               	movwf	(_I2C_Status^(0+128)+4)
 12477  09B1  3011               	movlw	high _I2C_CallbackReturnStop
 12478  09B2  00A5               	movwf	(_I2C_Status^(0+128)+5)
 12479                           
 12480                           ;mcc_generated_files/i2c_master.c: 196:         I2C_Status.callbackPayload[I2C_ADDR_NACK
      +                          ] = ((void*)0);
 12481  09B3  01B0               	clrf	(_I2C_Status^(0+128)+16)
 12482  09B4  01B1               	clrf	((_I2C_Status+1)^(0+128)+16)
 12483                           
 12484                           ;mcc_generated_files/i2c_master.c: 197:         I2C_Status.callbackTable[I2C_DATA_NACK]=
      +                          I2C_CallbackReturnStop;
 12485  09B5  3063               	movlw	low _I2C_CallbackReturnStop
 12486  09B6  00A6               	movwf	(_I2C_Status^(0+128)+6)
 12487  09B7  3011               	movlw	high _I2C_CallbackReturnStop
 12488  09B8  00A7               	movwf	(_I2C_Status^(0+128)+7)
 12489                           
 12490                           ;mcc_generated_files/i2c_master.c: 198:         I2C_Status.callbackPayload[I2C_DATA_NACK
      +                          ] = ((void*)0);
 12491  09B9  01B2               	clrf	(_I2C_Status^(0+128)+18)
 12492  09BA  01B3               	clrf	((_I2C_Status+1)^(0+128)+18)
 12493                           
 12494                           ;mcc_generated_files/i2c_master.c: 199:         I2C_Status.callbackTable[I2C_TIMEOUT]=I2
      +                          C_CallbackReturnReset;
 12495  09BB  3065               	movlw	low _I2C_CallbackReturnReset
 12496  09BC  00A8               	movwf	(_I2C_Status^(0+128)+8)
 12497  09BD  3011               	movlw	high _I2C_CallbackReturnReset
 12498  09BE  00A9               	movwf	(_I2C_Status^(0+128)+9)
 12499                           
 12500                           ;mcc_generated_files/i2c_master.c: 200:         I2C_Status.callbackPayload[I2C_TIMEOUT] 
      +                          = ((void*)0);
 12501  09BF  01B4               	clrf	(_I2C_Status^(0+128)+20)
 12502  09C0  01B5               	clrf	((_I2C_Status+1)^(0+128)+20)
 12503                           
 12504                           ;mcc_generated_files/i2c_master.c: 202:         I2C_MasterClearIrq();
 12505  09C1  3191  216A  3189   	fcall	_I2C_MasterClearIrq
 12506                           
 12507                           ;mcc_generated_files/i2c_master.c: 203:         I2C_MasterOpen();
 12508  09C4  3192  224A         	fcall	_I2C_MasterOpen
 12509                           
 12510                           ;mcc_generated_files/i2c_master.c: 204:         returnValue = I2C_NOERR;
 12511  09C6  0020               	movlb	0	; select bank0
 12512  09C7  01A1               	clrf	I2C_Open@returnValue
 12513  09C8                     l4939:
 12514                           
 12515                           ;mcc_generated_files/i2c_master.c: 206:     return returnValue;
 12516  09C8  0020               	movlb	0	; select bank0
 12517  09C9  0821               	movf	I2C_Open@returnValue,w
 12518  09CA  0008               	return
 12519  09CB                     __end_of_I2C_Open:
 12520                           
 12521                           	psect	text63
 12522  124A                     __ptext63:	
 12523 ;; *************** function _I2C_MasterOpen *****************
 12524 ;; Defined at:
 12525 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
 12526 ;; Parameters:    Size  Location     Type
 12527 ;;		None
 12528 ;; Auto vars:     Size  Location     Type
 12529 ;;		None
 12530 ;; Return value:  Size  Location     Type
 12531 ;;                  1    wreg      _Bool 
 12532 ;; Registers used:
 12533 ;;		wreg, status,2
 12534 ;; Tracked objects:
 12535 ;;		On entry : 1F/0
 12536 ;;		On exit  : 1F/4
 12537 ;;		Unchanged: 0/0
 12538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12543 ;;Total ram usage:        0 bytes
 12544 ;; Hardware stack levels used:    1
 12545 ;; Hardware stack levels required when called:    4
 12546 ;; This function calls:
 12547 ;;		Nothing
 12548 ;; This function is called by:
 12549 ;;		_I2C_Open
 12550 ;; This function uses a non-reentrant model
 12551 ;;
 12552                           
 12553                           
 12554                           ;psect for function _I2C_MasterOpen
 12555  124A                     _I2C_MasterOpen:
 12556                           
 12557                           ;mcc_generated_files/i2c_master.c: 545:     if(!SSPCON1bits.SSPEN)
 12558                           
 12559                           ;incstack = 0
 12560                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
 12561  124A  0024               	movlb	4	; select bank4
 12562  124B  1A95               	btfsc	21,5	;volatile
 12563  124C  0008               	return
 12564                           
 12565                           ;mcc_generated_files/i2c_master.c: 546:     {;mcc_generated_files/i2c_master.c: 547:    
      +                               SSPSTAT = 0x00;
 12566  124D  0194               	clrf	20	;volatile
 12567                           
 12568                           ;mcc_generated_files/i2c_master.c: 548:         SSPCON1 = 0x08;
 12569  124E  3008               	movlw	8
 12570  124F  0095               	movwf	21	;volatile
 12571                           
 12572                           ;mcc_generated_files/i2c_master.c: 549:         SSPCON2 = 0x00;
 12573  1250  0196               	clrf	22	;volatile
 12574                           
 12575                           ;mcc_generated_files/i2c_master.c: 550:         SSPADD = 0x4F;
 12576  1251  304F               	movlw	79
 12577  1252  0092               	movwf	18	;volatile
 12578                           
 12579                           ;mcc_generated_files/i2c_master.c: 551:         SSPCON1bits.SSPEN = 1;
 12580  1253  1695               	bsf	21,5	;volatile
 12581  1254  0008               	return
 12582  1255                     __end_of_I2C_MasterOpen:
 12583                           
 12584                           	psect	text64
 12585  11AB                     __ptext64:	
 12586 ;; *************** function _I2C_MasterWrite *****************
 12587 ;; Defined at:
 12588 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
 12589 ;; Parameters:    Size  Location     Type
 12590 ;;		None
 12591 ;; Auto vars:     Size  Location     Type
 12592 ;;		None
 12593 ;; Return value:  Size  Location     Type
 12594 ;;                  1    wreg      enum E355
 12595 ;; Registers used:
 12596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12597 ;; Tracked objects:
 12598 ;;		On entry : 1F/0
 12599 ;;		On exit  : 1F/0
 12600 ;;		Unchanged: 0/0
 12601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;Total ram usage:        0 bytes
 12607 ;; Hardware stack levels used:    1
 12608 ;; Hardware stack levels required when called:   11
 12609 ;; This function calls:
 12610 ;;		_I2C_MasterOperation
 12611 ;; This function is called by:
 12612 ;;		_i2c_write1ByteRegister
 12613 ;;		_i2c_read1ByteRegister
 12614 ;;		_i2c_readDataBlock
 12615 ;; This function uses a non-reentrant model
 12616 ;;
 12617                           
 12618                           
 12619                           ;psect for function _I2C_MasterWrite
 12620  11AB                     _I2C_MasterWrite:
 12621                           
 12622                           ;mcc_generated_files/i2c_master.c: 253:     return I2C_MasterOperation(0);;	Return value
      +                           of _I2C_MasterWrite is never used
 12623                           
 12624                           ;incstack = 0
 12625                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12626  11AB  3000               	movlw	0
 12627  11AC  3194  24FB         	fcall	_I2C_MasterOperation
 12628  11AE  0008               	return
 12629  11AF                     __end_of_I2C_MasterWrite:
 12630                           
 12631                           	psect	text65
 12632  14FB                     __ptext65:	
 12633 ;; *************** function _I2C_MasterOperation *****************
 12634 ;; Defined at:
 12635 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
 12636 ;; Parameters:    Size  Location     Type
 12637 ;;  read            1    wreg     _Bool 
 12638 ;; Auto vars:     Size  Location     Type
 12639 ;;  read            1   20[BANK0 ] _Bool 
 12640 ;;  returnValue     1   21[BANK0 ] enum E355
 12641 ;; Return value:  Size  Location     Type
 12642 ;;                  1    wreg      enum E355
 12643 ;; Registers used:
 12644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12645 ;; Tracked objects:
 12646 ;;		On entry : 1F/0
 12647 ;;		On exit  : 1F/0
 12648 ;;		Unchanged: 0/0
 12649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12653 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12654 ;;Total ram usage:        2 bytes
 12655 ;; Hardware stack levels used:    1
 12656 ;; Hardware stack levels required when called:   10
 12657 ;; This function calls:
 12658 ;;		_I2C_MasterStart
 12659 ;;		_I2C_Poller
 12660 ;; This function is called by:
 12661 ;;		_I2C_MasterWrite
 12662 ;; This function uses a non-reentrant model
 12663 ;;
 12664                           
 12665                           
 12666                           ;psect for function _I2C_MasterOperation
 12667  14FB                     _I2C_MasterOperation:
 12668                           
 12669                           ;incstack = 0
 12670                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12671                           ;I2C_MasterOperation@read stored from wreg
 12672  14FB  00B4               	movwf	I2C_MasterOperation@read
 12673                           
 12674                           ;mcc_generated_files/i2c_master.c: 224: i2c_error_t I2C_MasterOperation(_Bool read);mcc_
      +                          generated_files/i2c_master.c: 225: {;mcc_generated_files/i2c_master.c: 226:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
 12675  14FC  01B5               	clrf	I2C_MasterOperation@returnValue
 12676  14FD  0AB5               	incf	I2C_MasterOperation@returnValue,f
 12677                           
 12678                           ;mcc_generated_files/i2c_master.c: 227:     if(!I2C_Status.busy)
 12679  14FE  0021               	movlb	1	; select bank1
 12680  14FF  18C3               	btfsc	(_I2C_Status^(0+128)+35),1
 12681  1500  2D18               	goto	l4893
 12682                           
 12683                           ;mcc_generated_files/i2c_master.c: 228:     {;mcc_generated_files/i2c_master.c: 229:    
      +                               I2C_Status.busy = 1;
 12684  1501  14C3               	bsf	(_I2C_Status^(0+128)+35),1
 12685                           
 12686                           ;mcc_generated_files/i2c_master.c: 230:         returnValue = I2C_NOERR;
 12687  1502  0020               	movlb	0	; select bank0
 12688  1503  01B5               	clrf	I2C_MasterOperation@returnValue
 12689                           
 12690                           ;mcc_generated_files/i2c_master.c: 232:         if(read)
 12691  1504  0834               	movf	I2C_MasterOperation@read,w
 12692  1505  1903               	btfsc	3,2
 12693  1506  2D0D               	goto	l4887
 12694                           
 12695                           ;mcc_generated_files/i2c_master.c: 233:         {;mcc_generated_files/i2c_master.c: 234:
      +                                       I2C_Status.state = I2C_SEND_ADR_READ;
 12696  1507  30C1               	movlw	low (_I2C_Status+33)
 12697  1508  0086               	movwf	6
 12698  1509  3000               	movlw	high (_I2C_Status+33)
 12699  150A  0087               	movwf	7
 12700  150B  3001               	movlw	1
 12701  150C  2D12               	goto	L9
 12702  150D                     l4887:	
 12703                           ;mcc_generated_files/i2c_master.c: 235:         }
 12704                           
 12705                           
 12706                           ;mcc_generated_files/i2c_master.c: 237:         {;mcc_generated_files/i2c_master.c: 238:
      +                                       I2C_Status.state = I2C_SEND_ADR_WRITE;
 12707  150D  30C1               	movlw	low (_I2C_Status+33)
 12708  150E  0086               	movwf	6
 12709  150F  3000               	movlw	high (_I2C_Status+33)
 12710  1510  0087               	movwf	7
 12711  1511  3002               	movlw	2
 12712  1512                     L9:
 12713  1512  0081               	movwf	1
 12714                           
 12715                           ;mcc_generated_files/i2c_master.c: 240:         I2C_MasterStart();
 12716  1513  3191  2173  3194   	fcall	_I2C_MasterStart
 12717                           
 12718                           ;mcc_generated_files/i2c_master.c: 241:         I2C_Poller();
 12719  1516  3192  222C         	fcall	_I2C_Poller
 12720  1518                     l4893:
 12721                           
 12722                           ;mcc_generated_files/i2c_master.c: 243:     return returnValue;
 12723  1518  0020               	movlb	0	; select bank0
 12724  1519  0835               	movf	I2C_MasterOperation@returnValue,w
 12725  151A  0008               	return
 12726  151B                     __end_of_I2C_MasterOperation:
 12727                           
 12728                           	psect	text66
 12729  122C                     __ptext66:	
 12730 ;; *************** function _I2C_Poller *****************
 12731 ;; Defined at:
 12732 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
 12733 ;; Parameters:    Size  Location     Type
 12734 ;;		None
 12735 ;; Auto vars:     Size  Location     Type
 12736 ;;		None
 12737 ;; Return value:  Size  Location     Type
 12738 ;;                  1    wreg      void 
 12739 ;; Registers used:
 12740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12741 ;; Tracked objects:
 12742 ;;		On entry : 1F/4
 12743 ;;		On exit  : 1F/1
 12744 ;;		Unchanged: 0/0
 12745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12750 ;;Total ram usage:        0 bytes
 12751 ;; Hardware stack levels used:    1
 12752 ;; Hardware stack levels required when called:    9
 12753 ;; This function calls:
 12754 ;;		_I2C_MasterFsm
 12755 ;;		_I2C_MasterWaitForEvent
 12756 ;; This function is called by:
 12757 ;;		_I2C_MasterOperation
 12758 ;; This function uses a non-reentrant model
 12759 ;;
 12760                           
 12761                           
 12762                           ;psect for function _I2C_Poller
 12763  122C                     _I2C_Poller:
 12764  122C                     l4859:	
 12765                           ;mcc_generated_files/i2c_master.c: 314:     while(I2C_Status.busy)
 12766                           
 12767                           ;incstack = 0
 12768                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12769                           
 12770                           
 12771                           ;mcc_generated_files/i2c_master.c: 314:     while(I2C_Status.busy)
 12772  122C  0021               	movlb	1	; select bank1
 12773  122D  1CC3               	btfss	(_I2C_Status^(0+128)+35),1
 12774  122E  0008               	return
 12775                           
 12776                           ;mcc_generated_files/i2c_master.c: 315:     {;mcc_generated_files/i2c_master.c: 316:    
      +                               I2C_MasterWaitForEvent();
 12777  122F  3191  21A7  3192   	fcall	_I2C_MasterWaitForEvent
 12778                           
 12779                           ;mcc_generated_files/i2c_master.c: 317:         I2C_MasterFsm();
 12780  1232  3196  265B  3192   	fcall	_I2C_MasterFsm
 12781  1235  2A2C               	goto	l4859
 12782  1236                     __end_of_I2C_Poller:
 12783                           
 12784                           	psect	text67
 12785  11A7                     __ptext67:	
 12786 ;; *************** function _I2C_MasterWaitForEvent *****************
 12787 ;; Defined at:
 12788 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
 12789 ;; Parameters:    Size  Location     Type
 12790 ;;		None
 12791 ;; Auto vars:     Size  Location     Type
 12792 ;;		None
 12793 ;; Return value:  Size  Location     Type
 12794 ;;                  1    wreg      void 
 12795 ;; Registers used:
 12796 ;;		None
 12797 ;; Tracked objects:
 12798 ;;		On entry : 1A/1
 12799 ;;		On exit  : 1F/0
 12800 ;;		Unchanged: 0/0
 12801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12806 ;;Total ram usage:        0 bytes
 12807 ;; Hardware stack levels used:    1
 12808 ;; Hardware stack levels required when called:    4
 12809 ;; This function calls:
 12810 ;;		Nothing
 12811 ;; This function is called by:
 12812 ;;		_I2C_Poller
 12813 ;; This function uses a non-reentrant model
 12814 ;;
 12815                           
 12816                           
 12817                           ;psect for function _I2C_MasterWaitForEvent
 12818  11A7                     _I2C_MasterWaitForEvent:
 12819  11A7                     l845:	
 12820                           ;incstack = 0
 12821                           ; Regs used in _I2C_MasterWaitForEvent: []
 12822                           ;mcc_generated_files/i2c_master.c: 652:     while(1)
 12823                           
 12824                           
 12825                           ;mcc_generated_files/i2c_master.c: 653:     {;mcc_generated_files/i2c_master.c: 654:    
      +                               if(PIR1bits.SSPIF)
 12826  11A7  0020               	movlb	0	; select bank0
 12827  11A8  1991               	btfsc	17,3	;volatile
 12828  11A9  0008               	return
 12829  11AA  29A7               	goto	l845
 12830  11AB                     __end_of_I2C_MasterWaitForEvent:
 12831                           
 12832                           	psect	text68
 12833  165B                     __ptext68:	
 12834 ;; *************** function _I2C_MasterFsm *****************
 12835 ;; Defined at:
 12836 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
 12837 ;; Parameters:    Size  Location     Type
 12838 ;;		None
 12839 ;; Auto vars:     Size  Location     Type
 12840 ;;		None
 12841 ;; Return value:  Size  Location     Type
 12842 ;;                  1    wreg      void 
 12843 ;; Registers used:
 12844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12845 ;; Tracked objects:
 12846 ;;		On entry : 1F/0
 12847 ;;		On exit  : 1F/0
 12848 ;;		Unchanged: 0/0
 12849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12852 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12853 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12854 ;;Total ram usage:        3 bytes
 12855 ;; Hardware stack levels used:    1
 12856 ;; Hardware stack levels required when called:    8
 12857 ;; This function calls:
 12858 ;;		_I2C_DO_ADDRESS_NACK
 12859 ;;		_I2C_DO_IDLE
 12860 ;;		_I2C_DO_RCEN
 12861 ;;		_I2C_DO_RESET
 12862 ;;		_I2C_DO_RX
 12863 ;;		_I2C_DO_RX_ACK
 12864 ;;		_I2C_DO_RX_NACK_RESTART
 12865 ;;		_I2C_DO_RX_NACK_STOP
 12866 ;;		_I2C_DO_SEND_ADR_READ
 12867 ;;		_I2C_DO_SEND_ADR_WRITE
 12868 ;;		_I2C_DO_SEND_RESTART
 12869 ;;		_I2C_DO_SEND_RESTART_READ
 12870 ;;		_I2C_DO_SEND_RESTART_WRITE
 12871 ;;		_I2C_DO_SEND_STOP
 12872 ;;		_I2C_DO_TX
 12873 ;;		_I2C_DO_TX_EMPTY
 12874 ;;		_I2C_MasterClearIrq
 12875 ;;		_I2C_MasterIsNack
 12876 ;; This function is called by:
 12877 ;;		_I2C_Poller
 12878 ;; This function uses a non-reentrant model
 12879 ;;
 12880                           
 12881                           
 12882                           ;psect for function _I2C_MasterFsm
 12883  165B                     _I2C_MasterFsm:
 12884                           
 12885                           ;mcc_generated_files/i2c_master.c: 323:     I2C_MasterClearIrq();
 12886                           
 12887                           ;incstack = 0
 12888                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12889  165B  3191  216A  3196   	fcall	_I2C_MasterClearIrq
 12890                           
 12891                           ;mcc_generated_files/i2c_master.c: 325:     if(I2C_Status.addressNackCheck && I2C_Master
      +                          IsNack())
 12892  165E  0021               	movlb	1	; select bank1
 12893  165F  1C43               	btfss	(_I2C_Status^(0+128)+35),0
 12894  1660  2E6D               	goto	l4849
 12895  1661  3191  21C8  3196   	fcall	_I2C_MasterIsNack
 12896  1664  3A00               	xorlw	0
 12897  1665  1903               	skipnz
 12898  1666  2E6D               	goto	l4849
 12899                           
 12900                           ;mcc_generated_files/i2c_master.c: 326:     {;mcc_generated_files/i2c_master.c: 327:    
      +                               I2C_Status.state = I2C_ADDRESS_NACK;
 12901  1667  30C1               	movlw	low (_I2C_Status+33)
 12902  1668  0086               	movwf	6
 12903  1669  3000               	movlw	high (_I2C_Status+33)
 12904  166A  0087               	movwf	7
 12905  166B  300F               	movlw	15
 12906  166C  0081               	movwf	1
 12907  166D                     l4849:
 12908                           
 12909                           ;mcc_generated_files/i2c_master.c: 329:     I2C_Status.state = i2c_fsmStateTable[I2C_Sta
      +                          tus.state]();
 12910  166D  0021               	movlb	1	; select bank1
 12911  166E  0841               	movf	(_I2C_Status^(0+128)+33),w
 12912  166F  0020               	movlb	0	; select bank0
 12913  1670  00B1               	movwf	??_I2C_MasterFsm
 12914  1671  01B2               	clrf	??_I2C_MasterFsm+1
 12915  1672  35B1               	lslf	??_I2C_MasterFsm,f
 12916  1673  0DB2               	rlf	??_I2C_MasterFsm+1,f
 12917  1674  3000               	movlw	low (_i2c_fsmStateTable| (0+32768))
 12918  1675  0731               	addwf	??_I2C_MasterFsm,w
 12919  1676  0084               	movwf	4
 12920  1677  3098               	movlw	high (_i2c_fsmStateTable| (0+32768))
 12921  1678  3D32               	addwfc	??_I2C_MasterFsm+1,w
 12922  1679  0085               	movwf	5
 12923  167A  3F01               	moviw [1]fsr0
 12924  167B  008A               	movwf	10
 12925  167C  3F00               	moviw [0]fsr0
 12926  167D  000A               	callw
 12927  167E  3196               	pagesel	$
 12928  167F  0020               	movlb	0	; select bank0
 12929  1680  00B3               	movwf	??_I2C_MasterFsm+2
 12930  1681  30C1               	movlw	low (_I2C_Status+33)
 12931  1682  0086               	movwf	6
 12932  1683  3000               	movlw	high (_I2C_Status+33)
 12933  1684  0087               	movwf	7
 12934  1685  0833               	movf	??_I2C_MasterFsm+2,w
 12935  1686  0081               	movwf	1
 12936  1687  0008               	return
 12937  1688                     __end_of_I2C_MasterFsm:
 12938                           
 12939                           	psect	text69
 12940  17CF                     __ptext69:	
 12941 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
 12942 ;; Defined at:
 12943 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
 12944 ;; Parameters:    Size  Location     Type
 12945 ;;		None
 12946 ;; Auto vars:     Size  Location     Type
 12947 ;;		None
 12948 ;; Return value:  Size  Location     Type
 12949 ;;                  1    wreg      enum E3090
 12950 ;; Registers used:
 12951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12952 ;; Tracked objects:
 12953 ;;		On entry : 1F/0
 12954 ;;		On exit  : 1F/4
 12955 ;;		Unchanged: 0/0
 12956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12959 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12960 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12961 ;;Total ram usage:        2 bytes
 12962 ;; Hardware stack levels used:    1
 12963 ;; Hardware stack levels required when called:    7
 12964 ;; This function calls:
 12965 ;;		Absolute function
 12966 ;;		_I2C_CallbackReturnReset
 12967 ;;		_I2C_CallbackReturnStop
 12968 ;;		_I2C_DO_SEND_RESTART
 12969 ;;		_I2C_DO_SEND_STOP
 12970 ;;		_rd1RegCompleteHandler
 12971 ;;		_rd1RegCompleteHandler@i2c_simple_master$F2183
 12972 ;;		_rd2RegCompleteHandler
 12973 ;;		_rd2RegCompleteHandler@i2c_simple_master$F2191
 12974 ;;		_rdBlkRegCompleteHandler
 12975 ;;		_rdBlkRegCompleteHandler@i2c_simple_master$F2203
 12976 ;;		_wr1RegCompleteHandler
 12977 ;;		_wr1RegCompleteHandler@i2c_simple_master$F2173
 12978 ;;		_wr2RegCompleteHandler
 12979 ;;		_wr2RegCompleteHandler@i2c_simple_master$F2197
 12980 ;; This function is called by:
 12981 ;;		_I2C_MasterFsm
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           
 12986                           ;psect for function _I2C_DO_ADDRESS_NACK
 12987  17CF                     _I2C_DO_ADDRESS_NACK:
 12988                           
 12989                           ;mcc_generated_files/i2c_master.c: 502:     I2C_Status.addressNackCheck = 0;
 12990                           
 12991                           ;incstack = 0
 12992                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12993  17CF  0021               	movlb	1	; select bank1
 12994  17D0  1043               	bcf	(_I2C_Status^(0+128)+35),0
 12995                           
 12996                           ;mcc_generated_files/i2c_master.c: 503:     I2C_Status.error = I2C_FAIL;
 12997  17D1  30C2               	movlw	low (_I2C_Status+34)
 12998  17D2  0086               	movwf	6
 12999  17D3  3000               	movlw	high (_I2C_Status+34)
 13000  17D4  0087               	movwf	7
 13001  17D5  3002               	movlw	2
 13002  17D6  0081               	movwf	1
 13003                           
 13004                           ;mcc_generated_files/i2c_master.c: 504:     switch(I2C_Status.callbackTable[I2C_ADDR_NAC
      +                          K](I2C_Status.callbackPayload[I2C_ADDR_NACK]))
 13005  17D7  2FDE               	goto	l4833
 13006  17D8                     l4823:
 13007                           
 13008                           ;mcc_generated_files/i2c_master.c: 508:             return I2C_DO_SEND_RESTART();
 13009  17D8  3191  2193         	fcall	_I2C_DO_SEND_RESTART
 13010  17DA  0008               	return
 13011  17DB                     l4827:
 13012                           
 13013                           ;mcc_generated_files/i2c_master.c: 510:             return I2C_DO_SEND_STOP();
 13014  17DB  3191  2197         	fcall	_I2C_DO_SEND_STOP
 13015  17DD  0008               	return
 13016  17DE                     l4833:
 13017  17DE  0831               	movf	((_I2C_Status+1)^(0+128)+16),w
 13018  17DF  0020               	movlb	0	; select bank0
 13019  17E0  00AE               	movwf	rdBlkRegCompleteHandler@i2c_simple_master$F2203@p+1
 13020  17E1  0021               	movlb	1	; select bank1
 13021  17E2  0830               	movf	(_I2C_Status^(0+128)+16),w
 13022  17E3  0020               	movlb	0	; select bank0
 13023  17E4  00AD               	movwf	rdBlkRegCompleteHandler@i2c_simple_master$F2203@p
 13024  17E5  30A0               	movlw	low _I2C_Status
 13025  17E6  0086               	movwf	6
 13026  17E7  3000               	movlw	high _I2C_Status
 13027  17E8  0087               	movwf	7
 13028  17E9  3144               	addfsr 1,4
 13029  17EA  3F41               	moviw [1]fsr1
 13030  17EB  008A               	movwf	10
 13031  17EC  3F40               	moviw [0]fsr1
 13032  17ED  000A               	callw
 13033  17EE  3197               	pagesel	$
 13034  17EF  0020               	movlb	0	; select bank0
 13035  17F0  00AF               	movwf	??_I2C_DO_ADDRESS_NACK
 13036  17F1  01B0               	clrf	??_I2C_DO_ADDRESS_NACK+1
 13037                           
 13038                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13039                           ; Switch size 1, requested type "simple"
 13040                           ; Number of cases is 1, Range of values is 0 to 0
 13041                           ; switch strategies available:
 13042                           ; Name         Instructions Cycles
 13043                           ; simple_byte            4     3 (average)
 13044                           ; direct_byte            8     6 (fixed)
 13045                           ; jumptable            260     6 (fixed)
 13046                           ;	Chosen strategy is simple_byte
 13047  17F2  0830               	movf	??_I2C_DO_ADDRESS_NACK+1,w
 13048  17F3  3A00               	xorlw	0	; case 0
 13049  17F4  1903               	skipnz
 13050  17F5  2FF7               	goto	l6605
 13051  17F6  2FDB               	goto	l4827
 13052  17F7                     l6605:
 13053                           
 13054                           ; Switch size 1, requested type "simple"
 13055                           ; Number of cases is 2, Range of values is 2 to 3
 13056                           ; switch strategies available:
 13057                           ; Name         Instructions Cycles
 13058                           ; simple_byte            7     4 (average)
 13059                           ; direct_byte           13     9 (fixed)
 13060                           ; jumptable            263     9 (fixed)
 13061                           ;	Chosen strategy is simple_byte
 13062  17F7  082F               	movf	??_I2C_DO_ADDRESS_NACK,w
 13063  17F8  3A02               	xorlw	2	; case 2
 13064  17F9  1903               	skipnz
 13065  17FA  2FD8               	goto	l4823
 13066  17FB  3A01               	xorlw	1	; case 3
 13067  17FC  1903               	skipnz
 13068  17FD  2FD8               	goto	l4823
 13069  17FE  2FDB               	goto	l4827
 13070  17FF  0008               	return
 13071  1800                     __end_of_I2C_DO_ADDRESS_NACK:
 13072                           
 13073                           	psect	text70
 13074  11B8                     __ptext70:	
 13075 ;; *************** function _I2C_DO_RESET *****************
 13076 ;; Defined at:
 13077 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
 13078 ;; Parameters:    Size  Location     Type
 13079 ;;		None
 13080 ;; Auto vars:     Size  Location     Type
 13081 ;;		None
 13082 ;; Return value:  Size  Location     Type
 13083 ;;                  1    wreg      enum E3090
 13084 ;; Registers used:
 13085 ;;		wreg, status,2
 13086 ;; Tracked objects:
 13087 ;;		On entry : 1F/0
 13088 ;;		On exit  : 1F/1
 13089 ;;		Unchanged: 0/0
 13090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13095 ;;Total ram usage:        0 bytes
 13096 ;; Hardware stack levels used:    1
 13097 ;; Hardware stack levels required when called:    4
 13098 ;; This function calls:
 13099 ;;		Nothing
 13100 ;; This function is called by:
 13101 ;;		_I2C_MasterFsm
 13102 ;; This function uses a non-reentrant model
 13103 ;;
 13104                           
 13105                           
 13106                           ;psect for function _I2C_DO_RESET
 13107  11B8                     _I2C_DO_RESET:
 13108                           
 13109                           ;mcc_generated_files/i2c_master.c: 496:     I2C_Status.busy = 0;
 13110                           
 13111                           ;incstack = 0
 13112                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
 13113  11B8  0021               	movlb	1	; select bank1
 13114  11B9  10C3               	bcf	(_I2C_Status^(0+128)+35),1
 13115                           
 13116                           ;mcc_generated_files/i2c_master.c: 497:     I2C_Status.error = I2C_NOERR;
 13117  11BA  01C2               	clrf	(_I2C_Status^(0+128)+34)
 13118                           
 13119                           ;mcc_generated_files/i2c_master.c: 498:     return I2C_RESET;
 13120  11BB  300E               	movlw	14
 13121  11BC  0008               	return
 13122  11BD                     __end_of_I2C_DO_RESET:
 13123                           
 13124                           	psect	text71
 13125  11A3                     __ptext71:	
 13126 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
 13127 ;; Defined at:
 13128 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
 13129 ;; Parameters:    Size  Location     Type
 13130 ;;		None
 13131 ;; Auto vars:     Size  Location     Type
 13132 ;;		None
 13133 ;; Return value:  Size  Location     Type
 13134 ;;                  1    wreg      enum E3090
 13135 ;; Registers used:
 13136 ;;		wreg, status,2, status,0, pclath, cstack
 13137 ;; Tracked objects:
 13138 ;;		On entry : 1F/0
 13139 ;;		On exit  : 1F/4
 13140 ;;		Unchanged: 0/0
 13141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;Total ram usage:        0 bytes
 13147 ;; Hardware stack levels used:    1
 13148 ;; Hardware stack levels required when called:    5
 13149 ;; This function calls:
 13150 ;;		_I2C_MasterSendNack
 13151 ;; This function is called by:
 13152 ;;		_I2C_DO_RX
 13153 ;;		_I2C_MasterFsm
 13154 ;; This function uses a non-reentrant model
 13155 ;;
 13156                           
 13157                           
 13158                           ;psect for function _I2C_DO_RX_NACK_RESTART
 13159  11A3                     _I2C_DO_RX_NACK_RESTART:
 13160                           
 13161                           ;mcc_generated_files/i2c_master.c: 490:     I2C_MasterSendNack();
 13162                           
 13163                           ;incstack = 0
 13164                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 13165  11A3  3191  2183         	fcall	_I2C_MasterSendNack
 13166                           
 13167                           ;mcc_generated_files/i2c_master.c: 491:     return I2C_SEND_RESTART;
 13168  11A5  3009               	movlw	9
 13169  11A6  0008               	return
 13170  11A7                     __end_of_I2C_DO_RX_NACK_RESTART:
 13171                           
 13172                           	psect	text72
 13173  119F                     __ptext72:	
 13174 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
 13175 ;; Defined at:
 13176 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
 13177 ;; Parameters:    Size  Location     Type
 13178 ;;		None
 13179 ;; Auto vars:     Size  Location     Type
 13180 ;;		None
 13181 ;; Return value:  Size  Location     Type
 13182 ;;                  1    wreg      enum E3090
 13183 ;; Registers used:
 13184 ;;		wreg, status,2, status,0, pclath, cstack
 13185 ;; Tracked objects:
 13186 ;;		On entry : 1F/0
 13187 ;;		On exit  : 1F/4
 13188 ;;		Unchanged: 0/0
 13189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13194 ;;Total ram usage:        0 bytes
 13195 ;; Hardware stack levels used:    1
 13196 ;; Hardware stack levels required when called:    5
 13197 ;; This function calls:
 13198 ;;		_I2C_MasterSendNack
 13199 ;; This function is called by:
 13200 ;;		_I2C_DO_RX
 13201 ;;		_I2C_MasterFsm
 13202 ;; This function uses a non-reentrant model
 13203 ;;
 13204                           
 13205                           
 13206                           ;psect for function _I2C_DO_RX_NACK_STOP
 13207  119F                     _I2C_DO_RX_NACK_STOP:
 13208                           
 13209                           ;mcc_generated_files/i2c_master.c: 484:     I2C_MasterSendNack();
 13210                           
 13211                           ;incstack = 0
 13212                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 13213  119F  3191  2183         	fcall	_I2C_MasterSendNack
 13214                           
 13215                           ;mcc_generated_files/i2c_master.c: 485:     return I2C_SEND_STOP;
 13216  11A1  300A               	movlw	10
 13217  11A2  0008               	return
 13218  11A3                     __end_of_I2C_DO_RX_NACK_STOP:
 13219                           
 13220                           	psect	text73
 13221  119B                     __ptext73:	
 13222 ;; *************** function _I2C_DO_RX_ACK *****************
 13223 ;; Defined at:
 13224 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
 13225 ;; Parameters:    Size  Location     Type
 13226 ;;		None
 13227 ;; Auto vars:     Size  Location     Type
 13228 ;;		None
 13229 ;; Return value:  Size  Location     Type
 13230 ;;                  1    wreg      enum E3090
 13231 ;; Registers used:
 13232 ;;		wreg, status,2, status,0, pclath, cstack
 13233 ;; Tracked objects:
 13234 ;;		On entry : 1F/0
 13235 ;;		On exit  : 1F/4
 13236 ;;		Unchanged: 0/0
 13237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13242 ;;Total ram usage:        0 bytes
 13243 ;; Hardware stack levels used:    1
 13244 ;; Hardware stack levels required when called:    5
 13245 ;; This function calls:
 13246 ;;		_I2C_MasterSendAck
 13247 ;; This function is called by:
 13248 ;;		_I2C_MasterFsm
 13249 ;; This function uses a non-reentrant model
 13250 ;;
 13251                           
 13252                           
 13253                           ;psect for function _I2C_DO_RX_ACK
 13254  119B                     _I2C_DO_RX_ACK:
 13255                           
 13256                           ;mcc_generated_files/i2c_master.c: 477:     I2C_MasterSendAck();
 13257                           
 13258                           ;incstack = 0
 13259                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
 13260  119B  3191  2187         	fcall	_I2C_MasterSendAck
 13261                           
 13262                           ;mcc_generated_files/i2c_master.c: 478:     return I2C_RCEN;
 13263  119D  3005               	movlw	5
 13264  119E  0008               	return
 13265  119F                     __end_of_I2C_DO_RX_ACK:
 13266                           
 13267                           	psect	text74
 13268  1197                     __ptext74:	
 13269 ;; *************** function _I2C_DO_SEND_STOP *****************
 13270 ;; Defined at:
 13271 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
 13272 ;; Parameters:    Size  Location     Type
 13273 ;;		None
 13274 ;; Auto vars:     Size  Location     Type
 13275 ;;		None
 13276 ;; Return value:  Size  Location     Type
 13277 ;;                  1    wreg      enum E3090
 13278 ;; Registers used:
 13279 ;;		wreg, status,2, status,0, pclath, cstack
 13280 ;; Tracked objects:
 13281 ;;		On entry : 1F/0
 13282 ;;		On exit  : 1F/4
 13283 ;;		Unchanged: 0/0
 13284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13289 ;;Total ram usage:        0 bytes
 13290 ;; Hardware stack levels used:    1
 13291 ;; Hardware stack levels required when called:    5
 13292 ;; This function calls:
 13293 ;;		_I2C_MasterStop
 13294 ;; This function is called by:
 13295 ;;		_I2C_DO_TX
 13296 ;;		_I2C_DO_TX_EMPTY
 13297 ;;		_I2C_DO_ADDRESS_NACK
 13298 ;;		_I2C_MasterFsm
 13299 ;; This function uses a non-reentrant model
 13300 ;;
 13301                           
 13302                           
 13303                           ;psect for function _I2C_DO_SEND_STOP
 13304  1197                     _I2C_DO_SEND_STOP:
 13305                           
 13306                           ;mcc_generated_files/i2c_master.c: 471:     I2C_MasterStop();
 13307                           
 13308                           ;incstack = 0
 13309                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 13310  1197  3191  2179         	fcall	_I2C_MasterStop
 13311                           
 13312                           ;mcc_generated_files/i2c_master.c: 472:     return I2C_IDLE;
 13313  1199  3000               	movlw	0
 13314  119A  0008               	return
 13315  119B                     __end_of_I2C_DO_SEND_STOP:
 13316                           
 13317                           	psect	text75
 13318  1193                     __ptext75:	
 13319 ;; *************** function _I2C_DO_SEND_RESTART *****************
 13320 ;; Defined at:
 13321 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
 13322 ;; Parameters:    Size  Location     Type
 13323 ;;		None
 13324 ;; Auto vars:     Size  Location     Type
 13325 ;;		None
 13326 ;; Return value:  Size  Location     Type
 13327 ;;                  1    wreg      enum E3090
 13328 ;; Registers used:
 13329 ;;		wreg, status,2, status,0, pclath, cstack
 13330 ;; Tracked objects:
 13331 ;;		On entry : 1F/0
 13332 ;;		On exit  : 1F/4
 13333 ;;		Unchanged: 0/0
 13334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13339 ;;Total ram usage:        0 bytes
 13340 ;; Hardware stack levels used:    1
 13341 ;; Hardware stack levels required when called:    5
 13342 ;; This function calls:
 13343 ;;		_I2C_MasterEnableRestart
 13344 ;; This function is called by:
 13345 ;;		_I2C_DO_TX_EMPTY
 13346 ;;		_I2C_DO_ADDRESS_NACK
 13347 ;;		_I2C_MasterFsm
 13348 ;; This function uses a non-reentrant model
 13349 ;;
 13350                           
 13351                           
 13352                           ;psect for function _I2C_DO_SEND_RESTART
 13353  1193                     _I2C_DO_SEND_RESTART:
 13354                           
 13355                           ;mcc_generated_files/i2c_master.c: 465:     I2C_MasterEnableRestart();
 13356                           
 13357                           ;incstack = 0
 13358                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 13359  1193  3191  2176         	fcall	_I2C_MasterEnableRestart
 13360                           
 13361                           ;mcc_generated_files/i2c_master.c: 466:     return I2C_SEND_ADR_READ;
 13362  1195  3001               	movlw	1
 13363  1196  0008               	return
 13364  1197                     __end_of_I2C_DO_SEND_RESTART:
 13365                           
 13366                           	psect	text76
 13367  118F                     __ptext76:	
 13368 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
 13369 ;; Defined at:
 13370 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
 13371 ;; Parameters:    Size  Location     Type
 13372 ;;		None
 13373 ;; Auto vars:     Size  Location     Type
 13374 ;;		None
 13375 ;; Return value:  Size  Location     Type
 13376 ;;                  1    wreg      enum E3090
 13377 ;; Registers used:
 13378 ;;		wreg, status,2, status,0, pclath, cstack
 13379 ;; Tracked objects:
 13380 ;;		On entry : 1F/0
 13381 ;;		On exit  : 1F/4
 13382 ;;		Unchanged: 0/0
 13383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13388 ;;Total ram usage:        0 bytes
 13389 ;; Hardware stack levels used:    1
 13390 ;; Hardware stack levels required when called:    5
 13391 ;; This function calls:
 13392 ;;		_I2C_MasterEnableRestart
 13393 ;; This function is called by:
 13394 ;;		_I2C_DO_TX
 13395 ;;		_I2C_MasterFsm
 13396 ;; This function uses a non-reentrant model
 13397 ;;
 13398                           
 13399                           
 13400                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
 13401  118F                     _I2C_DO_SEND_RESTART_WRITE:
 13402                           
 13403                           ;mcc_generated_files/i2c_master.c: 458:     I2C_MasterEnableRestart();
 13404                           
 13405                           ;incstack = 0
 13406                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 13407  118F  3191  2176         	fcall	_I2C_MasterEnableRestart
 13408                           
 13409                           ;mcc_generated_files/i2c_master.c: 459:     return I2C_SEND_ADR_WRITE;
 13410  1191  3002               	movlw	2
 13411  1192  0008               	return
 13412  1193                     __end_of_I2C_DO_SEND_RESTART_WRITE:
 13413                           
 13414                           	psect	text77
 13415  118B                     __ptext77:	
 13416 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
 13417 ;; Defined at:
 13418 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
 13419 ;; Parameters:    Size  Location     Type
 13420 ;;		None
 13421 ;; Auto vars:     Size  Location     Type
 13422 ;;		None
 13423 ;; Return value:  Size  Location     Type
 13424 ;;                  1    wreg      enum E3090
 13425 ;; Registers used:
 13426 ;;		wreg, status,2, status,0, pclath, cstack
 13427 ;; Tracked objects:
 13428 ;;		On entry : 1F/0
 13429 ;;		On exit  : 1F/4
 13430 ;;		Unchanged: 0/0
 13431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;Total ram usage:        0 bytes
 13437 ;; Hardware stack levels used:    1
 13438 ;; Hardware stack levels required when called:    5
 13439 ;; This function calls:
 13440 ;;		_I2C_MasterEnableRestart
 13441 ;; This function is called by:
 13442 ;;		_I2C_DO_TX
 13443 ;;		_I2C_MasterFsm
 13444 ;; This function uses a non-reentrant model
 13445 ;;
 13446                           
 13447                           
 13448                           ;psect for function _I2C_DO_SEND_RESTART_READ
 13449  118B                     _I2C_DO_SEND_RESTART_READ:
 13450                           
 13451                           ;mcc_generated_files/i2c_master.c: 452:     I2C_MasterEnableRestart();
 13452                           
 13453                           ;incstack = 0
 13454                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 13455  118B  3191  2176         	fcall	_I2C_MasterEnableRestart
 13456                           
 13457                           ;mcc_generated_files/i2c_master.c: 453:     return I2C_SEND_ADR_READ;
 13458  118D  3001               	movlw	1
 13459  118E  0008               	return
 13460  118F                     __end_of_I2C_DO_SEND_RESTART_READ:
 13461                           
 13462                           	psect	text78
 13463  11CE                     __ptext78:	
 13464 ;; *************** function _I2C_DO_RCEN *****************
 13465 ;; Defined at:
 13466 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
 13467 ;; Parameters:    Size  Location     Type
 13468 ;;		None
 13469 ;; Auto vars:     Size  Location     Type
 13470 ;;		None
 13471 ;; Return value:  Size  Location     Type
 13472 ;;                  1    wreg      enum E3090
 13473 ;; Registers used:
 13474 ;;		wreg, status,2, status,0, pclath, cstack
 13475 ;; Tracked objects:
 13476 ;;		On entry : 1F/0
 13477 ;;		On exit  : 1F/4
 13478 ;;		Unchanged: 0/0
 13479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;Total ram usage:        0 bytes
 13485 ;; Hardware stack levels used:    1
 13486 ;; Hardware stack levels required when called:    5
 13487 ;; This function calls:
 13488 ;;		_I2C_MasterStartRx
 13489 ;; This function is called by:
 13490 ;;		_I2C_MasterFsm
 13491 ;; This function uses a non-reentrant model
 13492 ;;
 13493                           
 13494                           
 13495                           ;psect for function _I2C_DO_RCEN
 13496  11CE                     _I2C_DO_RCEN:
 13497                           
 13498                           ;mcc_generated_files/i2c_master.c: 404:     I2C_Status.addressNackCheck = 0;
 13499                           
 13500                           ;incstack = 0
 13501                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 13502  11CE  0021               	movlb	1	; select bank1
 13503  11CF  1043               	bcf	(_I2C_Status^(0+128)+35),0
 13504                           
 13505                           ;mcc_generated_files/i2c_master.c: 405:     I2C_MasterStartRx();
 13506  11D0  3191  217C         	fcall	_I2C_MasterStartRx
 13507                           
 13508                           ;mcc_generated_files/i2c_master.c: 406:     return I2C_RX;
 13509  11D2  3004               	movlw	4
 13510  11D3  0008               	return
 13511  11D4                     __end_of_I2C_DO_RCEN:
 13512                           
 13513                           	psect	text79
 13514  0A12                     __ptext79:	
 13515 ;; *************** function _I2C_DO_RX *****************
 13516 ;; Defined at:
 13517 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
 13518 ;; Parameters:    Size  Location     Type
 13519 ;;		None
 13520 ;; Auto vars:     Size  Location     Type
 13521 ;;		None
 13522 ;; Return value:  Size  Location     Type
 13523 ;;                  1    wreg      enum E3090
 13524 ;; Registers used:
 13525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13526 ;; Tracked objects:
 13527 ;;		On entry : 1F/0
 13528 ;;		On exit  : 1F/4
 13529 ;;		Unchanged: 0/0
 13530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;Total ram usage:        2 bytes
 13536 ;; Hardware stack levels used:    1
 13537 ;; Hardware stack levels required when called:    7
 13538 ;; This function calls:
 13539 ;;		Absolute function
 13540 ;;		_I2C_CallbackReturnReset
 13541 ;;		_I2C_CallbackReturnStop
 13542 ;;		_I2C_DO_RX_NACK_RESTART
 13543 ;;		_I2C_DO_RX_NACK_STOP
 13544 ;;		_I2C_MasterGetRxData
 13545 ;;		_I2C_MasterSendAck
 13546 ;;		_rd1RegCompleteHandler
 13547 ;;		_rd1RegCompleteHandler@i2c_simple_master$F2183
 13548 ;;		_rd2RegCompleteHandler
 13549 ;;		_rd2RegCompleteHandler@i2c_simple_master$F2191
 13550 ;;		_rdBlkRegCompleteHandler
 13551 ;;		_rdBlkRegCompleteHandler@i2c_simple_master$F2203
 13552 ;;		_wr1RegCompleteHandler
 13553 ;;		_wr1RegCompleteHandler@i2c_simple_master$F2173
 13554 ;;		_wr2RegCompleteHandler
 13555 ;;		_wr2RegCompleteHandler@i2c_simple_master$F2197
 13556 ;; This function is called by:
 13557 ;;		_I2C_MasterFsm
 13558 ;; This function uses a non-reentrant model
 13559 ;;
 13560                           
 13561                           
 13562                           ;psect for function _I2C_DO_RX
 13563  0A12                     _I2C_DO_RX:
 13564                           
 13565                           ;mcc_generated_files/i2c_master.c: 380:     *I2C_Status.data_ptr++ = I2C_MasterGetRxData
      +                          ();
 13566                           
 13567                           ;incstack = 0
 13568                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13569  0A12  3188  2000  318A   	fcall	_I2C_MasterGetRxData
 13570  0A15  0020               	movlb	0	; select bank0
 13571  0A16  00AF               	movwf	??_I2C_DO_RX
 13572  0A17  0021               	movlb	1	; select bank1
 13573  0A18  083D               	movf	(_I2C_Status^(0+128)+29),w
 13574  0A19  0086               	movwf	6
 13575  0A1A  083E               	movf	((_I2C_Status+1)^(0+128)+29),w
 13576  0A1B  0087               	movwf	7
 13577  0A1C  0020               	movlb	0	; select bank0
 13578  0A1D  082F               	movf	??_I2C_DO_RX,w
 13579  0A1E  0081               	movwf	1
 13580  0A1F  3001               	movlw	1
 13581  0A20  0021               	movlb	1	; select bank1
 13582  0A21  07BD               	addwf	(_I2C_Status^(0+128)+29),f
 13583  0A22  3000               	movlw	0
 13584  0A23  3DBE               	addwfc	((_I2C_Status+1)^(0+128)+29),f
 13585                           
 13586                           ;mcc_generated_files/i2c_master.c: 381:     if(--I2C_Status.data_length)
 13587  0A24  3001               	movlw	1
 13588  0A25  02BF               	subwf	(_I2C_Status^(0+128)+31),f
 13589  0A26  3000               	movlw	0
 13590  0A27  3BC0               	subwfb	((_I2C_Status+1)^(0+128)+31),f
 13591  0A28  083F               	movf	(_I2C_Status^(0+128)+31),w
 13592  0A29  0440               	iorwf	((_I2C_Status+1)^(0+128)+31),w
 13593  0A2A  1903               	btfsc	3,2
 13594  0A2B  2A30               	goto	l704
 13595                           
 13596                           ;mcc_generated_files/i2c_master.c: 382:     {;mcc_generated_files/i2c_master.c: 383:    
      +                               I2C_MasterSendAck();
 13597  0A2C  3191  2187         	fcall	_I2C_MasterSendAck
 13598                           
 13599                           ;mcc_generated_files/i2c_master.c: 384:         return I2C_RCEN;
 13600  0A2E  3005               	movlw	5
 13601  0A2F  0008               	return
 13602  0A30                     l704:	
 13603                           ;mcc_generated_files/i2c_master.c: 386:     else
 13604                           
 13605                           
 13606                           ;mcc_generated_files/i2c_master.c: 387:     {;mcc_generated_files/i2c_master.c: 388:    
      +                               I2C_Status.bufferFree = 1;
 13607  0A30  15C3               	bsf	(_I2C_Status^(0+128)+35),3
 13608                           
 13609                           ;mcc_generated_files/i2c_master.c: 389:         switch(I2C_Status.callbackTable[I2C_DATA
      +                          _COMPLETE](I2C_Status.callbackPayload[I2C_DATA_COMPLETE]))
 13610  0A31  2A38               	goto	l4767
 13611  0A32                     l4757:
 13612                           
 13613                           ;mcc_generated_files/i2c_master.c: 393:                 return I2C_DO_RX_NACK_RESTART();
 13614  0A32  3191  21A3         	fcall	_I2C_DO_RX_NACK_RESTART
 13615  0A34  0008               	return
 13616  0A35                     l4761:
 13617                           
 13618                           ;mcc_generated_files/i2c_master.c: 397:                 return I2C_DO_RX_NACK_STOP();
 13619  0A35  3191  219F         	fcall	_I2C_DO_RX_NACK_STOP
 13620  0A37  0008               	return
 13621  0A38                     l4767:
 13622  0A38  082D               	movf	((_I2C_Status+1)^(0+128)+12),w
 13623  0A39  0020               	movlb	0	; select bank0
 13624  0A3A  00AE               	movwf	rdBlkRegCompleteHandler@i2c_simple_master$F2203@p+1
 13625  0A3B  0021               	movlb	1	; select bank1
 13626  0A3C  082C               	movf	(_I2C_Status^(0+128)+12),w
 13627  0A3D  0020               	movlb	0	; select bank0
 13628  0A3E  00AD               	movwf	rdBlkRegCompleteHandler@i2c_simple_master$F2203@p
 13629  0A3F  0021               	movlb	1	; select bank1
 13630  0A40  0821               	movf	(_I2C_Status+1)^(0+128),w
 13631  0A41  008A               	movwf	10
 13632  0A42  0820               	movf	_I2C_Status^(0+128),w
 13633  0A43  000A               	callw
 13634  0A44  318A               	pagesel	$
 13635  0A45  0020               	movlb	0	; select bank0
 13636  0A46  00AF               	movwf	??_I2C_DO_RX
 13637  0A47  01B0               	clrf	??_I2C_DO_RX+1
 13638                           
 13639                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13640                           ; Switch size 1, requested type "simple"
 13641                           ; Number of cases is 1, Range of values is 0 to 0
 13642                           ; switch strategies available:
 13643                           ; Name         Instructions Cycles
 13644                           ; simple_byte            4     3 (average)
 13645                           ; direct_byte            8     6 (fixed)
 13646                           ; jumptable            260     6 (fixed)
 13647                           ;	Chosen strategy is simple_byte
 13648  0A48  0830               	movf	??_I2C_DO_RX+1,w
 13649  0A49  3A00               	xorlw	0	; case 0
 13650  0A4A  1903               	skipnz
 13651  0A4B  2A4D               	goto	l6607
 13652  0A4C  2A35               	goto	l4761
 13653  0A4D                     l6607:
 13654                           
 13655                           ; Switch size 1, requested type "simple"
 13656                           ; Number of cases is 4, Range of values is 1 to 4
 13657                           ; switch strategies available:
 13658                           ; Name         Instructions Cycles
 13659                           ; simple_byte           13     7 (average)
 13660                           ; direct_byte           17     9 (fixed)
 13661                           ; jumptable            263     9 (fixed)
 13662                           ;	Chosen strategy is simple_byte
 13663  0A4D  082F               	movf	??_I2C_DO_RX,w
 13664  0A4E  3A01               	xorlw	1	; case 1
 13665  0A4F  1903               	skipnz
 13666  0A50  2A35               	goto	l4761
 13667  0A51  3A03               	xorlw	3	; case 2
 13668  0A52  1903               	skipnz
 13669  0A53  2A32               	goto	l4757
 13670  0A54  3A01               	xorlw	1	; case 3
 13671  0A55  1903               	skipnz
 13672  0A56  2A32               	goto	l4757
 13673  0A57  3A07               	xorlw	7	; case 4
 13674  0A58  1903               	skipnz
 13675  0A59  2A35               	goto	l4761
 13676  0A5A  2A35               	goto	l4761
 13677  0A5B  0008               	return
 13678  0A5C                     __end_of_I2C_DO_RX:
 13679                           
 13680                           	psect	text80
 13681  0B4A                     __ptext80:	
 13682 ;; *************** function _I2C_DO_TX *****************
 13683 ;; Defined at:
 13684 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
 13685 ;; Parameters:    Size  Location     Type
 13686 ;;		None
 13687 ;; Auto vars:     Size  Location     Type
 13688 ;;		None
 13689 ;; Return value:  Size  Location     Type
 13690 ;;                  1    wreg      enum E3090
 13691 ;; Registers used:
 13692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13693 ;; Tracked objects:
 13694 ;;		On entry : 1F/0
 13695 ;;		On exit  : 1A/0
 13696 ;;		Unchanged: 0/0
 13697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13700 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13701 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13702 ;;Total ram usage:        2 bytes
 13703 ;; Hardware stack levels used:    1
 13704 ;; Hardware stack levels required when called:    7
 13705 ;; This function calls:
 13706 ;;		Absolute function
 13707 ;;		_I2C_CallbackReturnReset
 13708 ;;		_I2C_CallbackReturnStop
 13709 ;;		_I2C_DO_SEND_RESTART_READ
 13710 ;;		_I2C_DO_SEND_RESTART_WRITE
 13711 ;;		_I2C_DO_SEND_STOP
 13712 ;;		_I2C_MasterIsNack
 13713 ;;		_I2C_MasterSendTxData
 13714 ;;		_rd1RegCompleteHandler
 13715 ;;		_rd1RegCompleteHandler@i2c_simple_master$F2183
 13716 ;;		_rd2RegCompleteHandler
 13717 ;;		_rd2RegCompleteHandler@i2c_simple_master$F2191
 13718 ;;		_rdBlkRegCompleteHandler
 13719 ;;		_rdBlkRegCompleteHandler@i2c_simple_master$F2203
 13720 ;;		_wr1RegCompleteHandler
 13721 ;;		_wr1RegCompleteHandler@i2c_simple_master$F2173
 13722 ;;		_wr2RegCompleteHandler
 13723 ;;		_wr2RegCompleteHandler@i2c_simple_master$F2197
 13724 ;; This function is called by:
 13725 ;;		_I2C_MasterFsm
 13726 ;; This function uses a non-reentrant model
 13727 ;;
 13728                           
 13729                           
 13730                           ;psect for function _I2C_DO_TX
 13731  0B4A                     _I2C_DO_TX:
 13732                           
 13733                           ;mcc_generated_files/i2c_master.c: 356:     if(I2C_MasterIsNack())
 13734                           
 13735                           ;incstack = 0
 13736                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13737  0B4A  3191  21C8  318B   	fcall	_I2C_MasterIsNack
 13738  0B4D  3A00               	xorlw	0
 13739  0B4E  1D03               	btfss	3,2
 13740  0B4F  2B5A               	goto	l4727
 13741  0B50  2B82               	goto	l688
 13742  0B51                     l4713:
 13743                           
 13744                           ;mcc_generated_files/i2c_master.c: 361:                 return I2C_DO_SEND_RESTART_READ(
      +                          );
 13745  0B51  3191  218B         	fcall	_I2C_DO_SEND_RESTART_READ
 13746  0B53  0008               	return
 13747  0B54                     l4717:
 13748                           
 13749                           ;mcc_generated_files/i2c_master.c: 363:                   return I2C_DO_SEND_RESTART_WRI
      +                          TE();
 13750  0B54  3191  218F         	fcall	_I2C_DO_SEND_RESTART_WRITE
 13751  0B56  0008               	return
 13752  0B57                     l4721:
 13753                           
 13754                           ;mcc_generated_files/i2c_master.c: 367:                 return I2C_DO_SEND_STOP();
 13755  0B57  3191  2197         	fcall	_I2C_DO_SEND_STOP
 13756  0B59  0008               	return
 13757  0B5A                     l4727:
 13758  0B5A  0021               	movlb	1	; select bank1
 13759  0B5B  0833               	movf	((_I2C_Status+1)^(0+128)+18),w
 13760  0B5C  0020               	movlb	0	; select bank0
 13761  0B5D  00AE               	movwf	rdBlkRegCompleteHandler@i2c_simple_master$F2203@p+1
 13762  0B5E  0021               	movlb	1	; select bank1
 13763  0B5F  0832               	movf	(_I2C_Status^(0+128)+18),w
 13764  0B60  0020               	movlb	0	; select bank0
 13765  0B61  00AD               	movwf	rdBlkRegCompleteHandler@i2c_simple_master$F2203@p
 13766  0B62  30A0               	movlw	low _I2C_Status
 13767  0B63  0086               	movwf	6
 13768  0B64  3000               	movlw	high _I2C_Status
 13769  0B65  0087               	movwf	7
 13770  0B66  3146               	addfsr 1,6
 13771  0B67  3F41               	moviw [1]fsr1
 13772  0B68  008A               	movwf	10
 13773  0B69  3F40               	moviw [0]fsr1
 13774  0B6A  000A               	callw
 13775  0B6B  318B               	pagesel	$
 13776  0B6C  0020               	movlb	0	; select bank0
 13777  0B6D  00AF               	movwf	??_I2C_DO_TX
 13778  0B6E  01B0               	clrf	??_I2C_DO_TX+1
 13779                           
 13780                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13781                           ; Switch size 1, requested type "simple"
 13782                           ; Number of cases is 1, Range of values is 0 to 0
 13783                           ; switch strategies available:
 13784                           ; Name         Instructions Cycles
 13785                           ; simple_byte            4     3 (average)
 13786                           ; direct_byte            8     6 (fixed)
 13787                           ; jumptable            260     6 (fixed)
 13788                           ;	Chosen strategy is simple_byte
 13789  0B6F  0830               	movf	??_I2C_DO_TX+1,w
 13790  0B70  3A00               	xorlw	0	; case 0
 13791  0B71  1903               	skipnz
 13792  0B72  2B74               	goto	l6609
 13793  0B73  2B57               	goto	l4721
 13794  0B74                     l6609:
 13795                           
 13796                           ; Switch size 1, requested type "simple"
 13797                           ; Number of cases is 4, Range of values is 1 to 4
 13798                           ; switch strategies available:
 13799                           ; Name         Instructions Cycles
 13800                           ; simple_byte           13     7 (average)
 13801                           ; direct_byte           17     9 (fixed)
 13802                           ; jumptable            263     9 (fixed)
 13803                           ;	Chosen strategy is simple_byte
 13804  0B74  082F               	movf	??_I2C_DO_TX,w
 13805  0B75  3A01               	xorlw	1	; case 1
 13806  0B76  1903               	skipnz
 13807  0B77  2B57               	goto	l4721
 13808  0B78  3A03               	xorlw	3	; case 2
 13809  0B79  1903               	skipnz
 13810  0B7A  2B51               	goto	l4713
 13811  0B7B  3A01               	xorlw	1	; case 3
 13812  0B7C  1903               	skipnz
 13813  0B7D  2B54               	goto	l4717
 13814  0B7E  3A07               	xorlw	7	; case 4
 13815  0B7F  1903               	skipnz
 13816  0B80  2B57               	goto	l4721
 13817  0B81  2B57               	goto	l4721
 13818  0B82                     l688:	
 13819                           ;mcc_generated_files/i2c_master.c: 370:     else
 13820                           
 13821                           
 13822                           ;mcc_generated_files/i2c_master.c: 371:     {;mcc_generated_files/i2c_master.c: 372:    
      +                               I2C_Status.addressNackCheck = 0;
 13823  0B82  0021               	movlb	1	; select bank1
 13824  0B83  1043               	bcf	(_I2C_Status^(0+128)+35),0
 13825                           
 13826                           ;mcc_generated_files/i2c_master.c: 373:         I2C_MasterSendTxData(*I2C_Status.data_pt
      +                          r++);
 13827  0B84  083E               	movf	((_I2C_Status+1)^(0+128)+29),w
 13828  0B85  0020               	movlb	0	; select bank0
 13829  0B86  00B0               	movwf	??_I2C_DO_TX+1
 13830  0B87  0021               	movlb	1	; select bank1
 13831  0B88  083D               	movf	(_I2C_Status^(0+128)+29),w
 13832  0B89  0020               	movlb	0	; select bank0
 13833  0B8A  00AF               	movwf	??_I2C_DO_TX
 13834  0B8B  0021               	movlb	1	; select bank1
 13835  0B8C  0ABD               	incf	(_I2C_Status^(0+128)+29),f
 13836  0B8D  1903               	skipnz
 13837  0B8E  0ABE               	incf	((_I2C_Status+1)^(0+128)+29),f
 13838  0B8F  0020               	movlb	0	; select bank0
 13839  0B90  082F               	movf	??_I2C_DO_TX,w
 13840  0B91  0086               	movwf	6
 13841  0B92  0830               	movf	??_I2C_DO_TX+1,w
 13842  0B93  0087               	movwf	7
 13843  0B94  0801               	movf	1,w
 13844  0B95  3191  21C2  318B   	fcall	_I2C_MasterSendTxData
 13845                           
 13846                           ;mcc_generated_files/i2c_master.c: 374:         return (--I2C_Status.data_length)?I2C_TX
      +                          :I2C_TX_EMPTY;
 13847  0B98  3001               	movlw	1
 13848  0B99  0021               	movlb	1	; select bank1
 13849  0B9A  02BF               	subwf	(_I2C_Status^(0+128)+31),f
 13850  0B9B  3000               	movlw	0
 13851  0B9C  3BC0               	subwfb	((_I2C_Status+1)^(0+128)+31),f
 13852  0B9D  083F               	movf	(_I2C_Status^(0+128)+31),w
 13853  0B9E  0440               	iorwf	((_I2C_Status+1)^(0+128)+31),w
 13854  0B9F  1D03               	btfss	3,2
 13855  0BA0  2BA3               	goto	l4735
 13856  0BA1  3006               	movlw	6
 13857  0BA2  0008               	return
 13858  0BA3                     l4735:
 13859  0BA3  3003               	movlw	3
 13860  0BA4  0008               	return
 13861  0BA5                     __end_of_I2C_DO_TX:
 13862                           
 13863                           	psect	text81
 13864  11D4                     __ptext81:	
 13865 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
 13866 ;; Defined at:
 13867 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
 13868 ;; Parameters:    Size  Location     Type
 13869 ;;		None
 13870 ;; Auto vars:     Size  Location     Type
 13871 ;;		None
 13872 ;; Return value:  Size  Location     Type
 13873 ;;                  1    wreg      enum E3090
 13874 ;; Registers used:
 13875 ;;		wreg, status,2, status,0, pclath, cstack
 13876 ;; Tracked objects:
 13877 ;;		On entry : 1F/0
 13878 ;;		On exit  : 1F/4
 13879 ;;		Unchanged: 0/0
 13880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;Total ram usage:        0 bytes
 13886 ;; Hardware stack levels used:    1
 13887 ;; Hardware stack levels required when called:    5
 13888 ;; This function calls:
 13889 ;;		_I2C_MasterSendTxData
 13890 ;; This function is called by:
 13891 ;;		_I2C_MasterFsm
 13892 ;; This function uses a non-reentrant model
 13893 ;;
 13894                           
 13895                           
 13896                           ;psect for function _I2C_DO_SEND_ADR_WRITE
 13897  11D4                     _I2C_DO_SEND_ADR_WRITE:
 13898                           
 13899                           ;mcc_generated_files/i2c_master.c: 349:     I2C_Status.addressNackCheck = 1;
 13900                           
 13901                           ;incstack = 0
 13902                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 13903  11D4  0021               	movlb	1	; select bank1
 13904  11D5  1443               	bsf	(_I2C_Status^(0+128)+35),0
 13905                           
 13906                           ;mcc_generated_files/i2c_master.c: 350:     I2C_MasterSendTxData((uint8_t) (I2C_Status.a
      +                          ddress << 1));
 13907  11D6  353C               	lslf	(_I2C_Status^(0+128)+28),w
 13908  11D7  3191  21C2         	fcall	_I2C_MasterSendTxData
 13909                           
 13910                           ;mcc_generated_files/i2c_master.c: 351:     return I2C_TX;
 13911  11D9  3003               	movlw	3
 13912  11DA  0008               	return
 13913  11DB                     __end_of_I2C_DO_SEND_ADR_WRITE:
 13914                           
 13915                           	psect	text82
 13916  11DB                     __ptext82:	
 13917 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
 13918 ;; Defined at:
 13919 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
 13920 ;; Parameters:    Size  Location     Type
 13921 ;;		None
 13922 ;; Auto vars:     Size  Location     Type
 13923 ;;		None
 13924 ;; Return value:  Size  Location     Type
 13925 ;;                  1    wreg      enum E3090
 13926 ;; Registers used:
 13927 ;;		wreg, status,2, status,0, pclath, cstack
 13928 ;; Tracked objects:
 13929 ;;		On entry : 1F/0
 13930 ;;		On exit  : 1F/4
 13931 ;;		Unchanged: 0/0
 13932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;Total ram usage:        0 bytes
 13938 ;; Hardware stack levels used:    1
 13939 ;; Hardware stack levels required when called:    5
 13940 ;; This function calls:
 13941 ;;		_I2C_MasterSendTxData
 13942 ;; This function is called by:
 13943 ;;		_I2C_MasterFsm
 13944 ;; This function uses a non-reentrant model
 13945 ;;
 13946                           
 13947                           
 13948                           ;psect for function _I2C_DO_SEND_ADR_READ
 13949  11DB                     _I2C_DO_SEND_ADR_READ:
 13950                           
 13951                           ;mcc_generated_files/i2c_master.c: 342:     I2C_Status.addressNackCheck = 1;
 13952                           
 13953                           ;incstack = 0
 13954                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 13955  11DB  0021               	movlb	1	; select bank1
 13956  11DC  1443               	bsf	(_I2C_Status^(0+128)+35),0
 13957                           
 13958                           ;mcc_generated_files/i2c_master.c: 343:     I2C_MasterSendTxData((uint8_t) (I2C_Status.a
      +                          ddress << 1 | 1));
 13959  11DD  1403               	setc
 13960  11DE  0D3C               	rlf	(_I2C_Status^(0+128)+28),w
 13961  11DF  3191  21C2         	fcall	_I2C_MasterSendTxData
 13962                           
 13963                           ;mcc_generated_files/i2c_master.c: 344:     return I2C_RCEN;
 13964  11E1  3005               	movlw	5
 13965  11E2  0008               	return
 13966  11E3                     __end_of_I2C_DO_SEND_ADR_READ:
 13967                           
 13968                           	psect	text83
 13969  11B3                     __ptext83:	
 13970 ;; *************** function _I2C_DO_IDLE *****************
 13971 ;; Defined at:
 13972 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
 13973 ;; Parameters:    Size  Location     Type
 13974 ;;		None
 13975 ;; Auto vars:     Size  Location     Type
 13976 ;;		None
 13977 ;; Return value:  Size  Location     Type
 13978 ;;                  1    wreg      enum E3090
 13979 ;; Registers used:
 13980 ;;		wreg, status,2
 13981 ;; Tracked objects:
 13982 ;;		On entry : 1F/0
 13983 ;;		On exit  : 1F/1
 13984 ;;		Unchanged: 0/0
 13985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13990 ;;Total ram usage:        0 bytes
 13991 ;; Hardware stack levels used:    1
 13992 ;; Hardware stack levels required when called:    4
 13993 ;; This function calls:
 13994 ;;		Nothing
 13995 ;; This function is called by:
 13996 ;;		_I2C_MasterFsm
 13997 ;; This function uses a non-reentrant model
 13998 ;;
 13999                           
 14000                           
 14001                           ;psect for function _I2C_DO_IDLE
 14002  11B3                     _I2C_DO_IDLE:
 14003                           
 14004                           ;mcc_generated_files/i2c_master.c: 335:     I2C_Status.busy = 0;
 14005                           
 14006                           ;incstack = 0
 14007                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
 14008  11B3  0021               	movlb	1	; select bank1
 14009  11B4  10C3               	bcf	(_I2C_Status^(0+128)+35),1
 14010                           
 14011                           ;mcc_generated_files/i2c_master.c: 336:     I2C_Status.error = I2C_NOERR;
 14012  11B5  01C2               	clrf	(_I2C_Status^(0+128)+34)
 14013                           
 14014                           ;mcc_generated_files/i2c_master.c: 337:     return I2C_RESET;
 14015  11B6  300E               	movlw	14
 14016  11B7  0008               	return
 14017  11B8                     __end_of_I2C_DO_IDLE:
 14018                           
 14019                           	psect	text84
 14020  179E                     __ptext84:	
 14021 ;; *************** function _I2C_DO_TX_EMPTY *****************
 14022 ;; Defined at:
 14023 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
 14024 ;; Parameters:    Size  Location     Type
 14025 ;;		None
 14026 ;; Auto vars:     Size  Location     Type
 14027 ;;		None
 14028 ;; Return value:  Size  Location     Type
 14029 ;;                  1    wreg      enum E3090
 14030 ;; Registers used:
 14031 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14032 ;; Tracked objects:
 14033 ;;		On entry : 1F/0
 14034 ;;		On exit  : 1B/0
 14035 ;;		Unchanged: 0/0
 14036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;Total ram usage:        2 bytes
 14042 ;; Hardware stack levels used:    1
 14043 ;; Hardware stack levels required when called:    7
 14044 ;; This function calls:
 14045 ;;		Absolute function
 14046 ;;		_I2C_CallbackReturnReset
 14047 ;;		_I2C_CallbackReturnStop
 14048 ;;		_I2C_DO_SEND_RESTART
 14049 ;;		_I2C_DO_SEND_STOP
 14050 ;;		_I2C_MasterSetIrq
 14051 ;;		_rd1RegCompleteHandler
 14052 ;;		_rd1RegCompleteHandler@i2c_simple_master$F2183
 14053 ;;		_rd2RegCompleteHandler
 14054 ;;		_rd2RegCompleteHandler@i2c_simple_master$F2191
 14055 ;;		_rdBlkRegCompleteHandler
 14056 ;;		_rdBlkRegCompleteHandler@i2c_simple_master$F2203
 14057 ;;		_wr1RegCompleteHandler
 14058 ;;		_wr1RegCompleteHandler@i2c_simple_master$F2173
 14059 ;;		_wr2RegCompleteHandler
 14060 ;;		_wr2RegCompleteHandler@i2c_simple_master$F2197
 14061 ;; This function is called by:
 14062 ;;		_I2C_MasterFsm
 14063 ;; This function uses a non-reentrant model
 14064 ;;
 14065                           
 14066                           
 14067                           ;psect for function _I2C_DO_TX_EMPTY
 14068  179E                     _I2C_DO_TX_EMPTY:
 14069                           
 14070                           ;mcc_generated_files/i2c_master.c: 411:     I2C_Status.bufferFree = 1;
 14071                           
 14072                           ;incstack = 0
 14073                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14074  179E  0021               	movlb	1	; select bank1
 14075  179F  15C3               	bsf	(_I2C_Status^(0+128)+35),3
 14076                           
 14077                           ;mcc_generated_files/i2c_master.c: 412:     switch(I2C_Status.callbackTable[I2C_DATA_COM
      +                          PLETE](I2C_Status.callbackPayload[I2C_DATA_COMPLETE]))
 14078  17A0  2FAB               	goto	l4799
 14079  17A1                     l4783:
 14080                           
 14081                           ;mcc_generated_files/i2c_master.c: 416:             return I2C_DO_SEND_RESTART();
 14082  17A1  3191  2193         	fcall	_I2C_DO_SEND_RESTART
 14083  17A3  0008               	return
 14084  17A4                     l4787:
 14085                           
 14086                           ;mcc_generated_files/i2c_master.c: 418:             I2C_MasterSetIrq();
 14087  17A4  3180  2002         	fcall	_I2C_MasterSetIrq
 14088                           
 14089                           ;mcc_generated_files/i2c_master.c: 419:             return I2C_TX;
 14090  17A6  3003               	movlw	3
 14091  17A7  0008               	return
 14092  17A8                     l4793:
 14093                           
 14094                           ;mcc_generated_files/i2c_master.c: 422:             return I2C_DO_SEND_STOP();
 14095  17A8  3191  2197         	fcall	_I2C_DO_SEND_STOP
 14096  17AA  0008               	return
 14097  17AB                     l4799:
 14098  17AB  082D               	movf	((_I2C_Status+1)^(0+128)+12),w
 14099  17AC  0020               	movlb	0	; select bank0
 14100  17AD  00AE               	movwf	rdBlkRegCompleteHandler@i2c_simple_master$F2203@p+1
 14101  17AE  0021               	movlb	1	; select bank1
 14102  17AF  082C               	movf	(_I2C_Status^(0+128)+12),w
 14103  17B0  0020               	movlb	0	; select bank0
 14104  17B1  00AD               	movwf	rdBlkRegCompleteHandler@i2c_simple_master$F2203@p
 14105  17B2  0021               	movlb	1	; select bank1
 14106  17B3  0821               	movf	(_I2C_Status+1)^(0+128),w
 14107  17B4  008A               	movwf	10
 14108  17B5  0820               	movf	_I2C_Status^(0+128),w
 14109  17B6  000A               	callw
 14110  17B7  3197               	pagesel	$
 14111  17B8  0020               	movlb	0	; select bank0
 14112  17B9  00AF               	movwf	??_I2C_DO_TX_EMPTY
 14113  17BA  01B0               	clrf	??_I2C_DO_TX_EMPTY+1
 14114                           
 14115                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14116                           ; Switch size 1, requested type "simple"
 14117                           ; Number of cases is 1, Range of values is 0 to 0
 14118                           ; switch strategies available:
 14119                           ; Name         Instructions Cycles
 14120                           ; simple_byte            4     3 (average)
 14121                           ; direct_byte            8     6 (fixed)
 14122                           ; jumptable            260     6 (fixed)
 14123                           ;	Chosen strategy is simple_byte
 14124  17BB  0830               	movf	??_I2C_DO_TX_EMPTY+1,w
 14125  17BC  3A00               	xorlw	0	; case 0
 14126  17BD  1903               	skipnz
 14127  17BE  2FC0               	goto	l6611
 14128  17BF  2FA8               	goto	l4793
 14129  17C0                     l6611:
 14130                           
 14131                           ; Switch size 1, requested type "simple"
 14132                           ; Number of cases is 4, Range of values is 1 to 4
 14133                           ; switch strategies available:
 14134                           ; Name         Instructions Cycles
 14135                           ; simple_byte           13     7 (average)
 14136                           ; direct_byte           17     9 (fixed)
 14137                           ; jumptable            263     9 (fixed)
 14138                           ;	Chosen strategy is simple_byte
 14139  17C0  082F               	movf	??_I2C_DO_TX_EMPTY,w
 14140  17C1  3A01               	xorlw	1	; case 1
 14141  17C2  1903               	skipnz
 14142  17C3  2FA8               	goto	l4793
 14143  17C4  3A03               	xorlw	3	; case 2
 14144  17C5  1903               	skipnz
 14145  17C6  2FA1               	goto	l4783
 14146  17C7  3A01               	xorlw	1	; case 3
 14147  17C8  1903               	skipnz
 14148  17C9  2FA1               	goto	l4783
 14149  17CA  3A07               	xorlw	7	; case 4
 14150  17CB  1903               	skipnz
 14151  17CC  2FA4               	goto	l4787
 14152  17CD  2FA8               	goto	l4793
 14153  17CE  0008               	return
 14154  17CF                     __end_of_I2C_DO_TX_EMPTY:
 14155                           
 14156                           	psect	text85
 14157  0002                     __ptext85:	
 14158 ;; *************** function _I2C_MasterSetIrq *****************
 14159 ;; Defined at:
 14160 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
 14161 ;; Parameters:    Size  Location     Type
 14162 ;;		None
 14163 ;; Auto vars:     Size  Location     Type
 14164 ;;		None
 14165 ;; Return value:  Size  Location     Type
 14166 ;;                  1    wreg      void 
 14167 ;; Registers used:
 14168 ;;		None
 14169 ;; Tracked objects:
 14170 ;;		On entry : 1F/0
 14171 ;;		On exit  : 1F/0
 14172 ;;		Unchanged: 0/0
 14173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14178 ;;Total ram usage:        0 bytes
 14179 ;; Hardware stack levels used:    1
 14180 ;; Hardware stack levels required when called:    4
 14181 ;; This function calls:
 14182 ;;		Nothing
 14183 ;; This function is called by:
 14184 ;;		_I2C_DO_TX_EMPTY
 14185 ;; This function uses a non-reentrant model
 14186 ;;
 14187                           
 14188                           
 14189                           ;psect for function _I2C_MasterSetIrq
 14190  0002                     _I2C_MasterSetIrq:
 14191                           
 14192                           ;mcc_generated_files/i2c_master.c: 647:     PIR1bits.SSPIF = 1;
 14193                           
 14194                           ;incstack = 0
 14195                           ; Regs used in _I2C_MasterSetIrq: []
 14196  0002  1591               	bsf	17,3	;volatile
 14197  0003  0008               	return
 14198  0004                     __end_of_I2C_MasterSetIrq:
 14199                           
 14200                           	psect	text86
 14201  11C8                     __ptext86:	
 14202 ;; *************** function _I2C_MasterIsNack *****************
 14203 ;; Defined at:
 14204 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
 14205 ;; Parameters:    Size  Location     Type
 14206 ;;		None
 14207 ;; Auto vars:     Size  Location     Type
 14208 ;;		None
 14209 ;; Return value:  Size  Location     Type
 14210 ;;                  1    wreg      _Bool 
 14211 ;; Registers used:
 14212 ;;		wreg, status,2, status,0
 14213 ;; Tracked objects:
 14214 ;;		On entry : 1E/1
 14215 ;;		On exit  : 1F/4
 14216 ;;		Unchanged: 0/0
 14217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;Total ram usage:        0 bytes
 14223 ;; Hardware stack levels used:    1
 14224 ;; Hardware stack levels required when called:    4
 14225 ;; This function calls:
 14226 ;;		Nothing
 14227 ;; This function is called by:
 14228 ;;		_I2C_MasterFsm
 14229 ;;		_I2C_DO_TX
 14230 ;; This function uses a non-reentrant model
 14231 ;;
 14232                           
 14233                           
 14234                           ;psect for function _I2C_MasterIsNack
 14235  11C8                     _I2C_MasterIsNack:
 14236                           
 14237                           ;mcc_generated_files/i2c_master.c: 600:     return SSPCON2bits.ACKSTAT;
 14238                           
 14239                           ;incstack = 0
 14240                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
 14241  11C8  0024               	movlb	4	; select bank4
 14242  11C9  0E16               	swapf	22,w	;volatile
 14243  11CA  0C89               	rrf	9,f
 14244  11CB  0C89               	rrf	9,f
 14245  11CC  3901               	andlw	1
 14246  11CD  0008               	return
 14247  11CE                     __end_of_I2C_MasterIsNack:
 14248                           
 14249                           	psect	text87
 14250  11C2                     __ptext87:	
 14251 ;; *************** function _I2C_MasterSendTxData *****************
 14252 ;; Defined at:
 14253 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
 14254 ;; Parameters:    Size  Location     Type
 14255 ;;  data            1    wreg     unsigned char 
 14256 ;; Auto vars:     Size  Location     Type
 14257 ;;  data            1    0[BANK0 ] unsigned char 
 14258 ;; Return value:  Size  Location     Type
 14259 ;;                  1    wreg      void 
 14260 ;; Registers used:
 14261 ;;		wreg
 14262 ;; Tracked objects:
 14263 ;;		On entry : 1E/0
 14264 ;;		On exit  : 1F/4
 14265 ;;		Unchanged: 0/0
 14266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;Total ram usage:        1 bytes
 14272 ;; Hardware stack levels used:    1
 14273 ;; Hardware stack levels required when called:    4
 14274 ;; This function calls:
 14275 ;;		Nothing
 14276 ;; This function is called by:
 14277 ;;		_I2C_DO_SEND_ADR_READ
 14278 ;;		_I2C_DO_SEND_ADR_WRITE
 14279 ;;		_I2C_DO_TX
 14280 ;; This function uses a non-reentrant model
 14281 ;;
 14282                           
 14283                           
 14284                           ;psect for function _I2C_MasterSendTxData
 14285  11C2                     _I2C_MasterSendTxData:
 14286                           
 14287                           ;incstack = 0
 14288                           ; Regs used in _I2C_MasterSendTxData: [wreg]
 14289                           ;I2C_MasterSendTxData@data stored from wreg
 14290  11C2  0020               	movlb	0	; select bank0
 14291  11C3  00A0               	movwf	I2C_MasterSendTxData@data
 14292                           
 14293                           ;mcc_generated_files/i2c_master.c: 568: static __attribute__((inline)) void I2C_MasterSe
      +                          ndTxData(uint8_t data);mcc_generated_files/i2c_master.c: 569: {;mcc_generated_files/i2c_
      +                          master.c: 570:     SSPBUF = data;
 14294  11C4  0820               	movf	I2C_MasterSendTxData@data,w
 14295  11C5  0024               	movlb	4	; select bank4
 14296  11C6  0091               	movwf	17	;volatile
 14297  11C7  0008               	return
 14298  11C8                     __end_of_I2C_MasterSendTxData:
 14299                           
 14300                           	psect	text88
 14301  1187                     __ptext88:	
 14302 ;; *************** function _I2C_MasterSendAck *****************
 14303 ;; Defined at:
 14304 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
 14305 ;; Parameters:    Size  Location     Type
 14306 ;;		None
 14307 ;; Auto vars:     Size  Location     Type
 14308 ;;		None
 14309 ;; Return value:  Size  Location     Type
 14310 ;;                  1    wreg      void 
 14311 ;; Registers used:
 14312 ;;		None
 14313 ;; Tracked objects:
 14314 ;;		On entry : 1E/0
 14315 ;;		On exit  : 1F/4
 14316 ;;		Unchanged: 0/0
 14317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14322 ;;Total ram usage:        0 bytes
 14323 ;; Hardware stack levels used:    1
 14324 ;; Hardware stack levels required when called:    4
 14325 ;; This function calls:
 14326 ;;		Nothing
 14327 ;; This function is called by:
 14328 ;;		_I2C_DO_RX
 14329 ;;		_I2C_DO_RX_ACK
 14330 ;; This function uses a non-reentrant model
 14331 ;;
 14332                           
 14333                           
 14334                           ;psect for function _I2C_MasterSendAck
 14335  1187                     _I2C_MasterSendAck:
 14336                           
 14337                           ;mcc_generated_files/i2c_master.c: 605:     SSPCON2bits.ACKDT = 0;
 14338                           
 14339                           ;incstack = 0
 14340                           ; Regs used in _I2C_MasterSendAck: []
 14341  1187  0024               	movlb	4	; select bank4
 14342  1188  1296               	bcf	22,5	;volatile
 14343                           
 14344                           ;mcc_generated_files/i2c_master.c: 606:     SSPCON2bits.ACKEN = 1;
 14345  1189  1616               	bsf	22,4	;volatile
 14346  118A  0008               	return
 14347  118B                     __end_of_I2C_MasterSendAck:
 14348                           
 14349                           	psect	text89
 14350  0800                     __ptext89:	
 14351 ;; *************** function _I2C_MasterGetRxData *****************
 14352 ;; Defined at:
 14353 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
 14354 ;; Parameters:    Size  Location     Type
 14355 ;;		None
 14356 ;; Auto vars:     Size  Location     Type
 14357 ;;		None
 14358 ;; Return value:  Size  Location     Type
 14359 ;;                  1    wreg      unsigned char 
 14360 ;; Registers used:
 14361 ;;		wreg
 14362 ;; Tracked objects:
 14363 ;;		On entry : 1F/0
 14364 ;;		On exit  : 1F/4
 14365 ;;		Unchanged: 0/0
 14366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;Total ram usage:        0 bytes
 14372 ;; Hardware stack levels used:    1
 14373 ;; Hardware stack levels required when called:    4
 14374 ;; This function calls:
 14375 ;;		Nothing
 14376 ;; This function is called by:
 14377 ;;		_I2C_DO_RX
 14378 ;; This function uses a non-reentrant model
 14379 ;;
 14380                           
 14381                           
 14382                           ;psect for function _I2C_MasterGetRxData
 14383  0800                     _I2C_MasterGetRxData:
 14384                           
 14385                           ;mcc_generated_files/i2c_master.c: 565:     return SSPBUF;
 14386                           
 14387                           ;incstack = 0
 14388                           ; Regs used in _I2C_MasterGetRxData: [wreg]
 14389  0800  0024               	movlb	4	; select bank4
 14390  0801  0811               	movf	17,w	;volatile
 14391  0802  0008               	return
 14392  0803                     __end_of_I2C_MasterGetRxData:
 14393                           
 14394                           	psect	text90
 14395  1183                     __ptext90:	
 14396 ;; *************** function _I2C_MasterSendNack *****************
 14397 ;; Defined at:
 14398 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
 14399 ;; Parameters:    Size  Location     Type
 14400 ;;		None
 14401 ;; Auto vars:     Size  Location     Type
 14402 ;;		None
 14403 ;; Return value:  Size  Location     Type
 14404 ;;                  1    wreg      void 
 14405 ;; Registers used:
 14406 ;;		None
 14407 ;; Tracked objects:
 14408 ;;		On entry : 1F/0
 14409 ;;		On exit  : 1F/4
 14410 ;;		Unchanged: 0/0
 14411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14416 ;;Total ram usage:        0 bytes
 14417 ;; Hardware stack levels used:    1
 14418 ;; Hardware stack levels required when called:    4
 14419 ;; This function calls:
 14420 ;;		Nothing
 14421 ;; This function is called by:
 14422 ;;		_I2C_DO_RX_NACK_STOP
 14423 ;;		_I2C_DO_RX_NACK_RESTART
 14424 ;; This function uses a non-reentrant model
 14425 ;;
 14426                           
 14427                           
 14428                           ;psect for function _I2C_MasterSendNack
 14429  1183                     _I2C_MasterSendNack:
 14430                           
 14431                           ;mcc_generated_files/i2c_master.c: 611:     SSPCON2bits.ACKDT = 1;
 14432                           
 14433                           ;incstack = 0
 14434                           ; Regs used in _I2C_MasterSendNack: []
 14435  1183  0024               	movlb	4	; select bank4
 14436  1184  1696               	bsf	22,5	;volatile
 14437                           
 14438                           ;mcc_generated_files/i2c_master.c: 612:     SSPCON2bits.ACKEN = 1;
 14439  1185  1616               	bsf	22,4	;volatile
 14440  1186  0008               	return
 14441  1187                     __end_of_I2C_MasterSendNack:
 14442                           
 14443                           	psect	text91
 14444  117C                     __ptext91:	
 14445 ;; *************** function _I2C_MasterStartRx *****************
 14446 ;; Defined at:
 14447 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
 14448 ;; Parameters:    Size  Location     Type
 14449 ;;		None
 14450 ;; Auto vars:     Size  Location     Type
 14451 ;;		None
 14452 ;; Return value:  Size  Location     Type
 14453 ;;                  1    wreg      void 
 14454 ;; Registers used:
 14455 ;;		None
 14456 ;; Tracked objects:
 14457 ;;		On entry : 1F/1
 14458 ;;		On exit  : 1F/4
 14459 ;;		Unchanged: 0/0
 14460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14465 ;;Total ram usage:        0 bytes
 14466 ;; Hardware stack levels used:    1
 14467 ;; Hardware stack levels required when called:    4
 14468 ;; This function calls:
 14469 ;;		Nothing
 14470 ;; This function is called by:
 14471 ;;		_I2C_DO_RCEN
 14472 ;; This function uses a non-reentrant model
 14473 ;;
 14474                           
 14475                           
 14476                           ;psect for function _I2C_MasterStartRx
 14477  117C                     _I2C_MasterStartRx:
 14478                           
 14479                           ;mcc_generated_files/i2c_master.c: 585:     SSPCON2bits.RCEN = 1;
 14480                           
 14481                           ;incstack = 0
 14482                           ; Regs used in _I2C_MasterStartRx: []
 14483  117C  0024               	movlb	4	; select bank4
 14484  117D  1596               	bsf	22,3	;volatile
 14485  117E  0008               	return
 14486  117F                     __end_of_I2C_MasterStartRx:
 14487                           
 14488                           	psect	text92
 14489  153C                     __ptext92:	
 14490 ;; *************** function _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *****************
 14491 ;; Defined at:
 14492 ;;		line 185 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 14493 ;; Parameters:    Size  Location     Type
 14494 ;;  p               2   13[BANK0 ] PTR void 
 14495 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14496 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 14497 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 14498 ;; Auto vars:     Size  Location     Type
 14499 ;;		None
 14500 ;; Return value:  Size  Location     Type
 14501 ;;                  1    wreg      enum E360
 14502 ;; Registers used:
 14503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14504 ;; Tracked objects:
 14505 ;;		On entry : 1E/1
 14506 ;;		On exit  : 1F/0
 14507 ;;		Unchanged: 0/0
 14508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14509 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14513 ;;Total ram usage:        2 bytes
 14514 ;; Hardware stack levels used:    1
 14515 ;; Hardware stack levels required when called:    6
 14516 ;; This function calls:
 14517 ;;		_I2C_SetBuffer
 14518 ;;		_I2C_SetDataCompleteCallback
 14519 ;; This function is called by:
 14520 ;;		_i2c_readDataBlock
 14521 ;;		_I2C_DO_TX
 14522 ;;		_I2C_DO_RX
 14523 ;;		_I2C_DO_TX_EMPTY
 14524 ;;		_I2C_DO_ADDRESS_NACK
 14525 ;; This function uses a non-reentrant model
 14526 ;;
 14527                           
 14528                           
 14529                           ;psect for function _rdBlkRegCompleteHandler@i2c_simple_master$F2203
 14530  153C                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203:
 14531                           
 14532                           ;mcc_generated_files/drivers/i2c_simple_master.c: 185: static i2c_operations_t rdBlkRegC
      +                          ompleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 186: {;mcc_gene
      +                          rated_files/drivers/i2c_simple_master.c: 187:     I2C_SetBuffer(((buf_t *)p)->data,((buf
      +                          _t*)p)->len);
 14533                           
 14534                           ;incstack = 0
 14535                           ; Regs used in _rdBlkRegCompleteHandler@i2c_simple_master$F2203: [wreg+fsr1l+fsr1h+statu
      +                          s,2+status,0+pclath+cstack]
 14536  153C  0020               	movlb	0	; select bank0
 14537  153D  082D               	movf	rdBlkRegCompleteHandler@i2c_simple_master$F2203@p,w
 14538  153E  0086               	movwf	6
 14539  153F  082E               	movf	rdBlkRegCompleteHandler@i2c_simple_master$F2203@p+1,w
 14540  1540  0087               	movwf	7
 14541  1541  3142               	addfsr 1,2
 14542  1542  3F40               	moviw [0]fsr1
 14543  1543  00A0               	movwf	I2C_SetBuffer@buffer
 14544  1544  3F41               	moviw [1]fsr1
 14545  1545  00A1               	movwf	I2C_SetBuffer@buffer+1
 14546  1546  082D               	movf	rdBlkRegCompleteHandler@i2c_simple_master$F2203@p,w
 14547  1547  0086               	movwf	6
 14548  1548  082E               	movf	rdBlkRegCompleteHandler@i2c_simple_master$F2203@p+1,w
 14549  1549  0087               	movwf	7
 14550  154A  3F40               	moviw [0]fsr1
 14551  154B  00A2               	movwf	I2C_SetBuffer@bufferSize
 14552  154C  3F41               	moviw [1]fsr1
 14553  154D  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 14554  154E  3193  2336  3195   	fcall	_I2C_SetBuffer
 14555                           
 14556                           ;mcc_generated_files/drivers/i2c_simple_master.c: 188:     I2C_SetDataCompleteCallback((
      +                          (void*)0),((void*)0));
 14557  1551  3000               	movlw	0
 14558  1552  0020               	movlb	0	; select bank0
 14559  1553  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 14560  1554  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 14561  1555  3000               	movlw	0
 14562  1556  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 14563  1557  3000               	movlw	0
 14564  1558  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 14565  1559  3192  2260         	fcall	_I2C_SetDataCompleteCallback
 14566                           
 14567                           ;mcc_generated_files/drivers/i2c_simple_master.c: 189:     return I2C_RESTART_READ;
 14568  155B  3002               	movlw	2
 14569  155C  0008               	return
 14570  155D                     __end_of_rdBlkRegCompleteHandler@i2c_simple_master$F2203:
 14571                           
 14572                           	psect	text93
 14573  13F3                     __ptext93:	
 14574 ;; *************** function _rd2RegCompleteHandler@i2c_simple_master$F2191 *****************
 14575 ;; Defined at:
 14576 ;;		line 119 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 14577 ;; Parameters:    Size  Location     Type
 14578 ;;  p               2   13[BANK0 ] PTR void 
 14579 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14580 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 14581 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 14582 ;; Auto vars:     Size  Location     Type
 14583 ;;		None
 14584 ;; Return value:  Size  Location     Type
 14585 ;;                  1    wreg      enum E360
 14586 ;; Registers used:
 14587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14588 ;; Tracked objects:
 14589 ;;		On entry : 1E/1
 14590 ;;		On exit  : 1F/0
 14591 ;;		Unchanged: 0/0
 14592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14593 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14596 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14597 ;;Total ram usage:        2 bytes
 14598 ;; Hardware stack levels used:    1
 14599 ;; Hardware stack levels required when called:    6
 14600 ;; This function calls:
 14601 ;;		_I2C_SetBuffer
 14602 ;;		_I2C_SetDataCompleteCallback
 14603 ;; This function is called by:
 14604 ;;		_I2C_DO_TX
 14605 ;;		_I2C_DO_RX
 14606 ;;		_I2C_DO_TX_EMPTY
 14607 ;;		_I2C_DO_ADDRESS_NACK
 14608 ;; This function uses a non-reentrant model
 14609 ;;
 14610                           
 14611                           
 14612                           ;psect for function _rd2RegCompleteHandler@i2c_simple_master$F2191
 14613  13F3                     _rd2RegCompleteHandler@i2c_simple_master$F2191:
 14614                           
 14615                           ;mcc_generated_files/drivers/i2c_simple_master.c: 119: static i2c_operations_t rd2RegCom
      +                          pleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 120: {;mcc_genera
      +                          ted_files/drivers/i2c_simple_master.c: 121:     I2C_SetBuffer(p,2);
 14616                           
 14617                           ;incstack = 0
 14618                           ; Regs used in _rd2RegCompleteHandler@i2c_simple_master$F2191: [wreg+fsr1l+fsr1h+status,
      +                          2+status,0+pclath+cstack]
 14619  13F3  0020               	movlb	0	; select bank0
 14620  13F4  082E               	movf	rd2RegCompleteHandler@i2c_simple_master$F2191@p+1,w
 14621  13F5  00A1               	movwf	I2C_SetBuffer@buffer+1
 14622  13F6  082D               	movf	rd2RegCompleteHandler@i2c_simple_master$F2191@p,w
 14623  13F7  00A0               	movwf	I2C_SetBuffer@buffer
 14624  13F8  3002               	movlw	2
 14625  13F9  00A2               	movwf	I2C_SetBuffer@bufferSize
 14626  13FA  3000               	movlw	0
 14627  13FB  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 14628  13FC  3193  2336  3193   	fcall	_I2C_SetBuffer
 14629                           
 14630                           ;mcc_generated_files/drivers/i2c_simple_master.c: 122:     I2C_SetDataCompleteCallback((
      +                          (void*)0),((void*)0));
 14631  13FF  3000               	movlw	0
 14632  1400  0020               	movlb	0	; select bank0
 14633  1401  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 14634  1402  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 14635  1403  3000               	movlw	0
 14636  1404  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 14637  1405  3000               	movlw	0
 14638  1406  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 14639  1407  3192  2260         	fcall	_I2C_SetDataCompleteCallback
 14640                           
 14641                           ;mcc_generated_files/drivers/i2c_simple_master.c: 123:     return I2C_RESTART_READ;
 14642  1409  3002               	movlw	2
 14643  140A  0008               	return
 14644  140B                     __end_of_rd2RegCompleteHandler@i2c_simple_master$F2191:
 14645                           
 14646                           	psect	text94
 14647  13DB                     __ptext94:	
 14648 ;; *************** function _rd1RegCompleteHandler@i2c_simple_master$F2183 *****************
 14649 ;; Defined at:
 14650 ;;		line 81 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 14651 ;; Parameters:    Size  Location     Type
 14652 ;;  p               2   13[BANK0 ] PTR void 
 14653 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14654 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 14655 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 14656 ;; Auto vars:     Size  Location     Type
 14657 ;;		None
 14658 ;; Return value:  Size  Location     Type
 14659 ;;                  1    wreg      enum E360
 14660 ;; Registers used:
 14661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14662 ;; Tracked objects:
 14663 ;;		On entry : 1E/1
 14664 ;;		On exit  : 1F/0
 14665 ;;		Unchanged: 0/0
 14666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14667 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14670 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;Total ram usage:        2 bytes
 14672 ;; Hardware stack levels used:    1
 14673 ;; Hardware stack levels required when called:    6
 14674 ;; This function calls:
 14675 ;;		_I2C_SetBuffer
 14676 ;;		_I2C_SetDataCompleteCallback
 14677 ;; This function is called by:
 14678 ;;		_i2c_read1ByteRegister
 14679 ;;		_I2C_DO_TX
 14680 ;;		_I2C_DO_RX
 14681 ;;		_I2C_DO_TX_EMPTY
 14682 ;;		_I2C_DO_ADDRESS_NACK
 14683 ;; This function uses a non-reentrant model
 14684 ;;
 14685                           
 14686                           
 14687                           ;psect for function _rd1RegCompleteHandler@i2c_simple_master$F2183
 14688  13DB                     _rd1RegCompleteHandler@i2c_simple_master$F2183:
 14689                           
 14690                           ;mcc_generated_files/drivers/i2c_simple_master.c: 81: static i2c_operations_t rd1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 82: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 83:     I2C_SetBuffer(p,1);
 14691                           
 14692                           ;incstack = 0
 14693                           ; Regs used in _rd1RegCompleteHandler@i2c_simple_master$F2183: [wreg+fsr1l+fsr1h+status,
      +                          2+status,0+pclath+cstack]
 14694  13DB  0020               	movlb	0	; select bank0
 14695  13DC  082E               	movf	rd1RegCompleteHandler@i2c_simple_master$F2183@p+1,w
 14696  13DD  00A1               	movwf	I2C_SetBuffer@buffer+1
 14697  13DE  082D               	movf	rd1RegCompleteHandler@i2c_simple_master$F2183@p,w
 14698  13DF  00A0               	movwf	I2C_SetBuffer@buffer
 14699  13E0  3001               	movlw	1
 14700  13E1  00A2               	movwf	I2C_SetBuffer@bufferSize
 14701  13E2  3000               	movlw	0
 14702  13E3  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 14703  13E4  3193  2336  3193   	fcall	_I2C_SetBuffer
 14704                           
 14705                           ;mcc_generated_files/drivers/i2c_simple_master.c: 84:     I2C_SetDataCompleteCallback(((
      +                          void*)0),((void*)0));
 14706  13E7  3000               	movlw	0
 14707  13E8  0020               	movlb	0	; select bank0
 14708  13E9  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 14709  13EA  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 14710  13EB  3000               	movlw	0
 14711  13EC  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 14712  13ED  3000               	movlw	0
 14713  13EE  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 14714  13EF  3192  2260         	fcall	_I2C_SetDataCompleteCallback
 14715                           
 14716                           ;mcc_generated_files/drivers/i2c_simple_master.c: 85:     return I2C_RESTART_READ;
 14717  13F1  3002               	movlw	2
 14718  13F2  0008               	return
 14719  13F3                     __end_of_rd1RegCompleteHandler@i2c_simple_master$F2183:
 14720                           
 14721                           	psect	text95
 14722  13C3                     __ptext95:	
 14723 ;; *************** function _wr1RegCompleteHandler@i2c_simple_master$F2173 *****************
 14724 ;; Defined at:
 14725 ;;		line 34 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 14726 ;; Parameters:    Size  Location     Type
 14727 ;;  p               2   13[BANK0 ] PTR void 
 14728 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14729 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 14730 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 14731 ;; Auto vars:     Size  Location     Type
 14732 ;;		None
 14733 ;; Return value:  Size  Location     Type
 14734 ;;                  1    wreg      enum E360
 14735 ;; Registers used:
 14736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14737 ;; Tracked objects:
 14738 ;;		On entry : 1E/1
 14739 ;;		On exit  : 1F/0
 14740 ;;		Unchanged: 0/0
 14741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14742 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14745 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14746 ;;Total ram usage:        2 bytes
 14747 ;; Hardware stack levels used:    1
 14748 ;; Hardware stack levels required when called:    6
 14749 ;; This function calls:
 14750 ;;		_I2C_SetBuffer
 14751 ;;		_I2C_SetDataCompleteCallback
 14752 ;; This function is called by:
 14753 ;;		_i2c_write1ByteRegister
 14754 ;;		_I2C_DO_TX
 14755 ;;		_I2C_DO_RX
 14756 ;;		_I2C_DO_TX_EMPTY
 14757 ;;		_I2C_DO_ADDRESS_NACK
 14758 ;; This function uses a non-reentrant model
 14759 ;;
 14760                           
 14761                           
 14762                           ;psect for function _wr1RegCompleteHandler@i2c_simple_master$F2173
 14763  13C3                     _wr1RegCompleteHandler@i2c_simple_master$F2173:
 14764                           
 14765                           ;mcc_generated_files/drivers/i2c_simple_master.c: 34: static i2c_operations_t wr1RegComp
      +                          leteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 35: {;mcc_generate
      +                          d_files/drivers/i2c_simple_master.c: 36:     I2C_SetBuffer(p,1);
 14766                           
 14767                           ;incstack = 0
 14768                           ; Regs used in _wr1RegCompleteHandler@i2c_simple_master$F2173: [wreg+fsr1l+fsr1h+status,
      +                          2+status,0+pclath+cstack]
 14769  13C3  0020               	movlb	0	; select bank0
 14770  13C4  082E               	movf	wr1RegCompleteHandler@i2c_simple_master$F2173@p+1,w
 14771  13C5  00A1               	movwf	I2C_SetBuffer@buffer+1
 14772  13C6  082D               	movf	wr1RegCompleteHandler@i2c_simple_master$F2173@p,w
 14773  13C7  00A0               	movwf	I2C_SetBuffer@buffer
 14774  13C8  3001               	movlw	1
 14775  13C9  00A2               	movwf	I2C_SetBuffer@bufferSize
 14776  13CA  3000               	movlw	0
 14777  13CB  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 14778  13CC  3193  2336  3193   	fcall	_I2C_SetBuffer
 14779                           
 14780                           ;mcc_generated_files/drivers/i2c_simple_master.c: 37:     I2C_SetDataCompleteCallback(((
      +                          void*)0),((void*)0));
 14781  13CF  3000               	movlw	0
 14782  13D0  0020               	movlb	0	; select bank0
 14783  13D1  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 14784  13D2  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 14785  13D3  3000               	movlw	0
 14786  13D4  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 14787  13D5  3000               	movlw	0
 14788  13D6  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 14789  13D7  3192  2260         	fcall	_I2C_SetDataCompleteCallback
 14790                           
 14791                           ;mcc_generated_files/drivers/i2c_simple_master.c: 38:     return I2C_CONTINUE;
 14792  13D9  3004               	movlw	4
 14793  13DA  0008               	return
 14794  13DB                     __end_of_wr1RegCompleteHandler@i2c_simple_master$F2173:
 14795                           
 14796                           	psect	text96
 14797  1165                     __ptext96:	
 14798 ;; *************** function _I2C_CallbackReturnReset *****************
 14799 ;; Defined at:
 14800 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
 14801 ;; Parameters:    Size  Location     Type
 14802 ;;  funPtr          2   13[BANK0 ] PTR void 
 14803 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14804 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 14805 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 14806 ;; Auto vars:     Size  Location     Type
 14807 ;;		None
 14808 ;; Return value:  Size  Location     Type
 14809 ;;                  1    wreg      enum E360
 14810 ;; Registers used:
 14811 ;;		wreg
 14812 ;; Tracked objects:
 14813 ;;		On entry : 1E/1
 14814 ;;		On exit  : 1E/0
 14815 ;;		Unchanged: 1E/0
 14816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14817 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14821 ;;Total ram usage:        2 bytes
 14822 ;; Hardware stack levels used:    1
 14823 ;; Hardware stack levels required when called:    4
 14824 ;; This function calls:
 14825 ;;		Nothing
 14826 ;; This function is called by:
 14827 ;;		_I2C_Open
 14828 ;;		_I2C_DO_TX
 14829 ;;		_I2C_DO_RX
 14830 ;;		_I2C_DO_TX_EMPTY
 14831 ;;		_I2C_DO_ADDRESS_NACK
 14832 ;; This function uses a non-reentrant model
 14833 ;;
 14834                           
 14835                           
 14836                           ;psect for function _I2C_CallbackReturnReset
 14837  1165                     _I2C_CallbackReturnReset:
 14838                           
 14839                           ;mcc_generated_files/i2c_master.c: 525: i2c_operations_t I2C_CallbackReturnReset(void *f
      +                          unPtr);mcc_generated_files/i2c_master.c: 526: {;mcc_generated_files/i2c_master.c: 527:  
      +                             return I2C_RESET_LINK;
 14840                           
 14841                           ;incstack = 0
 14842                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
 14843  1165  3005               	movlw	5
 14844  1166  0008               	return
 14845  1167                     __end_of_I2C_CallbackReturnReset:
 14846                           
 14847                           	psect	text97
 14848  1163                     __ptext97:	
 14849 ;; *************** function _I2C_CallbackReturnStop *****************
 14850 ;; Defined at:
 14851 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
 14852 ;; Parameters:    Size  Location     Type
 14853 ;;  funPtr          2   13[BANK0 ] PTR void 
 14854 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14855 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 14856 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 14857 ;; Auto vars:     Size  Location     Type
 14858 ;;		None
 14859 ;; Return value:  Size  Location     Type
 14860 ;;                  1    wreg      enum E360
 14861 ;; Registers used:
 14862 ;;		wreg
 14863 ;; Tracked objects:
 14864 ;;		On entry : 1E/1
 14865 ;;		On exit  : 1E/0
 14866 ;;		Unchanged: 1E/0
 14867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14868 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14872 ;;Total ram usage:        2 bytes
 14873 ;; Hardware stack levels used:    1
 14874 ;; Hardware stack levels required when called:    4
 14875 ;; This function calls:
 14876 ;;		Nothing
 14877 ;; This function is called by:
 14878 ;;		_I2C_Open
 14879 ;;		_I2C_SetCallback
 14880 ;;		_I2C_DO_TX
 14881 ;;		_I2C_DO_RX
 14882 ;;		_I2C_DO_TX_EMPTY
 14883 ;;		_I2C_DO_ADDRESS_NACK
 14884 ;; This function uses a non-reentrant model
 14885 ;;
 14886                           
 14887                           
 14888                           ;psect for function _I2C_CallbackReturnStop
 14889  1163                     _I2C_CallbackReturnStop:
 14890                           
 14891                           ;mcc_generated_files/i2c_master.c: 520: i2c_operations_t I2C_CallbackReturnStop(void *fu
      +                          nPtr);mcc_generated_files/i2c_master.c: 521: {;mcc_generated_files/i2c_master.c: 522:   
      +                            return I2C_STOP;
 14892                           
 14893                           ;incstack = 0
 14894                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
 14895  1163  3001               	movlw	1
 14896  1164  0008               	return
 14897  1165                     __end_of_I2C_CallbackReturnStop:
 14898                           
 14899                           	psect	text98
 14900  151B                     __ptext98:	
 14901 ;; *************** function _rdBlkRegCompleteHandler *****************
 14902 ;; Defined at:
 14903 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
 14904 ;; Parameters:    Size  Location     Type
 14905 ;;  ptr             2   13[BANK0 ] PTR void 
 14906 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14907 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 14908 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 14909 ;; Auto vars:     Size  Location     Type
 14910 ;;		None
 14911 ;; Return value:  Size  Location     Type
 14912 ;;                  1    wreg      enum E360
 14913 ;; Registers used:
 14914 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14915 ;; Tracked objects:
 14916 ;;		On entry : 1E/1
 14917 ;;		On exit  : 1F/0
 14918 ;;		Unchanged: 0/0
 14919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14920 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14923 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14924 ;;Total ram usage:        2 bytes
 14925 ;; Hardware stack levels used:    1
 14926 ;; Hardware stack levels required when called:    6
 14927 ;; This function calls:
 14928 ;;		_I2C_SetBuffer
 14929 ;;		_I2C_SetDataCompleteCallback
 14930 ;; This function is called by:
 14931 ;;		_I2C_DO_TX
 14932 ;;		_I2C_DO_RX
 14933 ;;		_I2C_DO_TX_EMPTY
 14934 ;;		_I2C_DO_ADDRESS_NACK
 14935 ;; This function uses a non-reentrant model
 14936 ;;
 14937                           
 14938                           
 14939                           ;psect for function _rdBlkRegCompleteHandler
 14940  151B                     _rdBlkRegCompleteHandler:
 14941                           
 14942                           ;mcc_generated_files/examples/i2c_master_example.c: 170: static i2c_operations_t rdBlkRe
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 171: {;mc
      +                          c_generated_files/examples/i2c_master_example.c: 172:     I2C_SetBuffer(((i2c_buffer_t *
      +                          )ptr)->data,((i2c_buffer_t*)ptr)->len);
 14943                           
 14944                           ;incstack = 0
 14945                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14946  151B  0020               	movlb	0	; select bank0
 14947  151C  082D               	movf	rdBlkRegCompleteHandler@ptr,w
 14948  151D  0086               	movwf	6
 14949  151E  082E               	movf	rdBlkRegCompleteHandler@ptr+1,w
 14950  151F  0087               	movwf	7
 14951  1520  3142               	addfsr 1,2
 14952  1521  3F40               	moviw [0]fsr1
 14953  1522  00A0               	movwf	I2C_SetBuffer@buffer
 14954  1523  3F41               	moviw [1]fsr1
 14955  1524  00A1               	movwf	I2C_SetBuffer@buffer+1
 14956  1525  082D               	movf	rdBlkRegCompleteHandler@ptr,w
 14957  1526  0086               	movwf	6
 14958  1527  082E               	movf	rdBlkRegCompleteHandler@ptr+1,w
 14959  1528  0087               	movwf	7
 14960  1529  3F40               	moviw [0]fsr1
 14961  152A  00A2               	movwf	I2C_SetBuffer@bufferSize
 14962  152B  3F41               	moviw [1]fsr1
 14963  152C  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 14964  152D  3193  2336  3195   	fcall	_I2C_SetBuffer
 14965                           
 14966                           ;mcc_generated_files/examples/i2c_master_example.c: 173:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 14967  1530  3000               	movlw	0
 14968  1531  0020               	movlb	0	; select bank0
 14969  1532  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 14970  1533  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 14971  1534  3000               	movlw	0
 14972  1535  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 14973  1536  3000               	movlw	0
 14974  1537  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 14975  1538  3192  2260         	fcall	_I2C_SetDataCompleteCallback
 14976                           
 14977                           ;mcc_generated_files/examples/i2c_master_example.c: 174:     return I2C_RESTART_READ;
 14978  153A  3002               	movlw	2
 14979  153B  0008               	return
 14980  153C                     __end_of_rdBlkRegCompleteHandler:
 14981                           
 14982                           	psect	text99
 14983  13AB                     __ptext99:	
 14984 ;; *************** function _wr2RegCompleteHandler *****************
 14985 ;; Defined at:
 14986 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
 14987 ;; Parameters:    Size  Location     Type
 14988 ;;  ptr             2   13[BANK0 ] PTR void 
 14989 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 14990 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 14991 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 14992 ;; Auto vars:     Size  Location     Type
 14993 ;;		None
 14994 ;; Return value:  Size  Location     Type
 14995 ;;                  1    wreg      enum E360
 14996 ;; Registers used:
 14997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14998 ;; Tracked objects:
 14999 ;;		On entry : 1E/1
 15000 ;;		On exit  : 1F/0
 15001 ;;		Unchanged: 0/0
 15002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15003 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15006 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15007 ;;Total ram usage:        2 bytes
 15008 ;; Hardware stack levels used:    1
 15009 ;; Hardware stack levels required when called:    6
 15010 ;; This function calls:
 15011 ;;		_I2C_SetBuffer
 15012 ;;		_I2C_SetDataCompleteCallback
 15013 ;; This function is called by:
 15014 ;;		_I2C_DO_TX
 15015 ;;		_I2C_DO_RX
 15016 ;;		_I2C_DO_TX_EMPTY
 15017 ;;		_I2C_DO_ADDRESS_NACK
 15018 ;; This function uses a non-reentrant model
 15019 ;;
 15020                           
 15021                           
 15022                           ;psect for function _wr2RegCompleteHandler
 15023  13AB                     _wr2RegCompleteHandler:
 15024                           
 15025                           ;mcc_generated_files/examples/i2c_master_example.c: 163: static i2c_operations_t wr2RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 164: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 165:     I2C_SetBuffer(ptr,2);
 15026                           
 15027                           ;incstack = 0
 15028                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15029  13AB  0020               	movlb	0	; select bank0
 15030  13AC  082E               	movf	wr2RegCompleteHandler@ptr+1,w
 15031  13AD  00A1               	movwf	I2C_SetBuffer@buffer+1
 15032  13AE  082D               	movf	wr2RegCompleteHandler@ptr,w
 15033  13AF  00A0               	movwf	I2C_SetBuffer@buffer
 15034  13B0  3002               	movlw	2
 15035  13B1  00A2               	movwf	I2C_SetBuffer@bufferSize
 15036  13B2  3000               	movlw	0
 15037  13B3  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 15038  13B4  3193  2336  3193   	fcall	_I2C_SetBuffer
 15039                           
 15040                           ;mcc_generated_files/examples/i2c_master_example.c: 166:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 15041  13B7  3000               	movlw	0
 15042  13B8  0020               	movlb	0	; select bank0
 15043  13B9  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 15044  13BA  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 15045  13BB  3000               	movlw	0
 15046  13BC  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 15047  13BD  3000               	movlw	0
 15048  13BE  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 15049  13BF  3192  2260         	fcall	_I2C_SetDataCompleteCallback
 15050                           
 15051                           ;mcc_generated_files/examples/i2c_master_example.c: 167:     return I2C_CONTINUE;
 15052  13C1  3004               	movlw	4
 15053  13C2  0008               	return
 15054  13C3                     __end_of_wr2RegCompleteHandler:
 15055                           
 15056                           	psect	text100
 15057  1393                     __ptext100:	
 15058 ;; *************** function _wr1RegCompleteHandler *****************
 15059 ;; Defined at:
 15060 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
 15061 ;; Parameters:    Size  Location     Type
 15062 ;;  ptr             2   13[BANK0 ] PTR void 
 15063 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15064 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 15065 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 15066 ;; Auto vars:     Size  Location     Type
 15067 ;;		None
 15068 ;; Return value:  Size  Location     Type
 15069 ;;                  1    wreg      enum E360
 15070 ;; Registers used:
 15071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15072 ;; Tracked objects:
 15073 ;;		On entry : 1E/1
 15074 ;;		On exit  : 1F/0
 15075 ;;		Unchanged: 0/0
 15076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15077 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;Total ram usage:        2 bytes
 15082 ;; Hardware stack levels used:    1
 15083 ;; Hardware stack levels required when called:    6
 15084 ;; This function calls:
 15085 ;;		_I2C_SetBuffer
 15086 ;;		_I2C_SetDataCompleteCallback
 15087 ;; This function is called by:
 15088 ;;		_I2C_DO_TX
 15089 ;;		_I2C_DO_RX
 15090 ;;		_I2C_DO_TX_EMPTY
 15091 ;;		_I2C_DO_ADDRESS_NACK
 15092 ;; This function uses a non-reentrant model
 15093 ;;
 15094                           
 15095                           
 15096                           ;psect for function _wr1RegCompleteHandler
 15097  1393                     _wr1RegCompleteHandler:
 15098                           
 15099                           ;mcc_generated_files/examples/i2c_master_example.c: 156: static i2c_operations_t wr1RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 157: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 158:     I2C_SetBuffer(ptr,1);
 15100                           
 15101                           ;incstack = 0
 15102                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15103  1393  0020               	movlb	0	; select bank0
 15104  1394  082E               	movf	wr1RegCompleteHandler@ptr+1,w
 15105  1395  00A1               	movwf	I2C_SetBuffer@buffer+1
 15106  1396  082D               	movf	wr1RegCompleteHandler@ptr,w
 15107  1397  00A0               	movwf	I2C_SetBuffer@buffer
 15108  1398  3001               	movlw	1
 15109  1399  00A2               	movwf	I2C_SetBuffer@bufferSize
 15110  139A  3000               	movlw	0
 15111  139B  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 15112  139C  3193  2336  3193   	fcall	_I2C_SetBuffer
 15113                           
 15114                           ;mcc_generated_files/examples/i2c_master_example.c: 159:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 15115  139F  3000               	movlw	0
 15116  13A0  0020               	movlb	0	; select bank0
 15117  13A1  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 15118  13A2  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 15119  13A3  3000               	movlw	0
 15120  13A4  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 15121  13A5  3000               	movlw	0
 15122  13A6  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 15123  13A7  3192  2260         	fcall	_I2C_SetDataCompleteCallback
 15124                           
 15125                           ;mcc_generated_files/examples/i2c_master_example.c: 160:     return I2C_CONTINUE;
 15126  13A9  3004               	movlw	4
 15127  13AA  0008               	return
 15128  13AB                     __end_of_wr1RegCompleteHandler:
 15129                           
 15130                           	psect	text101
 15131  137B                     __ptext101:	
 15132 ;; *************** function _rd2RegCompleteHandler *****************
 15133 ;; Defined at:
 15134 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
 15135 ;; Parameters:    Size  Location     Type
 15136 ;;  ptr             2   13[BANK0 ] PTR void 
 15137 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15138 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 15139 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 15140 ;; Auto vars:     Size  Location     Type
 15141 ;;		None
 15142 ;; Return value:  Size  Location     Type
 15143 ;;                  1    wreg      enum E360
 15144 ;; Registers used:
 15145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15146 ;; Tracked objects:
 15147 ;;		On entry : 1E/1
 15148 ;;		On exit  : 1F/0
 15149 ;;		Unchanged: 0/0
 15150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15151 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;Total ram usage:        2 bytes
 15156 ;; Hardware stack levels used:    1
 15157 ;; Hardware stack levels required when called:    6
 15158 ;; This function calls:
 15159 ;;		_I2C_SetBuffer
 15160 ;;		_I2C_SetDataCompleteCallback
 15161 ;; This function is called by:
 15162 ;;		_I2C_DO_TX
 15163 ;;		_I2C_DO_RX
 15164 ;;		_I2C_DO_TX_EMPTY
 15165 ;;		_I2C_DO_ADDRESS_NACK
 15166 ;; This function uses a non-reentrant model
 15167 ;;
 15168                           
 15169                           
 15170                           ;psect for function _rd2RegCompleteHandler
 15171  137B                     _rd2RegCompleteHandler:
 15172                           
 15173                           ;mcc_generated_files/examples/i2c_master_example.c: 149: static i2c_operations_t rd2RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 150: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 151:     I2C_SetBuffer(ptr,2);
 15174                           
 15175                           ;incstack = 0
 15176                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15177  137B  0020               	movlb	0	; select bank0
 15178  137C  082E               	movf	rd2RegCompleteHandler@ptr+1,w
 15179  137D  00A1               	movwf	I2C_SetBuffer@buffer+1
 15180  137E  082D               	movf	rd2RegCompleteHandler@ptr,w
 15181  137F  00A0               	movwf	I2C_SetBuffer@buffer
 15182  1380  3002               	movlw	2
 15183  1381  00A2               	movwf	I2C_SetBuffer@bufferSize
 15184  1382  3000               	movlw	0
 15185  1383  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 15186  1384  3193  2336  3193   	fcall	_I2C_SetBuffer
 15187                           
 15188                           ;mcc_generated_files/examples/i2c_master_example.c: 152:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 15189  1387  3000               	movlw	0
 15190  1388  0020               	movlb	0	; select bank0
 15191  1389  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 15192  138A  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 15193  138B  3000               	movlw	0
 15194  138C  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 15195  138D  3000               	movlw	0
 15196  138E  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 15197  138F  3192  2260         	fcall	_I2C_SetDataCompleteCallback
 15198                           
 15199                           ;mcc_generated_files/examples/i2c_master_example.c: 153:     return I2C_RESTART_READ;
 15200  1391  3002               	movlw	2
 15201  1392  0008               	return
 15202  1393                     __end_of_rd2RegCompleteHandler:
 15203                           
 15204                           	psect	text102
 15205  1363                     __ptext102:	
 15206 ;; *************** function _rd1RegCompleteHandler *****************
 15207 ;; Defined at:
 15208 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
 15209 ;; Parameters:    Size  Location     Type
 15210 ;;  ptr             2   13[BANK0 ] PTR void 
 15211 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15212 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 15213 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 15214 ;; Auto vars:     Size  Location     Type
 15215 ;;		None
 15216 ;; Return value:  Size  Location     Type
 15217 ;;                  1    wreg      enum E360
 15218 ;; Registers used:
 15219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15220 ;; Tracked objects:
 15221 ;;		On entry : 1E/1
 15222 ;;		On exit  : 1F/0
 15223 ;;		Unchanged: 0/0
 15224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15225 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15229 ;;Total ram usage:        2 bytes
 15230 ;; Hardware stack levels used:    1
 15231 ;; Hardware stack levels required when called:    6
 15232 ;; This function calls:
 15233 ;;		_I2C_SetBuffer
 15234 ;;		_I2C_SetDataCompleteCallback
 15235 ;; This function is called by:
 15236 ;;		_I2C_DO_TX
 15237 ;;		_I2C_DO_RX
 15238 ;;		_I2C_DO_TX_EMPTY
 15239 ;;		_I2C_DO_ADDRESS_NACK
 15240 ;; This function uses a non-reentrant model
 15241 ;;
 15242                           
 15243                           
 15244                           ;psect for function _rd1RegCompleteHandler
 15245  1363                     _rd1RegCompleteHandler:
 15246                           
 15247                           ;mcc_generated_files/examples/i2c_master_example.c: 142: static i2c_operations_t rd1RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 143: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 144:     I2C_SetBuffer(ptr,1);
 15248                           
 15249                           ;incstack = 0
 15250                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15251  1363  0020               	movlb	0	; select bank0
 15252  1364  082E               	movf	rd1RegCompleteHandler@ptr+1,w
 15253  1365  00A1               	movwf	I2C_SetBuffer@buffer+1
 15254  1366  082D               	movf	rd1RegCompleteHandler@ptr,w
 15255  1367  00A0               	movwf	I2C_SetBuffer@buffer
 15256  1368  3001               	movlw	1
 15257  1369  00A2               	movwf	I2C_SetBuffer@bufferSize
 15258  136A  3000               	movlw	0
 15259  136B  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 15260  136C  3193  2336  3193   	fcall	_I2C_SetBuffer
 15261                           
 15262                           ;mcc_generated_files/examples/i2c_master_example.c: 145:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 15263  136F  3000               	movlw	0
 15264  1370  0020               	movlb	0	; select bank0
 15265  1371  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 15266  1372  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 15267  1373  3000               	movlw	0
 15268  1374  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 15269  1375  3000               	movlw	0
 15270  1376  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 15271  1377  3192  2260         	fcall	_I2C_SetDataCompleteCallback
 15272                           
 15273                           ;mcc_generated_files/examples/i2c_master_example.c: 146:     return I2C_RESTART_READ;
 15274  1379  3002               	movlw	2
 15275  137A  0008               	return
 15276  137B                     __end_of_rd1RegCompleteHandler:
 15277                           
 15278                           	psect	text103
 15279  134B                     __ptext103:	
 15280 ;; *************** function _wr2RegCompleteHandler@i2c_simple_master$F2197 *****************
 15281 ;; Defined at:
 15282 ;;		line 151 in file "mcc_generated_files/drivers/i2c_simple_master.c"
 15283 ;; Parameters:    Size  Location     Type
 15284 ;;  p               2   13[BANK0 ] PTR void 
 15285 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15286 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 15287 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 15288 ;; Auto vars:     Size  Location     Type
 15289 ;;		None
 15290 ;; Return value:  Size  Location     Type
 15291 ;;                  1    wreg      enum E360
 15292 ;; Registers used:
 15293 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15294 ;; Tracked objects:
 15295 ;;		On entry : 1E/1
 15296 ;;		On exit  : 1F/0
 15297 ;;		Unchanged: 0/0
 15298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15299 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15302 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;Total ram usage:        2 bytes
 15304 ;; Hardware stack levels used:    1
 15305 ;; Hardware stack levels required when called:    6
 15306 ;; This function calls:
 15307 ;;		_I2C_SetBuffer
 15308 ;;		_I2C_SetDataCompleteCallback
 15309 ;; This function is called by:
 15310 ;;		_I2C_DO_TX
 15311 ;;		_I2C_DO_RX
 15312 ;;		_I2C_DO_TX_EMPTY
 15313 ;;		_I2C_DO_ADDRESS_NACK
 15314 ;; This function uses a non-reentrant model
 15315 ;;
 15316                           
 15317                           
 15318                           ;psect for function _wr2RegCompleteHandler@i2c_simple_master$F2197
 15319  134B                     _wr2RegCompleteHandler@i2c_simple_master$F2197:
 15320                           
 15321                           ;mcc_generated_files/drivers/i2c_simple_master.c: 151: static i2c_operations_t wr2RegCom
      +                          pleteHandler(void *p);mcc_generated_files/drivers/i2c_simple_master.c: 152: {;mcc_genera
      +                          ted_files/drivers/i2c_simple_master.c: 153:     I2C_SetBuffer(p,2);
 15322                           
 15323                           ;incstack = 0
 15324                           ; Regs used in _wr2RegCompleteHandler@i2c_simple_master$F2197: [wreg+fsr1l+fsr1h+status,
      +                          2+status,0+pclath+cstack]
 15325  134B  0020               	movlb	0	; select bank0
 15326  134C  082E               	movf	wr2RegCompleteHandler@i2c_simple_master$F2197@p+1,w
 15327  134D  00A1               	movwf	I2C_SetBuffer@buffer+1
 15328  134E  082D               	movf	wr2RegCompleteHandler@i2c_simple_master$F2197@p,w
 15329  134F  00A0               	movwf	I2C_SetBuffer@buffer
 15330  1350  3002               	movlw	2
 15331  1351  00A2               	movwf	I2C_SetBuffer@bufferSize
 15332  1352  3000               	movlw	0
 15333  1353  00A3               	movwf	I2C_SetBuffer@bufferSize+1
 15334  1354  3193  2336  3193   	fcall	_I2C_SetBuffer
 15335                           
 15336                           ;mcc_generated_files/drivers/i2c_simple_master.c: 154:     I2C_SetDataCompleteCallback((
      +                          (void*)0),((void*)0));
 15337  1357  3000               	movlw	0
 15338  1358  0020               	movlb	0	; select bank0
 15339  1359  00A9               	movwf	I2C_SetDataCompleteCallback@cb
 15340  135A  00AA               	movwf	I2C_SetDataCompleteCallback@cb+1
 15341  135B  3000               	movlw	0
 15342  135C  00AB               	movwf	I2C_SetDataCompleteCallback@ptr
 15343  135D  3000               	movlw	0
 15344  135E  00AC               	movwf	I2C_SetDataCompleteCallback@ptr+1
 15345  135F  3192  2260         	fcall	_I2C_SetDataCompleteCallback
 15346                           
 15347                           ;mcc_generated_files/drivers/i2c_simple_master.c: 155:     return I2C_CONTINUE;
 15348  1361  3004               	movlw	4
 15349  1362  0008               	return
 15350  1363                     __end_of_wr2RegCompleteHandler@i2c_simple_master$F2197:
 15351                           
 15352                           	psect	text104
 15353  1260                     __ptext104:	
 15354 ;; *************** function _I2C_SetDataCompleteCallback *****************
 15355 ;; Defined at:
 15356 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
 15357 ;; Parameters:    Size  Location     Type
 15358 ;;  cb              2    9[BANK0 ] PTR FTN(PTR void ,)enum 
 15359 ;;		 -> rdBlkRegCompleteHandler@i2c_simple_master$F2203(1), wr2RegCompleteHandler@i2c_simple_master$F2197(1), rd2RegComp
      +leteHandler@i2c_simple_master$F2191(1), rd1RegCompleteHandler@i2c_simple_master$F2183(1), 
 15360 ;;		 -> wr1RegCompleteHandler@i2c_simple_master$F2173(1), Absolute function(1), rdBlkRegCompleteHandler(1), wr2RegComple
      +teHandler(1), 
 15361 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 15362 ;;  ptr             2   11[BANK0 ] PTR void 
 15363 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15364 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 15365 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 15366 ;; Auto vars:     Size  Location     Type
 15367 ;;		None
 15368 ;; Return value:  Size  Location     Type
 15369 ;;                  1    wreg      void 
 15370 ;; Registers used:
 15371 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15372 ;; Tracked objects:
 15373 ;;		On entry : 1F/0
 15374 ;;		On exit  : 1F/0
 15375 ;;		Unchanged: 0/0
 15376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15377 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15380 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15381 ;;Total ram usage:        4 bytes
 15382 ;; Hardware stack levels used:    1
 15383 ;; Hardware stack levels required when called:    5
 15384 ;; This function calls:
 15385 ;;		_I2C_SetCallback
 15386 ;; This function is called by:
 15387 ;;		_rd1RegCompleteHandler
 15388 ;;		_rd2RegCompleteHandler
 15389 ;;		_wr1RegCompleteHandler
 15390 ;;		_wr2RegCompleteHandler
 15391 ;;		_rdBlkRegCompleteHandler
 15392 ;;		_wr1RegCompleteHandler@i2c_simple_master$F2173
 15393 ;;		_i2c_write1ByteRegister
 15394 ;;		_rd1RegCompleteHandler@i2c_simple_master$F2183
 15395 ;;		_i2c_read1ByteRegister
 15396 ;;		_rd2RegCompleteHandler@i2c_simple_master$F2191
 15397 ;;		_wr2RegCompleteHandler@i2c_simple_master$F2197
 15398 ;;		_rdBlkRegCompleteHandler@i2c_simple_master$F2203
 15399 ;;		_i2c_readDataBlock
 15400 ;; This function uses a non-reentrant model
 15401 ;;
 15402                           
 15403                           
 15404                           ;psect for function _I2C_SetDataCompleteCallback
 15405  1260                     _I2C_SetDataCompleteCallback:
 15406                           
 15407                           ;mcc_generated_files/i2c_master.c: 273: void I2C_SetDataCompleteCallback(i2c_callback_t 
      +                          cb, void *ptr);mcc_generated_files/i2c_master.c: 274: {;mcc_generated_files/i2c_master.c
      +                          : 275:     I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
 15408                           
 15409                           ;incstack = 0
 15410                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15411  1260  082A               	movf	I2C_SetDataCompleteCallback@cb+1,w
 15412  1261  00A1               	movwf	I2C_SetCallback@cb+1
 15413  1262  0829               	movf	I2C_SetDataCompleteCallback@cb,w
 15414  1263  00A0               	movwf	I2C_SetCallback@cb
 15415  1264  082C               	movf	I2C_SetDataCompleteCallback@ptr+1,w
 15416  1265  00A3               	movwf	I2C_SetCallback@ptr+1
 15417  1266  082B               	movf	I2C_SetDataCompleteCallback@ptr,w
 15418  1267  00A2               	movwf	I2C_SetCallback@ptr
 15419  1268  3000               	movlw	0
 15420  1269  318A  22F8         	fcall	_I2C_SetCallback
 15421  126B  0008               	return
 15422  126C                     __end_of_I2C_SetDataCompleteCallback:
 15423                           
 15424                           	psect	text105
 15425  0AF8                     __ptext105:	
 15426 ;; *************** function _I2C_SetCallback *****************
 15427 ;; Defined at:
 15428 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
 15429 ;; Parameters:    Size  Location     Type
 15430 ;;  idx             1    wreg     enum E3108
 15431 ;;  cb              2    0[BANK0 ] PTR FTN(PTR void ,)enum 
 15432 ;;		 -> rdBlkRegCompleteHandler@i2c_simple_master$F2203(1), wr2RegCompleteHandler@i2c_simple_master$F2197(1), rd2RegComp
      +leteHandler@i2c_simple_master$F2191(1), rd1RegCompleteHandler@i2c_simple_master$F2183(1), 
 15433 ;;		 -> wr1RegCompleteHandler@i2c_simple_master$F2173(1), Absolute function(1), rdBlkRegCompleteHandler(1), wr2RegComple
      +teHandler(1), 
 15434 ;;		 -> wr1RegCompleteHandler(1), rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 15435 ;;  ptr             2    2[BANK0 ] PTR void 
 15436 ;;		 -> i2c_readDataBlock@d(4), i2c_write2ByteRegister@data(2), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@d
      +2(1), 
 15437 ;;		 -> i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@bufferBlock(4), I2C_Write2ByteRegister@data(2), I2C_Write1Byte
      +Register@data(1), 
 15438 ;;		 -> I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 15439 ;; Auto vars:     Size  Location     Type
 15440 ;;  idx             1    8[BANK0 ] enum E3108
 15441 ;; Return value:  Size  Location     Type
 15442 ;;                  1    wreg      void 
 15443 ;; Registers used:
 15444 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15445 ;; Tracked objects:
 15446 ;;		On entry : 1F/0
 15447 ;;		On exit  : 1F/0
 15448 ;;		Unchanged: 0/0
 15449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15450 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15451 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15452 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15453 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;Total ram usage:        9 bytes
 15455 ;; Hardware stack levels used:    1
 15456 ;; Hardware stack levels required when called:    4
 15457 ;; This function calls:
 15458 ;;		Nothing
 15459 ;; This function is called by:
 15460 ;;		_I2C_SetDataCompleteCallback
 15461 ;;		_I2C_SetAddressNackCallback
 15462 ;; This function uses a non-reentrant model
 15463 ;;
 15464                           
 15465                           
 15466                           ;psect for function _I2C_SetCallback
 15467  0AF8                     _I2C_SetCallback:
 15468                           
 15469                           ;incstack = 0
 15470                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 15471                           ;I2C_SetCallback@idx stored from wreg
 15472  0AF8  00A8               	movwf	I2C_SetCallback@idx
 15473                           
 15474                           ;mcc_generated_files/i2c_master.c: 298: static void I2C_SetCallback(i2c_callbackIndex_t 
      +                          idx, i2c_callback_t cb, void *ptr);mcc_generated_files/i2c_master.c: 299: {;mcc_generate
      +                          d_files/i2c_master.c: 300:     if(cb)
 15475  0AF9  0820               	movf	I2C_SetCallback@cb,w
 15476  0AFA  0421               	iorwf	I2C_SetCallback@cb+1,w
 15477  0AFB  1903               	btfsc	3,2
 15478  0AFC  2B24               	goto	l4531
 15479                           
 15480                           ;mcc_generated_files/i2c_master.c: 301:     {;mcc_generated_files/i2c_master.c: 302:    
      +                               I2C_Status.callbackTable[idx] = cb;
 15481  0AFD  0828               	movf	I2C_SetCallback@idx,w
 15482  0AFE  00A4               	movwf	??_I2C_SetCallback
 15483  0AFF  01A5               	clrf	??_I2C_SetCallback+1
 15484  0B00  35A4               	lslf	??_I2C_SetCallback,f
 15485  0B01  0DA5               	rlf	??_I2C_SetCallback+1,f
 15486  0B02  30A0               	movlw	low _I2C_Status
 15487  0B03  00A6               	movwf	??_I2C_SetCallback+2
 15488  0B04  3000               	movlw	high _I2C_Status
 15489  0B05  00A7               	movwf	??_I2C_SetCallback+3
 15490  0B06  0824               	movf	??_I2C_SetCallback,w
 15491  0B07  0726               	addwf	??_I2C_SetCallback+2,w
 15492  0B08  0086               	movwf	6
 15493  0B09  0825               	movf	??_I2C_SetCallback+1,w
 15494  0B0A  3D27               	addwfc	??_I2C_SetCallback+3,w
 15495  0B0B  0087               	movwf	7
 15496  0B0C  0820               	movf	I2C_SetCallback@cb,w
 15497  0B0D  3FC0               	movwi [0]fsr1
 15498  0B0E  0821               	movf	I2C_SetCallback@cb+1,w
 15499  0B0F  3FC1               	movwi [1]fsr1
 15500                           
 15501                           ;mcc_generated_files/i2c_master.c: 303:         I2C_Status.callbackPayload[idx] = ptr;
 15502  0B10  0828               	movf	I2C_SetCallback@idx,w
 15503  0B11  00A4               	movwf	??_I2C_SetCallback
 15504  0B12  01A5               	clrf	??_I2C_SetCallback+1
 15505  0B13  35A4               	lslf	??_I2C_SetCallback,f
 15506  0B14  0DA5               	rlf	??_I2C_SetCallback+1,f
 15507  0B15  30AC               	movlw	low (_I2C_Status+12)
 15508  0B16  00A6               	movwf	??_I2C_SetCallback+2
 15509  0B17  3000               	movlw	high (_I2C_Status+12)
 15510  0B18  00A7               	movwf	??_I2C_SetCallback+3
 15511  0B19  0824               	movf	??_I2C_SetCallback,w
 15512  0B1A  0726               	addwf	??_I2C_SetCallback+2,w
 15513  0B1B  0086               	movwf	6
 15514  0B1C  0825               	movf	??_I2C_SetCallback+1,w
 15515  0B1D  3D27               	addwfc	??_I2C_SetCallback+3,w
 15516  0B1E  0087               	movwf	7
 15517  0B1F  0822               	movf	I2C_SetCallback@ptr,w
 15518  0B20  3FC0               	movwi [0]fsr1
 15519  0B21  0823               	movf	I2C_SetCallback@ptr+1,w
 15520  0B22  3FC1               	movwi [1]fsr1
 15521                           
 15522                           ;mcc_generated_files/i2c_master.c: 304:     }
 15523  0B23  0008               	return
 15524  0B24                     l4531:
 15525                           
 15526                           ;mcc_generated_files/i2c_master.c: 306:     {;mcc_generated_files/i2c_master.c: 307:    
      +                               I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 15527  0B24  0828               	movf	I2C_SetCallback@idx,w
 15528  0B25  00A4               	movwf	??_I2C_SetCallback
 15529  0B26  01A5               	clrf	??_I2C_SetCallback+1
 15530  0B27  35A4               	lslf	??_I2C_SetCallback,f
 15531  0B28  0DA5               	rlf	??_I2C_SetCallback+1,f
 15532  0B29  30A0               	movlw	low _I2C_Status
 15533  0B2A  00A6               	movwf	??_I2C_SetCallback+2
 15534  0B2B  3000               	movlw	high _I2C_Status
 15535  0B2C  00A7               	movwf	??_I2C_SetCallback+3
 15536  0B2D  0824               	movf	??_I2C_SetCallback,w
 15537  0B2E  0726               	addwf	??_I2C_SetCallback+2,w
 15538  0B2F  0086               	movwf	6
 15539  0B30  0825               	movf	??_I2C_SetCallback+1,w
 15540  0B31  3D27               	addwfc	??_I2C_SetCallback+3,w
 15541  0B32  0087               	movwf	7
 15542  0B33  3063               	movlw	low _I2C_CallbackReturnStop
 15543  0B34  3FC0               	movwi [0]fsr1
 15544  0B35  3011               	movlw	high _I2C_CallbackReturnStop
 15545  0B36  3FC1               	movwi [1]fsr1
 15546                           
 15547                           ;mcc_generated_files/i2c_master.c: 308:         I2C_Status.callbackPayload[idx] = ((void
      +                          *)0);
 15548  0B37  0828               	movf	I2C_SetCallback@idx,w
 15549  0B38  00A4               	movwf	??_I2C_SetCallback
 15550  0B39  01A5               	clrf	??_I2C_SetCallback+1
 15551  0B3A  35A4               	lslf	??_I2C_SetCallback,f
 15552  0B3B  0DA5               	rlf	??_I2C_SetCallback+1,f
 15553  0B3C  30AC               	movlw	low (_I2C_Status+12)
 15554  0B3D  00A6               	movwf	??_I2C_SetCallback+2
 15555  0B3E  3000               	movlw	high (_I2C_Status+12)
 15556  0B3F  00A7               	movwf	??_I2C_SetCallback+3
 15557  0B40  0824               	movf	??_I2C_SetCallback,w
 15558  0B41  0726               	addwf	??_I2C_SetCallback+2,w
 15559  0B42  0086               	movwf	6
 15560  0B43  0825               	movf	??_I2C_SetCallback+1,w
 15561  0B44  3D27               	addwfc	??_I2C_SetCallback+3,w
 15562  0B45  0087               	movwf	7
 15563  0B46  3000               	movlw	0
 15564  0B47  3FC0               	movwi [0]fsr1
 15565  0B48  3FC1               	movwi [1]fsr1
 15566  0B49  0008               	return
 15567  0B4A                     __end_of_I2C_SetCallback:
 15568                           
 15569                           	psect	text106
 15570  1336                     __ptext106:	
 15571 ;; *************** function _I2C_SetBuffer *****************
 15572 ;; Defined at:
 15573 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
 15574 ;; Parameters:    Size  Location     Type
 15575 ;;  buffer          2    0[BANK0 ] PTR void 
 15576 ;;		 -> wireWriteDataBlock@val(1), wireWriteDataBlock@reg(1), wireWriteByte@val(1), fifo_data(128), 
 15577 ;;		 -> i2c_readDataBlock@reg(1), i2c_readDataBlock@d(4), i2c_write2ByteRegister@reg(1), i2c_write2ByteRegister@data(2),
      + 
 15578 ;;		 -> i2c_read2ByteRegister@reg(1), i2c_read2ByteRegister@result(2), i2c_read1ByteRegister@reg(1), i2c_read1ByteRegist
      +er@d2(1), 
 15579 ;;		 -> i2c_write1ByteRegister@reg(1), i2c_write1ByteRegister@data(1), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@buffe
      +rBlock(4), 
 15580 ;;		 -> I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1), I2C_Write1ByteRegi
      +ster@data(1), 
 15581 ;;		 -> I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), I2C_Read1ByteRegister@reg(1), 
 15582 ;;		 -> I2C_Read1ByteRegister@returnValue(1), 
 15583 ;;  bufferSize      2    2[BANK0 ] unsigned int 
 15584 ;; Auto vars:     Size  Location     Type
 15585 ;;		None
 15586 ;; Return value:  Size  Location     Type
 15587 ;;                  1    wreg      void 
 15588 ;; Registers used:
 15589 ;;		wreg
 15590 ;; Tracked objects:
 15591 ;;		On entry : 1F/0
 15592 ;;		On exit  : 1F/1
 15593 ;;		Unchanged: 0/0
 15594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15595 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15598 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15599 ;;Total ram usage:        4 bytes
 15600 ;; Hardware stack levels used:    1
 15601 ;; Hardware stack levels required when called:    4
 15602 ;; This function calls:
 15603 ;;		Nothing
 15604 ;; This function is called by:
 15605 ;;		_rd1RegCompleteHandler
 15606 ;;		_rd2RegCompleteHandler
 15607 ;;		_wr1RegCompleteHandler
 15608 ;;		_wr2RegCompleteHandler
 15609 ;;		_rdBlkRegCompleteHandler
 15610 ;;		_wr1RegCompleteHandler@i2c_simple_master$F2173
 15611 ;;		_i2c_write1ByteRegister
 15612 ;;		_rd1RegCompleteHandler@i2c_simple_master$F2183
 15613 ;;		_i2c_read1ByteRegister
 15614 ;;		_rd2RegCompleteHandler@i2c_simple_master$F2191
 15615 ;;		_wr2RegCompleteHandler@i2c_simple_master$F2197
 15616 ;;		_rdBlkRegCompleteHandler@i2c_simple_master$F2203
 15617 ;;		_i2c_readDataBlock
 15618 ;; This function uses a non-reentrant model
 15619 ;;
 15620                           
 15621                           
 15622                           ;psect for function _I2C_SetBuffer
 15623  1336                     _I2C_SetBuffer:
 15624                           
 15625                           ;mcc_generated_files/i2c_master.c: 263: void I2C_SetBuffer(void *buffer, size_t bufferSi
      +                          ze);mcc_generated_files/i2c_master.c: 264: {;mcc_generated_files/i2c_master.c: 265:     
      +                          if(I2C_Status.bufferFree)
 15626                           
 15627                           ;incstack = 0
 15628                           ; Regs used in _I2C_SetBuffer: [wreg]
 15629  1336  0021               	movlb	1	; select bank1
 15630  1337  1DC3               	btfss	(_I2C_Status^(0+128)+35),3
 15631  1338  0008               	return
 15632                           
 15633                           ;mcc_generated_files/i2c_master.c: 266:     {;mcc_generated_files/i2c_master.c: 267:    
      +                               I2C_Status.data_ptr = buffer;
 15634  1339  0020               	movlb	0	; select bank0
 15635  133A  0821               	movf	I2C_SetBuffer@buffer+1,w
 15636  133B  0021               	movlb	1	; select bank1
 15637  133C  00BE               	movwf	((_I2C_Status+1)^(0+128)+29)
 15638  133D  0020               	movlb	0	; select bank0
 15639  133E  0820               	movf	I2C_SetBuffer@buffer,w
 15640  133F  0021               	movlb	1	; select bank1
 15641  1340  00BD               	movwf	(_I2C_Status^(0+128)+29)
 15642                           
 15643                           ;mcc_generated_files/i2c_master.c: 268:         I2C_Status.data_length = bufferSize;
 15644  1341  0020               	movlb	0	; select bank0
 15645  1342  0823               	movf	I2C_SetBuffer@bufferSize+1,w
 15646  1343  0021               	movlb	1	; select bank1
 15647  1344  00C0               	movwf	((_I2C_Status+1)^(0+128)+31)
 15648  1345  0020               	movlb	0	; select bank0
 15649  1346  0822               	movf	I2C_SetBuffer@bufferSize,w
 15650  1347  0021               	movlb	1	; select bank1
 15651  1348  00BF               	movwf	(_I2C_Status^(0+128)+31)
 15652                           
 15653                           ;mcc_generated_files/i2c_master.c: 269:         I2C_Status.bufferFree = 0;
 15654  1349  11C3               	bcf	(_I2C_Status^(0+128)+35),3
 15655  134A  0008               	return
 15656  134B                     __end_of_I2C_SetBuffer:
 15657                           
 15658                           	psect	text107
 15659  1179                     __ptext107:	
 15660 ;; *************** function _I2C_MasterStop *****************
 15661 ;; Defined at:
 15662 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
 15663 ;; Parameters:    Size  Location     Type
 15664 ;;		None
 15665 ;; Auto vars:     Size  Location     Type
 15666 ;;		None
 15667 ;; Return value:  Size  Location     Type
 15668 ;;                  1    wreg      void 
 15669 ;; Registers used:
 15670 ;;		None
 15671 ;; Tracked objects:
 15672 ;;		On entry : 1F/0
 15673 ;;		On exit  : 1F/4
 15674 ;;		Unchanged: 0/0
 15675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15680 ;;Total ram usage:        0 bytes
 15681 ;; Hardware stack levels used:    1
 15682 ;; Hardware stack levels required when called:    4
 15683 ;; This function calls:
 15684 ;;		Nothing
 15685 ;; This function is called by:
 15686 ;;		_I2C_DO_SEND_STOP
 15687 ;; This function uses a non-reentrant model
 15688 ;;
 15689                           
 15690                           
 15691                           ;psect for function _I2C_MasterStop
 15692  1179                     _I2C_MasterStop:
 15693                           
 15694                           ;mcc_generated_files/i2c_master.c: 595:     SSPCON2bits.PEN = 1;
 15695                           
 15696                           ;incstack = 0
 15697                           ; Regs used in _I2C_MasterStop: []
 15698  1179  0024               	movlb	4	; select bank4
 15699  117A  1516               	bsf	22,2	;volatile
 15700  117B  0008               	return
 15701  117C                     __end_of_I2C_MasterStop:
 15702                           
 15703                           	psect	text108
 15704  1176                     __ptext108:	
 15705 ;; *************** function _I2C_MasterEnableRestart *****************
 15706 ;; Defined at:
 15707 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
 15708 ;; Parameters:    Size  Location     Type
 15709 ;;		None
 15710 ;; Auto vars:     Size  Location     Type
 15711 ;;		None
 15712 ;; Return value:  Size  Location     Type
 15713 ;;                  1    wreg      void 
 15714 ;; Registers used:
 15715 ;;		None
 15716 ;; Tracked objects:
 15717 ;;		On entry : 1F/0
 15718 ;;		On exit  : 1F/4
 15719 ;;		Unchanged: 0/0
 15720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15725 ;;Total ram usage:        0 bytes
 15726 ;; Hardware stack levels used:    1
 15727 ;; Hardware stack levels required when called:    4
 15728 ;; This function calls:
 15729 ;;		Nothing
 15730 ;; This function is called by:
 15731 ;;		_I2C_DO_SEND_RESTART_READ
 15732 ;;		_I2C_DO_SEND_RESTART_WRITE
 15733 ;;		_I2C_DO_SEND_RESTART
 15734 ;; This function uses a non-reentrant model
 15735 ;;
 15736                           
 15737                           
 15738                           ;psect for function _I2C_MasterEnableRestart
 15739  1176                     _I2C_MasterEnableRestart:
 15740                           
 15741                           ;mcc_generated_files/i2c_master.c: 575:     SSPCON2bits.RSEN = 1;
 15742                           
 15743                           ;incstack = 0
 15744                           ; Regs used in _I2C_MasterEnableRestart: []
 15745  1176  0024               	movlb	4	; select bank4
 15746  1177  1496               	bsf	22,1	;volatile
 15747  1178  0008               	return
 15748  1179                     __end_of_I2C_MasterEnableRestart:
 15749                           
 15750                           	psect	text109
 15751  1173                     __ptext109:	
 15752 ;; *************** function _I2C_MasterStart *****************
 15753 ;; Defined at:
 15754 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
 15755 ;; Parameters:    Size  Location     Type
 15756 ;;		None
 15757 ;; Auto vars:     Size  Location     Type
 15758 ;;		None
 15759 ;; Return value:  Size  Location     Type
 15760 ;;                  1    wreg      void 
 15761 ;; Registers used:
 15762 ;;		None
 15763 ;; Tracked objects:
 15764 ;;		On entry : 1F/0
 15765 ;;		On exit  : 1F/4
 15766 ;;		Unchanged: 0/0
 15767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15772 ;;Total ram usage:        0 bytes
 15773 ;; Hardware stack levels used:    1
 15774 ;; Hardware stack levels required when called:    4
 15775 ;; This function calls:
 15776 ;;		Nothing
 15777 ;; This function is called by:
 15778 ;;		_I2C_MasterOperation
 15779 ;; This function uses a non-reentrant model
 15780 ;;
 15781                           
 15782                           
 15783                           ;psect for function _I2C_MasterStart
 15784  1173                     _I2C_MasterStart:
 15785                           
 15786                           ;mcc_generated_files/i2c_master.c: 590:     SSPCON2bits.SEN = 1;
 15787                           
 15788                           ;incstack = 0
 15789                           ; Regs used in _I2C_MasterStart: []
 15790  1173  0024               	movlb	4	; select bank4
 15791  1174  1416               	bsf	22,0	;volatile
 15792  1175  0008               	return
 15793  1176                     __end_of_I2C_MasterStart:
 15794                           
 15795                           	psect	text110
 15796  14DE                     __ptext110:	
 15797 ;; *************** function _I2C_Close *****************
 15798 ;; Defined at:
 15799 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
 15800 ;; Parameters:    Size  Location     Type
 15801 ;;		None
 15802 ;; Auto vars:     Size  Location     Type
 15803 ;;  returnValue     1    1[BANK0 ] enum E355
 15804 ;; Return value:  Size  Location     Type
 15805 ;;                  1    wreg      enum E355
 15806 ;; Registers used:
 15807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15808 ;; Tracked objects:
 15809 ;;		On entry : 1F/0
 15810 ;;		On exit  : 1F/0
 15811 ;;		Unchanged: 0/0
 15812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15816 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15817 ;;Total ram usage:        2 bytes
 15818 ;; Hardware stack levels used:    1
 15819 ;; Hardware stack levels required when called:    5
 15820 ;; This function calls:
 15821 ;;		_I2C_MasterClearIrq
 15822 ;;		_I2C_MasterClose
 15823 ;;		_I2C_MasterDisableIrq
 15824 ;; This function is called by:
 15825 ;;		_i2c_write1ByteRegister
 15826 ;;		_i2c_read1ByteRegister
 15827 ;;		_i2c_readDataBlock
 15828 ;; This function uses a non-reentrant model
 15829 ;;
 15830                           
 15831                           
 15832                           ;psect for function _I2C_Close
 15833  14DE                     _I2C_Close:
 15834                           
 15835                           ;mcc_generated_files/i2c_master.c: 211:     i2c_error_t returnValue = I2C_BUSY;
 15836                           
 15837                           ;incstack = 0
 15838                           ; Regs used in _I2C_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15839  14DE  01A1               	clrf	I2C_Close@returnValue
 15840  14DF  0AA1               	incf	I2C_Close@returnValue,f
 15841                           
 15842                           ;mcc_generated_files/i2c_master.c: 212:     if(!I2C_Status.busy)
 15843  14E0  0021               	movlb	1	; select bank1
 15844  14E1  18C3               	btfsc	(_I2C_Status^(0+128)+35),1
 15845  14E2  2CF8               	goto	l4963
 15846                           
 15847                           ;mcc_generated_files/i2c_master.c: 213:     {;mcc_generated_files/i2c_master.c: 214:    
      +                               I2C_Status.inUse = 0;
 15848  14E3  1143               	bcf	(_I2C_Status^(0+128)+35),2
 15849                           
 15850                           ;mcc_generated_files/i2c_master.c: 215:         I2C_Status.address = 0xff;
 15851  14E4  30BC               	movlw	low (_I2C_Status+28)
 15852  14E5  0086               	movwf	6
 15853  14E6  3000               	movlw	high (_I2C_Status+28)
 15854  14E7  0087               	movwf	7
 15855  14E8  30FF               	movlw	255
 15856  14E9  0081               	movwf	1
 15857                           
 15858                           ;mcc_generated_files/i2c_master.c: 216:         I2C_MasterClearIrq();
 15859  14EA  3191  216A  3194   	fcall	_I2C_MasterClearIrq
 15860                           
 15861                           ;mcc_generated_files/i2c_master.c: 217:         I2C_MasterDisableIrq();
 15862  14ED  3191  2170  3194   	fcall	_I2C_MasterDisableIrq
 15863                           
 15864                           ;mcc_generated_files/i2c_master.c: 218:         I2C_MasterClose();
 15865  14F0  3191  216D         	fcall	_I2C_MasterClose
 15866                           
 15867                           ;mcc_generated_files/i2c_master.c: 219:         returnValue = I2C_Status.error;
 15868  14F2  0021               	movlb	1	; select bank1
 15869  14F3  0842               	movf	(_I2C_Status^(0+128)+34),w
 15870  14F4  0020               	movlb	0	; select bank0
 15871  14F5  00A0               	movwf	??_I2C_Close
 15872  14F6  0820               	movf	??_I2C_Close,w
 15873  14F7  00A1               	movwf	I2C_Close@returnValue
 15874  14F8                     l4963:
 15875                           
 15876                           ;mcc_generated_files/i2c_master.c: 221:     return returnValue;
 15877  14F8  0020               	movlb	0	; select bank0
 15878  14F9  0821               	movf	I2C_Close@returnValue,w
 15879  14FA  0008               	return
 15880  14FB                     __end_of_I2C_Close:
 15881                           
 15882                           	psect	text111
 15883  1170                     __ptext111:	
 15884 ;; *************** function _I2C_MasterDisableIrq *****************
 15885 ;; Defined at:
 15886 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
 15887 ;; Parameters:    Size  Location     Type
 15888 ;;		None
 15889 ;; Auto vars:     Size  Location     Type
 15890 ;;		None
 15891 ;; Return value:  Size  Location     Type
 15892 ;;                  1    wreg      void 
 15893 ;; Registers used:
 15894 ;;		None
 15895 ;; Tracked objects:
 15896 ;;		On entry : 1F/0
 15897 ;;		On exit  : 1F/1
 15898 ;;		Unchanged: 0/0
 15899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15904 ;;Total ram usage:        0 bytes
 15905 ;; Hardware stack levels used:    1
 15906 ;; Hardware stack levels required when called:    4
 15907 ;; This function calls:
 15908 ;;		Nothing
 15909 ;; This function is called by:
 15910 ;;		_I2C_Close
 15911 ;; This function uses a non-reentrant model
 15912 ;;
 15913                           
 15914                           
 15915                           ;psect for function _I2C_MasterDisableIrq
 15916  1170                     _I2C_MasterDisableIrq:
 15917                           
 15918                           ;mcc_generated_files/i2c_master.c: 637:     PIE1bits.SSPIE = 0;
 15919                           
 15920                           ;incstack = 0
 15921                           ; Regs used in _I2C_MasterDisableIrq: []
 15922  1170  0021               	movlb	1	; select bank1
 15923  1171  1191               	bcf	17,3	;volatile
 15924  1172  0008               	return
 15925  1173                     __end_of_I2C_MasterDisableIrq:
 15926                           
 15927                           	psect	text112
 15928  116D                     __ptext112:	
 15929 ;; *************** function _I2C_MasterClose *****************
 15930 ;; Defined at:
 15931 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
 15932 ;; Parameters:    Size  Location     Type
 15933 ;;		None
 15934 ;; Auto vars:     Size  Location     Type
 15935 ;;		None
 15936 ;; Return value:  Size  Location     Type
 15937 ;;                  1    wreg      void 
 15938 ;; Registers used:
 15939 ;;		None
 15940 ;; Tracked objects:
 15941 ;;		On entry : 1F/1
 15942 ;;		On exit  : 1F/4
 15943 ;;		Unchanged: 0/0
 15944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15949 ;;Total ram usage:        0 bytes
 15950 ;; Hardware stack levels used:    1
 15951 ;; Hardware stack levels required when called:    4
 15952 ;; This function calls:
 15953 ;;		Nothing
 15954 ;; This function is called by:
 15955 ;;		_I2C_Close
 15956 ;; This function uses a non-reentrant model
 15957 ;;
 15958                           
 15959                           
 15960                           ;psect for function _I2C_MasterClose
 15961  116D                     _I2C_MasterClose:
 15962                           
 15963                           ;mcc_generated_files/i2c_master.c: 560:     SSPCON1bits.SSPEN = 0;
 15964                           
 15965                           ;incstack = 0
 15966                           ; Regs used in _I2C_MasterClose: []
 15967  116D  0024               	movlb	4	; select bank4
 15968  116E  1295               	bcf	21,5	;volatile
 15969  116F  0008               	return
 15970  1170                     __end_of_I2C_MasterClose:
 15971                           
 15972                           	psect	text113
 15973  116A                     __ptext113:	
 15974 ;; *************** function _I2C_MasterClearIrq *****************
 15975 ;; Defined at:
 15976 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
 15977 ;; Parameters:    Size  Location     Type
 15978 ;;		None
 15979 ;; Auto vars:     Size  Location     Type
 15980 ;;		None
 15981 ;; Return value:  Size  Location     Type
 15982 ;;                  1    wreg      void 
 15983 ;; Registers used:
 15984 ;;		None
 15985 ;; Tracked objects:
 15986 ;;		On entry : 1E/1
 15987 ;;		On exit  : 1F/0
 15988 ;;		Unchanged: 0/0
 15989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15994 ;;Total ram usage:        0 bytes
 15995 ;; Hardware stack levels used:    1
 15996 ;; Hardware stack levels required when called:    4
 15997 ;; This function calls:
 15998 ;;		Nothing
 15999 ;; This function is called by:
 16000 ;;		_I2C_Open
 16001 ;;		_I2C_Close
 16002 ;;		_I2C_MasterFsm
 16003 ;; This function uses a non-reentrant model
 16004 ;;
 16005                           
 16006                           
 16007                           ;psect for function _I2C_MasterClearIrq
 16008  116A                     _I2C_MasterClearIrq:
 16009                           
 16010                           ;mcc_generated_files/i2c_master.c: 642:     PIR1bits.SSPIF = 0;
 16011                           
 16012                           ;incstack = 0
 16013                           ; Regs used in _I2C_MasterClearIrq: []
 16014  116A  0020               	movlb	0	; select bank0
 16015  116B  1191               	bcf	17,3	;volatile
 16016  116C  0008               	return
 16017  116D                     __end_of_I2C_MasterClearIrq:
 16018                           
 16019                           	psect	intentry
 16020  0004                     __pintentry:	
 16021 ;; *************** function _INTERRUPT_InterruptManager *****************
 16022 ;; Defined at:
 16023 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 16024 ;; Parameters:    Size  Location     Type
 16025 ;;		None
 16026 ;; Auto vars:     Size  Location     Type
 16027 ;;		None
 16028 ;; Return value:  Size  Location     Type
 16029 ;;                  1    wreg      void 
 16030 ;; Registers used:
 16031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16032 ;; Tracked objects:
 16033 ;;		On entry : 0/0
 16034 ;;		On exit  : 0/0
 16035 ;;		Unchanged: 0/0
 16036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;Total ram usage:        0 bytes
 16042 ;; Hardware stack levels used:    1
 16043 ;; Hardware stack levels required when called:    3
 16044 ;; This function calls:
 16045 ;;		Absolute function
 16046 ;;		_CCP4_CaptureISR
 16047 ;;		_EUSART_Receive_ISR
 16048 ;;		_EUSART_Transmit_ISR
 16049 ;; This function is called by:
 16050 ;;		Interrupt level 1
 16051 ;; This function uses a non-reentrant model
 16052 ;;
 16053                           
 16054  0004                     _INTERRUPT_InterruptManager:
 16055                           
 16056                           ;incstack = 0
 16057 ;; hardware stack exceeded
 16058  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 16059                           
 16060                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16061  0005  3180               	pagesel	$
 16062                           
 16063                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 16064  0006  1F0B               	btfss	11,6	;volatile
 16065  0007  282A               	goto	i1l1029
 16066                           
 16067                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 16068  0008  0021               	movlb	1	; select bank1
 16069  0009  1E11               	btfss	17,4	;volatile
 16070  000A  2815               	goto	i1l1022
 16071  000B  0020               	movlb	0	; select bank0
 16072  000C  1E11               	btfss	17,4	;volatile
 16073  000D  2815               	goto	i1l1022
 16074                           
 16075                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
 16076  000E  0021               	movlb	1	; select bank1
 16077  000F  0869               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 16078  0010  008A               	movwf	10
 16079  0011  0868               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 16080  0012  000A               	callw
 16081  0013  3180               	pagesel	$
 16082                           
 16083                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 16084  0014  282A               	goto	i1l1029
 16085  0015                     i1l1022:	
 16086                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 16087                           
 16088  0015  0021               	movlb	1	; select bank1
 16089  0016  1E91               	btfss	17,5	;volatile
 16090  0017  2822               	goto	i1l1024
 16091  0018  0020               	movlb	0	; select bank0
 16092  0019  1E91               	btfss	17,5	;volatile
 16093  001A  2822               	goto	i1l1024
 16094                           
 16095                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
 16096  001B  0021               	movlb	1	; select bank1
 16097  001C  0867               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 16098  001D  008A               	movwf	10
 16099  001E  0866               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 16100  001F  000A               	callw
 16101  0020  3180               	pagesel	$
 16102                           
 16103                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 16104  0021  282A               	goto	i1l1029
 16105  0022                     i1l1024:	
 16106                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE3bits.CCP4IE == 1 && PI
      +                          R3bits.CCP4IF == 1)
 16107                           
 16108  0022  0021               	movlb	1	; select bank1
 16109  0023  1E93               	btfss	19,5	;volatile
 16110  0024  282A               	goto	i1l1029
 16111  0025  0020               	movlb	0	; select bank0
 16112  0026  1E93               	btfss	19,5	;volatile
 16113  0027  282A               	goto	i1l1029
 16114                           
 16115                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             CCP4_CaptureISR();
 16116  0028  3193  2321         	fcall	_CCP4_CaptureISR
 16117  002A                     i1l1029:	
 16118                           ;mcc_generated_files/interrupt_manager.c: 73:     }
 16119                           
 16120                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 16121                           
 16122  002A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 16123  002B  0009               	retfie
 16124  002C                     __end_of_INTERRUPT_InterruptManager:
 16125                           
 16126                           	psect	text115
 16127  14C1                     __ptext115:	
 16128 ;; *************** function _EUSART_Transmit_ISR *****************
 16129 ;; Defined at:
 16130 ;;		line 197 in file "mcc_generated_files/eusart.c"
 16131 ;; Parameters:    Size  Location     Type
 16132 ;;		None
 16133 ;; Auto vars:     Size  Location     Type
 16134 ;;		None
 16135 ;; Return value:  Size  Location     Type
 16136 ;;                  1    wreg      void 
 16137 ;; Registers used:
 16138 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16139 ;; Tracked objects:
 16140 ;;		On entry : 1F/1
 16141 ;;		On exit  : 1E/0
 16142 ;;		Unchanged: 0/0
 16143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16146 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16147 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16148 ;;Total ram usage:        1 bytes
 16149 ;; Hardware stack levels used:    1
 16150 ;; This function calls:
 16151 ;;		Nothing
 16152 ;; This function is called by:
 16153 ;;		_EUSART_Initialize
 16154 ;;		_INTERRUPT_InterruptManager
 16155 ;; This function uses a non-reentrant model
 16156 ;;
 16157                           
 16158                           
 16159                           ;psect for function _EUSART_Transmit_ISR
 16160  14C1                     _EUSART_Transmit_ISR:
 16161                           
 16162                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 16163                           
 16164                           ;incstack = 0
 16165                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16166  14C1  3008               	movlw	8
 16167  14C2  0020               	movlb	0	; select bank0
 16168  14C3  026D               	subwf	_eusartTxBufferRemaining,w
 16169  14C4  1803               	skipnc
 16170  14C5  2CDB               	goto	i1l464
 16171                           
 16172                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 16173  14C6  086E               	movf	_eusartTxTail,w
 16174  14C7  3ECC               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 16175  14C8  0086               	movwf	6
 16176  14C9  0187               	clrf	7
 16177  14CA  0801               	movf	1,w
 16178  14CB  0023               	movlb	3	; select bank3
 16179  14CC  009A               	movwf	26	;volatile
 16180  14CD  3001               	movlw	1
 16181  14CE  00F0               	movwf	??_EUSART_Transmit_ISR
 16182  14CF  0870               	movf	??_EUSART_Transmit_ISR,w
 16183  14D0  0020               	movlb	0	; select bank0
 16184  14D1  07EE               	addwf	_eusartTxTail,f	;volatile
 16185                           
 16186                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 16187  14D2  3008               	movlw	8
 16188  14D3  026E               	subwf	_eusartTxTail,w
 16189  14D4  1803               	btfsc	3,0
 16190                           
 16191                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
 16192  14D5  01EE               	clrf	_eusartTxTail	;volatile
 16193                           
 16194                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
 16195  14D6  3001               	movlw	1
 16196  14D7  00F0               	movwf	??_EUSART_Transmit_ISR
 16197  14D8  0870               	movf	??_EUSART_Transmit_ISR,w
 16198  14D9  07ED               	addwf	_eusartTxBufferRemaining,f	;volatile
 16199                           
 16200                           ;mcc_generated_files/eusart.c: 209:     }
 16201  14DA  0008               	return
 16202  14DB                     i1l464:	
 16203                           ;mcc_generated_files/eusart.c: 210:     else
 16204                           
 16205                           
 16206                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
 16207  14DB  0021               	movlb	1	; select bank1
 16208  14DC  1211               	bcf	17,4	;volatile
 16209  14DD  0008               	return
 16210  14DE                     __end_of_EUSART_Transmit_ISR:
 16211                           
 16212                           	psect	text116
 16213  085F                     __ptext116:	
 16214 ;; *************** function _EUSART_Receive_ISR *****************
 16215 ;; Defined at:
 16216 ;;		line 216 in file "mcc_generated_files/eusart.c"
 16217 ;; Parameters:    Size  Location     Type
 16218 ;;		None
 16219 ;; Auto vars:     Size  Location     Type
 16220 ;;		None
 16221 ;; Return value:  Size  Location     Type
 16222 ;;                  1    wreg      void 
 16223 ;; Registers used:
 16224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16225 ;; Tracked objects:
 16226 ;;		On entry : 1F/1
 16227 ;;		On exit  : 0/0
 16228 ;;		Unchanged: 0/0
 16229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;Total ram usage:        0 bytes
 16235 ;; Hardware stack levels used:    1
 16236 ;; Hardware stack levels required when called:    2
 16237 ;; This function calls:
 16238 ;;		Absolute function
 16239 ;;		_EUSART_DefaultErrorHandler
 16240 ;;		_EUSART_DefaultFramingErrorHandler
 16241 ;;		_EUSART_DefaultOverrunErrorHandler
 16242 ;;		_EUSART_RxDataHandler
 16243 ;; This function is called by:
 16244 ;;		_EUSART_Initialize
 16245 ;;		_INTERRUPT_InterruptManager
 16246 ;; This function uses a non-reentrant model
 16247 ;;
 16248                           
 16249                           
 16250                           ;psect for function _EUSART_Receive_ISR
 16251  085F                     _EUSART_Receive_ISR:
 16252                           
 16253                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 16254                           
 16255                           ;incstack = 0
 16256 ;; hardware stack exceeded
 16257                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16258  085F  0020               	movlb	0	; select bank0
 16259  0860  086C               	movf	_eusartRxHead,w	;volatile
 16260  0861  3EC4               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 16261  0862  0086               	movwf	6
 16262  0863  0187               	clrf	7
 16263  0864  0181               	clrf	1
 16264                           
 16265                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
 16266  0865  0023               	movlb	3	; select bank3
 16267  0866  1D1D               	btfss	29,2	;volatile
 16268  0867  2874               	goto	i1l5945
 16269                           
 16270                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 16271  0868  0020               	movlb	0	; select bank0
 16272  0869  086C               	movf	_eusartRxHead,w	;volatile
 16273  086A  3EC4               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 16274  086B  0086               	movwf	6
 16275  086C  0187               	clrf	7
 16276  086D  1481               	bsf	1,1
 16277                           
 16278                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
 16279  086E  0021               	movlb	1	; select bank1
 16280  086F  0865               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 16281  0870  008A               	movwf	10
 16282  0871  0864               	movf	_EUSART_FramingErrorHandler^(0+128),w
 16283  0872  000A               	callw
 16284  0873  3188               	pagesel	$
 16285  0874                     i1l5945:
 16286                           
 16287                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
 16288  0874  0023               	movlb	3	; select bank3
 16289  0875  1C9D               	btfss	29,1	;volatile
 16290  0876  2883               	goto	i1l5951
 16291                           
 16292                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 16293  0877  0020               	movlb	0	; select bank0
 16294  0878  086C               	movf	_eusartRxHead,w	;volatile
 16295  0879  3EC4               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 16296  087A  0086               	movwf	6
 16297  087B  0187               	clrf	7
 16298  087C  1501               	bsf	1,2
 16299                           
 16300                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
 16301  087D  0021               	movlb	1	; select bank1
 16302  087E  0863               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 16303  087F  008A               	movwf	10
 16304  0880  0862               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 16305  0881  000A               	callw
 16306  0882  3188               	pagesel	$
 16307  0883                     i1l5951:
 16308                           
 16309                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
 16310  0883  0020               	movlb	0	; select bank0
 16311  0884  086C               	movf	_eusartRxHead,w	;volatile
 16312  0885  3EC4               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 16313  0886  0086               	movwf	6
 16314  0887  0187               	clrf	7
 16315  0888  0801               	movf	1,w
 16316  0889  1903               	btfsc	3,2
 16317  088A  2892               	goto	i1l5955
 16318                           
 16319                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
 16320  088B  0021               	movlb	1	; select bank1
 16321  088C  0861               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 16322  088D  008A               	movwf	10
 16323  088E  0860               	movf	_EUSART_ErrorHandler^(0+128),w
 16324  088F  000A               	callw
 16325  0890  3188               	pagesel	$
 16326                           
 16327                           ;mcc_generated_files/eusart.c: 233:     } else {
 16328  0891  0008               	return
 16329  0892                     i1l5955:
 16330                           
 16331                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
 16332  0892  3194  243B         	fcall	_EUSART_RxDataHandler
 16333  0894  0008               	return
 16334  0895                     __end_of_EUSART_Receive_ISR:
 16335                           
 16336                           	psect	text117
 16337  117F                     __ptext117:	
 16338 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 16339 ;; Defined at:
 16340 ;;		line 252 in file "mcc_generated_files/eusart.c"
 16341 ;; Parameters:    Size  Location     Type
 16342 ;;		None
 16343 ;; Auto vars:     Size  Location     Type
 16344 ;;		None
 16345 ;; Return value:  Size  Location     Type
 16346 ;;                  1    wreg      void 
 16347 ;; Registers used:
 16348 ;;		None
 16349 ;; Tracked objects:
 16350 ;;		On entry : 1F/1
 16351 ;;		On exit  : 1F/3
 16352 ;;		Unchanged: 0/0
 16353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16358 ;;Total ram usage:        0 bytes
 16359 ;; Hardware stack levels used:    1
 16360 ;; This function calls:
 16361 ;;		Nothing
 16362 ;; This function is called by:
 16363 ;;		_EUSART_Initialize
 16364 ;;		_EUSART_Receive_ISR
 16365 ;; This function uses a non-reentrant model
 16366 ;;
 16367                           
 16368                           
 16369                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 16370  117F                     _EUSART_DefaultOverrunErrorHandler:
 16371                           
 16372                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
 16373                           
 16374                           ;incstack = 0
 16375 ;; hardware stack exceeded
 16376                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 16377  117F  0023               	movlb	3	; select bank3
 16378  1180  121D               	bcf	29,4	;volatile
 16379                           
 16380                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
 16381  1181  161D               	bsf	29,4	;volatile
 16382  1182  0008               	return
 16383  1183                     __end_of_EUSART_DefaultOverrunErrorHandler:
 16384                           
 16385                           	psect	text118
 16386  1162                     __ptext118:	
 16387 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 16388 ;; Defined at:
 16389 ;;		line 250 in file "mcc_generated_files/eusart.c"
 16390 ;; Parameters:    Size  Location     Type
 16391 ;;		None
 16392 ;; Auto vars:     Size  Location     Type
 16393 ;;		None
 16394 ;; Return value:  Size  Location     Type
 16395 ;;                  1    wreg      void 
 16396 ;; Registers used:
 16397 ;;		None
 16398 ;; Tracked objects:
 16399 ;;		On entry : 1F/1
 16400 ;;		On exit  : 1F/1
 16401 ;;		Unchanged: 1F/0
 16402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16406 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16407 ;;Total ram usage:        0 bytes
 16408 ;; Hardware stack levels used:    1
 16409 ;; This function calls:
 16410 ;;		Nothing
 16411 ;; This function is called by:
 16412 ;;		_EUSART_Initialize
 16413 ;;		_EUSART_Receive_ISR
 16414 ;; This function uses a non-reentrant model
 16415 ;;
 16416                           
 16417                           
 16418                           ;psect for function _EUSART_DefaultFramingErrorHandler
 16419  1162                     _EUSART_DefaultFramingErrorHandler:
 16420                           
 16421                           ;incstack = 0
 16422 ;; hardware stack exceeded
 16423                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 16424  1162  0008               	return
 16425  1163                     __end_of_EUSART_DefaultFramingErrorHandler:
 16426                           
 16427                           	psect	text119
 16428  1167                     __ptext119:	
 16429 ;; *************** function _EUSART_DefaultErrorHandler *****************
 16430 ;; Defined at:
 16431 ;;		line 260 in file "mcc_generated_files/eusart.c"
 16432 ;; Parameters:    Size  Location     Type
 16433 ;;		None
 16434 ;; Auto vars:     Size  Location     Type
 16435 ;;		None
 16436 ;; Return value:  Size  Location     Type
 16437 ;;                  1    wreg      void 
 16438 ;; Registers used:
 16439 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16440 ;; Tracked objects:
 16441 ;;		On entry : 1F/1
 16442 ;;		On exit  : 1F/1
 16443 ;;		Unchanged: 0/0
 16444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16449 ;;Total ram usage:        0 bytes
 16450 ;; Hardware stack levels used:    1
 16451 ;; Hardware stack levels required when called:    1
 16452 ;; This function calls:
 16453 ;;		_EUSART_RxDataHandler
 16454 ;; This function is called by:
 16455 ;;		_EUSART_Initialize
 16456 ;;		_EUSART_Receive_ISR
 16457 ;; This function uses a non-reentrant model
 16458 ;;
 16459                           
 16460                           
 16461                           ;psect for function _EUSART_DefaultErrorHandler
 16462  1167                     _EUSART_DefaultErrorHandler:
 16463                           
 16464                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
 16465                           
 16466                           ;incstack = 0
 16467 ;; hardware stack exceeded
 16468                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16469  1167  3194  243B         	fcall	_EUSART_RxDataHandler
 16470  1169  0008               	return
 16471  116A                     __end_of_EUSART_DefaultErrorHandler:
 16472                           
 16473                           	psect	text120
 16474  143B                     __ptext120:	
 16475 ;; *************** function _EUSART_RxDataHandler *****************
 16476 ;; Defined at:
 16477 ;;		line 240 in file "mcc_generated_files/eusart.c"
 16478 ;; Parameters:    Size  Location     Type
 16479 ;;		None
 16480 ;; Auto vars:     Size  Location     Type
 16481 ;;		None
 16482 ;; Return value:  Size  Location     Type
 16483 ;;                  1    wreg      void 
 16484 ;; Registers used:
 16485 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16486 ;; Tracked objects:
 16487 ;;		On entry : 1E/0
 16488 ;;		On exit  : 1F/1
 16489 ;;		Unchanged: 0/0
 16490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16494 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16495 ;;Total ram usage:        1 bytes
 16496 ;; Hardware stack levels used:    1
 16497 ;; This function calls:
 16498 ;;		Nothing
 16499 ;; This function is called by:
 16500 ;;		_EUSART_Receive_ISR
 16501 ;;		_EUSART_DefaultErrorHandler
 16502 ;; This function uses a non-reentrant model
 16503 ;;
 16504                           
 16505                           
 16506                           ;psect for function _EUSART_RxDataHandler
 16507  143B                     _EUSART_RxDataHandler:
 16508                           
 16509                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
 16510                           
 16511                           ;incstack = 0
 16512 ;; hardware stack exceeded
 16513                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 16514  143B  0023               	movlb	3	; select bank3
 16515  143C  0819               	movf	25,w	;volatile
 16516  143D  00F0               	movwf	??_EUSART_RxDataHandler
 16517  143E  0020               	movlb	0	; select bank0
 16518  143F  086C               	movf	_eusartRxHead,w
 16519  1440  3E20               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 16520  1441  0086               	movwf	6
 16521  1442  3001               	movlw	1	; select bank2/3
 16522  1443  0087               	movwf	7
 16523  1444  0870               	movf	??_EUSART_RxDataHandler,w
 16524  1445  0081               	movwf	1
 16525  1446  3001               	movlw	1
 16526  1447  00F0               	movwf	??_EUSART_RxDataHandler
 16527  1448  0870               	movf	??_EUSART_RxDataHandler,w
 16528  1449  07EC               	addwf	_eusartRxHead,f	;volatile
 16529                           
 16530                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16531  144A  3008               	movlw	8
 16532  144B  026C               	subwf	_eusartRxHead,w
 16533  144C  1803               	btfsc	3,0
 16534                           
 16535                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
 16536  144D  01EC               	clrf	_eusartRxHead	;volatile
 16537                           
 16538                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
 16539  144E  3001               	movlw	1
 16540  144F  00F0               	movwf	??_EUSART_RxDataHandler
 16541  1450  0870               	movf	??_EUSART_RxDataHandler,w
 16542  1451  0021               	movlb	1	; select bank1
 16543  1452  07ED               	addwf	_eusartRxCount^(0+128),f	;volatile
 16544  1453  0008               	return
 16545  1454                     __end_of_EUSART_RxDataHandler:
 16546                           
 16547                           	psect	text121
 16548  1321                     __ptext121:	
 16549 ;; *************** function _CCP4_CaptureISR *****************
 16550 ;; Defined at:
 16551 ;;		line 89 in file "mcc_generated_files/ccp4.c"
 16552 ;; Parameters:    Size  Location     Type
 16553 ;;		None
 16554 ;; Auto vars:     Size  Location     Type
 16555 ;;  module          2    9[COMMON] struct CCPR4Reg_tag
 16556 ;; Return value:  Size  Location     Type
 16557 ;;                  1    wreg      void 
 16558 ;; Registers used:
 16559 ;;		wreg, status,2, status,0, pclath, cstack
 16560 ;; Tracked objects:
 16561 ;;		On entry : 1F/0
 16562 ;;		On exit  : 0/0
 16563 ;;		Unchanged: 0/0
 16564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16569 ;;Total ram usage:        3 bytes
 16570 ;; Hardware stack levels used:    1
 16571 ;; Hardware stack levels required when called:    2
 16572 ;; This function calls:
 16573 ;;		Absolute function
 16574 ;;		_CCP4_CallBack@main$F1923
 16575 ;;		_CCP4_DefaultCallBack
 16576 ;; This function is called by:
 16577 ;;		_INTERRUPT_InterruptManager
 16578 ;; This function uses a non-reentrant model
 16579 ;;
 16580                           
 16581                           
 16582                           ;psect for function _CCP4_CaptureISR
 16583  1321                     _CCP4_CaptureISR:
 16584                           
 16585                           ;mcc_generated_files/ccp4.c: 91:     CCP4_PERIOD_REG_T module;;mcc_generated_files/ccp4.
      +                          c: 94:     PIR3bits.CCP4IF = 0;
 16586                           
 16587                           ;incstack = 0
 16588 ;; hardware stack exceeded
 16589                           ; Regs used in _CCP4_CaptureISR: [wreg+status,2+status,0+pclath+cstack]
 16590  1321  1293               	bcf	19,5	;volatile
 16591                           
 16592                           ;mcc_generated_files/ccp4.c: 97:     module.ccpr4l = CCPR4L;
 16593  1322  0026               	movlb	6	; select bank6
 16594  1323  0818               	movf	24,w	;volatile
 16595  1324  00F8               	movwf	??_CCP4_CaptureISR
 16596  1325  0878               	movf	??_CCP4_CaptureISR,w
 16597  1326  00F9               	movwf	CCP4_CaptureISR@module
 16598                           
 16599                           ;mcc_generated_files/ccp4.c: 98:     module.ccpr4h = CCPR4H;
 16600  1327  0819               	movf	25,w	;volatile
 16601  1328  00F8               	movwf	??_CCP4_CaptureISR
 16602  1329  0878               	movf	??_CCP4_CaptureISR,w
 16603  132A  00FA               	movwf	CCP4_CaptureISR@module+1
 16604                           
 16605                           ;mcc_generated_files/ccp4.c: 101:     CCP4_CallBack(module.ccpr4_16Bit);
 16606  132B  087A               	movf	CCP4_CaptureISR@module+1,w
 16607  132C  00F3               	movwf	CCP4_CallBack@main$F1923@capturedValue+1
 16608  132D  0879               	movf	CCP4_CaptureISR@module,w
 16609  132E  00F2               	movwf	CCP4_CallBack@main$F1923@capturedValue
 16610  132F  0021               	movlb	1	; select bank1
 16611  1330  085D               	movf	(_CCP4_CallBack+1)^(0+128),w
 16612  1331  008A               	movwf	10
 16613  1332  085C               	movf	_CCP4_CallBack^(0+128),w
 16614  1333  000A               	callw
 16615  1334  3193               	pagesel	$
 16616  1335  0008               	return
 16617  1336                     __end_of_CCP4_CaptureISR:
 16618                           
 16619                           	psect	text122
 16620  0748                     __ptext122:	
 16621 ;; *************** function _CCP4_CallBack@main$F1923 *****************
 16622 ;; Defined at:
 16623 ;;		line 189 in file "main.c"
 16624 ;; Parameters:    Size  Location     Type
 16625 ;;  capturedValu    2    2[COMMON] unsigned short 
 16626 ;; Auto vars:     Size  Location     Type
 16627 ;;		None
 16628 ;; Return value:  Size  Location     Type
 16629 ;;                  1    wreg      void 
 16630 ;; Registers used:
 16631 ;;		wreg, status,2, status,0, pclath, cstack
 16632 ;; Tracked objects:
 16633 ;;		On entry : 1F/1
 16634 ;;		On exit  : 1E/0
 16635 ;;		Unchanged: 0/0
 16636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16637 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16639 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16640 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16641 ;;Total ram usage:        6 bytes
 16642 ;; Hardware stack levels used:    1
 16643 ;; Hardware stack levels required when called:    1
 16644 ;; This function calls:
 16645 ;;		_TMR1_WriteTimer
 16646 ;; This function is called by:
 16647 ;;		_main
 16648 ;;		_CCP4_CaptureISR
 16649 ;; This function uses a non-reentrant model
 16650 ;;
 16651                           
 16652                           
 16653                           ;psect for function _CCP4_CallBack@main$F1923
 16654  0748                     _CCP4_CallBack@main$F1923:
 16655                           
 16656                           ;main.c: 189: static void CCP4_CallBack(uint16_t capturedValue);main.c: 190: {;main.c: 1
      +                          91:     static uint8_t bit_count;;main.c: 193:     TMR1_WriteTimer(0x0000);
 16657                           
 16658                           ;incstack = 0
 16659 ;; hardware stack exceeded
 16660                           ; Regs used in _CCP4_CallBack@main$F1923: [wreg+status,2+status,0+pclath+cstack]
 16661  0748  3000               	movlw	0
 16662  0749  00F0               	movwf	TMR1_WriteTimer@timerVal
 16663  074A  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 16664  074B  3192  229F  3187   	fcall	_TMR1_WriteTimer
 16665                           
 16666                           ;main.c: 196:     if((capturedValue > 13400) && (capturedValue < 13600)){
 16667  074E  3034               	movlw	52
 16668  074F  0273               	subwf	CCP4_CallBack@main$F1923@capturedValue+1,w
 16669  0750  3059               	movlw	89
 16670  0751  1903               	skipnz
 16671  0752  0272               	subwf	CCP4_CallBack@main$F1923@capturedValue,w
 16672  0753  1C03               	skipc
 16673  0754  2F68               	goto	i1l5323
 16674  0755  3035               	movlw	53
 16675  0756  0273               	subwf	CCP4_CallBack@main$F1923@capturedValue+1,w
 16676  0757  3020               	movlw	32
 16677  0758  1903               	skipnz
 16678  0759  0272               	subwf	CCP4_CallBack@main$F1923@capturedValue,w
 16679  075A  1803               	skipnc
 16680  075B  2F68               	goto	i1l5323
 16681                           
 16682                           ;main.c: 197:         bit_count = 0;
 16683  075C  01FB               	clrf	CCP4_CallBack@main$F1923@bit_count
 16684                           
 16685                           ;main.c: 198:         ir_address = ir_address_complement = ir_command = ir_command_compl
      +                          ement = 0;
 16686  075D  01FC               	clrf	_ir_command_complement	;volatile
 16687  075E  01EA               	clrf	_ir_command	;volatile
 16688  075F  0021               	movlb	1	; select bank1
 16689  0760  01EA               	clrf	_ir_address_complement^(0+128)	;volatile
 16690  0761  0020               	movlb	0	; select bank0
 16691  0762  01EB               	clrf	_ir_address	;volatile
 16692                           
 16693                           ;main.c: 199:         ir_flag = IR_BUSY;
 16694  0763  3001               	movlw	1
 16695  0764  00F4               	movwf	??_CCP4_CallBack@main$F1927
 16696  0765  0874               	movf	??_CCP4_CallBack@main$F1927,w
 16697  0766  00E9               	movwf	_ir_flag	;volatile
 16698                           
 16699                           ;main.c: 200:     } else if((capturedValue > 11150) && (capturedValue < 11350)){
 16700  0767  0008               	return
 16701  0768                     i1l5323:
 16702  0768  302B               	movlw	43
 16703  0769  0273               	subwf	CCP4_CallBack@main$F1923@capturedValue+1,w
 16704  076A  308F               	movlw	143
 16705  076B  1903               	skipnz
 16706  076C  0272               	subwf	CCP4_CallBack@main$F1923@capturedValue,w
 16707  076D  1C03               	skipc
 16708  076E  2F7B               	goto	i1l5329
 16709  076F  302C               	movlw	44
 16710  0770  0273               	subwf	CCP4_CallBack@main$F1923@capturedValue+1,w
 16711  0771  3056               	movlw	86
 16712  0772  1903               	skipnz
 16713  0773  0272               	subwf	CCP4_CallBack@main$F1923@capturedValue,w
 16714  0774  1803               	skipnc
 16715  0775  2F7B               	goto	i1l5329
 16716                           
 16717                           ;main.c: 201:         ir_flag = IR_REPEAT;
 16718  0776  3003               	movlw	3
 16719  0777  00F4               	movwf	??_CCP4_CallBack@main$F1927
 16720  0778  0874               	movf	??_CCP4_CallBack@main$F1927,w
 16721  0779  00E9               	movwf	_ir_flag	;volatile
 16722                           
 16723                           ;main.c: 202:     } else if((capturedValue > 2150) && (capturedValue < 2350)){
 16724  077A  0008               	return
 16725  077B                     i1l5329:
 16726  077B  3008               	movlw	8
 16727  077C  0273               	subwf	CCP4_CallBack@main$F1923@capturedValue+1,w
 16728  077D  3067               	movlw	103
 16729  077E  1903               	skipnz
 16730  077F  0272               	subwf	CCP4_CallBack@main$F1923@capturedValue,w
 16731  0780  1C03               	skipc
 16732  0781  2FD2               	goto	i1l5365
 16733  0782  3009               	movlw	9
 16734  0783  0273               	subwf	CCP4_CallBack@main$F1923@capturedValue+1,w
 16735  0784  302E               	movlw	46
 16736  0785  1903               	skipnz
 16737  0786  0272               	subwf	CCP4_CallBack@main$F1923@capturedValue,w
 16738  0787  1803               	skipnc
 16739  0788  2FD2               	goto	i1l5365
 16740                           
 16741                           ;main.c: 203:         if(bit_count < 8){
 16742  0789  3008               	movlw	8
 16743  078A  027B               	subwf	CCP4_CallBack@main$F1923@bit_count,w
 16744  078B  1803               	skipnc
 16745  078C  2F94               	goto	i1l5339
 16746                           
 16747                           ;main.c: 205:             ir_address <<= 1;
 16748  078D  1003               	clrc
 16749  078E  0DEB               	rlf	_ir_address,f	;volatile
 16750                           
 16751                           ;main.c: 206:             ir_address++;
 16752  078F  3001               	movlw	1
 16753  0790  00F4               	movwf	??_CCP4_CallBack@main$F1927
 16754  0791  0874               	movf	??_CCP4_CallBack@main$F1927,w
 16755  0792  07EB               	addwf	_ir_address,f	;volatile
 16756                           
 16757                           ;main.c: 207:         } else if(bit_count < 16){
 16758  0793  2FB5               	goto	i1l5357
 16759  0794                     i1l5339:
 16760  0794  3010               	movlw	16
 16761  0795  027B               	subwf	CCP4_CallBack@main$F1923@bit_count,w
 16762  0796  1803               	skipnc
 16763  0797  2FA0               	goto	i1l5345
 16764                           
 16765                           ;main.c: 209:             ir_address_complement <<= 1;
 16766  0798  1003               	clrc
 16767  0799  0021               	movlb	1	; select bank1
 16768  079A  0DEA               	rlf	_ir_address_complement^(0+128),f	;volatile
 16769                           
 16770                           ;main.c: 210:             ir_address_complement++;
 16771  079B  3001               	movlw	1
 16772  079C  00F4               	movwf	??_CCP4_CallBack@main$F1927
 16773  079D  0874               	movf	??_CCP4_CallBack@main$F1927,w
 16774  079E  07EA               	addwf	_ir_address_complement^(0+128),f	;volatile
 16775                           
 16776                           ;main.c: 211:         } else if(bit_count < 24){
 16777  079F  2FB5               	goto	i1l5357
 16778  07A0                     i1l5345:
 16779  07A0  3018               	movlw	24
 16780  07A1  027B               	subwf	CCP4_CallBack@main$F1923@bit_count,w
 16781  07A2  1803               	skipnc
 16782  07A3  2FAB               	goto	i1l5351
 16783                           
 16784                           ;main.c: 213:             ir_command <<= 1;
 16785  07A4  1003               	clrc
 16786  07A5  0DEA               	rlf	_ir_command,f	;volatile
 16787                           
 16788                           ;main.c: 214:             ir_command++;
 16789  07A6  3001               	movlw	1
 16790  07A7  00F4               	movwf	??_CCP4_CallBack@main$F1927
 16791  07A8  0874               	movf	??_CCP4_CallBack@main$F1927,w
 16792  07A9  07EA               	addwf	_ir_command,f	;volatile
 16793                           
 16794                           ;main.c: 215:         } else if(bit_count < 32){
 16795  07AA  2FB5               	goto	i1l5357
 16796  07AB                     i1l5351:
 16797  07AB  3020               	movlw	32
 16798  07AC  027B               	subwf	CCP4_CallBack@main$F1923@bit_count,w
 16799  07AD  1803               	skipnc
 16800  07AE  2FB5               	goto	i1l5357
 16801                           
 16802                           ;main.c: 217:             ir_command_complement <<= 1;
 16803  07AF  1003               	clrc
 16804  07B0  0DFC               	rlf	_ir_command_complement,f	;volatile
 16805                           
 16806                           ;main.c: 218:             ir_command_complement++;
 16807  07B1  3001               	movlw	1
 16808  07B2  00F4               	movwf	??_CCP4_CallBack@main$F1927
 16809  07B3  0874               	movf	??_CCP4_CallBack@main$F1927,w
 16810  07B4  07FC               	addwf	_ir_command_complement,f	;volatile
 16811  07B5                     i1l5357:
 16812                           
 16813                           ;main.c: 221:         bit_count++;
 16814  07B5  3001               	movlw	1
 16815  07B6  00F4               	movwf	??_CCP4_CallBack@main$F1927
 16816  07B7  0874               	movf	??_CCP4_CallBack@main$F1927,w
 16817  07B8  07FB               	addwf	CCP4_CallBack@main$F1923@bit_count,f
 16818                           
 16819                           ;main.c: 223:         if(bit_count == 32){
 16820  07B9  3020               	movlw	32
 16821  07BA  067B               	xorwf	CCP4_CallBack@main$F1923@bit_count,w
 16822  07BB  1D03               	btfss	3,2
 16823  07BC  0008               	return
 16824                           
 16825                           ;main.c: 225:             if(ir_command == (~ir_command_complement)){
 16826  07BD  097C               	comf	_ir_command_complement,w	;volatile
 16827  07BE  00F4               	movwf	??_CCP4_CallBack@main$F1927
 16828  07BF  01F5               	clrf	??_CCP4_CallBack@main$F1927+1
 16829  07C0  09F5               	comf	??_CCP4_CallBack@main$F1927+1,f
 16830  07C1  0020               	movlb	0	; select bank0
 16831  07C2  086A               	movf	_ir_command,w	;volatile
 16832  07C3  00F6               	movwf	??_CCP4_CallBack@main$F1927+2
 16833  07C4  01F7               	clrf	??_CCP4_CallBack@main$F1927+3
 16834  07C5  0875               	movf	??_CCP4_CallBack@main$F1927+1,w
 16835  07C6  0677               	xorwf	??_CCP4_CallBack@main$F1927+3,w
 16836  07C7  1D03               	skipz
 16837  07C8  2FCB               	goto	u299_25
 16838  07C9  0874               	movf	??_CCP4_CallBack@main$F1927,w
 16839  07CA  0676               	xorwf	??_CCP4_CallBack@main$F1927+2,w
 16840  07CB                     u299_25:
 16841  07CB  1D03               	skipz
 16842  07CC  0008               	return
 16843                           
 16844                           ;main.c: 226:                 ir_flag = IR_DONE;
 16845  07CD  3002               	movlw	2
 16846  07CE  00F4               	movwf	??_CCP4_CallBack@main$F1927
 16847  07CF  0874               	movf	??_CCP4_CallBack@main$F1927,w
 16848  07D0  00E9               	movwf	_ir_flag	;volatile
 16849  07D1  0008               	return
 16850  07D2                     i1l5365:
 16851  07D2  3003               	movlw	3
 16852  07D3  0273               	subwf	CCP4_CallBack@main$F1923@capturedValue+1,w
 16853  07D4  30FD               	movlw	253
 16854  07D5  1903               	skipnz
 16855  07D6  0272               	subwf	CCP4_CallBack@main$F1923@capturedValue,w
 16856  07D7  1C03               	skipc
 16857  07D8  0008               	return
 16858  07D9  3004               	movlw	4
 16859  07DA  0273               	subwf	CCP4_CallBack@main$F1923@capturedValue+1,w
 16860  07DB  30C4               	movlw	196
 16861  07DC  1903               	skipnz
 16862  07DD  0272               	subwf	CCP4_CallBack@main$F1923@capturedValue,w
 16863  07DE  1803               	skipnc
 16864  07DF  0008               	return
 16865                           
 16866                           ;main.c: 231:         if(bit_count < 8){
 16867  07E0  3008               	movlw	8
 16868  07E1  027B               	subwf	CCP4_CallBack@main$F1923@bit_count,w
 16869  07E2  1803               	skipnc
 16870  07E3  2FE7               	goto	i1l5373
 16871                           
 16872                           ;main.c: 233:             ir_address <<= 1;
 16873  07E4  1003               	clrc
 16874  07E5  0DEB               	rlf	_ir_address,f	;volatile
 16875                           
 16876                           ;main.c: 234:         } else if(bit_count < 16){
 16877  07E6  2FB5               	goto	i1l5357
 16878  07E7                     i1l5373:
 16879  07E7  3010               	movlw	16
 16880  07E8  027B               	subwf	CCP4_CallBack@main$F1923@bit_count,w
 16881  07E9  1803               	skipnc
 16882  07EA  2FEF               	goto	i1l5377
 16883                           
 16884                           ;main.c: 236:             ir_address_complement <<= 1;
 16885  07EB  1003               	clrc
 16886  07EC  0021               	movlb	1	; select bank1
 16887  07ED  0DEA               	rlf	_ir_address_complement^(0+128),f	;volatile
 16888                           
 16889                           ;main.c: 237:         } else if(bit_count < 24){
 16890  07EE  2FB5               	goto	i1l5357
 16891  07EF                     i1l5377:
 16892  07EF  3018               	movlw	24
 16893  07F0  027B               	subwf	CCP4_CallBack@main$F1923@bit_count,w
 16894  07F1  1803               	skipnc
 16895  07F2  2FF6               	goto	i1l5381
 16896                           
 16897                           ;main.c: 239:             ir_command <<= 1;
 16898  07F3  1003               	clrc
 16899  07F4  0DEA               	rlf	_ir_command,f	;volatile
 16900                           
 16901                           ;main.c: 240:         } else if(bit_count < 32){
 16902  07F5  2FB5               	goto	i1l5357
 16903  07F6                     i1l5381:
 16904  07F6  3020               	movlw	32
 16905  07F7  027B               	subwf	CCP4_CallBack@main$F1923@bit_count,w
 16906  07F8  1803               	skipnc
 16907  07F9  2FB5               	goto	i1l5357
 16908                           
 16909                           ;main.c: 242:             ir_command_complement <<= 1;
 16910  07FA  1003               	clrc
 16911  07FB  0DFC               	rlf	_ir_command_complement,f	;volatile
 16912  07FC  2FB5               	goto	i1l5357
 16913  07FD                     __end_of_CCP4_CallBack@main$F1923:	
 16914                           ;main.c: 249:             if(ir_command == (~ir_command_complement)){
 16915                           
 16916                           ;main.c: 247:         if(bit_count == 32){
 16917                           
 16918                           ;main.c: 245:         bit_count++;
 16919                           
 16920                           
 16921                           	psect	text123
 16922  1161                     __ptext123:	
 16923 ;; *************** function _CCP4_DefaultCallBack *****************
 16924 ;; Defined at:
 16925 ;;		line 60 in file "mcc_generated_files/ccp4.c"
 16926 ;; Parameters:    Size  Location     Type
 16927 ;;  capturedValu    2    2[COMMON] unsigned short 
 16928 ;; Auto vars:     Size  Location     Type
 16929 ;;		None
 16930 ;; Return value:  Size  Location     Type
 16931 ;;                  1    wreg      void 
 16932 ;; Registers used:
 16933 ;;		None
 16934 ;; Tracked objects:
 16935 ;;		On entry : 1F/1
 16936 ;;		On exit  : 1F/1
 16937 ;;		Unchanged: 1F/0
 16938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16939 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16942 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;Total ram usage:        2 bytes
 16944 ;; Hardware stack levels used:    1
 16945 ;; This function calls:
 16946 ;;		Nothing
 16947 ;; This function is called by:
 16948 ;;		_CCP4_Initialize
 16949 ;;		_CCP4_CaptureISR
 16950 ;; This function uses a non-reentrant model
 16951 ;;
 16952                           
 16953                           
 16954                           ;psect for function _CCP4_DefaultCallBack
 16955  1161                     _CCP4_DefaultCallBack:
 16956                           
 16957                           ;incstack = 0
 16958 ;; hardware stack exceeded
 16959                           ; Regs used in _CCP4_DefaultCallBack: []
 16960  1161  0008               	return
 16961  1162                     __end_of_CCP4_DefaultCallBack:
 16962                           
 16963                           	psect	text124
 16964  129F                     __ptext124:	
 16965 ;; *************** function _TMR1_WriteTimer *****************
 16966 ;; Defined at:
 16967 ;;		line 113 in file "mcc_generated_files/tmr1.c"
 16968 ;; Parameters:    Size  Location     Type
 16969 ;;  timerVal        2    0[COMMON] unsigned short 
 16970 ;; Auto vars:     Size  Location     Type
 16971 ;;		None
 16972 ;; Return value:  Size  Location     Type
 16973 ;;                  1    wreg      void 
 16974 ;; Registers used:
 16975 ;;		wreg
 16976 ;; Tracked objects:
 16977 ;;		On entry : 1F/1
 16978 ;;		On exit  : 1F/0
 16979 ;;		Unchanged: 0/0
 16980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16981 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16984 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16985 ;;Total ram usage:        2 bytes
 16986 ;; Hardware stack levels used:    1
 16987 ;; This function calls:
 16988 ;;		Nothing
 16989 ;; This function is called by:
 16990 ;;		_CCP4_CallBack@main$F1923
 16991 ;; This function uses a non-reentrant model
 16992 ;;
 16993                           
 16994                           
 16995                           ;psect for function _TMR1_WriteTimer
 16996  129F                     _TMR1_WriteTimer:
 16997                           
 16998                           ;mcc_generated_files/tmr1.c: 113: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 114: {;mcc_generated_files/tmr1.c: 115:     if (T1CONbits.nT1SYNC == 1)
 16999                           
 17000                           ;incstack = 0
 17001 ;; hardware stack exceeded
 17002                           ; Regs used in _TMR1_WriteTimer: [wreg]
 17003  129F  0020               	movlb	0	; select bank0
 17004  12A0  1D18               	btfss	24,2	;volatile
 17005  12A1  2AA9               	goto	i1l5055
 17006                           
 17007                           ;mcc_generated_files/tmr1.c: 116:     {;mcc_generated_files/tmr1.c: 118:         T1CONbi
      +                          ts.TMR1ON = 0;
 17008  12A2  1018               	bcf	24,0	;volatile
 17009                           
 17010                           ;mcc_generated_files/tmr1.c: 121:         TMR1H = (timerVal >> 8);
 17011  12A3  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 17012  12A4  0097               	movwf	23	;volatile
 17013                           
 17014                           ;mcc_generated_files/tmr1.c: 122:         TMR1L = timerVal;
 17015  12A5  0870               	movf	TMR1_WriteTimer@timerVal,w
 17016  12A6  0096               	movwf	22	;volatile
 17017                           
 17018                           ;mcc_generated_files/tmr1.c: 125:         T1CONbits.TMR1ON =1;
 17019  12A7  1418               	bsf	24,0	;volatile
 17020                           
 17021                           ;mcc_generated_files/tmr1.c: 126:     }
 17022  12A8  0008               	return
 17023  12A9                     i1l5055:
 17024                           
 17025                           ;mcc_generated_files/tmr1.c: 128:     {;mcc_generated_files/tmr1.c: 130:         TMR1H =
      +                           (timerVal >> 8);
 17026  12A9  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 17027  12AA  0097               	movwf	23	;volatile
 17028                           
 17029                           ;mcc_generated_files/tmr1.c: 131:         TMR1L = timerVal;
 17030  12AB  0870               	movf	TMR1_WriteTimer@timerVal,w
 17031  12AC  0096               	movwf	22	;volatile
 17032  12AD  0008               	return
 17033  12AE                     __end_of_TMR1_WriteTimer:
 17034  007E                     btemp	set	126	;btemp
 17035  007E                     int$flags	set	126
 17036  007E                     wtemp0	set	126
 17037  22EC                     
 17038                           	psect	config
 17039                           
 17040                           ;Config register CONFIG1 @ 0x8007
 17041                           ;	Oscillator Selection
 17042                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 17043                           ;	Watchdog Timer Enable
 17044                           ;	WDTE = OFF, WDT disabled
 17045                           ;	Power-up Timer Enable
 17046                           ;	PWRTE = OFF, PWRT disabled
 17047                           ;	MCLR Pin Function Select
 17048                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 17049                           ;	Flash Program Memory Code Protection
 17050                           ;	CP = OFF, Program memory code protection is disabled
 17051                           ;	Data Memory Code Protection
 17052                           ;	CPD = OFF, Data memory code protection is disabled
 17053                           ;	Brown-out Reset Enable
 17054                           ;	BOREN = ON, Brown-out Reset enabled
 17055                           ;	Clock Out Enable
 17056                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 17057                           ;	Internal/External Switchover
 17058                           ;	IESO = ON, Internal/External Switchover mode is enabled
 17059                           ;	Fail-Safe Clock Monitor Enable
 17060                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 17061  8007                     	org	32775
 17062  8007  3FE4               	dw	16356
 17063                           
 17064                           ;Config register CONFIG2 @ 0x8008
 17065                           ;	Flash Memory Self-Write Protection
 17066                           ;	WRT = OFF, Write protection off
 17067                           ;	Voltage Regulator Capacitor Enable
 17068                           ;	VCAPEN = OFF, All VCAP pin functionality is disabled
 17069                           ;	PLL Enable
 17070                           ;	PLLEN = ON, 4x PLL enabled
 17071                           ;	Stack Overflow/Underflow Reset Enable
 17072                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 17073                           ;	Brown-out Reset Voltage Selection
 17074                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 17075                           ;	Low-Voltage Programming Enable
 17076                           ;	LVP = ON, Low-voltage programming enabled
 17077  8008                     	org	32776
 17078  8008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         104
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     65      80
    BANK1            80      0      78
    BANK2            80      0       8
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            28      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    i2c_write1ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    i2c_read1ByteRegister@d2.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    i2c_read2ByteRegister@result.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    i2c_write2ByteRegister@data.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    I2C_DO_TX$3540$0	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$3545	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$3540	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler@i2c_simple_master$F2203(), wr2RegCompleteHandler@i2c_simple_master$F2197(), rd2RegCompleteHandler@i2c_simple_master$F2191(), rd1RegCompleteHandler@i2c_simple_master$F2183(), 
		 -> wr1RegCompleteHandler@i2c_simple_master$F2173(), I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), 
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), 

    I2C_MasterFsm$3539	const PTR FTN()enum E3090 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    Absolute function$0	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S1082$0$0	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    i2c_readDataBlock@data	PTR void  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    d.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    rdBlkRegCompleteHandler@i2c_simple_master$F2203@p.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    rdBlkRegCompleteHandler@i2c_simple_master$F2203@p	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@i2c_simple_master$F2197@p	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@i2c_simple_master$F2191@p	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@i2c_simple_master$F2183@p	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@i2c_simple_master$F2173@p	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    CCP4_SetCallBack@customCallBack	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> CCP4_CallBack@main$F1923(), CCP4_DefaultCallBack(), 

    CCP4_CallBack	PTR FTN(unsigned short ,)void  size(2) Largest target is 1
		 -> CCP4_CallBack@main$F1923(), CCP4_DefaultCallBack(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler@i2c_simple_master$F2203(), wr2RegCompleteHandler@i2c_simple_master$F2197(), rd2RegCompleteHandler@i2c_simple_master$F2191(), rd1RegCompleteHandler@i2c_simple_master$F2183(), 
		 -> wr1RegCompleteHandler@i2c_simple_master$F2173(), Absolute function(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler@i2c_simple_master$F2203(), wr2RegCompleteHandler@i2c_simple_master$F2197(), rd2RegCompleteHandler@i2c_simple_master$F2191(), rd1RegCompleteHandler@i2c_simple_master$F2183(), 
		 -> wr1RegCompleteHandler@i2c_simple_master$F2173(), Absolute function(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), 
		 -> wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(2) Largest target is 128
		 -> wireWriteDataBlock@val(COMMON[1]), wireWriteDataBlock@reg(COMMON[1]), wireWriteByte@val(COMMON[1]), fifo_data(BIGRAM[128]), 
		 -> i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(BANK0[1]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@reg(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S1082$data_ptr	PTR unsigned char  size(2) Largest target is 128
		 -> wireWriteDataBlock@val(COMMON[1]), wireWriteDataBlock@reg(COMMON[1]), wireWriteByte@val(COMMON[1]), fifo_data(BIGRAM[128]), 
		 -> i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(BANK0[1]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@reg(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(2) Largest target is 128
		 -> wireWriteDataBlock@val(COMMON[1]), wireWriteDataBlock@reg(COMMON[1]), wireWriteByte@val(COMMON[1]), fifo_data(BIGRAM[128]), 
		 -> i2c_readDataBlock@reg(BANK0[1]), i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@reg(COMMON[1]), i2c_write2ByteRegister@data(COMMON[2]), 
		 -> i2c_read2ByteRegister@reg(COMMON[1]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@reg(BANK0[1]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@reg(BANK0[1]), i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S1082$callbackPayload	PTR void [6] size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S1082$callbackTable	PTR FTN(PTR void ,)enum E360[6] size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler@i2c_simple_master$F2203(), wr2RegCompleteHandler@i2c_simple_master$F2197(), rd2RegCompleteHandler@i2c_simple_master$F2191(), rd1RegCompleteHandler@i2c_simple_master$F2183(), 
		 -> wr1RegCompleteHandler@i2c_simple_master$F2173(), I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), 
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E360[6] size(2) Largest target is 1
		 -> rdBlkRegCompleteHandler@i2c_simple_master$F2203(), wr2RegCompleteHandler@i2c_simple_master$F2197(), rd2RegCompleteHandler@i2c_simple_master$F2191(), rd1RegCompleteHandler@i2c_simple_master$F2183(), 
		 -> wr1RegCompleteHandler@i2c_simple_master$F2173(), I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), 
		 -> rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), 
		 -> rd1RegCompleteHandler(), 

    i2c_fsmStateTable	const PTR FTN()enum E3090[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    rdBlkRegCompleteHandler@ptr	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(2) Largest target is 4
		 -> i2c_readDataBlock@d(BANK0[4]), i2c_write2ByteRegister@data(COMMON[2]), i2c_read2ByteRegister@result(COMMON[2]), i2c_read1ByteRegister@d2(BANK0[1]), 
		 -> i2c_write1ByteRegister@data(BANK0[1]), I2C_ReadDataBlock@bufferBlock(COMMON[4]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S94$data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 

    bufferBlock.data	PTR unsigned char  size(2) Largest target is 128
		 -> fifo_data(BIGRAM[128]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_CCP4_CaptureISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler
    _CCP4_CaptureISR->_CCP4_CallBack@main$F1923
    _CCP4_CallBack@main$F1923->_TMR1_WriteTimer

Critical Paths under _main in BANK0

    _main->_readGesture
    _readProximity->_wireReadDataByte
    _readGesture->_processGestureData
    _readGesture->_wireReadDataBlock
    _wireReadDataBlock->_i2c_readDataBlock
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _decodeGesture->_abs
    _intToBCD->___lwdiv
    _enableProximitySensor->_setMode
    _setProximityIntEnable->_wireReadDataByte
    _enablePower->_setMode
    _SYSTEM_Initialize->_EUSART_Initialize
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _CCP4_Initialize->_CCP4_SetCallBack
    _APDS9960Init->_setMode
    _setProximityGain->_wireReadDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setMode->_getMode
    _getMode->_wireReadDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireReadDataByte
    _setGestureWaitTime->_wireReadDataByte
    _setGestureLEDDrive->_wireReadDataByte
    _setGestureIntEnable->_wireReadDataByte
    _setGestureGain->_wireReadDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireReadDataByte
    _wireWriteDataByte->_i2c_write1ByteRegister
    _wireReadDataByte->_i2c_read1ByteRegister
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm
    _I2C_MasterFsm->_I2C_DO_ADDRESS_NACK
    _I2C_MasterFsm->_I2C_DO_RX
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_MasterFsm->_I2C_DO_TX_EMPTY
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler@i2c_simple_master$F2183
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler@i2c_simple_master$F2191
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler@i2c_simple_master$F2203
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler@i2c_simple_master$F2173
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler@i2c_simple_master$F2197
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd1RegCompleteHandler@i2c_simple_master$F2183
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler@i2c_simple_master$F2191
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler@i2c_simple_master$F2203
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler@i2c_simple_master$F2173
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler@i2c_simple_master$F2197
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd1RegCompleteHandler@i2c_simple_master$F2183
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler@i2c_simple_master$F2191
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler@i2c_simple_master$F2203
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler@i2c_simple_master$F2173
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler@i2c_simple_master$F2197
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler@i2c_simple_master$F2183
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler@i2c_simple_master$F2191
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler@i2c_simple_master$F2203
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler@i2c_simple_master$F2173
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler@i2c_simple_master$F2197
    _wr2RegCompleteHandler@i2c_simple_master$F2197->_I2C_SetDataCompleteCallback
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler@i2c_simple_master$F2173->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler@i2c_simple_master$F2203->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler@i2c_simple_master$F2191->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler@i2c_simple_master$F2183->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0 11989698
                                             58 BANK0      7     7      0
                       _APDS9960Init
                   _CCP4_SetCallBack
                      _LCD_Digit1Num
                      _LCD_Digit2Num
                      _LCD_Digit3Num
                      _LCD_Digit4Num
                  _SYSTEM_Initialize
              _enableProximitySensor
                           _intToBCD
                 _isGestureAvailable
                        _readGesture
                      _readProximity
                        _reverseBits
 ---------------------------------------------------------------------------------
 (1) _reverseBits                                          4     4      0     157
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _readProximity                                        2     2      0  297910
                                             31 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (1) _readGesture                                         18    16      2 1197999
                                             40 BANK0     18    16      2
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataBlock                                    8     4      4  298256
                                             32 BANK0      8     4      4
                  _i2c_readDataBlock
 ---------------------------------------------------------------------------------
 (3) _i2c_readDataBlock                                   10     5      5  297993
                                             22 BANK0     10     5      5
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _processGestureData                                  25    25      0    4810
                                             15 BANK0     25    25      0
                            ___awdiv
                             ___wmul
                                _abs
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1600
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     908
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _isGestureAvailable                                   2     2      0  297910
                                             31 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _decodeGesture                                        3     3      0     978
                                              4 BANK0      3     3      0
                                _abs
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     978
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _intToBCD                                             9     7      2     816
                                              8 BANK0      9     7      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _enableProximitySensor                                1     1      0 2996418
                                             38 BANK0      1     1      0
                        _enablePower
                        _setLEDDrive
                            _setMode
                   _setProximityGain
              _setProximityIntEnable
 ---------------------------------------------------------------------------------
 (2) _setProximityIntEnable                                4     4      0  598924
                                             31 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0  599812
                            _setMode
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     664
                    _CCP4_Initialize
                     _DAC_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
                     _I2C_Initialize
                     _LCD_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              2 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP4_Initialize                                      0     0      0     174
                   _CCP4_SetCallBack
 ---------------------------------------------------------------------------------
 (3) _CCP4_SetCallBack                                     2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Digit4Num                                        3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Digit3Num                                        3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Digit2Num                                        3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Digit1Num                                        3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _APDS9960Init                                         2     2      0 7197356
                                             38 BANK0      2     2      0
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0  598924
                                             31 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0  300989
                                             29 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0  300989
                                             29 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1  599812
                                             33 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _getMode                                              2     2      0  297909
                                             31 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2  301134
                                             29 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2  301134
                                             29 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0  598924
                                             31 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0  598901
                                             31 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0  598924
                                             31 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0  598924
                                             31 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0  598924
                                             31 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0  300989
                                             29 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0  300989
                                             29 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0  598901
                                             31 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _wireWriteDataByte                                    4     3      1  300967
                                             25 BANK0      4     3      1
             _i2c_write1ByteRegister
 ---------------------------------------------------------------------------------
 (4) _i2c_write1ByteRegister                               3     1      2  297848
                                             22 BANK0      3     1      2
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     2     2      0  297886
                                             29 BANK0      2     2      0
              _i2c_read1ByteRegister
 ---------------------------------------------------------------------------------
 (3) _i2c_read1ByteRegister                                7     6      1  297864
                                             22 BANK0      7     6      1
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (4) _I2C_SetAddressNackCallback                           3     0      3    2470
                                              9 BANK0      3     0      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (4) _I2C_Open                                             2     2      0      46
                                              0 BANK0      2     2      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterWrite                                      0     0      0  287936
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterOperation                                  2     2      0  287936
                                             20 BANK0      2     2      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (6) _I2C_Poller                                           0     0      0  287890
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterWaitForEvent                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterFsm                                        3     3      0  287890
                                             17 BANK0      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_TX_EMPTY                                      2     2      0   71956
                                             15 BANK0      2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
_rd1RegCompleteHandler@i2c_simple_ma *
              _rd2RegCompleteHandler *
_rd2RegCompleteHandler@i2c_simple_ma *
            _rdBlkRegCompleteHandler *
_rdBlkRegCompleteHandler@i2c_simple_ *
              _wr1RegCompleteHandler *
_wr1RegCompleteHandler@i2c_simple_ma *
              _wr2RegCompleteHandler *
_wr2RegCompleteHandler@i2c_simple_ma *
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterSetIrq                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_TX                                            2     2      0   71978
                                             15 BANK0      2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
_rd1RegCompleteHandler@i2c_simple_ma *
              _rd2RegCompleteHandler *
_rd2RegCompleteHandler@i2c_simple_ma *
            _rdBlkRegCompleteHandler *
_rdBlkRegCompleteHandler@i2c_simple_ *
              _wr1RegCompleteHandler *
_wr1RegCompleteHandler@i2c_simple_ma *
              _wr2RegCompleteHandler *
_wr2RegCompleteHandler@i2c_simple_ma *
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterIsNack                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_DO_SEND_RESTART_WRITE                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (9) _I2C_DO_SEND_RESTART_READ                             0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_SEND_ADR_WRITE                                0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_SEND_ADR_READ                                 0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterSendTxData                                 1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_RX_ACK                                        0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_RX                                            2     2      0   71956
                                             15 BANK0      2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
_rd1RegCompleteHandler@i2c_simple_ma *
              _rd2RegCompleteHandler *
_rd2RegCompleteHandler@i2c_simple_ma *
            _rdBlkRegCompleteHandler *
_rdBlkRegCompleteHandler@i2c_simple_ *
              _wr1RegCompleteHandler *
_wr1RegCompleteHandler@i2c_simple_ma *
              _wr2RegCompleteHandler *
_wr2RegCompleteHandler@i2c_simple_ma *
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterSendAck                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterGetRxData                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_RX_NACK_STOP                                  0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_RX_NACK_RESTART                               0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterSendNack                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_RESET                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_RCEN                                          0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterStartRx                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_ADDRESS_NACK                                  2     2      0   71956
                                             15 BANK0      2     2      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
_rd1RegCompleteHandler@i2c_simple_ma *
              _rd2RegCompleteHandler *
_rd2RegCompleteHandler@i2c_simple_ma *
            _rdBlkRegCompleteHandler *
_rdBlkRegCompleteHandler@i2c_simple_ *
              _wr1RegCompleteHandler *
_wr1RegCompleteHandler@i2c_simple_ma *
              _wr2RegCompleteHandler *
_wr2RegCompleteHandler@i2c_simple_ma *
 ---------------------------------------------------------------------------------
 (9) _wr2RegCompleteHandler@i2c_simple_master$F2197        2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _wr2RegCompleteHandler                                2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _wr1RegCompleteHandler@i2c_simple_master$F2173        2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _wr1RegCompleteHandler                                2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _rdBlkRegCompleteHandler@i2c_simple_master$F2203      2     0      2    7440
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _rdBlkRegCompleteHandler                              2     0      2    7188
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _rd2RegCompleteHandler@i2c_simple_master$F2191        2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _rd2RegCompleteHandler                                2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _rd1RegCompleteHandler@i2c_simple_master$F2183        2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _rd1RegCompleteHandler                                2     0      2    7166
                                             13 BANK0      2     0      2
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (4) _I2C_SetDataCompleteCallback                          4     0      4    3738
                                              9 BANK0      4     0      4
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (5) _I2C_SetCallback                                      9     5      4     836
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _I2C_SetBuffer                                        4     0      4    3406
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (9) _I2C_DO_SEND_STOP                                     0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterStop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_DO_SEND_RESTART                                  0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterEnableRestart                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_CallbackReturnStop                               2     0      2       0
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (9) _I2C_CallbackReturnReset                              2     0      2       0
                                             13 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Close                                            2     2      0      24
                                              0 BANK0      2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _INTERRUPT_InterruptManager                          0     0      0     505
                   Absolute function *
                    _CCP4_CaptureISR
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (16) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (16) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (17) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (17) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (16) _CCP4_CaptureISR                                     3     3      0     505
                                              8 COMMON     3     3      0
                   Absolute function *
           _CCP4_CallBack@main$F1923 *
               _CCP4_DefaultCallBack *
 ---------------------------------------------------------------------------------
 (17) _CCP4_DefaultCallBack                                2     0      2       0
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (17) _CCP4_CallBack@main$F1923                            6     4      2     458
                                              2 COMMON     6     4      2
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (18) _TMR1_WriteTimer                                     2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              2     0      2       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APDS9960Init
     _setAmbientLightGain
       _wireReadDataByte
         _i2c_read1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setGestureEnterThresh
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setGestureExitThresh
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setGestureGain
       _wireReadDataByte
         _i2c_read1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setGestureIntEnable
       _wireReadDataByte
         _i2c_read1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setGestureLEDDrive
       _wireReadDataByte
         _i2c_read1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setGestureWaitTime
       _wireReadDataByte
         _i2c_read1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setLEDDrive
       _wireReadDataByte
         _i2c_read1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setLightIntHighThreshold
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setLightIntLowThreshold
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setMode
       _getMode
         _wireReadDataByte
           _i2c_read1ByteRegister
             _I2C_Close
               _I2C_MasterClearIrq
               _I2C_MasterClose
               _I2C_MasterDisableIrq
             _I2C_MasterWrite
               _I2C_MasterOperation
                 _I2C_MasterStart
                 _I2C_Poller
                   _I2C_MasterFsm
                     _I2C_DO_ADDRESS_NACK *
                       Absolute function(Fake) *
                       _I2C_CallbackReturnReset *
                       _I2C_CallbackReturnStop *
                       _I2C_DO_SEND_RESTART *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_STOP *
                         _I2C_MasterStop
                       _rd1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                     _I2C_DO_IDLE *
                     _I2C_DO_RCEN *
                       _I2C_MasterStartRx
                     _I2C_DO_RESET *
                     _I2C_DO_RX *
                       Absolute function(Fake) *
                       _I2C_CallbackReturnReset *
                       _I2C_CallbackReturnStop *
                       _I2C_DO_RX_NACK_RESTART *
                         _I2C_MasterSendNack
                       _I2C_DO_RX_NACK_STOP *
                         _I2C_MasterSendNack
                       _I2C_MasterGetRxData *
                       _I2C_MasterSendAck *
                       _rd1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                     _I2C_DO_RX_ACK *
                       _I2C_MasterSendAck
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_DO_SEND_ADR_READ *
                       _I2C_MasterSendTxData
                     _I2C_DO_SEND_ADR_WRITE *
                       _I2C_MasterSendTxData
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_DO_TX *
                       Absolute function(Fake) *
                       _I2C_CallbackReturnReset *
                       _I2C_CallbackReturnStop *
                       _I2C_DO_SEND_RESTART_READ *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_RESTART_WRITE *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_STOP *
                         _I2C_MasterStop
                       _I2C_MasterIsNack *
                       _I2C_MasterSendTxData *
                       _rd1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                     _I2C_DO_TX_EMPTY *
                       Absolute function(Fake) *
                       _I2C_CallbackReturnReset *
                       _I2C_CallbackReturnStop *
                       _I2C_DO_SEND_RESTART *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_STOP *
                         _I2C_MasterStop
                       _I2C_MasterSetIrq *
                       _rd1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                     _I2C_MasterClearIrq *
                     _I2C_MasterIsNack *
                   _I2C_MasterWaitForEvent
             _I2C_Open
               _I2C_MasterClearIrq
               _I2C_MasterOpen
             _I2C_SetAddressNackCallback
               _I2C_SetCallback
             _I2C_SetBuffer
             _I2C_SetDataCompleteCallback
               _I2C_SetCallback
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setProxIntHighThresh
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setProxIntLowThresh
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setProximityGain
       _wireReadDataByte
         _i2c_read1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _wireReadDataByte
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _wireWriteDataByte
       _i2c_write1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
   _CCP4_SetCallBack
   _LCD_Digit1Num
   _LCD_Digit2Num
   _LCD_Digit3Num
   _LCD_Digit4Num
   _SYSTEM_Initialize
     _CCP4_Initialize
       _CCP4_SetCallBack
     _DAC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _FVR_Initialize
     _I2C_Initialize
     _LCD_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _TMR1_Initialize
     _WDT_Initialize
   _enableProximitySensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _i2c_read1ByteRegister
               _I2C_Close
                 _I2C_MasterClearIrq
                 _I2C_MasterClose
                 _I2C_MasterDisableIrq
               _I2C_MasterWrite
                 _I2C_MasterOperation
                   _I2C_MasterStart
                   _I2C_Poller
                     _I2C_MasterFsm
                       _I2C_DO_ADDRESS_NACK *
                         Absolute function(Fake) *
                         _I2C_CallbackReturnReset *
                         _I2C_CallbackReturnStop *
                         _I2C_DO_SEND_RESTART *
                           _I2C_MasterEnableRestart
                         _I2C_DO_SEND_STOP *
                           _I2C_MasterStop
                         _rd1RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rd2RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rdBlkRegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr1RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr2RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                       _I2C_DO_IDLE *
                       _I2C_DO_RCEN *
                         _I2C_MasterStartRx
                       _I2C_DO_RESET *
                       _I2C_DO_RX *
                         Absolute function(Fake) *
                         _I2C_CallbackReturnReset *
                         _I2C_CallbackReturnStop *
                         _I2C_DO_RX_NACK_RESTART *
                           _I2C_MasterSendNack
                         _I2C_DO_RX_NACK_STOP *
                           _I2C_MasterSendNack
                         _I2C_MasterGetRxData *
                         _I2C_MasterSendAck *
                         _rd1RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rd2RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rdBlkRegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr1RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr2RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                       _I2C_DO_RX_ACK *
                         _I2C_MasterSendAck
                       _I2C_DO_RX_NACK_RESTART *
                         _I2C_MasterSendNack
                       _I2C_DO_RX_NACK_STOP *
                         _I2C_MasterSendNack
                       _I2C_DO_SEND_ADR_READ *
                         _I2C_MasterSendTxData
                       _I2C_DO_SEND_ADR_WRITE *
                         _I2C_MasterSendTxData
                       _I2C_DO_SEND_RESTART *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_RESTART_READ *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_RESTART_WRITE *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_STOP *
                         _I2C_MasterStop
                       _I2C_DO_TX *
                         Absolute function(Fake) *
                         _I2C_CallbackReturnReset *
                         _I2C_CallbackReturnStop *
                         _I2C_DO_SEND_RESTART_READ *
                           _I2C_MasterEnableRestart
                         _I2C_DO_SEND_RESTART_WRITE *
                           _I2C_MasterEnableRestart
                         _I2C_DO_SEND_STOP *
                           _I2C_MasterStop
                         _I2C_MasterIsNack *
                         _I2C_MasterSendTxData *
                         _rd1RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rd2RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rdBlkRegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr1RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr2RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                       _I2C_DO_TX_EMPTY *
                         Absolute function(Fake) *
                         _I2C_CallbackReturnReset *
                         _I2C_CallbackReturnStop *
                         _I2C_DO_SEND_RESTART *
                           _I2C_MasterEnableRestart
                         _I2C_DO_SEND_STOP *
                           _I2C_MasterStop
                         _I2C_MasterSetIrq *
                         _rd1RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rd2RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rdBlkRegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr1RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr2RegCompleteHandler *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                         _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                           _I2C_SetBuffer
                           _I2C_SetDataCompleteCallback
                             _I2C_SetCallback
                       _I2C_MasterClearIrq *
                       _I2C_MasterIsNack *
                     _I2C_MasterWaitForEvent
               _I2C_Open
                 _I2C_MasterClearIrq
                 _I2C_MasterOpen
               _I2C_SetAddressNackCallback
                 _I2C_SetCallback
               _I2C_SetBuffer
               _I2C_SetDataCompleteCallback
                 _I2C_SetCallback
         _wireWriteDataByte
           _i2c_write1ByteRegister
             _I2C_Close
               _I2C_MasterClearIrq
               _I2C_MasterClose
               _I2C_MasterDisableIrq
             _I2C_MasterWrite
               _I2C_MasterOperation
                 _I2C_MasterStart
                 _I2C_Poller
                   _I2C_MasterFsm
                     _I2C_DO_ADDRESS_NACK *
                       Absolute function(Fake) *
                       _I2C_CallbackReturnReset *
                       _I2C_CallbackReturnStop *
                       _I2C_DO_SEND_RESTART *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_STOP *
                         _I2C_MasterStop
                       _rd1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                     _I2C_DO_IDLE *
                     _I2C_DO_RCEN *
                       _I2C_MasterStartRx
                     _I2C_DO_RESET *
                     _I2C_DO_RX *
                       Absolute function(Fake) *
                       _I2C_CallbackReturnReset *
                       _I2C_CallbackReturnStop *
                       _I2C_DO_RX_NACK_RESTART *
                         _I2C_MasterSendNack
                       _I2C_DO_RX_NACK_STOP *
                         _I2C_MasterSendNack
                       _I2C_MasterGetRxData *
                       _I2C_MasterSendAck *
                       _rd1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                     _I2C_DO_RX_ACK *
                       _I2C_MasterSendAck
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_DO_SEND_ADR_READ *
                       _I2C_MasterSendTxData
                     _I2C_DO_SEND_ADR_WRITE *
                       _I2C_MasterSendTxData
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_DO_TX *
                       Absolute function(Fake) *
                       _I2C_CallbackReturnReset *
                       _I2C_CallbackReturnStop *
                       _I2C_DO_SEND_RESTART_READ *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_RESTART_WRITE *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_STOP *
                         _I2C_MasterStop
                       _I2C_MasterIsNack *
                       _I2C_MasterSendTxData *
                       _rd1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                     _I2C_DO_TX_EMPTY *
                       Absolute function(Fake) *
                       _I2C_CallbackReturnReset *
                       _I2C_CallbackReturnStop *
                       _I2C_DO_SEND_RESTART *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_STOP *
                         _I2C_MasterStop
                       _I2C_MasterSetIrq *
                       _rd1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                     _I2C_MasterClearIrq *
                     _I2C_MasterIsNack *
                   _I2C_MasterWaitForEvent
             _I2C_Open
               _I2C_MasterClearIrq
               _I2C_MasterOpen
             _I2C_SetAddressNackCallback
               _I2C_SetCallback
             _I2C_SetBuffer
             _I2C_SetDataCompleteCallback
               _I2C_SetCallback
     _setLEDDrive
       _wireReadDataByte
         _i2c_read1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setMode
       _getMode
         _wireReadDataByte
           _i2c_read1ByteRegister
             _I2C_Close
               _I2C_MasterClearIrq
               _I2C_MasterClose
               _I2C_MasterDisableIrq
             _I2C_MasterWrite
               _I2C_MasterOperation
                 _I2C_MasterStart
                 _I2C_Poller
                   _I2C_MasterFsm
                     _I2C_DO_ADDRESS_NACK *
                       Absolute function(Fake) *
                       _I2C_CallbackReturnReset *
                       _I2C_CallbackReturnStop *
                       _I2C_DO_SEND_RESTART *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_STOP *
                         _I2C_MasterStop
                       _rd1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                     _I2C_DO_IDLE *
                     _I2C_DO_RCEN *
                       _I2C_MasterStartRx
                     _I2C_DO_RESET *
                     _I2C_DO_RX *
                       Absolute function(Fake) *
                       _I2C_CallbackReturnReset *
                       _I2C_CallbackReturnStop *
                       _I2C_DO_RX_NACK_RESTART *
                         _I2C_MasterSendNack
                       _I2C_DO_RX_NACK_STOP *
                         _I2C_MasterSendNack
                       _I2C_MasterGetRxData *
                       _I2C_MasterSendAck *
                       _rd1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                     _I2C_DO_RX_ACK *
                       _I2C_MasterSendAck
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_DO_SEND_ADR_READ *
                       _I2C_MasterSendTxData
                     _I2C_DO_SEND_ADR_WRITE *
                       _I2C_MasterSendTxData
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_DO_TX *
                       Absolute function(Fake) *
                       _I2C_CallbackReturnReset *
                       _I2C_CallbackReturnStop *
                       _I2C_DO_SEND_RESTART_READ *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_RESTART_WRITE *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_STOP *
                         _I2C_MasterStop
                       _I2C_MasterIsNack *
                       _I2C_MasterSendTxData *
                       _rd1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                     _I2C_DO_TX_EMPTY *
                       Absolute function(Fake) *
                       _I2C_CallbackReturnReset *
                       _I2C_CallbackReturnStop *
                       _I2C_DO_SEND_RESTART *
                         _I2C_MasterEnableRestart
                       _I2C_DO_SEND_STOP *
                         _I2C_MasterStop
                       _I2C_MasterSetIrq *
                       _rd1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                       _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                         _I2C_SetBuffer
                         _I2C_SetDataCompleteCallback
                           _I2C_SetCallback
                     _I2C_MasterClearIrq *
                     _I2C_MasterIsNack *
                   _I2C_MasterWaitForEvent
             _I2C_Open
               _I2C_MasterClearIrq
               _I2C_MasterOpen
             _I2C_SetAddressNackCallback
               _I2C_SetCallback
             _I2C_SetBuffer
             _I2C_SetDataCompleteCallback
               _I2C_SetCallback
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setProximityGain
       _wireReadDataByte
         _i2c_read1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _setProximityIntEnable
       _wireReadDataByte
         _i2c_read1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
       _wireWriteDataByte
         _i2c_write1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
   _intToBCD
     ___lwdiv
     ___lwmod
   _isGestureAvailable
     _wireReadDataByte
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
   _readGesture
     _decodeGesture
       _abs
     _getMode
       _wireReadDataByte
         _i2c_read1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _isGestureAvailable
       _wireReadDataByte
         _i2c_read1ByteRegister
           _I2C_Close
             _I2C_MasterClearIrq
             _I2C_MasterClose
             _I2C_MasterDisableIrq
           _I2C_MasterWrite
             _I2C_MasterOperation
               _I2C_MasterStart
               _I2C_Poller
                 _I2C_MasterFsm
                   _I2C_DO_ADDRESS_NACK *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_IDLE *
                   _I2C_DO_RCEN *
                     _I2C_MasterStartRx
                   _I2C_DO_RESET *
                   _I2C_DO_RX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_RX_NACK_RESTART *
                       _I2C_MasterSendNack
                     _I2C_DO_RX_NACK_STOP *
                       _I2C_MasterSendNack
                     _I2C_MasterGetRxData *
                     _I2C_MasterSendAck *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_RX_ACK *
                     _I2C_MasterSendAck
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_DO_SEND_ADR_READ *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_ADR_WRITE *
                     _I2C_MasterSendTxData
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_DO_TX *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART_READ *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_RESTART_WRITE *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterIsNack *
                     _I2C_MasterSendTxData *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_DO_TX_EMPTY *
                     Absolute function(Fake) *
                     _I2C_CallbackReturnReset *
                     _I2C_CallbackReturnStop *
                     _I2C_DO_SEND_RESTART *
                       _I2C_MasterEnableRestart
                     _I2C_DO_SEND_STOP *
                       _I2C_MasterStop
                     _I2C_MasterSetIrq *
                     _rd1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                     _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                       _I2C_SetBuffer
                       _I2C_SetDataCompleteCallback
                         _I2C_SetCallback
                   _I2C_MasterClearIrq *
                   _I2C_MasterIsNack *
                 _I2C_MasterWaitForEvent
           _I2C_Open
             _I2C_MasterClearIrq
             _I2C_MasterOpen
           _I2C_SetAddressNackCallback
             _I2C_SetCallback
           _I2C_SetBuffer
           _I2C_SetDataCompleteCallback
             _I2C_SetCallback
     _processGestureData
       ___awdiv
         ___wmul (ARG)
       ___wmul
       _abs
     _resetGestureParameters
     _wireReadDataBlock
       _i2c_readDataBlock
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
     _wireReadDataByte
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
   _readProximity
     _wireReadDataByte
       _i2c_read1ByteRegister
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterWrite
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                   _I2C_MasterSendNack
                 _I2C_DO_RX_NACK_STOP *
                   _I2C_MasterSendNack
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                   _I2C_MasterStop
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_RESTART_WRITE *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd1RegCompleteHandler@i2c_simple_master$F2183 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler@i2c_simple_master$F2191 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rdBlkRegCompleteHandler@i2c_simple_master$F2203 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr1RegCompleteHandler@i2c_simple_master$F2173 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _wr2RegCompleteHandler@i2c_simple_master$F2197 *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
         _I2C_SetDataCompleteCallback
           _I2C_SetCallback
   _reverseBits

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _CCP4_CaptureISR *
     Absolute function(Fake) *
     _CCP4_CallBack@main$F1923 *
       _TMR1_WriteTimer
     _CCP4_DefaultCallBack *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     41      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       8       9       10.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      B4      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               1C      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      B4      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Thu Oct 08 18:44:39 2020

                                         _CCP4_Initialize 12FE  
                           ?_EUSART_SetRxInterruptHandler 0020  
                                  ??_I2C_DO_SEND_ADR_READ 0020  
                             __size_of_I2C_MasterSendNack 0004  
                                      __size_of_I2C_Close 001D  
                                          _LCD_Initialize 140B  
                                   ?_setGestureExitThresh 0070  
                                 ??_I2C_DO_SEND_ADR_WRITE 0021  
                                            ___awdiv@sign 002C  
                                  __end_of_FVR_Initialize 11B3  
                                     ___wmul@multiplicand 0022  
                                         _timer0ReloadVal 00EB  
                                     __size_of_I2C_Poller 000A  
                                   ??_I2C_DO_SEND_RESTART 0020  
                            __size_of_I2C_MasterOperation 0020  
                                          ?_LCD_Digit1Num 0070  
                                          ?_LCD_Digit2Num 0070  
                                          ?_LCD_Digit3Num 0070  
                           __size_of_I2C_MasterSendTxData 0006  
                                          ?_LCD_Digit4Num 0070  
                                                     l704 0A30  
                        processGestureData@ud_ratio_first 0032  
                                                     l845 11A7  
                                                     l688 0B82  
                                                     l887 1246  
                                         _timer1ReloadVal 00DE  
                                                     _abs 1423  
                                  ??_EUSART_RxDataHandler 0070  
                                   __end_of_decodeGesture 1000  
                                  _I2C_MasterWaitForEvent 11A7  
                          ?_EUSART_SetFramingErrorHandler 0020  
                          CCP4_SetCallBack@customCallBack 0020  
                                                     wreg 0009  
                                             main@bcd_num 005F  
                                        _CCP4_SetCallBack 11EB  
                            ??_I2C_SetAddressNackCallback 002C  
                                 __end_of_CCP4_CaptureISR 1336  
                                ??_I2C_CallbackReturnStop 002F  
                                            _I2C_DO_RESET 11B8  
                                                    l1200 0D9B  
                                                    l1201 0DA4  
                                                    l1202 0DAD  
                                                    l1203 0DB6  
                                                    ?_abs 0020  
                                                    l1204 0DBF  
                                 ??_rd2RegCompleteHandler 002F  
                                                    l1205 0DC8  
                                                    l1221 0354  
                                                    l1150 0BB9  
                                                    l1206 0DD1  
                                                    l1214 0339  
                                                    l2006 1476  
                                                    l1151 0BC2  
                                                    l1207 0DDA  
                                                    l1231 0381  
                                                    l1223 035D  
                                                    l1160 0C13  
                                                    l1152 0BCB  
                                                    l1208 0DE3  
                                                    l1161 0C1C  
                                                    l1153 0BD4  
                                                    l1233 038A  
                                                    l1225 0366  
                                                    l1217 0342  
                                                    l1162 0C25  
                                                    l1154 0BDD  
                                                    l1242 03A5  
                                                    l1163 0C2E  
                                                    l1155 0BE6  
                                                    l1147 0BA7  
                                                    l1171 0C86  
                                                    l1251 03C0  
                                                    l1227 036F  
                                                    l1219 034B  
                                                    l1164 0C37  
                                                    l1156 0BEF  
                                                    l1180 0CD7  
                                                    l1172 0C8F  
                                                    l1236 0393  
                                                    l1157 0BF8  
                                                    l1149 0BB0  
                                                    l1181 0CE0  
                                                    l1173 0C98  
                                                    l1261 03ED  
                                                    l1253 03C9  
                                                    l1245 03AE  
                                                    l1229 0378  
                                                    l1158 0C01  
                                                    l1182 0CE9  
                                                    l1174 0CA1  
                                                    l1159 0C0A  
                                                    l1183 0CF2  
                                                    l1175 0CAA  
                                                    l1191 0D53  
                                                    l1271 041A  
                                                    l1263 03F6  
                                                    l1255 03D2  
                                                    l1239 039C  
                                                    l1184 0CFB  
                                                    l1176 0CB3  
                                                    l1248 03B7  
                                                    l1096 0E51  
                                                    l1185 0D04  
                                                    l1177 0CBC  
                                                    l1169 0C7D  
                                                    l1193 0D5C  
                                                    l1273 0423  
                                                    l1265 03FF  
                                                    l1257 03DB  
                                                    l1186 0D0D  
                                                    l1178 0CC5  
                                                    l1194 0D65  
                                                    l1179 0CCE  
                                                    l1195 0D6E  
                                                    l1275 042C  
                                                    l1267 0408  
                                                    l1259 03E4  
                                                    l1196 0D77  
                                                    l1197 0D80  
                                                    l1277 0435  
                                                    l1269 0411  
                                                    l1198 0D89  
                                                    l1278 043E  
                                                    l1199 0D92  
                                                    l1652 02E7  
                                                    l1581 0602  
                                                    l1646 02B3  
                                                    l1656 031E  
                                                    l5009 1797  
                                                    l5115 1470  
                                                    l5141 0ABC  
                                                    l5061 08D4  
                                                    l5151 0AC4  
                                                    l5135 0AB1  
                                                    l5071 08FC  
                                                    l5081 0A68  
                                                    l5153 0AD0  
                                                    l4531 0B24  
                                                    l5091 0A8D  
                                                    l5163 0AEB  
                                                    l5077 0A66  
                                                    l5309 131F  
                                                    l5407 1710  
                                                    l5167 0AF3  
                                                    l5159 0AE2  
                                                    l4721 0B57  
                                                    l4713 0B51  
                                                    l5097 0A99  
                                                    l5089 0A80  
                                                    l5425 173E  
                                                    l6161 0447  
                                                    l5601 128F  
                                                    l6209 051F  
                                                    l5443 15E3  
                                                    l5099 0A9A  
                                                    l6243 05F8  
                                                    l6219 0522  
                                                    l4717 0B54  
                                                    l5509 12BC  
                                                    l5453 12EC  
                                                    l6237 0549  
                                                    l4735 0BA3  
                                                    l4727 0B5A  
                                                    l4823 17D8  
                                                    l5519 12CC  
                                                    l5471 15B3  
                                                    l5463 12DC  
                                                    l6183 0818  
                                                    l6239 05EF  
                                                    l6335 0E46  
                                                    l4761 0A35  
                                                    l4833 17DE  
                                                    l5537 16B4  
                                                    l6273 0C40  
                                                    l6601 0D1E  
                                                    l6281 0D16  
                                                    l6265 0949  
                                                    l5705 0120  
                                                    l6361 0E6D  
                                                    l6337 0E48  
                                                    l6611 17C0  
                                                    l4827 17DB  
                                                    l5555 16E2  
                                                    l5475 15B5  
                                                    l6603 0C48  
                                                    l5619 176C  
                                                    l6267 0982  
                                                    l5811 0F2C  
                                                    l5723 022E  
                                                    l6363 0E6F  
                                                    l6355 0E67  
                                                    l6371 0E91  
                                                    l4757 0A32  
                                                    l6605 17F7  
                                                    l5573 1606  
                                                    l5493 1593  
                                                    l5821 0F3E  
                                                    l5805 0F1F  
                                                    l5733 0253  
                                                    l5709 0196  
                                                    l5653 006F  
                                                    l6365 0E71  
                                                    l6357 0E69  
                                                    l4783 17A1  
                                                    l6607 0A4D  
                                                    l4767 0A38  
                                                    l5591 162D  
                                                    l5911 1635  
                                                    l5823 0F40  
                                                    l5815 0F34  
                                                    l5727 0240  
                                                    l6367 0E73  
                                                    l6359 0E6B  
                                                    l4793 17A8  
                                                    l6609 0B74  
                                                    l4849 166D  
                                                    l5489 1591  
                                                    l6289 0DEC  
                                                    l5913 1641  
                                                    l5921 1656  
                                                    l5817 0F36  
                                                    l5809 0F2A  
                                                    l5753 02A6  
                                                    l5737 0265  
                                                    l5729 0243  
                                                    l5673 0083  
                                                    l5657 0071  
                                                    l6369 0E75  
                                                    l4963 14F8  
                                                    l4787 17A4  
                                                    l4859 122C  
                                                    l4939 09C8  
                                                    l5827 0F4A  
                                                    l5739 0268  
                                                    l5691 0124  
                                                    l5675 0087  
                                                    l6387 0ED4  
                                                    l4893 1518  
                                                    l4973 09D4  
                                                    l5917 164D  
                                                    l5829 0F50  
                                                    l5757 02AE  
                                                    l5677 0107  
                                                    l4799 17AB  
                                                    l4887 150D  
                                                    l4983 09FC  
                                                    l5839 0F7B  
                                                    l5767 02DA  
                                                    l5775 02E9  
                                                    l4993 0A10  
                                                    l5849 0FA6  
                                                    l5873 0FFE  
                                                    l5971 0646  
                                                    l5859 0FD3  
                                                    l6595 0E7D  
                                                    l6597 044F  
                                                    l5869 0FFC  
                                                    l4999 176F  
                                                    l5975 0648  
                                                    l6599 0DF4  
                                                    l5895 0851  
                                                    l5887 0833  
                                                    l5799 0F14  
                                                    l5889 083F  
                                                    l5899 085A  
                                                    _LATA 010C  
                                                    _LATB 010D  
                                                    _LATC 010E  
                                                    u3105 1721  
                                                    _LATE 0110  
                                                    u4005 1638  
                                                    u3215 1697  
                                                    u4025 1647  
                                                    u3235 16C5  
                                                    u4035 164E  
                                                    u3085 16F3  
                                                    u3505 025D  
                                                    u2715 142C  
                                                    u3285 174F  
                                                    u3605 02CD  
                                                    u2815 0AD1  
                                                    u2735 1477  
                                                    u3535 0281  
                                                    u3375 0094  
                                                    u2664 0A79  
                                                    u2665 0A78  
                                                    u2825 0ADB  
                                                    u2745 147C  
                                                    u3545 0295  
                                                    u2674 0A85  
                                                    u2675 0A84  
                                                    u2835 0AE3  
                                                    u3475 0227  
                                                    u3485 0238  
                                                    u4605 08AD  
                                                    u3655 02FA  
                                                    u3495 024C  
                                                    u4535 0552  
                                                    u4615 08B3  
                                                    u3825 0F78  
                                                    u3665 030E  
                                                    u4625 08C0  
                                                    u4555 095F  
                                                    u3915 0FF9  
                                                    u2795 0AC7  
                                                    u3595 02BF  
                                                    u4564 0968  
                                                    u4565 0966  
                                                    u4725 0EB3  
                                                    u3935 0836  
                                                    u3855 0FA3  
                                                    u3695 032A  
                                                    u4585 089A  
                                                    u3955 0840  
                                                    u4595 08A0  
                                                    u4755 0EDE  
                                                    u3965 084A  
                                                    u3885 0FD0  
                                                    u4765 0EF8  
                                                    u3975 0852  
                                                    u4777 0EC5  
                                                    u4787 0609  
                                                    u4797 061E  
                                                    _PLLR 04D6  
                                                    _TMR0 0015  
                                                    _WPUB 020D  
                                                    _WPUE 0210  
                                 ??_wr2RegCompleteHandler 002F  
                                                    abs@a 0020  
                                                    _main 0E27  
                                ?_I2C_CallbackReturnReset 002D  
                                                    fsr0h 0005  
                                                    fsr1h 0007  
                                                    indf0 0000  
                                                    fsr0l 0004  
                                                    indf1 0001  
                                                    fsr1l 0006  
                                        __end_of_I2C_Open 09CB  
                                                    btemp 007E  
                                   ??_setGestureIntEnable 003F  
                                                    start 002C  
                                  __end_of_LCD_Initialize 1423  
                        __size_of_rdBlkRegCompleteHandler 0021  
                                                   ??_abs 0022  
                                        ?_I2C_MasterClose 0070  
                                            ?_readGesture 0048  
                                 __end_of_TMR0_Initialize 1260  
                                  _i2c_write1ByteRegister 176E  
                                         ?_FVR_Initialize 0070  
                     __size_of_I2C_SetAddressNackCallback 000C  
                          __size_of_OSCILLATOR_Initialize 000A  
                                        ?_I2C_MasterStart 0070  
                                           _I2C_DO_RX_ACK 119B  
                                        ?_I2C_MasterWrite 0070  
                           __end_of_OSCILLATOR_Initialize 124A  
                                                   ?_main 0070  
                                         __end_of___awdiv 0AF8  
                                  ??_CCP4_DefaultCallBack 0074  
                                         ___awdiv@divisor 0026  
                                                   _T1CON 0018  
                                                   _LCDRL 0795  
                                                   _LCDPS 0792  
                                         __end_of___lwdiv 085F  
                                         __end_of___lwmod 165B  
                                                   i1l464 14DB  
                                         ___awdiv@counter 002B  
                                                   _RCREG 0199  
                                            ?_setLEDDrive 0070  
                            __size_of_I2C_DO_RX_NACK_STOP 0004  
                                          _setGestureGain 1688  
                                                   _RCSTA 019D  
                                      wireReadDataBlock@i 0047  
                                                   _TMR1H 0017  
                                                   _TMR1L 0016  
                                       ??_I2C_DO_TX_EMPTY 002F  
                                                   _TRISA 008C  
                                                   _TRISB 008D  
                                                   _TRISC 008E  
                                                   _TRISE 0090  
                                                   _TXREG 019A  
                                                   _TXSTA 019E  
                             __end_of_setProxIntLowThresh 12EE  
                                         __end_of_getMode 11EB  
                                        readProximity@val 0040  
                                       __end_of_I2C_DO_RX 0A5C  
                                       __end_of_I2C_DO_TX 0BA5  
                                   isGestureAvailable@val 0040  
                                          _WDT_Initialize 07FD  
                                       __end_of_I2C_Close 14FB  
                            __end_of_setProxIntHighThresh 12DE  
                                  __size_of_I2C_MasterFsm 002D  
                          I2C_MasterOperation@returnValue 0035  
                                   _i2c_read1ByteRegister 09CB  
                                            main@temp_num 005C  
                                   __size_of_APDS9960Init 0111  
                                 _I2C_MasterEnableRestart 1176  
                                         __end_of_setMode 0AA7  
                                 __end_of_TMR1_Initialize 12FE  
                                                   pclath 000A  
                                        ?_I2C_SetCallback 0020  
                               i2c_write1ByteRegister@reg 0036  
                            I2C_SetAddressNackCallback@cb 0029  
                            __size_of_setAmbientLightGain 0023  
                                                   status 0003  
                                 __end_of_CCP4_Initialize 130F  
                                                   wtemp0 007E  
                                       ?_I2C_DO_SEND_STOP 0070  
                                  __size_of_I2C_SetBuffer 0015  
                                ?_setLightIntLowThreshold 003D  
                                         _TMR1_WriteTimer 129F  
                              __end_of_setGestureLEDDrive 16E4  
                                      ??_I2C_DO_SEND_STOP 0020  
                                   setGestureWaitTime@val 0041  
                                        ??_DAC_Initialize 0020  
                                         ?_LCD_Initialize 0070  
                                           _gesture_data_ 22EC  
                                         __initialization 002E  
                                  ??_setGestureExitThresh 003D  
                              processGestureData@lr_delta 0044  
                                            __end_of_main 0F09  
                       __size_of_I2C_DO_SEND_RESTART_READ 0004  
                                _CCP4_CallBack@main$F1923 0748  
                               ?_I2C_DO_SEND_RESTART_READ 0070  
                              processGestureData@ud_delta 0042  
                                          ?_I2C_DO_RX_ACK 0070  
                             ?_INTERRUPT_InterruptManager 0070  
                                         ??_LCD_Digit1Num 0020  
                                         ??_LCD_Digit2Num 0020  
                                         ??_LCD_Digit3Num 0020  
                                         ??_LCD_Digit4Num 0020  
                                  __end_of_setGestureGain 16B6  
                               __size_of_setProximityGain 002E  
                          ??_EUSART_SetRxInterruptHandler 0022  
                                                  ??_main 005A  
                                       ?_I2C_MasterIsNack 0070  
                                       ?_I2C_MasterSetIrq 0070  
                                            _APDS9960Init 0637  
                                      ??_I2C_MasterIsNack 0020  
                       __size_of_setLightIntHighThreshold 0022  
                                  __end_of_WDT_Initialize 0800  
                               ?_setLightIntHighThreshold 003D  
                       setLightIntHighThreshold@threshold 003D  
                                      ??_I2C_MasterSetIrq 0020  
                                    __size_of_enablePower 000D  
                                        ?_CCP4_CaptureISR 0070  
               __end_of_EUSART_DefaultFramingErrorHandler 1163  
              __size_of_EUSART_DefaultFramingErrorHandler 0001  
                     ??_EUSART_DefaultFramingErrorHandler 0070  
                      ?_EUSART_DefaultFramingErrorHandler 0070  
                       _EUSART_DefaultFramingErrorHandler 1162  
                              _EUSART_OverrunErrorHandler 00E2  
                         __end_of_I2C_CallbackReturnReset 1167  
                                                  _CCPR4H 0319  
                                                  _CCPR4L 0318  
                         __size_of_I2C_CallbackReturnStop 0002  
                                        ___awdiv@dividend 0028  
                                                  _APFCON 011D  
                           I2C_SetDataCompleteCallback@cb 0029  
                                      _processGestureData 005E  
                                                  _ANSELA 018C  
                                                  _ANSELB 018D  
                                                  _BORCON 0116  
                                                  _T1GCON 0019  
                                                  _LCDCON 0791  
                                                  _LCDCST 0794  
                                                  _LCDSE0 0798  
                                                  _LCDSE1 0799  
                                                  _LCDREF 0793  
                            setProxIntLowThresh@threshold 003E  
                                            ??_I2C_Poller 0034  
                                                  i1l1022 0015  
                                                  i1l1024 0022  
                                 TMR1_WriteTimer@timerVal 0070  
                                                  i1l1029 002A  
                                                  i1l5055 12A9  
                                                  i1l5323 0768  
                                                  i1l5351 07AB  
                                                  i1l5345 07A0  
                                                  i1l5329 077B  
                                                  i1l5339 0794  
                                                  i1l5381 07F6  
                                                  i1l5373 07E7  
                                                  i1l5357 07B5  
                                                  i1l5365 07D2  
                                                  i1l5377 07EF  
                                                  i1l5951 0883  
                                                  i1l5945 0874  
                                                  i1l5955 0892  
                                                  _FVRCON 0117  
                                        _wireReadDataByte 1236  
                                                  _OSCCON 0099  
                                                  u299_25 07CB  
                                                  _SPBRGH 019C  
                                                  _SPBRGL 019B  
                                 ?_resetGestureParameters 0070  
                                                  _WDTCON 0097  
                                                  _SSPADD 0212  
                                                  _SSPBUF 0211  
                                     ?_processGestureData 0070  
                                       _gesture_lr_delta_ 0065  
                                     _I2C_MasterGetRxData 0800  
                           setProxIntHighThresh@threshold 003E  
                                       _gesture_lr_count_ 0061  
                                     wireReadDataByte@reg 003E  
                                       _gesture_ud_delta_ 0067  
                              __end_of_isGestureAvailable 1321  
                                       _gesture_ud_count_ 0063  
                                                  ___wmul 146E  
                                           _I2C_MasterFsm 165B  
                                               ??___awdiv 002A  
                              __end_of_setGestureWaitTime 1608  
                                        __end_of_intToBCD 0987  
                                   _enableProximitySensor 0803  
                                               ??___lwdiv 0024  
                                               ??___lwmod 0024  
                                  __size_of_readProximity 0008  
                                            ?_reverseBits 0070  
                                     _EUSART_Transmit_ISR 14C1  
                                        ?_TMR0_Initialize 0070  
                                       I2C_SetCallback@cb 0020  
                                        ___awdiv@quotient 002D  
                                 __size_of_I2C_MasterOpen 000B  
                                         ?_setGestureGain 0070  
                                 __size_of_I2C_MasterStop 0003  
                                               ??_getMode 003F  
                                           _CCP4_CallBack 00DC  
                                 __size_of_I2C_Initialize 0009  
                                           _I2C_SetBuffer 1336  
                                      __end_of_I2C_Poller 1236  
                                 ??_setGestureEnterThresh 003D  
                            __end_of_I2C_MasterDisableIrq 1173  
                                    ??_processGestureData 002F  
                                     _I2C_DO_ADDRESS_NACK 17CF  
                                    ?_I2C_MasterGetRxData 0070  
                                               ?_I2C_Open 0070  
                      __end_of_I2C_SetAddressNackCallback 1278  
                              _I2C_SetAddressNackCallback 126C  
                              i2c_write1ByteRegister@data 0037  
                                   _setProximityIntEnable 1740  
                                               ??_setMode 0042  
                                         ?_WDT_Initialize 0070  
                               ??_I2C_MasterEnableRestart 0020  
                                       readGesture@motion 0053  
                                  ?_i2c_read1ByteRegister 0036  
                                 __end_of_TMR1_WriteTimer 12AE  
                                    ?_EUSART_Transmit_ISR 0070  
                          __end_of_resetGestureParameters 14A5  
                                        ?_TMR1_Initialize 0070  
                                       _SYSTEM_Initialize 155D  
                                 __end_of__initialization 005A  
                         enableProximitySensor@interrupts 0046  
                                     _I2C_MasterOperation 14FB  
                                        ?_CCP4_Initialize 0070  
                                      ?_SYSTEM_Initialize 0070  
                                    ?_I2C_DO_ADDRESS_NACK 0070  
                                  setGestureWaitTime@time 0040  
                    __end_of_EUSART_SetTxInterruptHandler 121B  
                   __size_of_EUSART_SetTxInterruptHandler 0008  
                            _EUSART_SetTxInterruptHandler 1213  
                                 _rdBlkRegCompleteHandler 151B  
                                __end_of_CCP4_SetCallBack 11F3  
                                          __pcstackCOMMON 0070  
                                          ?_I2C_MasterFsm 0070  
                                         ??_I2C_DO_RX_ACK 0020  
                                  _I2C_CallbackReturnStop 1163  
                                     ??_SYSTEM_Initialize 0023  
                                    _setProxIntHighThresh 12CE  
                                          _gesture_state_ 00D6  
                                          ?_I2C_SetBuffer 0020  
                                 ?_I2C_MasterWaitForEvent 0070  
                          __size_of_I2C_DO_SEND_ADR_WRITE 0007  
                      __size_of_I2C_DO_SEND_RESTART_WRITE 0004  
                           __end_of_I2C_DO_SEND_ADR_WRITE 11DB  
                              ?_I2C_DO_SEND_RESTART_WRITE 0070  
                                    ?_I2C_MasterOperation 0070  
                                    __size_of_readGesture 0125  
                                   ??_I2C_MasterGetRxData 0020  
                                          _OPTION_REGbits 0095  
                                              ??_I2C_Open 0020  
                                    _eusartRxStatusBuffer 00C4  
                              __end_of_I2C_MasterClearIrq 116D  
                                      _gesture_far_count_ 00D8  
                                    __size_of_setLEDDrive 002E  
                         ??_EUSART_SetOverrunErrorHandler 0022  
                                            _LCDDATA0bits 07A0  
                                            _LCDDATA1bits 07A1  
                                            _LCDDATA3bits 07A3  
                                            _LCDDATA4bits 07A4  
                                            _LCDDATA6bits 07A6  
                                            _LCDDATA7bits 07A7  
                                            _LCDDATA9bits 07A9  
                               __end_of_SYSTEM_Initialize 157E  
                                   ??_EUSART_Transmit_ISR 0070  
                                           _readProximity 121B  
                                       _I2C_MasterSendAck 1187  
                                              __pbssBANK0 0061  
                                              __pbssBANK1 00A0  
                                              __pbssBANK2 0120  
                                    wireWriteDataByte@reg 003C  
        rdBlkRegCompleteHandler@i2c_simple_master$F2203@p 002D  
                                    wireWriteDataByte@val 0039  
          wr1RegCompleteHandler@i2c_simple_master$F2173@p 002D  
          rd2RegCompleteHandler@i2c_simple_master$F2191@p 002D  
          rd1RegCompleteHandler@i2c_simple_master$F2183@p 002D  
          wr2RegCompleteHandler@i2c_simple_master$F2197@p 002D  
                                     getMode@enable_value 0040  
                                           ??_I2C_DO_IDLE 0020  
                          __size_of_rd2RegCompleteHandler 0018  
                                           ??_I2C_DO_RCEN 0020  
                           __end_of_rd2RegCompleteHandler 1393  
                            __end_of_I2C_MasterSendTxData 11C8  
                                      ?_I2C_MasterSendAck 0070  
                                       _I2C_MasterStartRx 117C  
                          __size_of_wr2RegCompleteHandler 0018  
                                   ??_I2C_DO_ADDRESS_NACK 002F  
                           __end_of_wr2RegCompleteHandler 13C3  
                             __size_of_EUSART_Receive_ISR 0036  
                                     _I2C_DO_RX_NACK_STOP 119F  
                                   _rd1RegCompleteHandler 1363  
                                      ?_I2C_MasterStartRx 0070  
                              __end_of_I2C_MasterSendNack 1187  
                                   _wr1RegCompleteHandler 1393  
                                        ??_FVR_Initialize 0020  
                                              __pmaintext 0E27  
                                     ??_I2C_MasterSendAck 0020  
                                rd1RegCompleteHandler@ptr 002D  
                                 ?_i2c_write1ByteRegister 0036  
                                  ?_enableProximitySensor 0070  
                           ?_EUSART_SetTxInterruptHandler 0020  
                        _EUSART_TxDefaultInterruptHandler 00E8  
                             __end_of_I2C_DO_SEND_RESTART 1197  
                                         _I2C_DO_TX_EMPTY 179E  
                                     I2C_SetBuffer@buffer 0020  
                                 setGestureLEDDrive@drive 0042  
                                                 ?___wmul 0020  
                                              __pintentry 0004  
                          __end_of_I2C_MasterWaitForEvent 11AB  
                                   ?_setProxIntHighThresh 0070  
                                     ??_I2C_MasterStartRx 0020  
                                                 _DACCON0 0118  
                                                 _DACCON1 0119  
                           __size_of_I2C_DO_SEND_ADR_READ 0008  
                                                 _CCP4CON 031A  
                                                 _BAUDCON 019F  
                        __size_of_I2C_CallbackReturnReset 0002  
                                     intToBCD@binaryInput 0028  
                                        _setProximityGain 1712  
                                             setMode@mode 0045  
                            ??_EUSART_DefaultErrorHandler 0071  
                                   ??_I2C_MasterOperation 0034  
                                     _setAmbientLightGain 15C2  
                          I2C_SetDataCompleteCallback@ptr 002B  
                                ??_I2C_DO_RX_NACK_RESTART 0020  
                       __end_of_I2C_DO_SEND_RESTART_WRITE 1193  
                                    ?_I2C_DO_RX_NACK_STOP 0070  
                                  ?_setProximityIntEnable 0070  
                                           _eusartRxCount 00ED  
                                   i2c_readDataBlock@data 0037  
                                       _wireReadDataBlock 14A5  
                           __size_of_EUSART_RxDataHandler 0019  
                               __end_of_I2C_MasterSendAck 118B  
                                                 _OSCTUNE 0098  
                                    wireReadDataBlock@len 0042  
                                    wireReadDataBlock@reg 0046  
                                    wireReadDataBlock@val 0040  
                                      ?_wireReadDataBlock 0040  
                                          ?_readProximity 0070  
                                ??_EUSART_SetErrorHandler 0022  
                                                 _SSPCON1 0215  
                                                 _SSPCON2 0216  
                             __end_of_setGestureIntEnable 162F  
                           i2c_write1ByteRegister@address 0038  
                                                 _SSPSTAT 0214  
                         processGestureData@lr_ratio_last 0038  
                                        ?_TMR1_WriteTimer 0070  
                               __end_of_I2C_MasterStartRx 117F  
                                    I2C_Close@returnValue 0021  
                            ?_I2C_SetDataCompleteCallback 0029  
                                               _I2C_DO_RX 0A12  
                                               _I2C_DO_TX 0B4A  
                                               ?_intToBCD 0028  
                        __end_of_I2C_DO_SEND_RESTART_READ 118F  
                                            readGesture@i 0058  
                                    ?_setAmbientLightGain 0070  
                                        ??_LCD_Initialize 0020  
                                               _I2C_Close 14DE  
                                     ??_wireReadDataBlock 0044  
                              ??_CCP4_CallBack@main$F1927 0074  
                               ??_rdBlkRegCompleteHandler 002F  
                                              _ir_address 006B  
                                    _I2C_MasterDisableIrq 1170  
                          __end_of_i2c_write1ByteRegister 179E  
                                           setMode@enable 0041  
                                         ??_I2C_MasterFsm 0031  
                     __size_of_EUSART_DefaultErrorHandler 0003  
                                  __size_of_decodeGesture 00F7  
                                     __end_of_I2C_DO_IDLE 11B8  
                                              _ir_command 006A  
                                     __end_of_I2C_DO_RCEN 11D4  
                                                 ___awdiv 0AA7  
                                         ??_I2C_SetBuffer 0024  
                                         __size_of___wmul 001B  
                                                 ___lwdiv 082B  
                                                 ___lwmod 162F  
                                 I2C_SetBuffer@bufferSize 0022  
                                               _LCDDATA10 07AA  
                                          _I2C_MasterOpen 124A  
                                          _I2C_MasterStop 1179  
                                          _I2C_Initialize 1223  
                                __end_of_wireReadDataByte 1240  
                               __size_of_I2C_DO_SEND_STOP 0004  
                                                 _getMode 11E3  
                        __size_of_setLightIntLowThreshold 0022  
                                      _setGestureLEDDrive 16B6  
                                                 __ptext1 0895  
                                                 __ptext2 121B  
                                                 __ptext3 0512  
                                                 __ptext4 14A5  
                                                 __ptext5 08CB  
                                                 __ptext6 1489  
                                                 __ptext7 005E  
                                                 __ptext8 146E  
                                                 __ptext9 0AA7  
                                      i2c_readDataBlock@d 003C  
                                    __size_of_reverseBits 0036  
                                   ??_I2C_DO_RX_NACK_STOP 0020  
                               __end_of_wireReadDataBlock 14C1  
                                               _T1CONbits 0018  
                                                 _ir_flag 0069  
                                   _OSCILLATOR_Initialize 1240  
                                            __size_of_abs 0018  
                           __size_of_CCP4_DefaultCallBack 0001  
                                      I2C_SetCallback@idx 0028  
                                __size_of_I2C_MasterClose 0003  
                                                 _setMode 0A5C  
                                ??_PIN_MANAGER_Initialize 0020  
                           I2C_CallbackReturnReset@funPtr 002D  
                                      I2C_SetCallback@ptr 0022  
                                wr1RegCompleteHandler@ptr 002D  
                                     ?_setGestureLEDDrive 0070  
                                __size_of_I2C_MasterStart 0003  
                                __size_of_I2C_MasterWrite 0004  
                              __size_of_SYSTEM_Initialize 0021  
                                 i2c_read1ByteRegister@d2 003C  
                                                 clrloop0 1279  
                                    end_of_initialization 005A  
                                              ?_I2C_DO_RX 0070  
                                              ?_I2C_DO_TX 0070  
                                   ??_setAmbientLightGain 003F  
                            __size_of_setProxIntLowThresh 0010  
                                              ??_intToBCD 002A  
                   __end_of_EUSART_SetOverrunErrorHandler 120B  
                  __size_of_EUSART_SetOverrunErrorHandler 0008  
                           _EUSART_SetOverrunErrorHandler 1203  
                               __size_of_I2C_MasterIsNack 0006  
                                              ?_I2C_Close 0070  
                                  ?_rd1RegCompleteHandler 002D  
                                 __end_of_I2C_DO_TX_EMPTY 17CF  
                               __size_of_I2C_MasterSetIrq 0002  
                                   ?_I2C_MasterDisableIrq 0070  
                                       _EUSART_Initialize 0903  
                                  ?_wr1RegCompleteHandler 002D  
                       CCP4_CallBack@main$F1923@bit_count 007B  
                           setGestureExitThresh@threshold 003E  
                                    ??_setGestureLEDDrive 003F  
                                      readGesture@gstatus 0055  
                                      ?_EUSART_Initialize 0070  
                                __size_of_I2C_SetCallback 0052  
                                               _RCSTAbits 019D  
                                        ??_setGestureGain 003F  
                                  ??_setProxIntHighThresh 003D  
                                  __end_of_I2C_MasterOpen 1255  
                                  __end_of_I2C_MasterStop 117C  
                                  __end_of_I2C_Initialize 122C  
                           __size_of_setGestureExitThresh 0010  
                                   _ir_address_complement 00EA  
                                     ??_EUSART_Initialize 0022  
                                        ??_WDT_Initialize 0020  
                                       _wireWriteDataByte 1291  
                          ??_EUSART_SetTxInterruptHandler 0022  
                         __end_of_rdBlkRegCompleteHandler 153C  
                                   __end_of_LCD_Digit1Num 0C7B  
                                   __end_of_LCD_Digit2Num 0D51  
                                   __end_of_LCD_Digit3Num 0E27  
                                   __end_of_LCD_Digit4Num 0512  
                                    _I2C_MasterSendTxData 11C2  
                                           ??_enablePower 0046  
                         __size_of_I2C_DO_RX_NACK_RESTART 0004  
                                      ?_wireWriteDataByte 0039  
                         setLightIntHighThreshold@val_low 0040  
                                        LCD_Digit1Num@num 0022  
                                 ??_i2c_read1ByteRegister 0037  
                          __size_of_setGestureEnterThresh 0010  
                                        LCD_Digit2Num@num 0022  
                           __end_of_setGestureEnterThresh 12BE  
                                           _decodeGesture 0F09  
                                        LCD_Digit3Num@num 0022  
                             ?_I2C_SetAddressNackCallback 0029  
                                      _isGestureAvailable 130F  
                                         ??_readProximity 003F  
                                        LCD_Digit4Num@num 0022  
                                      _setGestureWaitTime 15E5  
                              __size_of_I2C_MasterSendAck 0004  
                                       __size_of_I2C_Open 0044  
                                     ??_wireWriteDataByte 003A  
                         __size_of_EUSART_SetErrorHandler 0008  
                              __size_of_I2C_MasterStartRx 0003  
                         processGestureData@ud_ratio_last 0036  
                                     ?_isGestureAvailable 0070  
                                     ?_setGestureWaitTime 0070  
                               __end_of_EUSART_Initialize 0945  
                                             _I2C_DO_IDLE 11B3  
                                             _I2C_DO_RCEN 11CE  
                              rdBlkRegCompleteHandler@ptr 002D  
                                __size_of_CCP4_CaptureISR 0015  
                       CCP4_DefaultCallBack@capturedValue 0072  
                                   setProximityGain@drive 0042  
                                 ?_I2C_CallbackReturnStop 002D  
                                _I2C_DO_SEND_RESTART_READ 118B  
                                       ?_CCP4_SetCallBack 0020  
                            I2C_CallbackReturnStop@funPtr 002D  
                                         ?_I2C_MasterOpen 0070  
                                           intToBCD@shift 002F  
                                         ?_I2C_MasterStop 0070  
                                         ?_I2C_Initialize 0070  
                                 _I2C_CallbackReturnReset 1165  
                               __end_of_wireWriteDataByte 129F  
                                      ??_CCP4_SetCallBack 0022  
                      __end_of_EUSART_DefaultErrorHandler 116A  
                              _EUSART_DefaultErrorHandler 1167  
                                    ??_isGestureAvailable 003F  
                                          __end_of___wmul 1489  
                    __size_of_I2C_SetDataCompleteCallback 000C  
                                    ??_setGestureWaitTime 003F  
                                   ?_I2C_MasterSendTxData 0070  
                                  ?_OSCILLATOR_Initialize 0070  
                                _setLightIntHighThreshold 157E  
                              __size_of_wireReadDataBlock 001C  
                                       intToBCD@bcdResult 002D  
                                         _gesture_motion_ 00D4  
                             ??_I2C_DO_SEND_RESTART_WRITE 0020  
                                 __size_of_DAC_Initialize 0005  
                             __size_of_processGestureData 02D8  
                                          ?_decodeGesture 0070  
                                     start_initialization 002E  
                                      setGestureGain@gain 0042  
                                __size_of_TMR0_Initialize 000B  
                         __size_of_PIN_MANAGER_Initialize 001A  
                                             __end_of_abs 143B  
                                           ?_I2C_DO_RESET 0070  
            EUSART_SetRxInterruptHandler@interruptHandler 0020  
            EUSART_SetTxInterruptHandler@interruptHandler 0020  
                        setLightIntHighThreshold@val_high 0041  
                                     __end_of_enablePower 1291  
                                             ??_I2C_DO_RX 002F  
                                             ??_I2C_DO_TX 002F  
                                       ??_I2C_MasterClose 0020  
                                __end_of_setProximityGain 1740  
                                processGestureData@d_last 003B  
                                  ??_I2C_MasterDisableIrq 0020  
                                             ??_I2C_Close 0020  
                                       ??_I2C_MasterStart 0020  
                                       ??_I2C_MasterWrite 0036  
                          __end_of_I2C_CallbackReturnStop 1165  
                                processGestureData@l_last 003C  
                                  _I2C_DO_RX_NACK_RESTART 11A3  
                                        ?_I2C_DO_TX_EMPTY 0070  
                                processGestureData@r_last 003D  
                                 ??_enableProximitySensor 0046  
                                      _I2C_MasterClearIrq 116A  
                                           _LCDDATA10bits 07AA  
                                processGestureData@u_last 003A  
                          ?_EUSART_SetOverrunErrorHandler 0020  
                                __size_of_TMR1_Initialize 0010  
                              _EUSART_FramingErrorHandler 00E4  
                            i2c_read1ByteRegister@address 0038  
                         setLightIntLowThreshold@val_high 0041  
                                                ??___wmul 0024  
                                  _EUSART_SetErrorHandler 11F3  
                                __size_of_CCP4_Initialize 0011  
                                     ?_I2C_MasterClearIrq 0070  
                                           ??_readGesture 004A  
                             __end_of_I2C_MasterGetRxData 0803  
                                   __end_of_I2C_DO_RX_ACK 119F  
                                 ??_setProximityIntEnable 003F  
                                 _setLightIntLowThreshold 15A0  
                               setGestureIntEnable@enable 0041  
                                setAmbientLightGain@drive 0040  
                                        _I2C_DO_SEND_STOP 1197  
                                       ??_I2C_SetCallback 0024  
                                     I2C_Open@returnValue 0021  
                                      _I2C_MasterSendNack 1183  
                                ?_I2C_MasterEnableRestart 0070  
                                           ??_setLEDDrive 003F  
                                   CCP4_CaptureISR@module 0079  
                                       _i2c_fsmStateTable 1800  
                                             __pbssBIGRAM 22EC  
                             __end_of_EUSART_Transmit_ISR 14DE  
                                   _I2C_DO_SEND_ADR_WRITE 11D4  
                                  setGestureIntEnable@val 0040  
                                             __pbssCOMMON 007B  
                                               ___latbits 0003  
                                           __pcstackBANK0 0020  
                                          ??_I2C_DO_RESET 0020  
                                     ?_I2C_MasterSendNack 0070  
                            __end_of_I2C_DO_SEND_ADR_READ 11E3  
                                    ??_I2C_MasterClearIrq 0020  
                             __end_of_I2C_DO_ADDRESS_NACK 1800  
                              __end_of_EUSART_Receive_ISR 0895  
                                        _I2C_MasterIsNack 11C8  
                              __size_of_EUSART_Initialize 0042  
                               _I2C_DO_SEND_RESTART_WRITE 118F  
                                   readGesture@fifo_level 0056  
                        _EUSART_RxDefaultInterruptHandler 00E6  
                                        _I2C_MasterSetIrq 0002  
                                       __size_of_intToBCD 0042  
                                   _rd2RegCompleteHandler 137B  
                            __end_of_EUSART_RxDataHandler 1454  
                                        ___lwdiv@dividend 0022  
                                  _PIN_MANAGER_Initialize 1454  
                                   _wr2RegCompleteHandler 13AB  
                               ??_I2C_CallbackReturnReset 002F  
                             __end_of_I2C_MasterOperation 151B  
                                    ??_I2C_MasterSendNack 0020  
                                rd2RegCompleteHandler@ptr 002D  
                                                ?___awdiv 0026  
                                               __ptext100 1393  
                                               __ptext101 137B  
                                               __ptext110 14DE  
                                               __ptext102 1363  
                                               __ptext111 1170  
                                               __ptext103 134B  
                                               __ptext120 143B  
                                               __ptext112 116D  
                                               __ptext104 1260  
                                               __ptext121 1321  
                                               __ptext113 116A  
                                               __ptext105 0AF8  
                                               __ptext122 0748  
                                               __ptext106 1336  
                                               __ptext123 1161  
                                               __ptext115 14C1  
                                               __ptext107 1179  
                                               __ptext124 129F  
                                               __ptext116 085F  
                                               __ptext108 1176  
                                               __ptext117 117F  
                                               __ptext109 1173  
                                               __ptext118 1162  
                                               __ptext119 1167  
                                       ??_CCP4_CaptureISR 0078  
                              __size_of_wireWriteDataByte 000E  
                                                ?___lwdiv 0020  
                                               _fifo_data 2370  
                                                ?___lwmod 0020  
                   CCP4_CallBack@main$F1923@capturedValue 0072  
                                            _eusartRxHead 006C  
                                            _eusartTxHead 006F  
                                    i2c_readDataBlock@len 0039  
                                            _eusartRxTail 007D  
                                    i2c_readDataBlock@reg 0036  
                                  ??_I2C_MasterSendTxData 0020  
                                            _eusartTxTail 006E  
                                     _setProxIntLowThresh 12DE  
                               __end_of_i2c_fsmStateTable 1820  
                            ??_INTERRUPT_InterruptManager 007B  
                                                ?_getMode 0070  
                                         ??_decodeGesture 0024  
                                       ?_wireReadDataByte 0070  
                                 _eusartTxBufferRemaining 006D  
                            __size_of_I2C_DO_SEND_RESTART 0004  
                                           ?_APDS9960Init 0070  
                                             _enablePower 1284  
                                      ??_wireReadDataByte 003D  
                                     __end_of_readGesture 0637  
                                       _i2c_readDataBlock 08CB  
                                 I2C_MasterOperation@read 0034  
                                                _I2C_Open 0987  
                                ??_resetGestureParameters 0020  
                                                ?_setMode 0041  
                                      ?_i2c_readDataBlock 0036  
                                        ___lwdiv@quotient 0025  
                                                _LCDDATA0 07A0  
                                                _LCDDATA1 07A1  
                                                _LCDDATA3 07A3  
                                                _LCDDATA4 07A4  
                                                _LCDDATA6 07A6  
                                                _LCDDATA7 07A7  
                                                _LCDDATA9 07A9  
                                     __end_of_setLEDDrive 1712  
                                 ??_rd1RegCompleteHandler 002F  
                                    ?_setProxIntLowThresh 0070  
                                   readGesture@bytes_read 0057  
                                          _eusartRxBuffer 0120  
                                 ??_wr1RegCompleteHandler 002F  
                                       ??_TMR0_Initialize 0020  
                                          _eusartTxBuffer 00CC  
                                     ??_i2c_readDataBlock 003B  
                                          ___wmul@product 0024  
                                  i2c_read1ByteRegister@e 0039  
                  EUSART_SetErrorHandler@interruptHandler 0020  
                                  i2c_read1ByteRegister@x 003A  
                                               clear_ram0 1278  
                            __end_of_CCP4_DefaultCallBack 1162  
                                                _PIE1bits 0091  
                                                _PIE3bits 0093  
                            __size_of_setGestureIntEnable 0027  
                                       _eusartRxLastError 00EC  
                                     _gesture_near_count_ 00DA  
                                __size_of_TMR1_WriteTimer 000F  
                     __size_of_INTERRUPT_InterruptManager 0028  
                                                _PIR1bits 0011  
                         ??_EUSART_SetFramingErrorHandler 0022  
                                                _PIR3bits 0013  
                                   __end_of_I2C_MasterFsm 1688  
                               ??_setLightIntLowThreshold 003F  
                             __end_of_I2C_DO_RX_NACK_STOP 11A3  
               __end_of_EUSART_DefaultOverrunErrorHandler 1183  
              __size_of_EUSART_DefaultOverrunErrorHandler 0004  
                     ??_EUSART_DefaultOverrunErrorHandler 0070  
                      ?_EUSART_DefaultOverrunErrorHandler 0070  
                       _EUSART_DefaultOverrunErrorHandler 117F  
                         __end_of_I2C_MasterEnableRestart 1179  
                                           ??_reverseBits 0020  
                                          setLEDDrive@val 0041  
                                   __end_of_I2C_SetBuffer 134B  
                       __size_of_CCP4_CallBack@main$F1923 00B5  
                                       ??_TMR1_Initialize 0020  
                        processGestureData@lr_ratio_first 0034  
                               ?_CCP4_CallBack@main$F1925 0072  
                               __end_of_i2c_readDataBlock 0903  
                                       ___wmul@multiplier 0020  
                                          _DAC_Initialize 11BD  
                                  ?_I2C_DO_SEND_ADR_WRITE 0070  
                                          ??_APDS9960Init 0046  
                                I2C_MasterSendTxData@data 0020  
                                 __size_of_FVR_Initialize 0004  
                                       ??_CCP4_Initialize 0022  
                               processGestureData@d_first 003F  
                                               main@temp8 005E  
                             __end_of_setAmbientLightGain 15E5  
                          __size_of_i2c_read1ByteRegister 0047  
                                wr2RegCompleteHandler@ptr 002D  
                               processGestureData@l_first 0040  
                           __end_of_i2c_read1ByteRegister 0A12  
                            __end_of_setGestureExitThresh 12CE  
                               processGestureData@r_first 0041  
                              ??_I2C_DO_SEND_RESTART_READ 0020  
                                ?_rdBlkRegCompleteHandler 002D  
                               processGestureData@u_first 003E  
                                   ??_setProxIntLowThresh 003D  
                                              _I2C_Poller 122C  
                                              _I2C_Status 00A0  
                                       setGestureGain@val 0041  
                                            ?_I2C_DO_IDLE 0070  
                                            ?_I2C_DO_RCEN 0070  
                                  ?_rd2RegCompleteHandler 002D  
                                        ??_I2C_MasterOpen 0020  
                                  ?_wr2RegCompleteHandler 002D  
                                        ??_I2C_MasterStop 0020  
                                ??_I2C_MasterWaitForEvent 0020  
                                        ??_I2C_Initialize 0020  
                                setProximityIntEnable@val 0041  
                              ??_setLightIntHighThreshold 003F  
                             __size_of_setGestureLEDDrive 002E  
                                          setMode@reg_val 0044  
                                    __end_of_I2C_DO_RESET 11BD  
                          setLightIntLowThreshold@val_low 0040  
                                 ??_OSCILLATOR_Initialize 0020  
                                     _EUSART_ErrorHandler 00E0  
                                 __size_of_LCD_Initialize 0018  
                                        __size_of___awdiv 0051  
                                    _I2C_DO_SEND_ADR_READ 11DB  
                           __size_of_setProxIntHighThresh 0010  
                                             _readGesture 0512  
                                  __end_of_DAC_Initialize 11C2  
                             ?_EUSART_DefaultErrorHandler 0070  
                                        __size_of___lwdiv 0034  
                                        __size_of___lwmod 002C  
                                          APDS9960Init@id 0047  
                        setLightIntLowThreshold@threshold 003D  
                                        __size_of_getMode 0008  
                                         _I2C_MasterClose 116D  
                                             _setLEDDrive 16E4  
                           I2C_SetAddressNackCallback@ptr 002B  
                                     __end_of_reverseBits 08CB  
                                         I2C_Open@address 0020  
                                         _I2C_MasterStart 1173  
                                         _I2C_MasterWrite 11AB  
                         __size_of_resetGestureParameters 001C  
                               __size_of_CCP4_SetCallBack 0008  
                                         ___lwdiv@divisor 0020  
                                    _EUSART_RxDataHandler 143B  
                         __end_of_setLightIntLowThreshold 15C2  
                                   setGestureLEDDrive@val 0041  
                                        __size_of_setMode 004B  
                                         ___lwdiv@counter 0027  
                                                __ptext10 130F  
                                                __ptext11 0F09  
                                                __ptext20 07FD  
                                                __ptext12 1423  
                                                __ptext21 12EE  
                                                __ptext13 0945  
                                                __ptext30 120B  
                                                __ptext22 1255  
                                                __ptext14 162F  
                                                __ptext31 1203  
                                                __ptext23 1454  
                                                __ptext15 082B  
                                                __ptext40 0BA5  
                                                __ptext32 11FB  
                                                __ptext24 1240  
                                                __ptext16 0803  
                                                __ptext41 0637  
                                                __ptext33 11F3  
                                                __ptext25 140B  
                                                __ptext17 1740  
                                                __ptext50 15E5  
                                                __ptext42 1712  
                                                __ptext34 11BD  
                                                __ptext26 1223  
                                                __ptext18 1284  
                                                __ptext51 16B6  
                                                __ptext43 12DE  
                                                __ptext35 12FE  
                                                __ptext27 11AF  
                                                __ptext19 155D  
                                                __ptext60 09CB  
                                                __ptext52 1608  
                                                __ptext44 12CE  
                                                __ptext36 11EB  
                                                __ptext28 0903  
                                                __ptext61 126C  
                                                __ptext53 1688  
                                                __ptext45 0A5C  
                                                __ptext37 0336  
                                                __ptext29 1213  
                                                __ptext70 11B8  
                                                __ptext62 0987  
                                                __ptext54 12BE  
                                                __ptext46 11E3  
                                                __ptext38 0D51  
                                                __ptext71 11A3  
                                                __ptext63 124A  
                                                __ptext55 12AE  
                                                __ptext47 15A0  
                                                __ptext39 0C7B  
                                                __ptext80 0B4A  
                                                __ptext72 119F  
                                                __ptext64 11AB  
                                                __ptext56 15C2  
                                                __ptext48 157E  
                                                __ptext81 11D4  
                                                __ptext73 119B  
                                                __ptext65 14FB  
                                                __ptext57 1291  
                                                __ptext49 16E4  
                                                __ptext90 1183  
                                                __ptext82 11DB  
                                                __ptext74 1197  
                                                __ptext66 122C  
                                                __ptext58 176E  
                                                __ptext91 117C  
                                                __ptext83 11B3  
                                                __ptext75 1193  
                                                __ptext67 11A7  
                                                __ptext59 1236  
                                                __ptext92 153C  
                                                __ptext84 179E  
                                                __ptext76 118F  
                                                __ptext68 165B  
                                                __ptext93 13F3  
                                                __ptext85 0002  
                                                __ptext77 118B  
                                                __ptext69 17CF  
                                                __ptext94 13DB  
                                                __ptext86 11C8  
                                                __ptext78 11CE  
                                                __ptext95 13C3  
                                                __ptext87 11C2  
                                                __ptext79 0A12  
                                                __ptext96 1165  
                                                __ptext88 1187  
                                                __ptext97 1163  
                                                __ptext89 0800  
                                                __ptext98 151B  
                                                __ptext99 13AB  
                                   _setGestureEnterThresh 12AE  
                                   __end_of_readProximity 1223  
                                              _LCDCONbits 0791  
                     __end_of_I2C_SetDataCompleteCallback 126C  
                             _I2C_SetDataCompleteCallback 1260  
                          setGestureEnterThresh@threshold 003E  
                                 ?_I2C_DO_RX_NACK_RESTART 0070  
                                ??_i2c_write1ByteRegister 0038  
                                                _intToBCD 0945  
                                __end_of_I2C_DO_SEND_STOP 119B  
                                           __size_of_main 00E2  
                                       ?_setProximityGain 0070  
                                  __size_of_LCD_Digit1Num 00D6  
                                  __size_of_LCD_Digit2Num 00D6  
                                  __size_of_LCD_Digit3Num 00D6  
                                  __size_of_LCD_Digit4Num 01DC  
                                i2c_readDataBlock@address 003B  
                                   _ir_command_complement 007C  
                                 ?_EUSART_SetErrorHandler 0020  
                                         _I2C_SetCallback 0AF8  
                                      ??_setProximityGain 003F  
                           ??_I2C_SetDataCompleteCallback 002D  
                          __size_of_enableProximitySensor 0028  
                           __end_of_enableProximitySensor 082B  
           EUSART_SetOverrunErrorHandler@interruptHandler 0020  
                                                int$flags 007E  
                                   ?_I2C_DO_SEND_ADR_READ 0070  
                      __end_of_INTERRUPT_InterruptManager 002C  
                              _INTERRUPT_InterruptManager 0004  
                   __end_of_EUSART_SetFramingErrorHandler 1203  
                  __size_of_EUSART_SetFramingErrorHandler 0008  
                           _EUSART_SetFramingErrorHandler 11FB  
                                         ?_DAC_Initialize 0070  
                                       ??_TMR1_WriteTimer 0072  
                             __size_of_isGestureAvailable 0012  
                                     setProximityGain@val 0041  
                             __size_of_setGestureWaitTime 0023  
                              __end_of_processGestureData 0336  
                                i2c_read1ByteRegister@reg 0036  
                                __end_of_I2C_MasterIsNack 11CE  
                          __size_of_setProximityIntEnable 002E  
 __end_of_rdBlkRegCompleteHandler@i2c_simple_master$F2203 155D  
__size_of_rdBlkRegCompleteHandler@i2c_simple_master$F2203 0021  
       ??_rdBlkRegCompleteHandler@i2c_simple_master$F2203 002F  
        ?_rdBlkRegCompleteHandler@i2c_simple_master$F2203 002D  
         _rdBlkRegCompleteHandler@i2c_simple_master$F2203 153C  
   __end_of_wr1RegCompleteHandler@i2c_simple_master$F2173 13DB  
  __size_of_wr1RegCompleteHandler@i2c_simple_master$F2173 0018  
         ??_wr1RegCompleteHandler@i2c_simple_master$F2173 002F  
          ?_wr1RegCompleteHandler@i2c_simple_master$F2173 002D  
           _wr1RegCompleteHandler@i2c_simple_master$F2173 13C3  
   __end_of_rd1RegCompleteHandler@i2c_simple_master$F2183 13F3  
  __size_of_rd1RegCompleteHandler@i2c_simple_master$F2183 0018  
   __end_of_rd2RegCompleteHandler@i2c_simple_master$F2191 140B  
  __size_of_rd2RegCompleteHandler@i2c_simple_master$F2191 0018  
         ??_rd2RegCompleteHandler@i2c_simple_master$F2191 002F  
         ??_rd1RegCompleteHandler@i2c_simple_master$F2183 002F  
          ?_rd2RegCompleteHandler@i2c_simple_master$F2191 002D  
          ?_rd1RegCompleteHandler@i2c_simple_master$F2183 002D  
           _rd2RegCompleteHandler@i2c_simple_master$F2191 13F3  
           _rd1RegCompleteHandler@i2c_simple_master$F2183 13DB  
   __end_of_wr2RegCompleteHandler@i2c_simple_master$F2197 1363  
  __size_of_wr2RegCompleteHandler@i2c_simple_master$F2197 0018  
                              __size_of_i2c_readDataBlock 0038  
         ??_wr2RegCompleteHandler@i2c_simple_master$F2197 002F  
          ?_wr2RegCompleteHandler@i2c_simple_master$F2197 002D  
           _wr2RegCompleteHandler@i2c_simple_master$F2197 134B  
                           __end_of_setProximityIntEnable 176E  
                                __end_of_I2C_MasterSetIrq 0004  
                                 __size_of_setGestureGain 002E  
                                              _INTCONbits 000B  
                                    _CCP4_DefaultCallBack 1161  
                                   ?_EUSART_RxDataHandler 0070  
                             setProximityIntEnable@enable 0042  
                          __end_of_I2C_DO_RX_NACK_RESTART 11A7  
                                  setAmbientLightGain@val 0041  
                                 __size_of_WDT_Initialize 0003  
                                                intlevel1 0000  
                                             ?_I2C_Poller 0070  
                                            reverseBits@b 0023  
                        __size_of_I2C_MasterEnableRestart 0003  
                                         _CCP4_CaptureISR 1321  
                                        ___lwmod@dividend 0022  
                                 ?_PIN_MANAGER_Initialize 0070  
                          __end_of_EUSART_SetErrorHandler 11FB  
                                     _I2C_DO_SEND_RESTART 1193  
                                    __end_of_APDS9960Init 0748  
                           __size_of_I2C_MasterDisableIrq 0003  
                    __end_of_EUSART_SetRxInterruptHandler 1213  
                   __size_of_EUSART_SetRxInterruptHandler 0008  
                            _EUSART_SetRxInterruptHandler 120B  
                                  _resetGestureParameters 1489  
                         __size_of_I2C_MasterWaitForEvent 0004  
                                      _EUSART_Receive_ISR 085F  
           EUSART_SetFramingErrorHandler@interruptHandler 0020  
                                 __end_of_I2C_MasterClose 1170  
                                __size_of_I2C_DO_TX_EMPTY 0031  
                                    _setGestureExitThresh 12BE  
                                             _reverseBits 0895  
                                 __end_of_I2C_MasterStart 1176  
                                 __end_of_I2C_MasterWrite 11AF  
                                           __pstringtext1 1800  
                                          _FVR_Initialize 11AF  
                                    ?_I2C_DO_SEND_RESTART 0070  
                                              _OPTION_REG 0095  
                                     ?_EUSART_Receive_ISR 0070  
                                           _LCD_Digit1Num 0BA5  
                                           _LCD_Digit2Num 0C7B  
                                           _LCD_Digit3Num 0D51  
                                            ?_enablePower 0070  
                                           _LCD_Digit4Num 0336  
                                     _setGestureIntEnable 1608  
                                   ?_CCP4_DefaultCallBack 0072  
                                         ___lwmod@divisor 0020  
                                         _TMR0_Initialize 1255  
                            __size_of_I2C_MasterGetRxData 0003  
                                         ___lwmod@counter 0025  
                                  ?_setGestureEnterThresh 0070  
                                             _SSPCON1bits 0215  
                                             _SSPCON2bits 0216  
                             __size_of_I2C_MasterClearIrq 0003  
                            __size_of_EUSART_Transmit_ISR 001D  
                                 __end_of_I2C_SetCallback 0B4A  
                          __end_of_PIN_MANAGER_Initialize 146E  
                          __size_of_rd1RegCompleteHandler 0018  
                         __size_of_i2c_write1ByteRegister 0030  
                               __size_of_wireReadDataByte 000A  
                           __end_of_rd1RegCompleteHandler 137B  
                                  __size_of_I2C_DO_RX_ACK 0004  
                                        setLEDDrive@drive 0042  
                                     processGestureData@i 0046  
                          __size_of_wr1RegCompleteHandler 0018  
                                    ??_EUSART_Receive_ISR 0071  
                                   __size_of_I2C_DO_RESET 0005  
                           __end_of_wr1RegCompleteHandler 13AB  
                                    ?_setGestureIntEnable 0070  
                        __end_of_CCP4_CallBack@main$F1923 07FD  
                            __size_of_I2C_DO_ADDRESS_NACK 0031  
                                    __size_of_I2C_DO_IDLE 0005  
                                    __size_of_I2C_DO_RCEN 0006  
                                         _TMR1_Initialize 12EE  
                        __end_of_setLightIntHighThreshold 15A0  
                                      __size_of_I2C_DO_RX 004A  
                                      __size_of_I2C_DO_TX 005B  
